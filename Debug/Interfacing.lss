
Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000072  00800060  00002f34  00002fc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001f  008000d2  008000d2  0000303a  2**0
                  ALLOC
  3 .stab         00006c6c  00000000  00000000  0000303c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000211d  00000000  00000000  00009ca8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e3       	ldi	r30, 0x34	; 52
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3d       	cpi	r26, 0xD2	; 210
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 ed       	ldi	r26, 0xD2	; 210
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3f       	cpi	r26, 0xF1	; 241
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <main>
      8a:	0c 94 98 17 	jmp	0x2f30	; 0x2f30 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_Init>:

#include "ADC.h"

void ADC_Init(uint8 ADC_NUM){

	switch(ADC_NUM){
      92:	83 30       	cpi	r24, 0x03	; 3
      94:	b9 f0       	breq	.+46     	; 0xc4 <ADC_Init+0x32>
      96:	84 30       	cpi	r24, 0x04	; 4
      98:	28 f4       	brcc	.+10     	; 0xa4 <ADC_Init+0x12>
      9a:	81 30       	cpi	r24, 0x01	; 1
      9c:	71 f0       	breq	.+28     	; 0xba <ADC_Init+0x28>
      9e:	82 30       	cpi	r24, 0x02	; 2
      a0:	78 f4       	brcc	.+30     	; 0xc0 <ADC_Init+0x2e>
      a2:	09 c0       	rjmp	.+18     	; 0xb6 <ADC_Init+0x24>
      a4:	85 30       	cpi	r24, 0x05	; 5
      a6:	a1 f0       	breq	.+40     	; 0xd0 <ADC_Init+0x3e>
      a8:	85 30       	cpi	r24, 0x05	; 5
      aa:	80 f0       	brcs	.+32     	; 0xcc <ADC_Init+0x3a>
      ac:	86 30       	cpi	r24, 0x06	; 6
      ae:	99 f0       	breq	.+38     	; 0xd6 <ADC_Init+0x44>
      b0:	87 30       	cpi	r24, 0x07	; 7
      b2:	b1 f4       	brne	.+44     	; 0xe0 <ADC_Init+0x4e>
      b4:	12 c0       	rjmp	.+36     	; 0xda <ADC_Init+0x48>
		case ADC_0:
		CLR_BIT(ADMUX,0);
      b6:	38 98       	cbi	0x07, 0	; 7
      b8:	01 c0       	rjmp	.+2      	; 0xbc <ADC_Init+0x2a>
		CLR_BIT(ADMUX,1);
		CLR_BIT(ADMUX,2);
		break;

		case ADC_1:
		SET_BIT(ADMUX,0);
      ba:	38 9a       	sbi	0x07, 0	; 7
		CLR_BIT(ADMUX,1);
      bc:	39 98       	cbi	0x07, 1	; 7
      be:	04 c0       	rjmp	.+8      	; 0xc8 <ADC_Init+0x36>
		CLR_BIT(ADMUX,2);
		break;

		case ADC_2:
		CLR_BIT(ADMUX,0);
      c0:	38 98       	cbi	0x07, 0	; 7
      c2:	01 c0       	rjmp	.+2      	; 0xc6 <ADC_Init+0x34>
		SET_BIT(ADMUX,1);
		CLR_BIT(ADMUX,2);
		break;

		case ADC_3:
		SET_BIT(ADMUX,0);
      c4:	38 9a       	sbi	0x07, 0	; 7
		SET_BIT(ADMUX,1);
      c6:	39 9a       	sbi	0x07, 1	; 7
		CLR_BIT(ADMUX,2);
      c8:	3a 98       	cbi	0x07, 2	; 7
      ca:	0a c0       	rjmp	.+20     	; 0xe0 <ADC_Init+0x4e>
		break;

		case ADC_4:
		CLR_BIT(ADMUX,0);
      cc:	38 98       	cbi	0x07, 0	; 7
      ce:	01 c0       	rjmp	.+2      	; 0xd2 <ADC_Init+0x40>
		CLR_BIT(ADMUX,1);
		SET_BIT(ADMUX,2);
		break;

		case ADC_5:
		SET_BIT(ADMUX,0);
      d0:	38 9a       	sbi	0x07, 0	; 7
		CLR_BIT(ADMUX,1);
      d2:	39 98       	cbi	0x07, 1	; 7
      d4:	04 c0       	rjmp	.+8      	; 0xde <ADC_Init+0x4c>
		SET_BIT(ADMUX,2);
		break;

		case ADC_6:
		CLR_BIT(ADMUX,0);
      d6:	38 98       	cbi	0x07, 0	; 7
      d8:	01 c0       	rjmp	.+2      	; 0xdc <ADC_Init+0x4a>
		SET_BIT(ADMUX,1);
		SET_BIT(ADMUX,2);
		break;

		case ADC_7:
		SET_BIT(ADMUX,0);
      da:	38 9a       	sbi	0x07, 0	; 7
		SET_BIT(ADMUX,1);
      dc:	39 9a       	sbi	0x07, 1	; 7
		SET_BIT(ADMUX,2);
      de:	3a 9a       	sbi	0x07, 2	; 7
	case AREF_PIN:
		CLR_BIT(ADMUX,6);
		CLR_BIT(ADMUX,7);
		break;
	case AVCC_PIN:
		SET_BIT(ADMUX,6);
      e0:	3e 9a       	sbi	0x07, 6	; 7
		CLR_BIT(ADMUX,7);
      e2:	3f 98       	cbi	0x07, 7	; 7
			CLR_BIT(ADCSRA,1);
			SET_BIT(ADCSRA,2);
			break;

	case DIVIDE_BY_64 :
			CLR_BIT(ADCSRA,0);
      e4:	30 98       	cbi	0x06, 0	; 6
			SET_BIT(ADCSRA,1);
      e6:	31 9a       	sbi	0x06, 1	; 6
			SET_BIT(ADCSRA,2);
      e8:	32 9a       	sbi	0x06, 2	; 6
		//In this mode you need to enable conversion each time
		break;

	case AUTO_TRIGGER:
		//you enable it once
		SET_BIT(ADCSRA,5);
      ea:	35 9a       	sbi	0x06, 5	; 6
	}


	switch(ADC_ADJUST_MODE){
	case ADC_RIGHT_ADJUST:
		CLR_BIT(ADMUX,5);
      ec:	3d 98       	cbi	0x07, 5	; 7
		SET_BIT(ADMUX,5);
		break;
	}

	//Enable ADC
	SET_BIT(ADCSRA,7);
      ee:	37 9a       	sbi	0x06, 7	; 6

}
      f0:	08 95       	ret

000000f2 <ADC_Read>:


uint16 ADC_Read(void){
//first start conversion and wait until ADC finishes conversion
	//1.Start conversion
	SET_BIT(ADCSRA, 6);
      f2:	36 9a       	sbi	0x06, 6	; 6
	//2.wait until Data Registers are updated
	while( GET_BIT(ADCSRA,4) == 0);
      f4:	34 9b       	sbis	0x06, 4	; 6
      f6:	fe cf       	rjmp	.-4      	; 0xf4 <ADC_Read+0x2>


	uint16 value = ADC_D_VAL ;
      f8:	24 b1       	in	r18, 0x04	; 4
      fa:	35 b1       	in	r19, 0x05	; 5


	return value ;

}
      fc:	c9 01       	movw	r24, r18
      fe:	08 95       	ret

00000100 <is_it_leap_year>:
	number /= 10 ;
	digit = number % 10 ;
	number_write(page_num,col_num,digit);
}
/*********************************************************************/
uint8 is_it_leap_year(uint16 year){
     100:	9c 01       	movw	r18, r24
	uint8 holder = year % 10 ;
     102:	6a e0       	ldi	r22, 0x0A	; 10
     104:	70 e0       	ldi	r23, 0x00	; 0
     106:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <__udivmodhi4>
     10a:	e8 2f       	mov	r30, r24
     10c:	40 e0       	ldi	r20, 0x00	; 0
     10e:	c9 01       	movw	r24, r18
     110:	6a e0       	ldi	r22, 0x0A	; 10
     112:	70 e0       	ldi	r23, 0x00	; 0
     114:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <__udivmodhi4>
     118:	cb 01       	movw	r24, r22
     11a:	6a e0       	ldi	r22, 0x0A	; 10
     11c:	70 e0       	ldi	r23, 0x00	; 0
     11e:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <__udivmodhi4>
     122:	9c 01       	movw	r18, r24
     124:	63 e0       	ldi	r22, 0x03	; 3
     126:	88 0f       	add	r24, r24
     128:	99 1f       	adc	r25, r25
     12a:	6a 95       	dec	r22
     12c:	e1 f7       	brne	.-8      	; 0x126 <is_it_leap_year+0x26>
     12e:	22 0f       	add	r18, r18
     130:	33 1f       	adc	r19, r19
     132:	82 0f       	add	r24, r18
     134:	93 1f       	adc	r25, r19
     136:	e8 0f       	add	r30, r24
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	e3 70       	andi	r30, 0x03	; 3
     13c:	f0 70       	andi	r31, 0x00	; 0
     13e:	ef 2b       	or	r30, r31
     140:	09 f4       	brne	.+2      	; 0x144 <is_it_leap_year+0x44>
     142:	41 e0       	ldi	r20, 0x01	; 1
	if(holder % 4 == 0){
		return 1 ; //it is leap year.
	}else{
		return 0 ; //it is not a leap year.
	}
}
     144:	84 2f       	mov	r24, r20
     146:	08 95       	ret

00000148 <dec_to_bcd>:
	for(uint8 letter_index = 0 ; letter_index < 3 ; letter_index++){
		letter_write(2,((letter_index*7)+97),ptr[day_name_track][letter_index]) ;
	}
}
/*********************************************************************/
uint8 dec_to_bcd(uint8 dec){
     148:	48 2f       	mov	r20, r24
	uint8 digit = dec % 10 ;
	dec /= 10 ;
	digit = ( dec << 4 ) | digit ;
     14a:	6a e0       	ldi	r22, 0x0A	; 10
     14c:	0e 94 20 17 	call	0x2e40	; 0x2e40 <__udivmodqi4>
     150:	28 2f       	mov	r18, r24
     152:	30 e0       	ldi	r19, 0x00	; 0
     154:	74 e0       	ldi	r23, 0x04	; 4
     156:	22 0f       	add	r18, r18
     158:	33 1f       	adc	r19, r19
     15a:	7a 95       	dec	r23
     15c:	e1 f7       	brne	.-8      	; 0x156 <dec_to_bcd+0xe>
     15e:	84 2f       	mov	r24, r20
     160:	0e 94 20 17 	call	0x2e40	; 0x2e40 <__udivmodqi4>
	return digit ;
}
     164:	89 2f       	mov	r24, r25
     166:	82 2b       	or	r24, r18
     168:	08 95       	ret

0000016a <bcd_to_dec>:

	}
	return 1 ;
}
/*********************************************************************/
uint8 bcd_to_dec(uint8 bcd){
     16a:	98 2f       	mov	r25, r24
	uint8 tens = (bcd >> 4) * 10 ;
     16c:	82 95       	swap	r24
     16e:	8f 70       	andi	r24, 0x0F	; 15
     170:	2a e0       	ldi	r18, 0x0A	; 10
     172:	82 9f       	mul	r24, r18
     174:	80 2d       	mov	r24, r0
     176:	11 24       	eor	r1, r1
     178:	9f 70       	andi	r25, 0x0F	; 15
	tens = tens + (bcd & 0b00001111) ;
	return tens ;
}
     17a:	89 0f       	add	r24, r25
     17c:	08 95       	ret

0000017e <lamp_on_off>:

/*********************************************************************/
void lamp_on_off(void){
	static uint8 status = 0 ;

	if(status == 0){
     17e:	80 91 d7 00 	lds	r24, 0x00D7
     182:	88 23       	and	r24, r24
     184:	49 f4       	brne	.+18     	; 0x198 <lamp_on_off+0x1a>
		DIO_SetPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_VAL_HIGH);
     186:	82 e0       	ldi	r24, 0x02	; 2
     188:	67 e0       	ldi	r22, 0x07	; 7
     18a:	41 e0       	ldi	r20, 0x01	; 1
     18c:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <DIO_SetPinValue>
		status = 1;
     190:	81 e0       	ldi	r24, 0x01	; 1
     192:	80 93 d7 00 	sts	0x00D7, r24
     196:	08 95       	ret
	}else if(status){
		DIO_SetPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_VAL_LOW);
     198:	82 e0       	ldi	r24, 0x02	; 2
     19a:	67 e0       	ldi	r22, 0x07	; 7
     19c:	40 e0       	ldi	r20, 0x00	; 0
     19e:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <DIO_SetPinValue>
		status = 0;
     1a2:	10 92 d7 00 	sts	0x00D7, r1
     1a6:	08 95       	ret

000001a8 <black_entire_screen>:



}
/*********************************************************************/
void black_entire_screen(void){
     1a8:	1f 93       	push	r17
     1aa:	cf 93       	push	r28
     1ac:	df 93       	push	r29
     1ae:	10 e0       	ldi	r17, 0x00	; 0
	//WE WANT TO BLACK OUT THE ENTIRE SCREEN

	for(int i = 0 ; i <= 7 ; i++){
		setColumnAddress(0,128);
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	60 e8       	ldi	r22, 0x80	; 128
     1b4:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <setColumnAddress>
		setPageAddress(i,7);
     1b8:	81 2f       	mov	r24, r17
     1ba:	67 e0       	ldi	r22, 0x07	; 7
     1bc:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <setPageAddress>
		I2C_Start(oled_write_address);
     1c0:	8a e7       	ldi	r24, 0x7A	; 122
     1c2:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
		I2C_Write(CONTROL_DATA);
     1c6:	80 e4       	ldi	r24, 0x40	; 64
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
     1ce:	c0 e0       	ldi	r28, 0x00	; 0
     1d0:	d0 e0       	ldi	r29, 0x00	; 0
		for(int i = 0 ; i < 128 ; i++){
			I2C_Write(0x00);
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
	for(int i = 0 ; i <= 7 ; i++){
		setColumnAddress(0,128);
		setPageAddress(i,7);
		I2C_Start(oled_write_address);
		I2C_Write(CONTROL_DATA);
		for(int i = 0 ; i < 128 ; i++){
     1da:	21 96       	adiw	r28, 0x01	; 1
     1dc:	c0 38       	cpi	r28, 0x80	; 128
     1de:	d1 05       	cpc	r29, r1
     1e0:	c1 f7       	brne	.-16     	; 0x1d2 <black_entire_screen+0x2a>
			I2C_Write(0x00);
		}
		I2C_Stop();
     1e2:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>
     1e6:	1f 5f       	subi	r17, 0xFF	; 255
}
/*********************************************************************/
void black_entire_screen(void){
	//WE WANT TO BLACK OUT THE ENTIRE SCREEN

	for(int i = 0 ; i <= 7 ; i++){
     1e8:	18 30       	cpi	r17, 0x08	; 8
     1ea:	11 f7       	brne	.-60     	; 0x1b0 <black_entire_screen+0x8>
		for(int i = 0 ; i < 128 ; i++){
			I2C_Write(0x00);
		}
		I2C_Stop();
	}
}
     1ec:	df 91       	pop	r29
     1ee:	cf 91       	pop	r28
     1f0:	1f 91       	pop	r17
     1f2:	08 95       	ret

000001f4 <system_set>:
	I2C_Write(0xFF);
	I2C_Stop();
}
/****************************************************************************/
void system_set(void){
	I2C_Init();
     1f4:	0e 94 13 11 	call	0x2226	; 0x2226 <I2C_Init>
	I2C_Start(0b10101010);
     1f8:	8a ea       	ldi	r24, 0xAA	; 170
     1fa:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
	//For the address of the boot check byte = 0x1F8
	I2C_Write(0xF8);
     1fe:	88 ef       	ldi	r24, 0xF8	; 248
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
	I2C_Write(0x01);
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
	I2C_Stop();
     20e:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>
}
     212:	08 95       	ret

00000214 <system_reset>:
	return boot_byte ;
}

/****************************************************************************/
void system_reset(void){
	I2C_Init();
     214:	0e 94 13 11 	call	0x2226	; 0x2226 <I2C_Init>
	I2C_Start(0b10101010);
     218:	8a ea       	ldi	r24, 0xAA	; 170
     21a:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
	//For the address of the boot check byte = 0x1F8
	I2C_Write(0xF8);
     21e:	88 ef       	ldi	r24, 0xF8	; 248
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
	I2C_Write(0xFF);
     226:	8f ef       	ldi	r24, 0xFF	; 255
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
	I2C_Stop();
     22e:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>
}
     232:	08 95       	ret

00000234 <boot_check>:
	}

	I2C_Stop();
}
/*******************************************************************/
uint8 boot_check(void){
     234:	1f 93       	push	r17
	/*Initiate the communication to eeprom*/
	I2C_Init();
     236:	0e 94 13 11 	call	0x2226	; 0x2226 <I2C_Init>
	I2C_Start(0b10101010);
     23a:	8a ea       	ldi	r24, 0xAA	; 170
     23c:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
	/*For the address of the boot check byte = 0x1F8*/
	I2C_Write(0xF8);
     240:	88 ef       	ldi	r24, 0xF8	; 248
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
	/*now we want to re-initiate the communication again to read mode*/
	I2C_Repeated_Start(0b10101011);
     248:	8b ea       	ldi	r24, 0xAB	; 171
     24a:	0e 94 34 11 	call	0x2268	; 0x2268 <I2C_Repeated_Start>
	/*read the boot_byte mode if 0xFF---->first time booting if 0x01---->already booted up before.*/
	uint8 boot_byte = I2C_Read_NACK();
     24e:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <I2C_Read_NACK>
     252:	18 2f       	mov	r17, r24
	I2C_Stop();
     254:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>
	return boot_byte ;
}
     258:	81 2f       	mov	r24, r17
     25a:	1f 91       	pop	r17
     25c:	08 95       	ret

0000025e <color_choice_white>:
		}
		I2C_Stop();
	}
}
/*********************************************************************/
void color_choice_white(uint8 number_of_choice){
     25e:	3f 92       	push	r3
     260:	4f 92       	push	r4
     262:	5f 92       	push	r5
     264:	6f 92       	push	r6
     266:	7f 92       	push	r7
     268:	8f 92       	push	r8
     26a:	9f 92       	push	r9
     26c:	af 92       	push	r10
     26e:	bf 92       	push	r11
     270:	cf 92       	push	r12
     272:	df 92       	push	r13
     274:	ef 92       	push	r14
     276:	ff 92       	push	r15
     278:	0f 93       	push	r16
     27a:	1f 93       	push	r17
     27c:	df 93       	push	r29
     27e:	cf 93       	push	r28
     280:	cd b7       	in	r28, 0x3d	; 61
     282:	de b7       	in	r29, 0x3e	; 62
     284:	28 97       	sbiw	r28, 0x08	; 8
     286:	0f b6       	in	r0, 0x3f	; 63
     288:	f8 94       	cli
     28a:	de bf       	out	0x3e, r29	; 62
     28c:	0f be       	out	0x3f, r0	; 63
     28e:	cd bf       	out	0x3d, r28	; 61
	//color either 0----> black , 1---->white
	//we have 3 choices , 1---->study timer , 2---->clock , 3---->lamp on/off

	sint8 starting_page = choice_page_index[number_of_choice];
     290:	e8 2f       	mov	r30, r24
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	e9 56       	subi	r30, 0x69	; 105
     296:	ff 4f       	sbci	r31, 0xFF	; 255
     298:	30 80       	ld	r3, Z
		}
		I2C_Stop();
	}
}
/*********************************************************************/
void color_choice_white(uint8 number_of_choice){
     29a:	83 2d       	mov	r24, r3
     29c:	99 27       	eor	r25, r25
     29e:	87 fd       	sbrc	r24, 7
     2a0:	90 95       	com	r25
     2a2:	a7 e0       	ldi	r26, 0x07	; 7
     2a4:	ca 2e       	mov	r12, r26
     2a6:	d1 2c       	mov	r13, r1
     2a8:	c8 1a       	sub	r12, r24
     2aa:	d9 0a       	sbc	r13, r25
     2ac:	d6 94       	lsr	r13
     2ae:	dc 2c       	mov	r13, r12
     2b0:	cc 24       	eor	r12, r12
     2b2:	d7 94       	ror	r13
     2b4:	c7 94       	ror	r12
     2b6:	46 01       	movw	r8, r12
     2b8:	aa 24       	eor	r10, r10
     2ba:	97 fc       	sbrc	r9, 7
     2bc:	a0 94       	com	r10
     2be:	ba 2c       	mov	r11, r10
     2c0:	1a 82       	std	Y+2, r1	; 0x02
     2c2:	19 82       	std	Y+1, r1	; 0x01
	sint8 starting_page = choice_page_index[number_of_choice];
	uint8 ending_page = starting_page-1;



	for(; starting_page >= ending_page ;starting_page--){
     2c4:	9c 83       	std	Y+4, r25	; 0x04
     2c6:	8b 83       	std	Y+3, r24	; 0x03
void color_choice_white(uint8 number_of_choice){
	//color either 0----> black , 1---->white
	//we have 3 choices , 1---->study timer , 2---->clock , 3---->lamp on/off

	sint8 starting_page = choice_page_index[number_of_choice];
	uint8 ending_page = starting_page-1;
     2c8:	3a 94       	dec	r3



	for(; starting_page >= ending_page ;starting_page--){
     2ca:	23 2d       	mov	r18, r3
     2cc:	30 e0       	ldi	r19, 0x00	; 0
     2ce:	3e 83       	std	Y+6, r19	; 0x06
     2d0:	2d 83       	std	Y+5, r18	; 0x05
     2d2:	33 94       	inc	r3
     2d4:	4c c0       	rjmp	.+152    	; 0x36e <color_choice_white+0x110>
		setColumnAddress(0,127);
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	6f e7       	ldi	r22, 0x7F	; 127
     2da:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <setColumnAddress>
		setPageAddress(starting_page,7);
     2de:	83 2d       	mov	r24, r3
     2e0:	39 81       	ldd	r19, Y+1	; 0x01
     2e2:	83 1b       	sub	r24, r19
     2e4:	67 e0       	ldi	r22, 0x07	; 7
     2e6:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <setPageAddress>
		I2C_Init();
     2ea:	0e 94 13 11 	call	0x2226	; 0x2226 <I2C_Init>
		I2C_Start(oled_write_address);
     2ee:	8a e7       	ldi	r24, 0x7A	; 122
     2f0:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
		I2C_Write(CONTROL_DATA);
     2f4:	80 e4       	ldi	r24, 0x40	; 64
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
     2fc:	ef e7       	ldi	r30, 0x7F	; 127
     2fe:	4e 2e       	mov	r4, r30
     300:	51 2c       	mov	r5, r1
     302:	61 2c       	mov	r6, r1
     304:	71 2c       	mov	r7, r1
     306:	48 0c       	add	r4, r8
     308:	59 1c       	adc	r5, r9
     30a:	6a 1c       	adc	r6, r10
     30c:	7b 1c       	adc	r7, r11
     30e:	85 01       	movw	r16, r10
     310:	74 01       	movw	r14, r8
     312:	d8 86       	std	Y+8, r13	; 0x08
     314:	cf 82       	std	Y+7, r12	; 0x07
     316:	13 c0       	rjmp	.+38     	; 0x33e <color_choice_white+0xe0>
		uint32 end_byte_index = start_byte_index + 127 ;


		//this means black the choice
		for(;start_byte_index < end_byte_index ; start_byte_index++){
			I2C_Write(~(eeprom_read_byte(start_byte_index)));
     318:	8f 81       	ldd	r24, Y+7	; 0x07
     31a:	98 85       	ldd	r25, Y+8	; 0x08
     31c:	0e 94 90 17 	call	0x2f20	; 0x2f20 <__eerd_byte_m32>
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	80 95       	com	r24
     324:	90 95       	com	r25
     326:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
		//end byte to write
		uint32 end_byte_index = start_byte_index + 127 ;


		//this means black the choice
		for(;start_byte_index < end_byte_index ; start_byte_index++){
     32a:	08 94       	sec
     32c:	e1 1c       	adc	r14, r1
     32e:	f1 1c       	adc	r15, r1
     330:	01 1d       	adc	r16, r1
     332:	11 1d       	adc	r17, r1
     334:	8f 81       	ldd	r24, Y+7	; 0x07
     336:	98 85       	ldd	r25, Y+8	; 0x08
     338:	01 96       	adiw	r24, 0x01	; 1
     33a:	98 87       	std	Y+8, r25	; 0x08
     33c:	8f 83       	std	Y+7, r24	; 0x07
     33e:	e4 14       	cp	r14, r4
     340:	f5 04       	cpc	r15, r5
     342:	06 05       	cpc	r16, r6
     344:	17 05       	cpc	r17, r7
     346:	40 f3       	brcs	.-48     	; 0x318 <color_choice_white+0xba>
			I2C_Write(~(eeprom_read_byte(start_byte_index)));
		}
		I2C_Stop();
     348:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>
     34c:	a9 81       	ldd	r26, Y+1	; 0x01
     34e:	ba 81       	ldd	r27, Y+2	; 0x02
     350:	11 96       	adiw	r26, 0x01	; 1
     352:	ba 83       	std	Y+2, r27	; 0x02
     354:	a9 83       	std	Y+1, r26	; 0x01
     356:	e0 e8       	ldi	r30, 0x80	; 128
     358:	f0 e0       	ldi	r31, 0x00	; 0
     35a:	ce 0e       	add	r12, r30
     35c:	df 1e       	adc	r13, r31
     35e:	80 e8       	ldi	r24, 0x80	; 128
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	a0 e0       	ldi	r26, 0x00	; 0
     364:	b0 e0       	ldi	r27, 0x00	; 0
     366:	88 0e       	add	r8, r24
     368:	99 1e       	adc	r9, r25
     36a:	aa 1e       	adc	r10, r26
     36c:	bb 1e       	adc	r11, r27
	sint8 starting_page = choice_page_index[number_of_choice];
	uint8 ending_page = starting_page-1;



	for(; starting_page >= ending_page ;starting_page--){
     36e:	8b 81       	ldd	r24, Y+3	; 0x03
     370:	9c 81       	ldd	r25, Y+4	; 0x04
     372:	a9 81       	ldd	r26, Y+1	; 0x01
     374:	ba 81       	ldd	r27, Y+2	; 0x02
     376:	8a 1b       	sub	r24, r26
     378:	9b 0b       	sbc	r25, r27
     37a:	ed 81       	ldd	r30, Y+5	; 0x05
     37c:	fe 81       	ldd	r31, Y+6	; 0x06
     37e:	8e 17       	cp	r24, r30
     380:	9f 07       	cpc	r25, r31
     382:	0c f0       	brlt	.+2      	; 0x386 <color_choice_white+0x128>
     384:	a8 cf       	rjmp	.-176    	; 0x2d6 <color_choice_white+0x78>
		for(;start_byte_index < end_byte_index ; start_byte_index++){
			I2C_Write(~(eeprom_read_byte(start_byte_index)));
		}
		I2C_Stop();
	}
}
     386:	28 96       	adiw	r28, 0x08	; 8
     388:	0f b6       	in	r0, 0x3f	; 63
     38a:	f8 94       	cli
     38c:	de bf       	out	0x3e, r29	; 62
     38e:	0f be       	out	0x3f, r0	; 63
     390:	cd bf       	out	0x3d, r28	; 61
     392:	cf 91       	pop	r28
     394:	df 91       	pop	r29
     396:	1f 91       	pop	r17
     398:	0f 91       	pop	r16
     39a:	ff 90       	pop	r15
     39c:	ef 90       	pop	r14
     39e:	df 90       	pop	r13
     3a0:	cf 90       	pop	r12
     3a2:	bf 90       	pop	r11
     3a4:	af 90       	pop	r10
     3a6:	9f 90       	pop	r9
     3a8:	8f 90       	pop	r8
     3aa:	7f 90       	pop	r7
     3ac:	6f 90       	pop	r6
     3ae:	5f 90       	pop	r5
     3b0:	4f 90       	pop	r4
     3b2:	3f 90       	pop	r3
     3b4:	08 95       	ret

000003b6 <color_choice_black>:
		I2C_Stop();
	}
}
/*********************************************************************/
uint8 choice_page_index[4] = {0 , 5 , 3 , 1};
void color_choice_black(uint8 number_of_choice){
     3b6:	3f 92       	push	r3
     3b8:	4f 92       	push	r4
     3ba:	5f 92       	push	r5
     3bc:	6f 92       	push	r6
     3be:	7f 92       	push	r7
     3c0:	8f 92       	push	r8
     3c2:	9f 92       	push	r9
     3c4:	af 92       	push	r10
     3c6:	bf 92       	push	r11
     3c8:	cf 92       	push	r12
     3ca:	df 92       	push	r13
     3cc:	ef 92       	push	r14
     3ce:	ff 92       	push	r15
     3d0:	0f 93       	push	r16
     3d2:	1f 93       	push	r17
     3d4:	df 93       	push	r29
     3d6:	cf 93       	push	r28
     3d8:	cd b7       	in	r28, 0x3d	; 61
     3da:	de b7       	in	r29, 0x3e	; 62
     3dc:	28 97       	sbiw	r28, 0x08	; 8
     3de:	0f b6       	in	r0, 0x3f	; 63
     3e0:	f8 94       	cli
     3e2:	de bf       	out	0x3e, r29	; 62
     3e4:	0f be       	out	0x3f, r0	; 63
     3e6:	cd bf       	out	0x3d, r28	; 61
	//color either 0----> black , 1---->white
	//we have 3 choices , 1---->study timer , 2---->clock , 3---->lamp on/off

	sint8 starting_page = choice_page_index[number_of_choice];
     3e8:	e8 2f       	mov	r30, r24
     3ea:	f0 e0       	ldi	r31, 0x00	; 0
     3ec:	e9 56       	subi	r30, 0x69	; 105
     3ee:	ff 4f       	sbci	r31, 0xFF	; 255
     3f0:	30 80       	ld	r3, Z
		I2C_Stop();
	}
}
/*********************************************************************/
uint8 choice_page_index[4] = {0 , 5 , 3 , 1};
void color_choice_black(uint8 number_of_choice){
     3f2:	83 2d       	mov	r24, r3
     3f4:	99 27       	eor	r25, r25
     3f6:	87 fd       	sbrc	r24, 7
     3f8:	90 95       	com	r25
     3fa:	07 e0       	ldi	r16, 0x07	; 7
     3fc:	c0 2e       	mov	r12, r16
     3fe:	d1 2c       	mov	r13, r1
     400:	c8 1a       	sub	r12, r24
     402:	d9 0a       	sbc	r13, r25
     404:	d6 94       	lsr	r13
     406:	dc 2c       	mov	r13, r12
     408:	cc 24       	eor	r12, r12
     40a:	d7 94       	ror	r13
     40c:	c7 94       	ror	r12
     40e:	46 01       	movw	r8, r12
     410:	aa 24       	eor	r10, r10
     412:	97 fc       	sbrc	r9, 7
     414:	a0 94       	com	r10
     416:	ba 2c       	mov	r11, r10
     418:	1a 82       	std	Y+2, r1	; 0x02
     41a:	19 82       	std	Y+1, r1	; 0x01
	sint8 starting_page = choice_page_index[number_of_choice];
	uint8 ending_page = starting_page-1;



	for(; starting_page >= ending_page ;starting_page--){
     41c:	9c 83       	std	Y+4, r25	; 0x04
     41e:	8b 83       	std	Y+3, r24	; 0x03
void color_choice_black(uint8 number_of_choice){
	//color either 0----> black , 1---->white
	//we have 3 choices , 1---->study timer , 2---->clock , 3---->lamp on/off

	sint8 starting_page = choice_page_index[number_of_choice];
	uint8 ending_page = starting_page-1;
     420:	3a 94       	dec	r3



	for(; starting_page >= ending_page ;starting_page--){
     422:	23 2d       	mov	r18, r3
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	3e 83       	std	Y+6, r19	; 0x06
     428:	2d 83       	std	Y+5, r18	; 0x05
     42a:	33 94       	inc	r3
     42c:	4a c0       	rjmp	.+148    	; 0x4c2 <color_choice_black+0x10c>
		setColumnAddress(0,127);
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	6f e7       	ldi	r22, 0x7F	; 127
     432:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <setColumnAddress>
		setPageAddress(starting_page,7);
     436:	83 2d       	mov	r24, r3
     438:	39 81       	ldd	r19, Y+1	; 0x01
     43a:	83 1b       	sub	r24, r19
     43c:	67 e0       	ldi	r22, 0x07	; 7
     43e:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <setPageAddress>
		I2C_Init();
     442:	0e 94 13 11 	call	0x2226	; 0x2226 <I2C_Init>
		I2C_Start(oled_write_address);
     446:	8a e7       	ldi	r24, 0x7A	; 122
     448:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
		I2C_Write(CONTROL_DATA);
     44c:	80 e4       	ldi	r24, 0x40	; 64
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
     454:	bf e7       	ldi	r27, 0x7F	; 127
     456:	4b 2e       	mov	r4, r27
     458:	51 2c       	mov	r5, r1
     45a:	61 2c       	mov	r6, r1
     45c:	71 2c       	mov	r7, r1
     45e:	48 0c       	add	r4, r8
     460:	59 1c       	adc	r5, r9
     462:	6a 1c       	adc	r6, r10
     464:	7b 1c       	adc	r7, r11
     466:	85 01       	movw	r16, r10
     468:	74 01       	movw	r14, r8
     46a:	d8 86       	std	Y+8, r13	; 0x08
     46c:	cf 82       	std	Y+7, r12	; 0x07
     46e:	11 c0       	rjmp	.+34     	; 0x492 <color_choice_black+0xdc>
		uint32 end_byte_index = start_byte_index + 127 ;


		//this means black the choice
		for(;start_byte_index < end_byte_index ; start_byte_index++){
			I2C_Write(eeprom_read_byte(start_byte_index));
     470:	8f 81       	ldd	r24, Y+7	; 0x07
     472:	98 85       	ldd	r25, Y+8	; 0x08
     474:	0e 94 90 17 	call	0x2f20	; 0x2f20 <__eerd_byte_m32>
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
		//end byte to write
		uint32 end_byte_index = start_byte_index + 127 ;


		//this means black the choice
		for(;start_byte_index < end_byte_index ; start_byte_index++){
     47e:	08 94       	sec
     480:	e1 1c       	adc	r14, r1
     482:	f1 1c       	adc	r15, r1
     484:	01 1d       	adc	r16, r1
     486:	11 1d       	adc	r17, r1
     488:	8f 81       	ldd	r24, Y+7	; 0x07
     48a:	98 85       	ldd	r25, Y+8	; 0x08
     48c:	01 96       	adiw	r24, 0x01	; 1
     48e:	98 87       	std	Y+8, r25	; 0x08
     490:	8f 83       	std	Y+7, r24	; 0x07
     492:	e4 14       	cp	r14, r4
     494:	f5 04       	cpc	r15, r5
     496:	06 05       	cpc	r16, r6
     498:	17 05       	cpc	r17, r7
     49a:	50 f3       	brcs	.-44     	; 0x470 <color_choice_black+0xba>
			I2C_Write(eeprom_read_byte(start_byte_index));
		}
		I2C_Stop();
     49c:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>
     4a0:	a9 81       	ldd	r26, Y+1	; 0x01
     4a2:	ba 81       	ldd	r27, Y+2	; 0x02
     4a4:	11 96       	adiw	r26, 0x01	; 1
     4a6:	ba 83       	std	Y+2, r27	; 0x02
     4a8:	a9 83       	std	Y+1, r26	; 0x01
     4aa:	e0 e8       	ldi	r30, 0x80	; 128
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	ce 0e       	add	r12, r30
     4b0:	df 1e       	adc	r13, r31
     4b2:	80 e8       	ldi	r24, 0x80	; 128
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	a0 e0       	ldi	r26, 0x00	; 0
     4b8:	b0 e0       	ldi	r27, 0x00	; 0
     4ba:	88 0e       	add	r8, r24
     4bc:	99 1e       	adc	r9, r25
     4be:	aa 1e       	adc	r10, r26
     4c0:	bb 1e       	adc	r11, r27
	sint8 starting_page = choice_page_index[number_of_choice];
	uint8 ending_page = starting_page-1;



	for(; starting_page >= ending_page ;starting_page--){
     4c2:	8b 81       	ldd	r24, Y+3	; 0x03
     4c4:	9c 81       	ldd	r25, Y+4	; 0x04
     4c6:	a9 81       	ldd	r26, Y+1	; 0x01
     4c8:	ba 81       	ldd	r27, Y+2	; 0x02
     4ca:	8a 1b       	sub	r24, r26
     4cc:	9b 0b       	sbc	r25, r27
     4ce:	ed 81       	ldd	r30, Y+5	; 0x05
     4d0:	fe 81       	ldd	r31, Y+6	; 0x06
     4d2:	8e 17       	cp	r24, r30
     4d4:	9f 07       	cpc	r25, r31
     4d6:	0c f0       	brlt	.+2      	; 0x4da <color_choice_black+0x124>
     4d8:	aa cf       	rjmp	.-172    	; 0x42e <color_choice_black+0x78>
		for(;start_byte_index < end_byte_index ; start_byte_index++){
			I2C_Write(eeprom_read_byte(start_byte_index));
		}
		I2C_Stop();
	}
}
     4da:	28 96       	adiw	r28, 0x08	; 8
     4dc:	0f b6       	in	r0, 0x3f	; 63
     4de:	f8 94       	cli
     4e0:	de bf       	out	0x3e, r29	; 62
     4e2:	0f be       	out	0x3f, r0	; 63
     4e4:	cd bf       	out	0x3d, r28	; 61
     4e6:	cf 91       	pop	r28
     4e8:	df 91       	pop	r29
     4ea:	1f 91       	pop	r17
     4ec:	0f 91       	pop	r16
     4ee:	ff 90       	pop	r15
     4f0:	ef 90       	pop	r14
     4f2:	df 90       	pop	r13
     4f4:	cf 90       	pop	r12
     4f6:	bf 90       	pop	r11
     4f8:	af 90       	pop	r10
     4fa:	9f 90       	pop	r9
     4fc:	8f 90       	pop	r8
     4fe:	7f 90       	pop	r7
     500:	6f 90       	pop	r6
     502:	5f 90       	pop	r5
     504:	4f 90       	pop	r4
     506:	3f 90       	pop	r3
     508:	08 95       	ret

0000050a <letter_write>:
	I2C_Stop();

}

/********************************************************************************/
void letter_write(uint8 page_num , uint8 col_num , uint8 letter_index){
     50a:	bf 92       	push	r11
     50c:	cf 92       	push	r12
     50e:	df 92       	push	r13
     510:	ef 92       	push	r14
     512:	ff 92       	push	r15
     514:	0f 93       	push	r16
     516:	1f 93       	push	r17
     518:	df 93       	push	r29
     51a:	cf 93       	push	r28
     51c:	cd b7       	in	r28, 0x3d	; 61
     51e:	de b7       	in	r29, 0x3e	; 62
     520:	2e 97       	sbiw	r28, 0x0e	; 14
     522:	0f b6       	in	r0, 0x3f	; 63
     524:	f8 94       	cli
     526:	de bf       	out	0x3e, r29	; 62
     528:	0f be       	out	0x3f, r0	; 63
     52a:	cd bf       	out	0x3d, r28	; 61
     52c:	b8 2e       	mov	r11, r24
     52e:	c6 2e       	mov	r12, r22
     530:	14 2f       	mov	r17, r20
	I2C_Init();
     532:	0e 94 13 11 	call	0x2226	; 0x2226 <I2C_Init>
	/*storing bytes array*/
	uint8 bitmap_holder[14] = {0};
     536:	0e e0       	ldi	r16, 0x0E	; 14
     538:	7e 01       	movw	r14, r28
     53a:	08 94       	sec
     53c:	e1 1c       	adc	r14, r1
     53e:	f1 1c       	adc	r15, r1
     540:	f7 01       	movw	r30, r14
     542:	80 2f       	mov	r24, r16
     544:	11 92       	st	Z+, r1
     546:	8a 95       	dec	r24
     548:	e9 f7       	brne	.-6      	; 0x544 <letter_write+0x3a>


	//first we want to send that we want to write and write the start reading address.
	//but take care that the first 8 letters(index ----> 0 to 7) are stored in BLOCK 1 in eeprom.
	//and the latter 18 letters (index ----> 8 to 17) are stored in BLOCK 2 in eeprom.
	if(letter_index >= 0 && letter_index <= 7){
     54a:	18 30       	cpi	r17, 0x08	; 8
     54c:	e0 f4       	brcc	.+56     	; 0x586 <letter_write+0x7c>

		I2C_Start(Slave_Address_W);
     54e:	88 ea       	ldi	r24, 0xA8	; 168
     550:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
		/*calculate the starting reading address depend on the number_index)*/
		uint8 address = ( ( letter_index * 14 ) + 140 );
		I2C_Write(address);
     554:	10 9f       	mul	r17, r16
     556:	c0 01       	movw	r24, r0
     558:	11 24       	eor	r1, r1
     55a:	84 57       	subi	r24, 0x74	; 116
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
		/*now initiate the communication again but this time in read mode*/
		I2C_Repeated_Start(Slave_Address_R);
     562:	89 ea       	ldi	r24, 0xA9	; 169
     564:	0e 94 34 11 	call	0x2268	; 0x2268 <I2C_Repeated_Start>
     568:	87 01       	movw	r16, r14

		/*now reading from the eeprom and storing in "bitmap_holder" array*/
		for(uint8 byte_address = 0 ; byte_address < 13 ; byte_address++){
     56a:	5e e0       	ldi	r21, 0x0E	; 14
     56c:	e5 2e       	mov	r14, r21
     56e:	f1 2c       	mov	r15, r1
     570:	ec 0e       	add	r14, r28
     572:	fd 1e       	adc	r15, r29
			bitmap_holder[byte_address] = I2C_Read_ACK();
     574:	0e 94 64 11 	call	0x22c8	; 0x22c8 <I2C_Read_ACK>
     578:	f8 01       	movw	r30, r16
     57a:	81 93       	st	Z+, r24
     57c:	8f 01       	movw	r16, r30
		I2C_Write(address);
		/*now initiate the communication again but this time in read mode*/
		I2C_Repeated_Start(Slave_Address_R);

		/*now reading from the eeprom and storing in "bitmap_holder" array*/
		for(uint8 byte_address = 0 ; byte_address < 13 ; byte_address++){
     57e:	ee 15       	cp	r30, r14
     580:	ff 05       	cpc	r31, r15
     582:	c1 f7       	brne	.-16     	; 0x574 <letter_write+0x6a>
     584:	54 c0       	rjmp	.+168    	; 0x62e <letter_write+0x124>
			bitmap_holder[byte_address] = I2C_Read_ACK();
		}
		bitmap_holder[13] = I2C_Read_NACK();
		I2C_Stop();

	}else if(letter_index == 8){
     586:	18 30       	cpi	r17, 0x08	; 8
     588:	99 f5       	brne	.+102    	; 0x5f0 <letter_write+0xe6>

		I2C_Start(Slave_Address_W);
     58a:	88 ea       	ldi	r24, 0xA8	; 168
     58c:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
		/*calculate the starting reading address depend on the number_index)*/
		uint8 address = ( ( letter_index * 14 ) + 140 );
		I2C_Write(address);
     590:	8c ef       	ldi	r24, 0xFC	; 252
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
		/*now initiate the communication again but this time in read mode*/
		I2C_Repeated_Start(Slave_Address_R);
     598:	89 ea       	ldi	r24, 0xA9	; 169
     59a:	0e 94 34 11 	call	0x2268	; 0x2268 <I2C_Repeated_Start>

		for(uint8 byte_address = 0 ; byte_address < 3 ; byte_address++){
			bitmap_holder[byte_address] = I2C_Read_ACK();
     59e:	0e 94 64 11 	call	0x22c8	; 0x22c8 <I2C_Read_ACK>
     5a2:	89 83       	std	Y+1, r24	; 0x01
     5a4:	0e 94 64 11 	call	0x22c8	; 0x22c8 <I2C_Read_ACK>
     5a8:	8a 83       	std	Y+2, r24	; 0x02
     5aa:	0e 94 64 11 	call	0x22c8	; 0x22c8 <I2C_Read_ACK>
     5ae:	8b 83       	std	Y+3, r24	; 0x03
		}
		bitmap_holder[3] = I2C_Read_NACK();
     5b0:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <I2C_Read_NACK>
     5b4:	8c 83       	std	Y+4, r24	; 0x04
		I2C_Stop();
     5b6:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>

		I2C_Start(0b10101010);
     5ba:	8a ea       	ldi	r24, 0xAA	; 170
     5bc:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
		I2C_Write(0x00);
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
		I2C_Repeated_Start(0b10101011);
     5c8:	8b ea       	ldi	r24, 0xAB	; 171
     5ca:	0e 94 34 11 	call	0x2268	; 0x2268 <I2C_Repeated_Start>
     5ce:	8e 01       	movw	r16, r28
     5d0:	0b 5f       	subi	r16, 0xFB	; 251
     5d2:	1f 4f       	sbci	r17, 0xFF	; 255
		for(uint8 byte_address = 4 ; byte_address < 13 ; byte_address++){
     5d4:	4e e0       	ldi	r20, 0x0E	; 14
     5d6:	e4 2e       	mov	r14, r20
     5d8:	f1 2c       	mov	r15, r1
     5da:	ec 0e       	add	r14, r28
     5dc:	fd 1e       	adc	r15, r29
			bitmap_holder[byte_address] = I2C_Read_ACK();
     5de:	0e 94 64 11 	call	0x22c8	; 0x22c8 <I2C_Read_ACK>
     5e2:	f8 01       	movw	r30, r16
     5e4:	81 93       	st	Z+, r24
     5e6:	8f 01       	movw	r16, r30
		I2C_Stop();

		I2C_Start(0b10101010);
		I2C_Write(0x00);
		I2C_Repeated_Start(0b10101011);
		for(uint8 byte_address = 4 ; byte_address < 13 ; byte_address++){
     5e8:	ee 15       	cp	r30, r14
     5ea:	ff 05       	cpc	r31, r15
     5ec:	c1 f7       	brne	.-16     	; 0x5de <letter_write+0xd4>
     5ee:	1f c0       	rjmp	.+62     	; 0x62e <letter_write+0x124>
			bitmap_holder[byte_address] = I2C_Read_ACK();
		}
		bitmap_holder[13] = I2C_Read_NACK();
		I2C_Stop();

	}else if(letter_index > 8 && letter_index <= 25){
     5f0:	81 2f       	mov	r24, r17
     5f2:	89 50       	subi	r24, 0x09	; 9
     5f4:	81 31       	cpi	r24, 0x11	; 17
     5f6:	00 f5       	brcc	.+64     	; 0x638 <letter_write+0x12e>

		I2C_Start(0b10101010);//to start reading from block 0
     5f8:	8a ea       	ldi	r24, 0xAA	; 170
     5fa:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
		/*calculate the starting reading address depend on the number_index)*/
		uint8 address = (( (letter_index-9) * 14 ) + 10);
		I2C_Write(address);
     5fe:	10 9f       	mul	r17, r16
     600:	c0 01       	movw	r24, r0
     602:	11 24       	eor	r1, r1
     604:	84 57       	subi	r24, 0x74	; 116
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
		/*now initiate the communication again but this time in read mode*/
		I2C_Repeated_Start(0b10101011);
     60c:	8b ea       	ldi	r24, 0xAB	; 171
     60e:	0e 94 34 11 	call	0x2268	; 0x2268 <I2C_Repeated_Start>
     612:	87 01       	movw	r16, r14

		/*now reading from the eeprom and storing in "bitmap_holder" array*/
		for(uint8 byte_address = 0 ; byte_address < 13 ; byte_address++){
     614:	3e e0       	ldi	r19, 0x0E	; 14
     616:	e3 2e       	mov	r14, r19
     618:	f1 2c       	mov	r15, r1
     61a:	ec 0e       	add	r14, r28
     61c:	fd 1e       	adc	r15, r29
			bitmap_holder[byte_address] = I2C_Read_ACK();
     61e:	0e 94 64 11 	call	0x22c8	; 0x22c8 <I2C_Read_ACK>
     622:	f8 01       	movw	r30, r16
     624:	81 93       	st	Z+, r24
     626:	8f 01       	movw	r16, r30
		I2C_Write(address);
		/*now initiate the communication again but this time in read mode*/
		I2C_Repeated_Start(0b10101011);

		/*now reading from the eeprom and storing in "bitmap_holder" array*/
		for(uint8 byte_address = 0 ; byte_address < 13 ; byte_address++){
     628:	ee 15       	cp	r30, r14
     62a:	ff 05       	cpc	r31, r15
     62c:	c1 f7       	brne	.-16     	; 0x61e <letter_write+0x114>
			bitmap_holder[byte_address] = I2C_Read_ACK();
		}
		bitmap_holder[13] = I2C_Read_NACK();
     62e:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <I2C_Read_NACK>
     632:	8e 87       	std	Y+14, r24	; 0x0e
		I2C_Stop();
     634:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>

	}

	/*now after getting the data from the eeprom we want to send it to the oled screen*/
	setColumnAddress(col_num,col_num+7);
     638:	27 e0       	ldi	r18, 0x07	; 7
     63a:	d2 2e       	mov	r13, r18
     63c:	dc 0c       	add	r13, r12
     63e:	8c 2d       	mov	r24, r12
     640:	6d 2d       	mov	r22, r13
     642:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <setColumnAddress>
	setPageAddress(page_num,7);
     646:	8b 2d       	mov	r24, r11
     648:	67 e0       	ldi	r22, 0x07	; 7
     64a:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <setPageAddress>
	I2C_Start(oled_write_address);
     64e:	8a e7       	ldi	r24, 0x7A	; 122
     650:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
	I2C_Write(CONTROL_DATA);
     654:	80 e4       	ldi	r24, 0x40	; 64
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
     65c:	8e 01       	movw	r16, r28
     65e:	0f 5f       	subi	r16, 0xFF	; 255
     660:	1f 4f       	sbci	r17, 0xFF	; 255

	for(uint8 byte_address = 0 ; byte_address < 7 ; byte_address++){
     662:	98 e0       	ldi	r25, 0x08	; 8
     664:	e9 2e       	mov	r14, r25
     666:	f1 2c       	mov	r15, r1
     668:	ec 0e       	add	r14, r28
     66a:	fd 1e       	adc	r15, r29
		I2C_Write(bitmap_holder[byte_address]);
     66c:	f8 01       	movw	r30, r16
     66e:	81 91       	ld	r24, Z+
     670:	8f 01       	movw	r16, r30
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
	setColumnAddress(col_num,col_num+7);
	setPageAddress(page_num,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);

	for(uint8 byte_address = 0 ; byte_address < 7 ; byte_address++){
     678:	0e 15       	cp	r16, r14
     67a:	1f 05       	cpc	r17, r15
     67c:	b9 f7       	brne	.-18     	; 0x66c <letter_write+0x162>
		I2C_Write(bitmap_holder[byte_address]);
	}

	I2C_Stop();
     67e:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>
	setColumnAddress(col_num,col_num+7);
     682:	8c 2d       	mov	r24, r12
     684:	6d 2d       	mov	r22, r13
     686:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <setColumnAddress>
	setPageAddress(page_num-1,7);
     68a:	8b 2d       	mov	r24, r11
     68c:	81 50       	subi	r24, 0x01	; 1
     68e:	67 e0       	ldi	r22, 0x07	; 7
     690:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <setPageAddress>
	I2C_Start(oled_write_address);
     694:	8a e7       	ldi	r24, 0x7A	; 122
     696:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
	I2C_Write(CONTROL_DATA);
     69a:	80 e4       	ldi	r24, 0x40	; 64
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>

	for(uint8 byte_address = 7 ; byte_address < 14 ; byte_address++){
     6a2:	8f e0       	ldi	r24, 0x0F	; 15
     6a4:	e8 2e       	mov	r14, r24
     6a6:	f1 2c       	mov	r15, r1
     6a8:	ec 0e       	add	r14, r28
     6aa:	fd 1e       	adc	r15, r29
		I2C_Write(bitmap_holder[byte_address]);
     6ac:	f8 01       	movw	r30, r16
     6ae:	81 91       	ld	r24, Z+
     6b0:	8f 01       	movw	r16, r30
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
	setColumnAddress(col_num,col_num+7);
	setPageAddress(page_num-1,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);

	for(uint8 byte_address = 7 ; byte_address < 14 ; byte_address++){
     6b8:	0e 15       	cp	r16, r14
     6ba:	1f 05       	cpc	r17, r15
     6bc:	b9 f7       	brne	.-18     	; 0x6ac <letter_write+0x1a2>
		I2C_Write(bitmap_holder[byte_address]);
	}

	I2C_Stop();
     6be:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>
}
     6c2:	2e 96       	adiw	r28, 0x0e	; 14
     6c4:	0f b6       	in	r0, 0x3f	; 63
     6c6:	f8 94       	cli
     6c8:	de bf       	out	0x3e, r29	; 62
     6ca:	0f be       	out	0x3f, r0	; 63
     6cc:	cd bf       	out	0x3d, r28	; 61
     6ce:	cf 91       	pop	r28
     6d0:	df 91       	pop	r29
     6d2:	1f 91       	pop	r17
     6d4:	0f 91       	pop	r16
     6d6:	ff 90       	pop	r15
     6d8:	ef 90       	pop	r14
     6da:	df 90       	pop	r13
     6dc:	cf 90       	pop	r12
     6de:	bf 90       	pop	r11
     6e0:	08 95       	ret

000006e2 <day_name_print>:
	}else{
		return 0 ; //it is not a leap year.
	}
}
/*********************************************************************/
void day_name_print(uint8 day_name_track , uint8 ptr[][3]){
     6e2:	1f 93       	push	r17
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
     6e8:	eb 01       	movw	r28, r22
     6ea:	93 e0       	ldi	r25, 0x03	; 3
     6ec:	89 9f       	mul	r24, r25
     6ee:	c0 01       	movw	r24, r0
     6f0:	11 24       	eor	r1, r1
     6f2:	c8 0f       	add	r28, r24
     6f4:	d9 1f       	adc	r29, r25
     6f6:	11 e6       	ldi	r17, 0x61	; 97
	for(uint8 letter_index = 0 ; letter_index < 3 ; letter_index++){
		letter_write(2,((letter_index*7)+97),ptr[day_name_track][letter_index]) ;
     6f8:	82 e0       	ldi	r24, 0x02	; 2
     6fa:	61 2f       	mov	r22, r17
     6fc:	49 91       	ld	r20, Y+
     6fe:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
     702:	19 5f       	subi	r17, 0xF9	; 249
		return 0 ; //it is not a leap year.
	}
}
/*********************************************************************/
void day_name_print(uint8 day_name_track , uint8 ptr[][3]){
	for(uint8 letter_index = 0 ; letter_index < 3 ; letter_index++){
     704:	16 37       	cpi	r17, 0x76	; 118
     706:	c1 f7       	brne	.-16     	; 0x6f8 <day_name_print+0x16>
		letter_write(2,((letter_index*7)+97),ptr[day_name_track][letter_index]) ;
	}
}
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
     70c:	1f 91       	pop	r17
     70e:	08 95       	ret

00000710 <printing_menu_with_choice>:
	digit = ( dec << 4 ) | digit ;
	return digit ;
}
/*********************************************************************/

void printing_menu_with_choice(void){
     710:	5f 92       	push	r5
     712:	6f 92       	push	r6
     714:	7f 92       	push	r7
     716:	8f 92       	push	r8
     718:	9f 92       	push	r9
     71a:	af 92       	push	r10
     71c:	bf 92       	push	r11
     71e:	cf 92       	push	r12
     720:	df 92       	push	r13
     722:	ef 92       	push	r14
     724:	ff 92       	push	r15
     726:	0f 93       	push	r16
     728:	1f 93       	push	r17
     72a:	cf 93       	push	r28
     72c:	df 93       	push	r29
     72e:	e7 e0       	ldi	r30, 0x07	; 7
     730:	5e 2e       	mov	r5, r30
     732:	aa 24       	eor	r10, r10
     734:	bb 24       	eor	r11, r11
     736:	65 01       	movw	r12, r10


	for(sint8 i = 7; i >= 0 ; i--){
			setColumnAddress(0,127);
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	6f e7       	ldi	r22, 0x7F	; 127
     73c:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <setColumnAddress>
			setPageAddress(i,7);
     740:	85 2d       	mov	r24, r5
     742:	67 e0       	ldi	r22, 0x07	; 7
     744:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <setPageAddress>
			I2C_Init();
     748:	0e 94 13 11 	call	0x2226	; 0x2226 <I2C_Init>
			I2C_Start(oled_write_address);
     74c:	8a e7       	ldi	r24, 0x7A	; 122
     74e:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
			I2C_Write(CONTROL_DATA);
     752:	80 e4       	ldi	r24, 0x40	; 64
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
     75a:	7f e7       	ldi	r23, 0x7F	; 127
     75c:	67 2e       	mov	r6, r23
     75e:	71 2c       	mov	r7, r1
     760:	81 2c       	mov	r8, r1
     762:	91 2c       	mov	r9, r1
     764:	6a 0c       	add	r6, r10
     766:	7b 1c       	adc	r7, r11
     768:	8c 1c       	adc	r8, r12
     76a:	9d 1c       	adc	r9, r13

			//start byte to write
			uint32 start_byte_index = (7-i) * 128 ;
			//end byte to write
			uint32 end_byte_index = start_byte_index + 127 ;
			if(i == 5 || i == 4){
     76c:	85 2d       	mov	r24, r5
     76e:	84 50       	subi	r24, 0x04	; 4
     770:	82 30       	cpi	r24, 0x02	; 2
     772:	20 f0       	brcs	.+8      	; 0x77c <printing_menu_with_choice+0x6c>
     774:	e5 01       	movw	r28, r10
     776:	86 01       	movw	r16, r12
     778:	75 01       	movw	r14, r10
     77a:	24 c0       	rjmp	.+72     	; 0x7c4 <printing_menu_with_choice+0xb4>
     77c:	e5 01       	movw	r28, r10
     77e:	86 01       	movw	r16, r12
     780:	75 01       	movw	r14, r10
     782:	0e c0       	rjmp	.+28     	; 0x7a0 <printing_menu_with_choice+0x90>
				for(;start_byte_index < end_byte_index ; start_byte_index++){
					I2C_Write(~(eeprom_read_byte(start_byte_index)));
     784:	ce 01       	movw	r24, r28
     786:	0e 94 90 17 	call	0x2f20	; 0x2f20 <__eerd_byte_m32>
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	80 95       	com	r24
     78e:	90 95       	com	r25
     790:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
			//start byte to write
			uint32 start_byte_index = (7-i) * 128 ;
			//end byte to write
			uint32 end_byte_index = start_byte_index + 127 ;
			if(i == 5 || i == 4){
				for(;start_byte_index < end_byte_index ; start_byte_index++){
     794:	08 94       	sec
     796:	e1 1c       	adc	r14, r1
     798:	f1 1c       	adc	r15, r1
     79a:	01 1d       	adc	r16, r1
     79c:	11 1d       	adc	r17, r1
     79e:	21 96       	adiw	r28, 0x01	; 1
     7a0:	e6 14       	cp	r14, r6
     7a2:	f7 04       	cpc	r15, r7
     7a4:	08 05       	cpc	r16, r8
     7a6:	19 05       	cpc	r17, r9
     7a8:	68 f3       	brcs	.-38     	; 0x784 <printing_menu_with_choice+0x74>
     7aa:	11 c0       	rjmp	.+34     	; 0x7ce <printing_menu_with_choice+0xbe>
					I2C_Write(~(eeprom_read_byte(start_byte_index)));
				}
			}else{
				for(;start_byte_index < end_byte_index ; start_byte_index++){
					I2C_Write(eeprom_read_byte(start_byte_index));
     7ac:	ce 01       	movw	r24, r28
     7ae:	0e 94 90 17 	call	0x2f20	; 0x2f20 <__eerd_byte_m32>
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
			if(i == 5 || i == 4){
				for(;start_byte_index < end_byte_index ; start_byte_index++){
					I2C_Write(~(eeprom_read_byte(start_byte_index)));
				}
			}else{
				for(;start_byte_index < end_byte_index ; start_byte_index++){
     7b8:	08 94       	sec
     7ba:	e1 1c       	adc	r14, r1
     7bc:	f1 1c       	adc	r15, r1
     7be:	01 1d       	adc	r16, r1
     7c0:	11 1d       	adc	r17, r1
     7c2:	21 96       	adiw	r28, 0x01	; 1
     7c4:	e6 14       	cp	r14, r6
     7c6:	f7 04       	cpc	r15, r7
     7c8:	08 05       	cpc	r16, r8
     7ca:	19 05       	cpc	r17, r9
     7cc:	78 f3       	brcs	.-34     	; 0x7ac <printing_menu_with_choice+0x9c>
					I2C_Write(eeprom_read_byte(start_byte_index));
				}
			}
			I2C_Stop();
     7ce:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>
/*********************************************************************/

void printing_menu_with_choice(void){


	for(sint8 i = 7; i >= 0 ; i--){
     7d2:	5a 94       	dec	r5
     7d4:	80 e8       	ldi	r24, 0x80	; 128
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	a0 e0       	ldi	r26, 0x00	; 0
     7da:	b0 e0       	ldi	r27, 0x00	; 0
     7dc:	a8 0e       	add	r10, r24
     7de:	b9 1e       	adc	r11, r25
     7e0:	ca 1e       	adc	r12, r26
     7e2:	db 1e       	adc	r13, r27
     7e4:	9f ef       	ldi	r25, 0xFF	; 255
     7e6:	59 16       	cp	r5, r25
     7e8:	09 f0       	breq	.+2      	; 0x7ec <printing_menu_with_choice+0xdc>
     7ea:	a6 cf       	rjmp	.-180    	; 0x738 <printing_menu_with_choice+0x28>
			}
			I2C_Stop();
	}


	I2C_Start(0b10101010); //Starting communication with the external eeprom.
     7ec:	8a ea       	ldi	r24, 0xAA	; 170
     7ee:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
	I2C_Write(0xF9); //Writing the starting address to read from the eeprom.
     7f2:	89 ef       	ldi	r24, 0xF9	; 249
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
	I2C_Repeated_Start(0b10101011);//Rs & telling the eeprom that we will read from it.
     7fa:	8b ea       	ldi	r24, 0xAB	; 171
     7fc:	0e 94 34 11 	call	0x2268	; 0x2268 <I2C_Repeated_Start>
     800:	62 ed       	ldi	r22, 0xD2	; 210
     802:	e6 2e       	mov	r14, r22
     804:	60 e0       	ldi	r22, 0x00	; 0
     806:	f6 2e       	mov	r15, r22
     808:	e7 01       	movw	r28, r14
	for(uint8 i = 0 ; i < 4 ; i++){
		username[i] = I2C_Read_ACK();
     80a:	0e 94 64 11 	call	0x22c8	; 0x22c8 <I2C_Read_ACK>
     80e:	89 93       	st	Y+, r24


	I2C_Start(0b10101010); //Starting communication with the external eeprom.
	I2C_Write(0xF9); //Writing the starting address to read from the eeprom.
	I2C_Repeated_Start(0b10101011);//Rs & telling the eeprom that we will read from it.
	for(uint8 i = 0 ; i < 4 ; i++){
     810:	a0 e0       	ldi	r26, 0x00	; 0
     812:	c6 3d       	cpi	r28, 0xD6	; 214
     814:	da 07       	cpc	r29, r26
     816:	c9 f7       	brne	.-14     	; 0x80a <printing_menu_with_choice+0xfa>
		username[i] = I2C_Read_ACK();
	}
	username[4] = I2C_Read_NACK();
     818:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <I2C_Read_NACK>
     81c:	88 83       	st	Y, r24
	I2C_Stop();
     81e:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>
     822:	18 e3       	ldi	r17, 0x38	; 56

	//now print the name on the OLED
	for(uint8 i = 0 ; i < 5 ; i++){
		letter_write(7,(56+(7*i)),username[i]);
     824:	87 e0       	ldi	r24, 0x07	; 7
     826:	61 2f       	mov	r22, r17
     828:	f7 01       	movw	r30, r14
     82a:	41 91       	ld	r20, Z+
     82c:	7f 01       	movw	r14, r30
     82e:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
     832:	19 5f       	subi	r17, 0xF9	; 249
	}
	username[4] = I2C_Read_NACK();
	I2C_Stop();

	//now print the name on the OLED
	for(uint8 i = 0 ; i < 5 ; i++){
     834:	1b 35       	cpi	r17, 0x5B	; 91
     836:	b1 f7       	brne	.-20     	; 0x824 <printing_menu_with_choice+0x114>
		letter_write(7,(56+(7*i)),username[i]);
	}



}
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	1f 91       	pop	r17
     83e:	0f 91       	pop	r16
     840:	ff 90       	pop	r15
     842:	ef 90       	pop	r14
     844:	df 90       	pop	r13
     846:	cf 90       	pop	r12
     848:	bf 90       	pop	r11
     84a:	af 90       	pop	r10
     84c:	9f 90       	pop	r9
     84e:	8f 90       	pop	r8
     850:	7f 90       	pop	r7
     852:	6f 90       	pop	r6
     854:	5f 90       	pop	r5
     856:	08 95       	ret

00000858 <number_write>:
//bitmap array for -
uint8 dash_bitmap[14] = {0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};


/********************************************************************************/
void number_write(uint8 page_num , uint8 col_num , uint8 number_index){
     858:	af 92       	push	r10
     85a:	bf 92       	push	r11
     85c:	cf 92       	push	r12
     85e:	df 92       	push	r13
     860:	ef 92       	push	r14
     862:	ff 92       	push	r15
     864:	0f 93       	push	r16
     866:	1f 93       	push	r17
     868:	df 93       	push	r29
     86a:	cf 93       	push	r28
     86c:	cd b7       	in	r28, 0x3d	; 61
     86e:	de b7       	in	r29, 0x3e	; 62
     870:	2e 97       	sbiw	r28, 0x0e	; 14
     872:	0f b6       	in	r0, 0x3f	; 63
     874:	f8 94       	cli
     876:	de bf       	out	0x3e, r29	; 62
     878:	0f be       	out	0x3f, r0	; 63
     87a:	cd bf       	out	0x3d, r28	; 61
     87c:	a8 2e       	mov	r10, r24
     87e:	b6 2e       	mov	r11, r22
     880:	e4 2e       	mov	r14, r20
	I2C_Init();
     882:	0e 94 13 11 	call	0x2226	; 0x2226 <I2C_Init>
	/*storing bytes array*/
	uint8 bitmap_holder[14] = {0};
     886:	1e e0       	ldi	r17, 0x0E	; 14
     888:	f1 2e       	mov	r15, r17
     88a:	8e 01       	movw	r16, r28
     88c:	0f 5f       	subi	r16, 0xFF	; 255
     88e:	1f 4f       	sbci	r17, 0xFF	; 255
     890:	f8 01       	movw	r30, r16
     892:	8f 2d       	mov	r24, r15
     894:	11 92       	st	Z+, r1
     896:	8a 95       	dec	r24
     898:	e9 f7       	brne	.-6      	; 0x894 <__stack+0x35>


	//first we want to send that we want to write and write the start reading address.
	I2C_Start(Slave_Address_W);
     89a:	88 ea       	ldi	r24, 0xA8	; 168
     89c:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>

	/*calculate the starting reading address depend on the number_index)*/
	uint8 address = ( number_index * 14 );
	I2C_Write(address);
     8a0:	ef 9c       	mul	r14, r15
     8a2:	80 2d       	mov	r24, r0
     8a4:	11 24       	eor	r1, r1
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>

	/*now initiate the communication again but this time in read mode*/
	I2C_Repeated_Start(Slave_Address_R);
     8ac:	89 ea       	ldi	r24, 0xA9	; 169
     8ae:	0e 94 34 11 	call	0x2268	; 0x2268 <I2C_Repeated_Start>
     8b2:	78 01       	movw	r14, r16

	/*now reading from the eeprom and storing in "bitmap_holder" array*/
	for(uint8 byte_address = 0 ; byte_address < 13 ; byte_address++){
     8b4:	be e0       	ldi	r27, 0x0E	; 14
     8b6:	cb 2e       	mov	r12, r27
     8b8:	d1 2c       	mov	r13, r1
     8ba:	cc 0e       	add	r12, r28
     8bc:	dd 1e       	adc	r13, r29
		bitmap_holder[byte_address] = I2C_Read_ACK();
     8be:	0e 94 64 11 	call	0x22c8	; 0x22c8 <I2C_Read_ACK>
     8c2:	f7 01       	movw	r30, r14
     8c4:	81 93       	st	Z+, r24
     8c6:	7f 01       	movw	r14, r30

	/*now initiate the communication again but this time in read mode*/
	I2C_Repeated_Start(Slave_Address_R);

	/*now reading from the eeprom and storing in "bitmap_holder" array*/
	for(uint8 byte_address = 0 ; byte_address < 13 ; byte_address++){
     8c8:	ec 15       	cp	r30, r12
     8ca:	fd 05       	cpc	r31, r13
     8cc:	c1 f7       	brne	.-16     	; 0x8be <__stack+0x5f>
		bitmap_holder[byte_address] = I2C_Read_ACK();
	}
	bitmap_holder[13] = I2C_Read_NACK();
     8ce:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <I2C_Read_NACK>
     8d2:	8e 87       	std	Y+14, r24	; 0x0e
	I2C_Stop();
     8d4:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>

	/*now after getting the data from the eeprom we want to send it to the oled screen*/
	setColumnAddress(col_num,col_num+7);
     8d8:	a7 e0       	ldi	r26, 0x07	; 7
     8da:	da 2e       	mov	r13, r26
     8dc:	db 0c       	add	r13, r11
     8de:	8b 2d       	mov	r24, r11
     8e0:	6d 2d       	mov	r22, r13
     8e2:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <setColumnAddress>
	setPageAddress(page_num,7);
     8e6:	8a 2d       	mov	r24, r10
     8e8:	67 e0       	ldi	r22, 0x07	; 7
     8ea:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <setPageAddress>
	I2C_Start(oled_write_address);
     8ee:	8a e7       	ldi	r24, 0x7A	; 122
     8f0:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
	I2C_Write(CONTROL_DATA);
     8f4:	80 e4       	ldi	r24, 0x40	; 64
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>

	for(uint8 byte_address = 0 ; byte_address < 7 ; byte_address++){
     8fc:	f8 e0       	ldi	r31, 0x08	; 8
     8fe:	ef 2e       	mov	r14, r31
     900:	f1 2c       	mov	r15, r1
     902:	ec 0e       	add	r14, r28
     904:	fd 1e       	adc	r15, r29
		I2C_Write(bitmap_holder[byte_address]);
     906:	f8 01       	movw	r30, r16
     908:	81 91       	ld	r24, Z+
     90a:	8f 01       	movw	r16, r30
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
	setColumnAddress(col_num,col_num+7);
	setPageAddress(page_num,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);

	for(uint8 byte_address = 0 ; byte_address < 7 ; byte_address++){
     912:	0e 15       	cp	r16, r14
     914:	1f 05       	cpc	r17, r15
     916:	b9 f7       	brne	.-18     	; 0x906 <__stack+0xa7>
		I2C_Write(bitmap_holder[byte_address]);
	}

	I2C_Stop();
     918:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>
	setColumnAddress(col_num,col_num+7);
     91c:	8b 2d       	mov	r24, r11
     91e:	6d 2d       	mov	r22, r13
     920:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <setColumnAddress>
	setPageAddress(page_num-1,7);
     924:	8a 2d       	mov	r24, r10
     926:	81 50       	subi	r24, 0x01	; 1
     928:	67 e0       	ldi	r22, 0x07	; 7
     92a:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <setPageAddress>
	I2C_Start(oled_write_address);
     92e:	8a e7       	ldi	r24, 0x7A	; 122
     930:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
	I2C_Write(CONTROL_DATA);
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
     93c:	78 01       	movw	r14, r16

	for(uint8 byte_address = 7 ; byte_address < 14 ; byte_address++){
     93e:	8e 01       	movw	r16, r28
     940:	01 5f       	subi	r16, 0xF1	; 241
     942:	1f 4f       	sbci	r17, 0xFF	; 255
		I2C_Write(bitmap_holder[byte_address]);
     944:	f7 01       	movw	r30, r14
     946:	81 91       	ld	r24, Z+
     948:	7f 01       	movw	r14, r30
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
	setColumnAddress(col_num,col_num+7);
	setPageAddress(page_num-1,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);

	for(uint8 byte_address = 7 ; byte_address < 14 ; byte_address++){
     950:	e0 16       	cp	r14, r16
     952:	f1 06       	cpc	r15, r17
     954:	b9 f7       	brne	.-18     	; 0x944 <__stack+0xe5>
		I2C_Write(bitmap_holder[byte_address]);
	}

	I2C_Stop();
     956:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>

}
     95a:	2e 96       	adiw	r28, 0x0e	; 14
     95c:	0f b6       	in	r0, 0x3f	; 63
     95e:	f8 94       	cli
     960:	de bf       	out	0x3e, r29	; 62
     962:	0f be       	out	0x3f, r0	; 63
     964:	cd bf       	out	0x3d, r28	; 61
     966:	cf 91       	pop	r28
     968:	df 91       	pop	r29
     96a:	1f 91       	pop	r17
     96c:	0f 91       	pop	r16
     96e:	ff 90       	pop	r15
     970:	ef 90       	pop	r14
     972:	df 90       	pop	r13
     974:	cf 90       	pop	r12
     976:	bf 90       	pop	r11
     978:	af 90       	pop	r10
     97a:	08 95       	ret

0000097c <triple_digit_write>:
	number_write(page_num,col_num+7,digit);
	number /= 10 ;
	number_write(page_num,col_num,number);
}
/*********************************************************************/
void triple_digit_write(uint8 page_num , uint8 col_num , uint16 number){
     97c:	ef 92       	push	r14
     97e:	ff 92       	push	r15
     980:	0f 93       	push	r16
     982:	1f 93       	push	r17
     984:	f8 2e       	mov	r15, r24
     986:	e6 2e       	mov	r14, r22
     988:	8a 01       	movw	r16, r20
	uint8 digit = number % 10 ;
	number_write(page_num,(col_num+14),digit);
     98a:	26 2f       	mov	r18, r22
     98c:	22 5f       	subi	r18, 0xF2	; 242
     98e:	ca 01       	movw	r24, r20
     990:	6a e0       	ldi	r22, 0x0A	; 10
     992:	70 e0       	ldi	r23, 0x00	; 0
     994:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <__udivmodhi4>
     998:	48 2f       	mov	r20, r24
     99a:	8f 2d       	mov	r24, r15
     99c:	62 2f       	mov	r22, r18
     99e:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
	number /= 10 ;
     9a2:	c8 01       	movw	r24, r16
     9a4:	6a e0       	ldi	r22, 0x0A	; 10
     9a6:	70 e0       	ldi	r23, 0x00	; 0
     9a8:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <__udivmodhi4>
     9ac:	16 2f       	mov	r17, r22
     9ae:	07 2f       	mov	r16, r23
	digit = number % 10 ;
	number_write(page_num,col_num+7,digit);
     9b0:	2e 2d       	mov	r18, r14
     9b2:	29 5f       	subi	r18, 0xF9	; 249
     9b4:	86 2f       	mov	r24, r22
     9b6:	97 2f       	mov	r25, r23
     9b8:	6a e0       	ldi	r22, 0x0A	; 10
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <__udivmodhi4>
     9c0:	48 2f       	mov	r20, r24
     9c2:	8f 2d       	mov	r24, r15
     9c4:	62 2f       	mov	r22, r18
     9c6:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
	number /= 10 ;
	digit = number % 10 ;
	number_write(page_num,col_num,digit);
     9ca:	81 2f       	mov	r24, r17
     9cc:	90 2f       	mov	r25, r16
     9ce:	6a e0       	ldi	r22, 0x0A	; 10
     9d0:	70 e0       	ldi	r23, 0x00	; 0
     9d2:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <__udivmodhi4>
     9d6:	cb 01       	movw	r24, r22
     9d8:	6a e0       	ldi	r22, 0x0A	; 10
     9da:	70 e0       	ldi	r23, 0x00	; 0
     9dc:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <__udivmodhi4>
     9e0:	48 2f       	mov	r20, r24
     9e2:	8f 2d       	mov	r24, r15
     9e4:	6e 2d       	mov	r22, r14
     9e6:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
}
     9ea:	1f 91       	pop	r17
     9ec:	0f 91       	pop	r16
     9ee:	ff 90       	pop	r15
     9f0:	ef 90       	pop	r14
     9f2:	08 95       	ret

000009f4 <double_digit_write>:
	I2C_Stop();

	return 1 ; //adding name to eeprom done successfully.
}
/**********************************************************************/
void double_digit_write(uint8 page_num , uint8 col_num , uint8 number){
     9f4:	ff 92       	push	r15
     9f6:	0f 93       	push	r16
     9f8:	1f 93       	push	r17
     9fa:	08 2f       	mov	r16, r24
     9fc:	f6 2e       	mov	r15, r22
     9fe:	14 2f       	mov	r17, r20
	uint8 digit = number % 10 ;
	number_write(page_num,col_num+7,digit);
     a00:	26 2f       	mov	r18, r22
     a02:	29 5f       	subi	r18, 0xF9	; 249
     a04:	84 2f       	mov	r24, r20
     a06:	6a e0       	ldi	r22, 0x0A	; 10
     a08:	0e 94 20 17 	call	0x2e40	; 0x2e40 <__udivmodqi4>
     a0c:	80 2f       	mov	r24, r16
     a0e:	62 2f       	mov	r22, r18
     a10:	49 2f       	mov	r20, r25
     a12:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
	number /= 10 ;
	number_write(page_num,col_num,number);
     a16:	81 2f       	mov	r24, r17
     a18:	6a e0       	ldi	r22, 0x0A	; 10
     a1a:	0e 94 20 17 	call	0x2e40	; 0x2e40 <__udivmodqi4>
     a1e:	48 2f       	mov	r20, r24
     a20:	80 2f       	mov	r24, r16
     a22:	6f 2d       	mov	r22, r15
     a24:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
}
     a28:	1f 91       	pop	r17
     a2a:	0f 91       	pop	r16
     a2c:	ff 90       	pop	r15
     a2e:	08 95       	ret

00000a30 <button_check>:
	DIO_SetPinValue(DIO_PORTC,DIO_PIN4,DIO_PIN_VAL_HIGH);
	DIO_SetPinValue(DIO_PORTC,DIO_PIN5,DIO_PIN_VAL_HIGH);
}

/****************************************************************************/
uint8 button_check(void){
     a30:	df 92       	push	r13
     a32:	ef 92       	push	r14
     a34:	ff 92       	push	r15
     a36:	0f 93       	push	r16
     a38:	1f 93       	push	r17
     a3a:	df 93       	push	r29
     a3c:	cf 93       	push	r28
     a3e:	0f 92       	push	r0
     a40:	cd b7       	in	r28, 0x3d	; 61
     a42:	de b7       	in	r29, 0x3e	; 62
     a44:	03 e0       	ldi	r16, 0x03	; 3

	uint8 which_button = 0 ;

	//now we want to loop over the pins 3,4,5 and set each one to low and check if pin2 get LOW value.
	for(uint8 COL_PIN = 3 ; COL_PIN <= 5 ; COL_PIN++){
		uint8 button_pressed = 1 ;
     a46:	dd 24       	eor	r13, r13
     a48:	d3 94       	inc	r13

		DIO_SetPinValue(DIO_PORTC,COL_PIN,DIO_PIN_VAL_LOW);
		DIO_GetPinValue(DIO_PORTC,DIO_PIN2, &button_pressed);
     a4a:	7e 01       	movw	r14, r28
     a4c:	08 94       	sec
     a4e:	e1 1c       	adc	r14, r1
     a50:	f1 1c       	adc	r15, r1

	uint8 which_button = 0 ;

	//now we want to loop over the pins 3,4,5 and set each one to low and check if pin2 get LOW value.
	for(uint8 COL_PIN = 3 ; COL_PIN <= 5 ; COL_PIN++){
		uint8 button_pressed = 1 ;
     a52:	d9 82       	std	Y+1, r13	; 0x01

		DIO_SetPinValue(DIO_PORTC,COL_PIN,DIO_PIN_VAL_LOW);
     a54:	82 e0       	ldi	r24, 0x02	; 2
     a56:	60 2f       	mov	r22, r16
     a58:	40 e0       	ldi	r20, 0x00	; 0
     a5a:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <DIO_SetPinValue>
		DIO_GetPinValue(DIO_PORTC,DIO_PIN2, &button_pressed);
     a5e:	82 e0       	ldi	r24, 0x02	; 2
     a60:	62 e0       	ldi	r22, 0x02	; 2
     a62:	a7 01       	movw	r20, r14
     a64:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <DIO_GetPinValue>

		//0 means button is pressed
		if(button_pressed == 0){
     a68:	89 81       	ldd	r24, Y+1	; 0x01
     a6a:	88 23       	and	r24, r24
     a6c:	39 f0       	breq	.+14     	; 0xa7c <button_check+0x4c>
     a6e:	10 e0       	ldi	r17, 0x00	; 0
     a70:	09 c0       	rjmp	.+18     	; 0xa84 <button_check+0x54>
			which_button = COL_PIN ;

			while(button_pressed == 0){
				DIO_GetPinValue(DIO_PORTC, DIO_PIN2, &button_pressed);
     a72:	82 e0       	ldi	r24, 0x02	; 2
     a74:	62 e0       	ldi	r22, 0x02	; 2
     a76:	a7 01       	movw	r20, r14
     a78:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <DIO_GetPinValue>

		//0 means button is pressed
		if(button_pressed == 0){
			which_button = COL_PIN ;

			while(button_pressed == 0){
     a7c:	89 81       	ldd	r24, Y+1	; 0x01
     a7e:	88 23       	and	r24, r24
     a80:	c1 f3       	breq	.-16     	; 0xa72 <button_check+0x42>
     a82:	10 2f       	mov	r17, r16
				DIO_GetPinValue(DIO_PORTC, DIO_PIN2, &button_pressed);
			}
		}

		DIO_SetPinValue(DIO_PORTC,COL_PIN,DIO_PIN_VAL_HIGH);
     a84:	82 e0       	ldi	r24, 0x02	; 2
     a86:	60 2f       	mov	r22, r16
     a88:	41 e0       	ldi	r20, 0x01	; 1
     a8a:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <DIO_SetPinValue>
		if(which_button != 0)
     a8e:	11 23       	and	r17, r17
     a90:	19 f4       	brne	.+6      	; 0xa98 <button_check+0x68>
uint8 button_check(void){

	uint8 which_button = 0 ;

	//now we want to loop over the pins 3,4,5 and set each one to low and check if pin2 get LOW value.
	for(uint8 COL_PIN = 3 ; COL_PIN <= 5 ; COL_PIN++){
     a92:	0f 5f       	subi	r16, 0xFF	; 255
     a94:	06 30       	cpi	r16, 0x06	; 6
     a96:	e9 f6       	brne	.-70     	; 0xa52 <button_check+0x22>
		DIO_SetPinValue(DIO_PORTC,COL_PIN,DIO_PIN_VAL_HIGH);
		if(which_button != 0)
			return which_button ;
	}
	return which_button ;
}
     a98:	81 2f       	mov	r24, r17
     a9a:	0f 90       	pop	r0
     a9c:	cf 91       	pop	r28
     a9e:	df 91       	pop	r29
     aa0:	1f 91       	pop	r17
     aa2:	0f 91       	pop	r16
     aa4:	ff 90       	pop	r15
     aa6:	ef 90       	pop	r14
     aa8:	df 90       	pop	r13
     aaa:	08 95       	ret

00000aac <study_timer>:
	return 1;

}
/*********************************************************************/

uint8 study_timer(void){
     aac:	cf 92       	push	r12
     aae:	df 92       	push	r13
     ab0:	ef 92       	push	r14
     ab2:	ff 92       	push	r15
     ab4:	0f 93       	push	r16
     ab6:	1f 93       	push	r17

	black_entire_screen();
     ab8:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <black_entire_screen>
	//studying min
	letter_write(7,1,18);
     abc:	87 e0       	ldi	r24, 0x07	; 7
     abe:	61 e0       	ldi	r22, 0x01	; 1
     ac0:	42 e1       	ldi	r20, 0x12	; 18
     ac2:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,8,19);
     ac6:	87 e0       	ldi	r24, 0x07	; 7
     ac8:	68 e0       	ldi	r22, 0x08	; 8
     aca:	43 e1       	ldi	r20, 0x13	; 19
     acc:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,15,20);
     ad0:	87 e0       	ldi	r24, 0x07	; 7
     ad2:	6f e0       	ldi	r22, 0x0F	; 15
     ad4:	44 e1       	ldi	r20, 0x14	; 20
     ad6:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,22,3);
     ada:	87 e0       	ldi	r24, 0x07	; 7
     adc:	66 e1       	ldi	r22, 0x16	; 22
     ade:	43 e0       	ldi	r20, 0x03	; 3
     ae0:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,29,24);
     ae4:	87 e0       	ldi	r24, 0x07	; 7
     ae6:	6d e1       	ldi	r22, 0x1D	; 29
     ae8:	48 e1       	ldi	r20, 0x18	; 24
     aea:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,36,8);
     aee:	87 e0       	ldi	r24, 0x07	; 7
     af0:	64 e2       	ldi	r22, 0x24	; 36
     af2:	48 e0       	ldi	r20, 0x08	; 8
     af4:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,43,13);
     af8:	87 e0       	ldi	r24, 0x07	; 7
     afa:	6b e2       	ldi	r22, 0x2B	; 43
     afc:	4d e0       	ldi	r20, 0x0D	; 13
     afe:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,50,6);
     b02:	87 e0       	ldi	r24, 0x07	; 7
     b04:	62 e3       	ldi	r22, 0x32	; 50
     b06:	46 e0       	ldi	r20, 0x06	; 6
     b08:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>

	letter_write(7,64,12);
     b0c:	87 e0       	ldi	r24, 0x07	; 7
     b0e:	60 e4       	ldi	r22, 0x40	; 64
     b10:	4c e0       	ldi	r20, 0x0C	; 12
     b12:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,71,8);
     b16:	87 e0       	ldi	r24, 0x07	; 7
     b18:	67 e4       	ldi	r22, 0x47	; 71
     b1a:	48 e0       	ldi	r20, 0x08	; 8
     b1c:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,78,13);
     b20:	87 e0       	ldi	r24, 0x07	; 7
     b22:	6e e4       	ldi	r22, 0x4E	; 78
     b24:	4d e0       	ldi	r20, 0x0D	; 13
     b26:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,85,18);
     b2a:	87 e0       	ldi	r24, 0x07	; 7
     b2c:	65 e5       	ldi	r22, 0x55	; 85
     b2e:	42 e1       	ldi	r20, 0x12	; 18
     b30:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>

	//first we will print 00
	number_write(4,48,0);
     b34:	84 e0       	ldi	r24, 0x04	; 4
     b36:	60 e3       	ldi	r22, 0x30	; 48
     b38:	40 e0       	ldi	r20, 0x00	; 0
     b3a:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
	number_write(4,55,0);
     b3e:	84 e0       	ldi	r24, 0x04	; 4
     b40:	67 e3       	ldi	r22, 0x37	; 55
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>

	//writing min beside 00
	letter_write(4,69,12);
     b48:	84 e0       	ldi	r24, 0x04	; 4
     b4a:	65 e4       	ldi	r22, 0x45	; 69
     b4c:	4c e0       	ldi	r20, 0x0C	; 12
     b4e:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(4,76,8);
     b52:	84 e0       	ldi	r24, 0x04	; 4
     b54:	6c e4       	ldi	r22, 0x4C	; 76
     b56:	48 e0       	ldi	r20, 0x08	; 8
     b58:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(4,83,13);
     b5c:	84 e0       	ldi	r24, 0x04	; 4
     b5e:	63 e5       	ldi	r22, 0x53	; 83
     b60:	4d e0       	ldi	r20, 0x0D	; 13
     b62:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>

	//drawing the underline
	setColumnAddress(48,62);
     b66:	80 e3       	ldi	r24, 0x30	; 48
     b68:	6e e3       	ldi	r22, 0x3E	; 62
     b6a:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <setColumnAddress>
	setPageAddress(2,7);
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	67 e0       	ldi	r22, 0x07	; 7
     b72:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <setPageAddress>
	I2C_Start(oled_write_address);
     b76:	8a e7       	ldi	r24, 0x7A	; 122
     b78:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
	I2C_Write(CONTROL_DATA);
     b7c:	80 e4       	ldi	r24, 0x40	; 64
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
     b84:	00 e0       	ldi	r16, 0x00	; 0
	for(uint8 i = 0 ; i < 14 ; i++){
		I2C_Write(0xC0);
     b86:	80 ec       	ldi	r24, 0xC0	; 192
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
	//drawing the underline
	setColumnAddress(48,62);
	setPageAddress(2,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(uint8 i = 0 ; i < 14 ; i++){
     b8e:	0f 5f       	subi	r16, 0xFF	; 255
     b90:	0e 30       	cpi	r16, 0x0E	; 14
     b92:	c9 f7       	brne	.-14     	; 0xb86 <study_timer+0xda>
		I2C_Write(0xC0);
	}
	I2C_Stop();
     b94:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>

	//writing slot
	letter_write(1,50,18);
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	62 e3       	ldi	r22, 0x32	; 50
     b9c:	42 e1       	ldi	r20, 0x12	; 18
     b9e:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(1,57,11);
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	69 e3       	ldi	r22, 0x39	; 57
     ba6:	4b e0       	ldi	r20, 0x0B	; 11
     ba8:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(1,64,14);
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	60 e4       	ldi	r22, 0x40	; 64
     bb0:	4e e0       	ldi	r20, 0x0E	; 14
     bb2:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(1,71,19);
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	67 e4       	ldi	r22, 0x47	; 71
     bba:	43 e1       	ldi	r20, 0x13	; 19
     bbc:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>

	number_write(1,85,1);
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	65 e5       	ldi	r22, 0x55	; 85
     bc4:	41 e0       	ldi	r20, 0x01	; 1
     bc6:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
     bca:	10 e0       	ldi	r17, 0x00	; 0

	uint8 timer_tracker = 0 ;
	uint8 which_button = 0 ;
	do{
		which_button = 0 ;
		which_button = button_check();
     bcc:	0e 94 18 05 	call	0xa30	; 0xa30 <button_check>

		if(which_button == 3){
     bd0:	83 30       	cpi	r24, 0x03	; 3
     bd2:	59 f4       	brne	.+22     	; 0xbea <study_timer+0x13e>
			//this means that we pressed left
			//check if we stopping at letter a
			if(timer_tracker == 0){
     bd4:	11 23       	and	r17, r17
     bd6:	39 f4       	brne	.+14     	; 0xbe6 <study_timer+0x13a>
				timer_tracker = 99 ;
				double_digit_write(4,48,timer_tracker);
     bd8:	84 e0       	ldi	r24, 0x04	; 4
     bda:	60 e3       	ldi	r22, 0x30	; 48
     bdc:	43 e6       	ldi	r20, 0x63	; 99
     bde:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
     be2:	13 e6       	ldi	r17, 0x63	; 99
     be4:	f3 cf       	rjmp	.-26     	; 0xbcc <study_timer+0x120>
			}else{
				timer_tracker-- ;
     be6:	11 50       	subi	r17, 0x01	; 1
     be8:	0a c0       	rjmp	.+20     	; 0xbfe <study_timer+0x152>
				double_digit_write(4,48,timer_tracker);
			}

		}else if(which_button == 4){
     bea:	84 30       	cpi	r24, 0x04	; 4
     bec:	71 f4       	brne	.+28     	; 0xc0a <study_timer+0x15e>
			//this means that we pressed right
			//check if we stopping at letter z
			if(timer_tracker == 99){
     bee:	13 36       	cpi	r17, 0x63	; 99
     bf0:	29 f4       	brne	.+10     	; 0xbfc <study_timer+0x150>
				timer_tracker = 0 ;
				double_digit_write(4,48,timer_tracker);
     bf2:	60 e3       	ldi	r22, 0x30	; 48
     bf4:	40 e0       	ldi	r20, 0x00	; 0
     bf6:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
     bfa:	e7 cf       	rjmp	.-50     	; 0xbca <study_timer+0x11e>
			}else{
				timer_tracker++ ;
     bfc:	1f 5f       	subi	r17, 0xFF	; 255
				double_digit_write(4,48,timer_tracker);
     bfe:	84 e0       	ldi	r24, 0x04	; 4
     c00:	60 e3       	ldi	r22, 0x30	; 48
     c02:	41 2f       	mov	r20, r17
     c04:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
     c08:	e1 cf       	rjmp	.-62     	; 0xbcc <study_timer+0x120>
			}
		}

	}while(which_button != 5);
     c0a:	85 30       	cpi	r24, 0x05	; 5
     c0c:	f9 f6       	brne	.-66     	; 0xbcc <study_timer+0x120>
     c0e:	c1 2e       	mov	r12, r17
	//remove the underline
	setColumnAddress(48,62);
     c10:	80 e3       	ldi	r24, 0x30	; 48
     c12:	6e e3       	ldi	r22, 0x3E	; 62
     c14:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <setColumnAddress>
	setPageAddress(2,7);
     c18:	82 e0       	ldi	r24, 0x02	; 2
     c1a:	67 e0       	ldi	r22, 0x07	; 7
     c1c:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <setPageAddress>
	I2C_Start(oled_write_address);
     c20:	8a e7       	ldi	r24, 0x7A	; 122
     c22:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
	I2C_Write(CONTROL_DATA);
     c26:	80 e4       	ldi	r24, 0x40	; 64
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
     c2e:	00 e0       	ldi	r16, 0x00	; 0
	for(uint8 i = 0 ; i < 14 ; i++){
		I2C_Write(0x00);
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
	//remove the underline
	setColumnAddress(48,62);
	setPageAddress(2,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(uint8 i = 0 ; i < 14 ; i++){
     c38:	0f 5f       	subi	r16, 0xFF	; 255
     c3a:	0e 30       	cpi	r16, 0x0E	; 14
     c3c:	c9 f7       	brne	.-14     	; 0xc30 <study_timer+0x184>
		I2C_Write(0x00);
	}
	I2C_Stop();
     c3e:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>
     c42:	ff 24       	eor	r15, r15
     c44:	f3 94       	inc	r15
	uint8 slot_tracker = 1 ;


	do{
		which_button = 0 ;
		which_button = button_check();
     c46:	0e 94 18 05 	call	0xa30	; 0xa30 <button_check>

		if(which_button == 3){
     c4a:	83 30       	cpi	r24, 0x03	; 3
     c4c:	61 f4       	brne	.+24     	; 0xc66 <study_timer+0x1ba>
			//this means that we pressed left
			//check if we stopping at letter a
			if(slot_tracker == 0){
     c4e:	ff 20       	and	r15, r15
     c50:	41 f4       	brne	.+16     	; 0xc62 <study_timer+0x1b6>
				slot_tracker = 3 ;
				number_write(1,85,slot_tracker);
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	65 e5       	ldi	r22, 0x55	; 85
     c56:	43 e0       	ldi	r20, 0x03	; 3
     c58:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
     c5c:	33 e0       	ldi	r19, 0x03	; 3
     c5e:	f3 2e       	mov	r15, r19
     c60:	f2 cf       	rjmp	.-28     	; 0xc46 <study_timer+0x19a>
			}else{
				slot_tracker-- ;
     c62:	fa 94       	dec	r15
     c64:	0c c0       	rjmp	.+24     	; 0xc7e <study_timer+0x1d2>
				number_write(1,85,slot_tracker);
			}

		}else if(which_button == 4){
     c66:	84 30       	cpi	r24, 0x04	; 4
     c68:	81 f4       	brne	.+32     	; 0xc8a <study_timer+0x1de>
			if(slot_tracker == 3){
     c6a:	83 e0       	ldi	r24, 0x03	; 3
     c6c:	f8 16       	cp	r15, r24
     c6e:	31 f4       	brne	.+12     	; 0xc7c <study_timer+0x1d0>
				slot_tracker = 1 ;
				number_write(1,85,slot_tracker);
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	65 e5       	ldi	r22, 0x55	; 85
     c74:	41 e0       	ldi	r20, 0x01	; 1
     c76:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
     c7a:	e3 cf       	rjmp	.-58     	; 0xc42 <study_timer+0x196>
			}else{
				slot_tracker++ ;
     c7c:	f3 94       	inc	r15
				number_write(1,85,slot_tracker);
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	65 e5       	ldi	r22, 0x55	; 85
     c82:	4f 2d       	mov	r20, r15
     c84:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
     c88:	de cf       	rjmp	.-68     	; 0xc46 <study_timer+0x19a>
			}
		}

	}while(which_button != 5);
     c8a:	85 30       	cpi	r24, 0x05	; 5
     c8c:	e1 f6       	brne	.-72     	; 0xc46 <study_timer+0x19a>



	/******************************************/
	//here we will black entire screen and print a studying motive and then start the timer.
	black_entire_screen();
     c8e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <black_entire_screen>

	//keep going
	letter_write(7,1,10);
     c92:	87 e0       	ldi	r24, 0x07	; 7
     c94:	61 e0       	ldi	r22, 0x01	; 1
     c96:	4a e0       	ldi	r20, 0x0A	; 10
     c98:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,8,4);
     c9c:	87 e0       	ldi	r24, 0x07	; 7
     c9e:	68 e0       	ldi	r22, 0x08	; 8
     ca0:	44 e0       	ldi	r20, 0x04	; 4
     ca2:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,15,4);
     ca6:	87 e0       	ldi	r24, 0x07	; 7
     ca8:	6f e0       	ldi	r22, 0x0F	; 15
     caa:	44 e0       	ldi	r20, 0x04	; 4
     cac:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,22,15);
     cb0:	87 e0       	ldi	r24, 0x07	; 7
     cb2:	66 e1       	ldi	r22, 0x16	; 22
     cb4:	4f e0       	ldi	r20, 0x0F	; 15
     cb6:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>

	letter_write(7,36,6);
     cba:	87 e0       	ldi	r24, 0x07	; 7
     cbc:	64 e2       	ldi	r22, 0x24	; 36
     cbe:	46 e0       	ldi	r20, 0x06	; 6
     cc0:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,43,14);
     cc4:	87 e0       	ldi	r24, 0x07	; 7
     cc6:	6b e2       	ldi	r22, 0x2B	; 43
     cc8:	4e e0       	ldi	r20, 0x0E	; 14
     cca:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,50,8);
     cce:	87 e0       	ldi	r24, 0x07	; 7
     cd0:	62 e3       	ldi	r22, 0x32	; 50
     cd2:	48 e0       	ldi	r20, 0x08	; 8
     cd4:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,57,13);
     cd8:	87 e0       	ldi	r24, 0x07	; 7
     cda:	69 e3       	ldi	r22, 0x39	; 57
     cdc:	4d e0       	ldi	r20, 0x0D	; 13
     cde:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,64,6);
     ce2:	87 e0       	ldi	r24, 0x07	; 7
     ce4:	60 e4       	ldi	r22, 0x40	; 64
     ce6:	46 e0       	ldi	r20, 0x06	; 6
     ce8:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>

	//print start min
	double_digit_write(4,48,timer_tracker);
     cec:	84 e0       	ldi	r24, 0x04	; 4
     cee:	60 e3       	ldi	r22, 0x30	; 48
     cf0:	41 2f       	mov	r20, r17
     cf2:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
	//writing min beside 00
	letter_write(4,69,12);
     cf6:	84 e0       	ldi	r24, 0x04	; 4
     cf8:	65 e4       	ldi	r22, 0x45	; 69
     cfa:	4c e0       	ldi	r20, 0x0C	; 12
     cfc:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(4,76,8);
     d00:	84 e0       	ldi	r24, 0x04	; 4
     d02:	6c e4       	ldi	r22, 0x4C	; 76
     d04:	48 e0       	ldi	r20, 0x08	; 8
     d06:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(4,83,13);
     d0a:	84 e0       	ldi	r24, 0x04	; 4
     d0c:	63 e5       	ldi	r22, 0x53	; 83
     d0e:	4d e0       	ldi	r20, 0x0D	; 13
     d10:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>

	//drawing the underline
	setColumnAddress(48,62);
     d14:	80 e3       	ldi	r24, 0x30	; 48
     d16:	6e e3       	ldi	r22, 0x3E	; 62
     d18:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <setColumnAddress>
	setPageAddress(2,7);
     d1c:	82 e0       	ldi	r24, 0x02	; 2
     d1e:	67 e0       	ldi	r22, 0x07	; 7
     d20:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <setPageAddress>
	I2C_Start(oled_write_address);
     d24:	8a e7       	ldi	r24, 0x7A	; 122
     d26:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
	I2C_Write(CONTROL_DATA);
     d2a:	80 e4       	ldi	r24, 0x40	; 64
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
     d32:	00 e0       	ldi	r16, 0x00	; 0
	for(uint8 i = 0 ; i < 14 ; i++){
		I2C_Write(0xC0);
     d34:	80 ec       	ldi	r24, 0xC0	; 192
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
	//drawing the underline
	setColumnAddress(48,62);
	setPageAddress(2,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(uint8 i = 0 ; i < 14 ; i++){
     d3c:	0f 5f       	subi	r16, 0xFF	; 255
     d3e:	0e 30       	cpi	r16, 0x0E	; 14
     d40:	c9 f7       	brne	.-14     	; 0xd34 <study_timer+0x288>
		I2C_Write(0xC0);
	}
	I2C_Stop();
     d42:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>
     d46:	08 c0       	rjmp	.+16     	; 0xd58 <study_timer+0x2ac>
	//5) store in minutes ---> whole_minutes % 60


	uint8 studied_mins = 0 ;
	while(timer_tracker ){
		minute_delay();
     d48:	0e 94 4b 14 	call	0x2896	; 0x2896 <minute_delay>
		studied_mins++ ;
		timer_tracker--;
     d4c:	11 50       	subi	r17, 0x01	; 1
		double_digit_write(4,48,timer_tracker);
     d4e:	84 e0       	ldi	r24, 0x04	; 4
     d50:	60 e3       	ldi	r22, 0x30	; 48
     d52:	41 2f       	mov	r20, r17
     d54:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
	//4) whole_minute / 60 --> add this value to the hours
	//5) store in minutes ---> whole_minutes % 60


	uint8 studied_mins = 0 ;
	while(timer_tracker ){
     d58:	11 23       	and	r17, r17
     d5a:	b1 f7       	brne	.-20     	; 0xd48 <study_timer+0x29c>

	uint8 targeted_address = 0 ;
	uint8 mem_page_address_read = 0 ;
	uint8 mem_page_address_write = 0 ;

	if(slot_tracker == 1){
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	f8 16       	cp	r15, r24
     d60:	19 f4       	brne	.+6      	; 0xd68 <study_timer+0x2bc>
     d62:	2e ef       	ldi	r18, 0xFE	; 254
     d64:	d2 2e       	mov	r13, r18
     d66:	05 c0       	rjmp	.+10     	; 0xd72 <study_timer+0x2c6>
		targeted_address = 0xFE ;
		mem_page_address_write = 0b10101010 ;
		mem_page_address_read = 0b10101011 ;
	}else if(slot_tracker == 2){
     d68:	82 e0       	ldi	r24, 0x02	; 2
     d6a:	f8 16       	cp	r15, r24
     d6c:	31 f4       	brne	.+12     	; 0xd7a <study_timer+0x2ce>
     d6e:	dd 24       	eor	r13, r13
     d70:	da 94       	dec	r13
     d72:	0b ea       	ldi	r16, 0xAB	; 171
     d74:	9a ea       	ldi	r25, 0xAA	; 170
     d76:	e9 2e       	mov	r14, r25
     d78:	0b c0       	rjmp	.+22     	; 0xd90 <study_timer+0x2e4>
		targeted_address = 0xFF ;
		mem_page_address_write = 0b10101010 ;
		mem_page_address_read = 0b10101011 ;
	}else if(slot_tracker == 3){
     d7a:	83 e0       	ldi	r24, 0x03	; 3
     d7c:	f8 16       	cp	r15, r24
     d7e:	29 f4       	brne	.+10     	; 0xd8a <study_timer+0x2de>
     d80:	dd 24       	eor	r13, r13
     d82:	0d ea       	ldi	r16, 0xAD	; 173
     d84:	8c ea       	ldi	r24, 0xAC	; 172
     d86:	e8 2e       	mov	r14, r24
     d88:	03 c0       	rjmp	.+6      	; 0xd90 <study_timer+0x2e4>
     d8a:	dd 24       	eor	r13, r13
     d8c:	00 e0       	ldi	r16, 0x00	; 0
     d8e:	ee 24       	eor	r14, r14
		mem_page_address_write = 0b10101100 ;
		mem_page_address_read = 0b10101101 ;
	}

	//now read from the memory
	I2C_Init();
     d90:	0e 94 13 11 	call	0x2226	; 0x2226 <I2C_Init>
	I2C_Start(mem_page_address_write);
     d94:	8e 2d       	mov	r24, r14
     d96:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
	I2C_Write(targeted_address);
     d9a:	8d 2d       	mov	r24, r13
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
	I2C_Repeated_Start(mem_page_address_read);
     da2:	80 2f       	mov	r24, r16
     da4:	0e 94 34 11 	call	0x2268	; 0x2268 <I2C_Repeated_Start>
	uint8 slot_val = I2C_Read_NACK();
     da8:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <I2C_Read_NACK>
     dac:	08 2f       	mov	r16, r24
	I2C_Stop();
     dae:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>

	//now make operation on the slot_val
	uint8 mins_holder = ((slot_val & 0b00011111) + studied_mins ) % 60 ;
     db2:	10 e0       	ldi	r17, 0x00	; 0
     db4:	2c 2d       	mov	r18, r12
     db6:	30 e0       	ldi	r19, 0x00	; 0
	uint8 hours_holder = ((slot_val & 0b11100000) + studied_mins ) / 60 ;
	slot_val = hours_holder | mins_holder ;
     db8:	c8 01       	movw	r24, r16
     dba:	80 7e       	andi	r24, 0xE0	; 224
     dbc:	90 70       	andi	r25, 0x00	; 0
     dbe:	82 0f       	add	r24, r18
     dc0:	93 1f       	adc	r25, r19
     dc2:	6c e3       	ldi	r22, 0x3C	; 60
     dc4:	70 e0       	ldi	r23, 0x00	; 0
     dc6:	0e 94 40 17 	call	0x2e80	; 0x2e80 <__divmodhi4>
     dca:	f6 2e       	mov	r15, r22
     dcc:	0f 71       	andi	r16, 0x1F	; 31
     dce:	10 70       	andi	r17, 0x00	; 0
     dd0:	c9 01       	movw	r24, r18
     dd2:	80 0f       	add	r24, r16
     dd4:	91 1f       	adc	r25, r17
     dd6:	6c e3       	ldi	r22, 0x3C	; 60
     dd8:	70 e0       	ldi	r23, 0x00	; 0
     dda:	0e 94 40 17 	call	0x2e80	; 0x2e80 <__divmodhi4>
     dde:	f8 2a       	or	r15, r24

	UART_Init();
     de0:	0e 94 a3 14 	call	0x2946	; 0x2946 <UART_Init>
	UART_Tx(slot_val);
     de4:	8f 2d       	mov	r24, r15
     de6:	0e 94 8e 14 	call	0x291c	; 0x291c <UART_Tx>

	//now send it again to the memory
	I2C_Init();
     dea:	0e 94 13 11 	call	0x2226	; 0x2226 <I2C_Init>
	I2C_Start(mem_page_address_write);
     dee:	8e 2d       	mov	r24, r14
     df0:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
	I2C_Write(targeted_address);
     df4:	8d 2d       	mov	r24, r13
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
	I2C_Write(slot_val);
     dfc:	8f 2d       	mov	r24, r15
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
	I2C_Stop();
     e04:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>


	//session finished
	return 1 ;

}
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	1f 91       	pop	r17
     e0c:	0f 91       	pop	r16
     e0e:	ff 90       	pop	r15
     e10:	ef 90       	pop	r14
     e12:	df 90       	pop	r13
     e14:	cf 90       	pop	r12
     e16:	08 95       	ret

00000e18 <live_clock>:
	uint8 tens = (bcd >> 4) * 10 ;
	tens = tens + (bcd & 0b00001111) ;
	return tens ;
}
/*********************************************************************/
uint8 live_clock(void){
     e18:	2f 92       	push	r2
     e1a:	3f 92       	push	r3
     e1c:	4f 92       	push	r4
     e1e:	5f 92       	push	r5
     e20:	6f 92       	push	r6
     e22:	7f 92       	push	r7
     e24:	8f 92       	push	r8
     e26:	9f 92       	push	r9
     e28:	af 92       	push	r10
     e2a:	bf 92       	push	r11
     e2c:	cf 92       	push	r12
     e2e:	df 92       	push	r13
     e30:	ef 92       	push	r14
     e32:	ff 92       	push	r15
     e34:	0f 93       	push	r16
     e36:	1f 93       	push	r17
     e38:	df 93       	push	r29
     e3a:	cf 93       	push	r28
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62
     e40:	29 97       	sbiw	r28, 0x09	; 9
     e42:	0f b6       	in	r0, 0x3f	; 63
     e44:	f8 94       	cli
     e46:	de bf       	out	0x3e, r29	; 62
     e48:	0f be       	out	0x3f, r0	; 63
     e4a:	cd bf       	out	0x3d, r28	; 61

	black_entire_screen();
     e4c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <black_entire_screen>
	//making struct object to hold the data coming from the RTC
	CLOCK_DATA CLOCK_HOLDER_NEW , CLOCK_HOLDER_OLD;
	DATE_DATA DATE_HOLDER_NEW , DATE_HOLDER_OLD;

	//for storing data for the first comparison
	CLOCK_HOLDER_OLD = CLOCK_HOLDER_NEW;
     e50:	4c 80       	ldd	r4, Y+4	; 0x04
     e52:	2a 80       	ldd	r2, Y+2	; 0x02
     e54:	bb 80       	ldd	r11, Y+3	; 0x03
	RTC_CLOCK_Read(0x00,&CLOCK_HOLDER_NEW);
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	be 01       	movw	r22, r28
     e5a:	6f 5f       	subi	r22, 0xFF	; 255
     e5c:	7f 4f       	sbci	r23, 0xFF	; 255
     e5e:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <RTC_CLOCK_Read>
	RTC_DATE_Read(0x03,&DATE_HOLDER_NEW);
     e62:	83 e0       	ldi	r24, 0x03	; 3
     e64:	be 01       	movw	r22, r28
     e66:	6b 5f       	subi	r22, 0xFB	; 251
     e68:	7f 4f       	sbci	r23, 0xFF	; 255
     e6a:	0e 94 b4 14 	call	0x2968	; 0x2968 <RTC_DATE_Read>

	//to mask the clock bits only and remove PM/AM and 24/12 hour format bits.
	CLOCK_HOLDER_NEW.hours &= 0b00011111 ;
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	48 2f       	mov	r20, r24
     e72:	4f 71       	andi	r20, 0x1F	; 31
     e74:	4b 83       	std	Y+3, r20	; 0x03
	}
	return 1 ;
}
/*********************************************************************/
uint8 bcd_to_dec(uint8 bcd){
	uint8 tens = (bcd >> 4) * 10 ;
     e76:	42 95       	swap	r20
     e78:	4f 70       	andi	r20, 0x0F	; 15
     e7a:	9a e0       	ldi	r25, 0x0A	; 10
     e7c:	49 9f       	mul	r20, r25
     e7e:	40 2d       	mov	r20, r0
     e80:	11 24       	eor	r1, r1

	//to mask the clock bits only and remove PM/AM and 24/12 hour format bits.
	CLOCK_HOLDER_NEW.hours &= 0b00011111 ;

	//Printing current time
	double_digit_write(5, 41, bcd_to_dec(CLOCK_HOLDER_NEW.hours));
     e82:	8f 70       	andi	r24, 0x0F	; 15
     e84:	48 0f       	add	r20, r24
     e86:	85 e0       	ldi	r24, 0x05	; 5
     e88:	69 e2       	ldi	r22, 0x29	; 41
     e8a:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>

	//Printing :
	setColumnAddress(55,128);
     e8e:	87 e3       	ldi	r24, 0x37	; 55
     e90:	60 e8       	ldi	r22, 0x80	; 128
     e92:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <setColumnAddress>
	setPageAddress(5,7);
     e96:	85 e0       	ldi	r24, 0x05	; 5
     e98:	67 e0       	ldi	r22, 0x07	; 7
     e9a:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <setPageAddress>
	I2C_Start(oled_write_address);
     e9e:	8a e7       	ldi	r24, 0x7A	; 122
     ea0:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
	I2C_Write(CONTROL_DATA);
     ea4:	80 e4       	ldi	r24, 0x40	; 64
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
     eac:	0b e7       	ldi	r16, 0x7B	; 123
     eae:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8 i = 0 ; i < 7 ;i++){
		I2C_Write(double_dot_bitmap[i]);
     eb0:	f8 01       	movw	r30, r16
     eb2:	81 91       	ld	r24, Z+
     eb4:	8f 01       	movw	r16, r30
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
	//Printing :
	setColumnAddress(55,128);
	setPageAddress(5,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(uint8 i = 0 ; i < 7 ;i++){
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	02 38       	cpi	r16, 0x82	; 130
     ec0:	1f 07       	cpc	r17, r31
     ec2:	b1 f7       	brne	.-20     	; 0xeb0 <live_clock+0x98>
		I2C_Write(double_dot_bitmap[i]);
	}
	I2C_Stop();
     ec4:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>

	setColumnAddress(55,128);
     ec8:	87 e3       	ldi	r24, 0x37	; 55
     eca:	60 e8       	ldi	r22, 0x80	; 128
     ecc:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <setColumnAddress>
	setPageAddress(4,7);
     ed0:	84 e0       	ldi	r24, 0x04	; 4
     ed2:	67 e0       	ldi	r22, 0x07	; 7
     ed4:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <setPageAddress>
	I2C_Start(oled_write_address);
     ed8:	8a e7       	ldi	r24, 0x7A	; 122
     eda:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
	I2C_Write(CONTROL_DATA);
     ede:	80 e4       	ldi	r24, 0x40	; 64
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
	for(uint8 i = 7 ; i < 14 ; i++){
		I2C_Write(double_dot_bitmap[i]);
     ee6:	f8 01       	movw	r30, r16
     ee8:	81 91       	ld	r24, Z+
     eea:	8f 01       	movw	r16, r30
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>

	setColumnAddress(55,128);
	setPageAddress(4,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(uint8 i = 7 ; i < 14 ; i++){
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	09 38       	cpi	r16, 0x89	; 137
     ef6:	1f 07       	cpc	r17, r31
     ef8:	b1 f7       	brne	.-20     	; 0xee6 <live_clock+0xce>
		I2C_Write(double_dot_bitmap[i]);
	}
	I2C_Stop();
     efa:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>

	double_digit_write(5 ,62 ,bcd_to_dec(CLOCK_HOLDER_NEW.minutes));
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
	}
	return 1 ;
}
/*********************************************************************/
uint8 bcd_to_dec(uint8 bcd){
	uint8 tens = (bcd >> 4) * 10 ;
     f00:	48 2f       	mov	r20, r24
     f02:	42 95       	swap	r20
     f04:	4f 70       	andi	r20, 0x0F	; 15
     f06:	9a e0       	ldi	r25, 0x0A	; 10
     f08:	49 9f       	mul	r20, r25
     f0a:	40 2d       	mov	r20, r0
     f0c:	11 24       	eor	r1, r1
	for(uint8 i = 7 ; i < 14 ; i++){
		I2C_Write(double_dot_bitmap[i]);
	}
	I2C_Stop();

	double_digit_write(5 ,62 ,bcd_to_dec(CLOCK_HOLDER_NEW.minutes));
     f0e:	8f 70       	andi	r24, 0x0F	; 15
     f10:	48 0f       	add	r20, r24
     f12:	85 e0       	ldi	r24, 0x05	; 5
     f14:	6e e3       	ldi	r22, 0x3E	; 62
     f16:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>

	//writing pm or am
	if(CLOCK_HOLDER_NEW.am_pm){
     f1a:	8c 81       	ldd	r24, Y+4	; 0x04
     f1c:	88 23       	and	r24, r24
     f1e:	21 f0       	breq	.+8      	; 0xf28 <live_clock+0x110>
		//this means that we are pm
		letter_write(5,76,15);
     f20:	85 e0       	ldi	r24, 0x05	; 5
     f22:	6c e4       	ldi	r22, 0x4C	; 76
     f24:	4f e0       	ldi	r20, 0x0F	; 15
     f26:	03 c0       	rjmp	.+6      	; 0xf2e <live_clock+0x116>
		letter_write(5,83,12);
	}else if(CLOCK_HOLDER_NEW.am_pm == 0){
		letter_write(5,76,0);
     f28:	85 e0       	ldi	r24, 0x05	; 5
     f2a:	6c e4       	ldi	r22, 0x4C	; 76
     f2c:	40 e0       	ldi	r20, 0x00	; 0
     f2e:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
		letter_write(5,83,12);
     f32:	85 e0       	ldi	r24, 0x05	; 5
     f34:	63 e5       	ldi	r22, 0x53	; 83
     f36:	4c e0       	ldi	r20, 0x0C	; 12
     f38:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	}

	//writing the day from date
	double_digit_write(2,20,bcd_to_dec(DATE_HOLDER_NEW.date));
     f3c:	8e 81       	ldd	r24, Y+6	; 0x06
	}
	return 1 ;
}
/*********************************************************************/
uint8 bcd_to_dec(uint8 bcd){
	uint8 tens = (bcd >> 4) * 10 ;
     f3e:	48 2f       	mov	r20, r24
     f40:	42 95       	swap	r20
     f42:	4f 70       	andi	r20, 0x0F	; 15
     f44:	9a e0       	ldi	r25, 0x0A	; 10
     f46:	49 9f       	mul	r20, r25
     f48:	40 2d       	mov	r20, r0
     f4a:	11 24       	eor	r1, r1
		letter_write(5,76,0);
		letter_write(5,83,12);
	}

	//writing the day from date
	double_digit_write(2,20,bcd_to_dec(DATE_HOLDER_NEW.date));
     f4c:	8f 70       	andi	r24, 0x0F	; 15
     f4e:	48 0f       	add	r20, r24
     f50:	82 e0       	ldi	r24, 0x02	; 2
     f52:	64 e1       	ldi	r22, 0x14	; 20
     f54:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>


	//Printing -
	setColumnAddress(34,128);
     f58:	82 e2       	ldi	r24, 0x22	; 34
     f5a:	60 e8       	ldi	r22, 0x80	; 128
     f5c:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <setColumnAddress>
	setPageAddress(2,7);
     f60:	82 e0       	ldi	r24, 0x02	; 2
     f62:	67 e0       	ldi	r22, 0x07	; 7
     f64:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <setPageAddress>
	I2C_Start(oled_write_address);
     f68:	8a e7       	ldi	r24, 0x7A	; 122
     f6a:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
	I2C_Write(CONTROL_DATA);
     f6e:	80 e4       	ldi	r24, 0x40	; 64
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
     f76:	59 e8       	ldi	r21, 0x89	; 137
     f78:	c5 2e       	mov	r12, r21
     f7a:	50 e0       	ldi	r21, 0x00	; 0
     f7c:	d5 2e       	mov	r13, r21
     f7e:	86 01       	movw	r16, r12
	for(uint8 i = 0 ; i < 7 ;i++){
		I2C_Write(dash_bitmap[i]);
     f80:	f8 01       	movw	r30, r16
     f82:	81 91       	ld	r24, Z+
     f84:	8f 01       	movw	r16, r30
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
	//Printing -
	setColumnAddress(34,128);
	setPageAddress(2,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(uint8 i = 0 ; i < 7 ;i++){
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	00 39       	cpi	r16, 0x90	; 144
     f90:	1f 07       	cpc	r17, r31
     f92:	b1 f7       	brne	.-20     	; 0xf80 <live_clock+0x168>
		I2C_Write(dash_bitmap[i]);
	}
	I2C_Stop();
     f94:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>

	setColumnAddress(34,128);
     f98:	82 e2       	ldi	r24, 0x22	; 34
     f9a:	60 e8       	ldi	r22, 0x80	; 128
     f9c:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <setColumnAddress>
	setPageAddress(1,7);
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	67 e0       	ldi	r22, 0x07	; 7
     fa4:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <setPageAddress>
	I2C_Start(oled_write_address);
     fa8:	8a e7       	ldi	r24, 0x7A	; 122
     faa:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
	I2C_Write(CONTROL_DATA);
     fae:	80 e4       	ldi	r24, 0x40	; 64
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
     fb6:	78 01       	movw	r14, r16
	for(uint8 i = 7 ; i < 14 ; i++){
		I2C_Write(dash_bitmap[i]);
     fb8:	f8 01       	movw	r30, r16
     fba:	81 91       	ld	r24, Z+
     fbc:	8f 01       	movw	r16, r30
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>

	setColumnAddress(34,128);
	setPageAddress(1,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(uint8 i = 7 ; i < 14 ; i++){
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	07 39       	cpi	r16, 0x97	; 151
     fc8:	1f 07       	cpc	r17, r31
     fca:	b1 f7       	brne	.-20     	; 0xfb8 <live_clock+0x1a0>
		I2C_Write(dash_bitmap[i]);
	}
	I2C_Stop();
     fcc:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>

	//writing the month
	double_digit_write(2, 41, bcd_to_dec(DATE_HOLDER_NEW.month));
     fd0:	8f 81       	ldd	r24, Y+7	; 0x07
	}
	return 1 ;
}
/*********************************************************************/
uint8 bcd_to_dec(uint8 bcd){
	uint8 tens = (bcd >> 4) * 10 ;
     fd2:	48 2f       	mov	r20, r24
     fd4:	42 95       	swap	r20
     fd6:	4f 70       	andi	r20, 0x0F	; 15
     fd8:	9a e0       	ldi	r25, 0x0A	; 10
     fda:	49 9f       	mul	r20, r25
     fdc:	40 2d       	mov	r20, r0
     fde:	11 24       	eor	r1, r1
		I2C_Write(dash_bitmap[i]);
	}
	I2C_Stop();

	//writing the month
	double_digit_write(2, 41, bcd_to_dec(DATE_HOLDER_NEW.month));
     fe0:	8f 70       	andi	r24, 0x0F	; 15
     fe2:	48 0f       	add	r20, r24
     fe4:	82 e0       	ldi	r24, 0x02	; 2
     fe6:	69 e2       	ldi	r22, 0x29	; 41
     fe8:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>

	//Printing -
	setColumnAddress(55,128);
     fec:	87 e3       	ldi	r24, 0x37	; 55
     fee:	60 e8       	ldi	r22, 0x80	; 128
     ff0:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <setColumnAddress>
	setPageAddress(2,7);
     ff4:	82 e0       	ldi	r24, 0x02	; 2
     ff6:	67 e0       	ldi	r22, 0x07	; 7
     ff8:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <setPageAddress>
	I2C_Start(oled_write_address);
     ffc:	8a e7       	ldi	r24, 0x7A	; 122
     ffe:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
	I2C_Write(CONTROL_DATA);
    1002:	80 e4       	ldi	r24, 0x40	; 64
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
	for(uint8 i = 0 ; i < 7 ;i++){
		I2C_Write(dash_bitmap[i]);
    100a:	f6 01       	movw	r30, r12
    100c:	81 91       	ld	r24, Z+
    100e:	6f 01       	movw	r12, r30
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
	//Printing -
	setColumnAddress(55,128);
	setPageAddress(2,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(uint8 i = 0 ; i < 7 ;i++){
    1016:	f0 e9       	ldi	r31, 0x90	; 144
    1018:	cf 16       	cp	r12, r31
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	df 06       	cpc	r13, r31
    101e:	a9 f7       	brne	.-22     	; 0x100a <live_clock+0x1f2>
		I2C_Write(dash_bitmap[i]);
	}
	I2C_Stop();
    1020:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>

	setColumnAddress(55,128);
    1024:	87 e3       	ldi	r24, 0x37	; 55
    1026:	60 e8       	ldi	r22, 0x80	; 128
    1028:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <setColumnAddress>
	setPageAddress(1,7);
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	67 e0       	ldi	r22, 0x07	; 7
    1030:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <setPageAddress>
	I2C_Start(oled_write_address);
    1034:	8a e7       	ldi	r24, 0x7A	; 122
    1036:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
	I2C_Write(CONTROL_DATA);
    103a:	80 e4       	ldi	r24, 0x40	; 64
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
	for(uint8 i = 7 ; i < 14 ; i++){
		I2C_Write(dash_bitmap[i]);
    1042:	f7 01       	movw	r30, r14
    1044:	81 91       	ld	r24, Z+
    1046:	7f 01       	movw	r14, r30
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>

	setColumnAddress(55,128);
	setPageAddress(1,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(uint8 i = 7 ; i < 14 ; i++){
    104e:	f7 e9       	ldi	r31, 0x97	; 151
    1050:	ef 16       	cp	r14, r31
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	ff 06       	cpc	r15, r31
    1056:	a9 f7       	brne	.-22     	; 0x1042 <live_clock+0x22a>
		I2C_Write(dash_bitmap[i]);
	}
	I2C_Stop();
    1058:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>

	//writing the thousand index 2 in 2023
	number_write(2,62,2);
    105c:	82 e0       	ldi	r24, 0x02	; 2
    105e:	6e e3       	ldi	r22, 0x3E	; 62
    1060:	42 e0       	ldi	r20, 0x02	; 2
    1062:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
	triple_digit_write(2, 69, bcd_to_dec(DATE_HOLDER_NEW.year));
    1066:	88 85       	ldd	r24, Y+8	; 0x08
	}
	return 1 ;
}
/*********************************************************************/
uint8 bcd_to_dec(uint8 bcd){
	uint8 tens = (bcd >> 4) * 10 ;
    1068:	48 2f       	mov	r20, r24
    106a:	42 95       	swap	r20
    106c:	4f 70       	andi	r20, 0x0F	; 15
    106e:	9a e0       	ldi	r25, 0x0A	; 10
    1070:	49 9f       	mul	r20, r25
    1072:	40 2d       	mov	r20, r0
    1074:	11 24       	eor	r1, r1
	}
	I2C_Stop();

	//writing the thousand index 2 in 2023
	number_write(2,62,2);
	triple_digit_write(2, 69, bcd_to_dec(DATE_HOLDER_NEW.year));
    1076:	8f 70       	andi	r24, 0x0F	; 15
    1078:	48 0f       	add	r20, r24
    107a:	82 e0       	ldi	r24, 0x02	; 2
    107c:	65 e4       	ldi	r22, 0x45	; 69
    107e:	50 e0       	ldi	r21, 0x00	; 0
    1080:	0e 94 be 04 	call	0x97c	; 0x97c <triple_digit_write>

	//printing the day
	day_name_print(DATE_HOLDER_NEW.day - 1 , days);
    1084:	8d 81       	ldd	r24, Y+5	; 0x05
    1086:	81 50       	subi	r24, 0x01	; 1
    1088:	66 e6       	ldi	r22, 0x66	; 102
    108a:	70 e0       	ldi	r23, 0x00	; 0
    108c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <day_name_print>
	}
	return 1 ;
}
/*********************************************************************/
uint8 bcd_to_dec(uint8 bcd){
	uint8 tens = (bcd >> 4) * 10 ;
    1090:	4a e0       	ldi	r20, 0x0A	; 10
    1092:	a4 2e       	mov	r10, r20



	uint8 which_button = 0 ;
	do{
		which_button = button_check();
    1094:	0e 94 18 05 	call	0xa30	; 0xa30 <button_check>
    1098:	38 2e       	mov	r3, r24

		//now checking and reading time
		RTC_CLOCK_Read(0x00,&CLOCK_HOLDER_NEW);
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	be 01       	movw	r22, r28
    109e:	6f 5f       	subi	r22, 0xFF	; 255
    10a0:	7f 4f       	sbci	r23, 0xFF	; 255
    10a2:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <RTC_CLOCK_Read>
		if(CLOCK_HOLDER_NEW.hours != CLOCK_HOLDER_OLD.hours){
    10a6:	cb 80       	ldd	r12, Y+3	; 0x03
    10a8:	cb 14       	cp	r12, r11
    10aa:	81 f0       	breq	.+32     	; 0x10cc <live_clock+0x2b4>
			CLOCK_HOLDER_NEW.hours &= 0b00011111 ;
    10ac:	8f e1       	ldi	r24, 0x1F	; 31
    10ae:	c8 22       	and	r12, r24
    10b0:	cb 82       	std	Y+3, r12	; 0x03
	}
	return 1 ;
}
/*********************************************************************/
uint8 bcd_to_dec(uint8 bcd){
	uint8 tens = (bcd >> 4) * 10 ;
    10b2:	4c 2d       	mov	r20, r12
    10b4:	42 95       	swap	r20
    10b6:	4f 70       	andi	r20, 0x0F	; 15
    10b8:	4a 9d       	mul	r20, r10
    10ba:	40 2d       	mov	r20, r0
    10bc:	11 24       	eor	r1, r1
		//now checking and reading time
		RTC_CLOCK_Read(0x00,&CLOCK_HOLDER_NEW);
		if(CLOCK_HOLDER_NEW.hours != CLOCK_HOLDER_OLD.hours){
			CLOCK_HOLDER_NEW.hours &= 0b00011111 ;
			CLOCK_HOLDER_OLD.hours = CLOCK_HOLDER_NEW.hours;
			double_digit_write(5, 41, bcd_to_dec(CLOCK_HOLDER_OLD.hours));
    10be:	8c 2d       	mov	r24, r12
    10c0:	8f 70       	andi	r24, 0x0F	; 15
    10c2:	48 0f       	add	r20, r24
    10c4:	85 e0       	ldi	r24, 0x05	; 5
    10c6:	69 e2       	ldi	r22, 0x29	; 41
    10c8:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
		}

		if(CLOCK_HOLDER_NEW.minutes != CLOCK_HOLDER_OLD.minutes){
    10cc:	ba 80       	ldd	r11, Y+2	; 0x02
    10ce:	b2 14       	cp	r11, r2
    10d0:	69 f0       	breq	.+26     	; 0x10ec <live_clock+0x2d4>
	}
	return 1 ;
}
/*********************************************************************/
uint8 bcd_to_dec(uint8 bcd){
	uint8 tens = (bcd >> 4) * 10 ;
    10d2:	4b 2d       	mov	r20, r11
    10d4:	42 95       	swap	r20
    10d6:	4f 70       	andi	r20, 0x0F	; 15
    10d8:	4a 9d       	mul	r20, r10
    10da:	40 2d       	mov	r20, r0
    10dc:	11 24       	eor	r1, r1
			double_digit_write(5, 41, bcd_to_dec(CLOCK_HOLDER_OLD.hours));
		}

		if(CLOCK_HOLDER_NEW.minutes != CLOCK_HOLDER_OLD.minutes){
			CLOCK_HOLDER_OLD.minutes = CLOCK_HOLDER_NEW.minutes ;
			double_digit_write(5, 62, bcd_to_dec(CLOCK_HOLDER_OLD.minutes));
    10de:	8b 2d       	mov	r24, r11
    10e0:	8f 70       	andi	r24, 0x0F	; 15
    10e2:	48 0f       	add	r20, r24
    10e4:	85 e0       	ldi	r24, 0x05	; 5
    10e6:	6e e3       	ldi	r22, 0x3E	; 62
    10e8:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
		}

		if(CLOCK_HOLDER_NEW.am_pm != CLOCK_HOLDER_OLD.am_pm){
    10ec:	1c 81       	ldd	r17, Y+4	; 0x04
    10ee:	14 15       	cp	r17, r4
    10f0:	c9 f0       	breq	.+50     	; 0x1124 <live_clock+0x30c>
			CLOCK_HOLDER_OLD.am_pm = CLOCK_HOLDER_NEW.am_pm ;
			//writing pm or am
			if(CLOCK_HOLDER_OLD.am_pm){
    10f2:	11 23       	and	r17, r17
    10f4:	61 f0       	breq	.+24     	; 0x110e <live_clock+0x2f6>
				//this means that we are pm
				letter_write(5,76,15);
    10f6:	85 e0       	ldi	r24, 0x05	; 5
    10f8:	6c e4       	ldi	r22, 0x4C	; 76
    10fa:	4f e0       	ldi	r20, 0x0F	; 15
    10fc:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
				letter_write(5,83,12);
    1100:	85 e0       	ldi	r24, 0x05	; 5
    1102:	63 e5       	ldi	r22, 0x53	; 83
    1104:	4c e0       	ldi	r20, 0x0C	; 12
    1106:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
    110a:	41 2e       	mov	r4, r17
    110c:	0b c0       	rjmp	.+22     	; 0x1124 <live_clock+0x30c>
			}else if(CLOCK_HOLDER_OLD.am_pm == 0){
				letter_write(5,76,0);
    110e:	85 e0       	ldi	r24, 0x05	; 5
    1110:	6c e4       	ldi	r22, 0x4C	; 76
    1112:	40 e0       	ldi	r20, 0x00	; 0
    1114:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
				letter_write(5,83,12);
    1118:	85 e0       	ldi	r24, 0x05	; 5
    111a:	63 e5       	ldi	r22, 0x53	; 83
    111c:	4c e0       	ldi	r20, 0x0C	; 12
    111e:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
    1122:	44 24       	eor	r4, r4
		}



		//now checking and reading date
		RTC_DATE_Read(0x03,&DATE_HOLDER_NEW);
    1124:	83 e0       	ldi	r24, 0x03	; 3
    1126:	be 01       	movw	r22, r28
    1128:	6b 5f       	subi	r22, 0xFB	; 251
    112a:	7f 4f       	sbci	r23, 0xFF	; 255
    112c:	0e 94 b4 14 	call	0x2968	; 0x2968 <RTC_DATE_Read>

		if(DATE_HOLDER_NEW.date != DATE_HOLDER_OLD.date){
    1130:	de 80       	ldd	r13, Y+6	; 0x06
    1132:	d7 14       	cp	r13, r7
    1134:	21 f4       	brne	.+8      	; 0x113e <live_clock+0x326>
    1136:	f5 2c       	mov	r15, r5
    1138:	84 01       	movw	r16, r8
    113a:	e6 2c       	mov	r14, r6
    113c:	3a c0       	rjmp	.+116    	; 0x11b2 <live_clock+0x39a>
	}
	return 1 ;
}
/*********************************************************************/
uint8 bcd_to_dec(uint8 bcd){
	uint8 tens = (bcd >> 4) * 10 ;
    113e:	4d 2d       	mov	r20, r13
    1140:	42 95       	swap	r20
    1142:	4f 70       	andi	r20, 0x0F	; 15
    1144:	4a 9d       	mul	r20, r10
    1146:	40 2d       	mov	r20, r0
    1148:	11 24       	eor	r1, r1
		//now checking and reading date
		RTC_DATE_Read(0x03,&DATE_HOLDER_NEW);

		if(DATE_HOLDER_NEW.date != DATE_HOLDER_OLD.date){
			DATE_HOLDER_OLD.date = DATE_HOLDER_NEW.date ;
			double_digit_write(2,20,bcd_to_dec(DATE_HOLDER_NEW.date));
    114a:	8d 2d       	mov	r24, r13
    114c:	8f 70       	andi	r24, 0x0F	; 15
    114e:	48 0f       	add	r20, r24
    1150:	82 e0       	ldi	r24, 0x02	; 2
    1152:	64 e1       	ldi	r22, 0x14	; 20
    1154:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>

			if(DATE_HOLDER_NEW.month != DATE_HOLDER_OLD.month){
    1158:	ef 80       	ldd	r14, Y+7	; 0x07
    115a:	e6 14       	cp	r14, r6
    115c:	69 f0       	breq	.+26     	; 0x1178 <live_clock+0x360>
	}
	return 1 ;
}
/*********************************************************************/
uint8 bcd_to_dec(uint8 bcd){
	uint8 tens = (bcd >> 4) * 10 ;
    115e:	4e 2d       	mov	r20, r14
    1160:	42 95       	swap	r20
    1162:	4f 70       	andi	r20, 0x0F	; 15
    1164:	4a 9d       	mul	r20, r10
    1166:	40 2d       	mov	r20, r0
    1168:	11 24       	eor	r1, r1
			DATE_HOLDER_OLD.date = DATE_HOLDER_NEW.date ;
			double_digit_write(2,20,bcd_to_dec(DATE_HOLDER_NEW.date));

			if(DATE_HOLDER_NEW.month != DATE_HOLDER_OLD.month){
				DATE_HOLDER_OLD.month = DATE_HOLDER_NEW.month ;
				double_digit_write(2, 41, bcd_to_dec(DATE_HOLDER_NEW.month));
    116a:	8e 2d       	mov	r24, r14
    116c:	8f 70       	andi	r24, 0x0F	; 15
    116e:	48 0f       	add	r20, r24
    1170:	82 e0       	ldi	r24, 0x02	; 2
    1172:	69 e2       	ldi	r22, 0x29	; 41
    1174:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
			}

			if(DATE_HOLDER_NEW.year != DATE_HOLDER_OLD.year){
    1178:	08 85       	ldd	r16, Y+8	; 0x08
    117a:	19 85       	ldd	r17, Y+9	; 0x09
    117c:	08 15       	cp	r16, r8
    117e:	19 05       	cpc	r17, r9
    1180:	71 f0       	breq	.+28     	; 0x119e <live_clock+0x386>
				DATE_HOLDER_OLD.year = DATE_HOLDER_NEW.year ;
				triple_digit_write(2, 69, bcd_to_dec(DATE_HOLDER_NEW.year));
    1182:	80 2f       	mov	r24, r16
	}
	return 1 ;
}
/*********************************************************************/
uint8 bcd_to_dec(uint8 bcd){
	uint8 tens = (bcd >> 4) * 10 ;
    1184:	40 2f       	mov	r20, r16
    1186:	42 95       	swap	r20
    1188:	4f 70       	andi	r20, 0x0F	; 15
    118a:	4a 9d       	mul	r20, r10
    118c:	40 2d       	mov	r20, r0
    118e:	11 24       	eor	r1, r1
				double_digit_write(2, 41, bcd_to_dec(DATE_HOLDER_NEW.month));
			}

			if(DATE_HOLDER_NEW.year != DATE_HOLDER_OLD.year){
				DATE_HOLDER_OLD.year = DATE_HOLDER_NEW.year ;
				triple_digit_write(2, 69, bcd_to_dec(DATE_HOLDER_NEW.year));
    1190:	8f 70       	andi	r24, 0x0F	; 15
    1192:	48 0f       	add	r20, r24
    1194:	82 e0       	ldi	r24, 0x02	; 2
    1196:	65 e4       	ldi	r22, 0x45	; 69
    1198:	50 e0       	ldi	r21, 0x00	; 0
    119a:	0e 94 be 04 	call	0x97c	; 0x97c <triple_digit_write>
			}

			if(DATE_HOLDER_NEW.day != DATE_HOLDER_OLD.day){
    119e:	fd 80       	ldd	r15, Y+5	; 0x05
    11a0:	f5 14       	cp	r15, r5
    11a2:	31 f0       	breq	.+12     	; 0x11b0 <live_clock+0x398>
				DATE_HOLDER_OLD.day = DATE_HOLDER_NEW.day ;
				day_name_print(DATE_HOLDER_NEW.day - 1 , days);
    11a4:	8f 2d       	mov	r24, r15
    11a6:	81 50       	subi	r24, 0x01	; 1
    11a8:	66 e6       	ldi	r22, 0x66	; 102
    11aa:	70 e0       	ldi	r23, 0x00	; 0
    11ac:	0e 94 71 03 	call	0x6e2	; 0x6e2 <day_name_print>
    11b0:	7d 2c       	mov	r7, r13
			}

		}

	}while(which_button != 5);
    11b2:	e5 e0       	ldi	r30, 0x05	; 5
    11b4:	3e 16       	cp	r3, r30
    11b6:	31 f0       	breq	.+12     	; 0x11c4 <live_clock+0x3ac>
    11b8:	2b 2c       	mov	r2, r11
    11ba:	bc 2c       	mov	r11, r12
    11bc:	5f 2c       	mov	r5, r15
    11be:	48 01       	movw	r8, r16
    11c0:	6e 2c       	mov	r6, r14
    11c2:	68 cf       	rjmp	.-304    	; 0x1094 <live_clock+0x27c>

	return 1;

}
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	29 96       	adiw	r28, 0x09	; 9
    11c8:	0f b6       	in	r0, 0x3f	; 63
    11ca:	f8 94       	cli
    11cc:	de bf       	out	0x3e, r29	; 62
    11ce:	0f be       	out	0x3f, r0	; 63
    11d0:	cd bf       	out	0x3d, r28	; 61
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	1f 91       	pop	r17
    11d8:	0f 91       	pop	r16
    11da:	ff 90       	pop	r15
    11dc:	ef 90       	pop	r14
    11de:	df 90       	pop	r13
    11e0:	cf 90       	pop	r12
    11e2:	bf 90       	pop	r11
    11e4:	af 90       	pop	r10
    11e6:	9f 90       	pop	r9
    11e8:	8f 90       	pop	r8
    11ea:	7f 90       	pop	r7
    11ec:	6f 90       	pop	r6
    11ee:	5f 90       	pop	r5
    11f0:	4f 90       	pop	r4
    11f2:	3f 90       	pop	r3
    11f4:	2f 90       	pop	r2
    11f6:	08 95       	ret

000011f8 <main_menu>:
		status = 0;
	}
}
/*********************************************************************/

uint8 main_menu(void){
    11f8:	0f 93       	push	r16
    11fa:	1f 93       	push	r17

	printing_menu_with_choice();
    11fc:	0e 94 88 03 	call	0x710	; 0x710 <printing_menu_with_choice>
    1200:	11 e0       	ldi	r17, 0x01	; 1
	//now we want to take the buttons input
	uint8 which_button = 0 ;
	uint8 menu_tracker = 1 ; //this means that we will land on the first option on the main menu.
	do{
		which_button = 0 ;
		which_button = button_check();
    1202:	0e 94 18 05 	call	0xa30	; 0xa30 <button_check>

		if(which_button == 3){//here which_button == 3 (we will deal with it as UP direction).
    1206:	83 30       	cpi	r24, 0x03	; 3
    1208:	69 f4       	brne	.+26     	; 0x1224 <main_menu+0x2c>
			if(menu_tracker == 1){
    120a:	11 30       	cpi	r17, 0x01	; 1
    120c:	41 f4       	brne	.+16     	; 0x121e <main_menu+0x26>
				menu_tracker = 3 ;
				color_choice_black(1);
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	0e 94 db 01 	call	0x3b6	; 0x3b6 <color_choice_black>
				color_choice_white(3);
    1214:	83 e0       	ldi	r24, 0x03	; 3
    1216:	0e 94 2f 01 	call	0x25e	; 0x25e <color_choice_white>
    121a:	13 e0       	ldi	r17, 0x03	; 3
    121c:	f2 cf       	rjmp	.-28     	; 0x1202 <main_menu+0xa>
			}else{
				//working fine
				menu_tracker-- ;
    121e:	01 2f       	mov	r16, r17
    1220:	01 50       	subi	r16, 0x01	; 1
    1222:	0d c0       	rjmp	.+26     	; 0x123e <main_menu+0x46>
				color_choice_black(menu_tracker+1);
				color_choice_white(menu_tracker);
			}
		}else if(which_button == 4){// here which_button == 4 (we will deal with it as DOWN Direction).
    1224:	84 30       	cpi	r24, 0x04	; 4
    1226:	99 f4       	brne	.+38     	; 0x124e <main_menu+0x56>
			if(menu_tracker == 3){
    1228:	13 30       	cpi	r17, 0x03	; 3
    122a:	39 f4       	brne	.+14     	; 0x123a <main_menu+0x42>
				menu_tracker = 1 ;
				color_choice_black(3);
    122c:	83 e0       	ldi	r24, 0x03	; 3
    122e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <color_choice_black>
				color_choice_white(1);
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	0e 94 2f 01 	call	0x25e	; 0x25e <color_choice_white>
    1238:	e3 cf       	rjmp	.-58     	; 0x1200 <main_menu+0x8>
			}else{
				//working fine
				menu_tracker++ ;
    123a:	01 2f       	mov	r16, r17
    123c:	0f 5f       	subi	r16, 0xFF	; 255
				color_choice_black(menu_tracker-1);
    123e:	81 2f       	mov	r24, r17
    1240:	0e 94 db 01 	call	0x3b6	; 0x3b6 <color_choice_black>
				color_choice_white(menu_tracker);
    1244:	80 2f       	mov	r24, r16
    1246:	0e 94 2f 01 	call	0x25e	; 0x25e <color_choice_white>
	if(menu_tracker == 1){
		study_timer();
	}else if(menu_tracker == 2){
		live_clock();
	}else if(menu_tracker == 3){
		lamp_on_off();
    124a:	10 2f       	mov	r17, r16
    124c:	da cf       	rjmp	.-76     	; 0x1202 <main_menu+0xa>
				menu_tracker++ ;
				color_choice_black(menu_tracker-1);
				color_choice_white(menu_tracker);
			}
		}
	}while(which_button != 5);
    124e:	85 30       	cpi	r24, 0x05	; 5
    1250:	c1 f6       	brne	.-80     	; 0x1202 <main_menu+0xa>
	//if "menu_tracker" ----> 1 , We will call study_timer function.
	//if "menu_tracker" ----> 2 , We will call clock function.
	//if "menu_tracker" ----> 3 , We will call Lamp ON/OFF function.


	if(menu_tracker == 1){
    1252:	11 30       	cpi	r17, 0x01	; 1
    1254:	19 f4       	brne	.+6      	; 0x125c <main_menu+0x64>
		study_timer();
    1256:	0e 94 56 05 	call	0xaac	; 0xaac <study_timer>
    125a:	09 c0       	rjmp	.+18     	; 0x126e <main_menu+0x76>
	}else if(menu_tracker == 2){
    125c:	12 30       	cpi	r17, 0x02	; 2
    125e:	19 f4       	brne	.+6      	; 0x1266 <main_menu+0x6e>
		live_clock();
    1260:	0e 94 0c 07 	call	0xe18	; 0xe18 <live_clock>
    1264:	04 c0       	rjmp	.+8      	; 0x126e <main_menu+0x76>
	}else if(menu_tracker == 3){
    1266:	13 30       	cpi	r17, 0x03	; 3
    1268:	11 f4       	brne	.+4      	; 0x126e <main_menu+0x76>
		lamp_on_off();
    126a:	0e 94 bf 00 	call	0x17e	; 0x17e <lamp_on_off>
	}

	return 1 ;

}
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	1f 91       	pop	r17
    1272:	0f 91       	pop	r16
    1274:	08 95       	ret

00001276 <time_menu>:
		}
		I2C_Stop();
	}
}
/*******************************************************************/
uint8 time_menu(void){
    1276:	8f 92       	push	r8
    1278:	9f 92       	push	r9
    127a:	af 92       	push	r10
    127c:	bf 92       	push	r11
    127e:	cf 92       	push	r12
    1280:	df 92       	push	r13
    1282:	ef 92       	push	r14
    1284:	ff 92       	push	r15
    1286:	0f 93       	push	r16
    1288:	1f 93       	push	r17
    128a:	df 93       	push	r29
    128c:	cf 93       	push	r28
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	69 97       	sbiw	r28, 0x19	; 25
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	cd bf       	out	0x3d, r28	; 61

	//WE WANT TO BLACK OUT THE ENTIRE SCREEN

	black_entire_screen();
    129e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <black_entire_screen>

	//"adjust time" prompt letters array.
	uint8 adjust_time_arr[10] = {0,3,9,20,18,19,19,8,12,4};
    12a2:	de 01       	movw	r26, r28
    12a4:	11 96       	adiw	r26, 0x01	; 1
    12a6:	eb eb       	ldi	r30, 0xBB	; 187
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	8a e0       	ldi	r24, 0x0A	; 10
    12ac:	01 90       	ld	r0, Z+
    12ae:	0d 92       	st	X+, r0
    12b0:	81 50       	subi	r24, 0x01	; 1
    12b2:	e1 f7       	brne	.-8      	; 0x12ac <time_menu+0x36>
    12b4:	7e 01       	movw	r14, r28
    12b6:	08 94       	sec
    12b8:	e1 1c       	adc	r14, r1
    12ba:	f1 1c       	adc	r15, r1
    12bc:	87 01       	movw	r16, r14
    12be:	94 e1       	ldi	r25, 0x14	; 20

	uint8 starting_col = 20 ;
	for(uint8 letter_index = 0 ; letter_index < 10 ; letter_index++){
    12c0:	8b e0       	ldi	r24, 0x0B	; 11
    12c2:	c8 2e       	mov	r12, r24
    12c4:	d1 2c       	mov	r13, r1
    12c6:	cc 0e       	add	r12, r28
    12c8:	dd 1e       	adc	r13, r29


		if(letter_index == 6){
    12ca:	80 2f       	mov	r24, r16
    12cc:	8e 19       	sub	r24, r14
    12ce:	86 30       	cpi	r24, 0x06	; 6
    12d0:	11 f4       	brne	.+4      	; 0x12d6 <time_menu+0x60>
			starting_col += 14;
    12d2:	92 5f       	subi	r25, 0xF2	; 242
    12d4:	01 c0       	rjmp	.+2      	; 0x12d8 <time_menu+0x62>
		}else{
			starting_col += 7;
    12d6:	99 5f       	subi	r25, 0xF9	; 249
		}

		letter_write(7,starting_col,adjust_time_arr[letter_index]);
    12d8:	87 e0       	ldi	r24, 0x07	; 7
    12da:	69 2f       	mov	r22, r25
    12dc:	f8 01       	movw	r30, r16
    12de:	41 91       	ld	r20, Z+
    12e0:	8f 01       	movw	r16, r30
    12e2:	99 8f       	std	Y+25, r25	; 0x19
    12e4:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>

	//"adjust time" prompt letters array.
	uint8 adjust_time_arr[10] = {0,3,9,20,18,19,19,8,12,4};

	uint8 starting_col = 20 ;
	for(uint8 letter_index = 0 ; letter_index < 10 ; letter_index++){
    12e8:	99 8d       	ldd	r25, Y+25	; 0x19
    12ea:	0c 15       	cp	r16, r12
    12ec:	1d 05       	cpc	r17, r13
    12ee:	69 f7       	brne	.-38     	; 0x12ca <time_menu+0x54>

	/************************************************************/
	//Printing time 00:00 AM

	//Printing 00
	number_write(5,41,0);
    12f0:	85 e0       	ldi	r24, 0x05	; 5
    12f2:	69 e2       	ldi	r22, 0x29	; 41
    12f4:	40 e0       	ldi	r20, 0x00	; 0
    12f6:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
	number_write(5,48,1);
    12fa:	85 e0       	ldi	r24, 0x05	; 5
    12fc:	60 e3       	ldi	r22, 0x30	; 48
    12fe:	41 e0       	ldi	r20, 0x01	; 1
    1300:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>

	//Printing :
	setColumnAddress(55,128);
    1304:	87 e3       	ldi	r24, 0x37	; 55
    1306:	60 e8       	ldi	r22, 0x80	; 128
    1308:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <setColumnAddress>
	setPageAddress(5,7);
    130c:	85 e0       	ldi	r24, 0x05	; 5
    130e:	67 e0       	ldi	r22, 0x07	; 7
    1310:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <setPageAddress>
	I2C_Start(oled_write_address);
    1314:	8a e7       	ldi	r24, 0x7A	; 122
    1316:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
	I2C_Write(CONTROL_DATA);
    131a:	80 e4       	ldi	r24, 0x40	; 64
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
    1322:	0b e7       	ldi	r16, 0x7B	; 123
    1324:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8 i = 0 ; i < 7 ;i++){
		I2C_Write(double_dot_bitmap[i]);
    1326:	f8 01       	movw	r30, r16
    1328:	81 91       	ld	r24, Z+
    132a:	8f 01       	movw	r16, r30
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
	//Printing :
	setColumnAddress(55,128);
	setPageAddress(5,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(uint8 i = 0 ; i < 7 ;i++){
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	02 38       	cpi	r16, 0x82	; 130
    1336:	1f 07       	cpc	r17, r31
    1338:	b1 f7       	brne	.-20     	; 0x1326 <time_menu+0xb0>
		I2C_Write(double_dot_bitmap[i]);
	}
	I2C_Stop();
    133a:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>

	setColumnAddress(55,128);
    133e:	87 e3       	ldi	r24, 0x37	; 55
    1340:	60 e8       	ldi	r22, 0x80	; 128
    1342:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <setColumnAddress>
	setPageAddress(4,7);
    1346:	84 e0       	ldi	r24, 0x04	; 4
    1348:	67 e0       	ldi	r22, 0x07	; 7
    134a:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <setPageAddress>
	I2C_Start(oled_write_address);
    134e:	8a e7       	ldi	r24, 0x7A	; 122
    1350:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
	I2C_Write(CONTROL_DATA);
    1354:	80 e4       	ldi	r24, 0x40	; 64
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
	for(uint8 i = 7 ; i < 14 ; i++){
		I2C_Write(double_dot_bitmap[i]);
    135c:	f8 01       	movw	r30, r16
    135e:	81 91       	ld	r24, Z+
    1360:	8f 01       	movw	r16, r30
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>

	setColumnAddress(55,128);
	setPageAddress(4,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(uint8 i = 7 ; i < 14 ; i++){
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	09 38       	cpi	r16, 0x89	; 137
    136c:	1f 07       	cpc	r17, r31
    136e:	b1 f7       	brne	.-20     	; 0x135c <time_menu+0xe6>
		I2C_Write(double_dot_bitmap[i]);
	}
	I2C_Stop();
    1370:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>

	//Printing 00
	number_write(5,62,0);
    1374:	85 e0       	ldi	r24, 0x05	; 5
    1376:	6e e3       	ldi	r22, 0x3E	; 62
    1378:	40 e0       	ldi	r20, 0x00	; 0
    137a:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
	number_write(5,69,0);
    137e:	85 e0       	ldi	r24, 0x05	; 5
    1380:	65 e4       	ldi	r22, 0x45	; 69
    1382:	40 e0       	ldi	r20, 0x00	; 0
    1384:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>

	//Printing AM
	letter_write(5,76,0);
    1388:	85 e0       	ldi	r24, 0x05	; 5
    138a:	6c e4       	ldi	r22, 0x4C	; 76
    138c:	40 e0       	ldi	r20, 0x00	; 0
    138e:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(5,83,12);
    1392:	85 e0       	ldi	r24, 0x05	; 5
    1394:	63 e5       	ldi	r22, 0x53	; 83
    1396:	4c e0       	ldi	r20, 0x0C	; 12
    1398:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>

	/************************************************************/
	//Printing 28-12-2023 SUN

	//Printing 28
	number_write(2,20,2);
    139c:	82 e0       	ldi	r24, 0x02	; 2
    139e:	64 e1       	ldi	r22, 0x14	; 20
    13a0:	42 e0       	ldi	r20, 0x02	; 2
    13a2:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
	number_write(2,27,8);
    13a6:	82 e0       	ldi	r24, 0x02	; 2
    13a8:	6b e1       	ldi	r22, 0x1B	; 27
    13aa:	48 e0       	ldi	r20, 0x08	; 8
    13ac:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>

	uint8 dash_bitmap[14] = {0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    13b0:	de 01       	movw	r26, r28
    13b2:	1b 96       	adiw	r26, 0x0b	; 11
    13b4:	ed ea       	ldi	r30, 0xAD	; 173
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	8e e0       	ldi	r24, 0x0E	; 14
    13ba:	01 90       	ld	r0, Z+
    13bc:	0d 92       	st	X+, r0
    13be:	81 50       	subi	r24, 0x01	; 1
    13c0:	e1 f7       	brne	.-8      	; 0x13ba <time_menu+0x144>
	//Printing -
	setColumnAddress(34,128);
    13c2:	82 e2       	ldi	r24, 0x22	; 34
    13c4:	60 e8       	ldi	r22, 0x80	; 128
    13c6:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <setColumnAddress>
	setPageAddress(2,7);
    13ca:	82 e0       	ldi	r24, 0x02	; 2
    13cc:	67 e0       	ldi	r22, 0x07	; 7
    13ce:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <setPageAddress>
	I2C_Start(oled_write_address);
    13d2:	8a e7       	ldi	r24, 0x7A	; 122
    13d4:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
	I2C_Write(CONTROL_DATA);
    13d8:	80 e4       	ldi	r24, 0x40	; 64
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
    13e0:	bb e0       	ldi	r27, 0x0B	; 11
    13e2:	cb 2e       	mov	r12, r27
    13e4:	d1 2c       	mov	r13, r1
    13e6:	cc 0e       	add	r12, r28
    13e8:	dd 1e       	adc	r13, r29
    13ea:	86 01       	movw	r16, r12
	for(uint8 i = 0 ; i < 7 ;i++){
    13ec:	a2 e1       	ldi	r26, 0x12	; 18
    13ee:	ea 2e       	mov	r14, r26
    13f0:	f1 2c       	mov	r15, r1
    13f2:	ec 0e       	add	r14, r28
    13f4:	fd 1e       	adc	r15, r29
		I2C_Write(dash_bitmap[i]);
    13f6:	f8 01       	movw	r30, r16
    13f8:	81 91       	ld	r24, Z+
    13fa:	8f 01       	movw	r16, r30
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
	//Printing -
	setColumnAddress(34,128);
	setPageAddress(2,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(uint8 i = 0 ; i < 7 ;i++){
    1402:	0e 15       	cp	r16, r14
    1404:	1f 05       	cpc	r17, r15
    1406:	b9 f7       	brne	.-18     	; 0x13f6 <time_menu+0x180>
		I2C_Write(dash_bitmap[i]);
	}
	I2C_Stop();
    1408:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>

	setColumnAddress(34,128);
    140c:	82 e2       	ldi	r24, 0x22	; 34
    140e:	60 e8       	ldi	r22, 0x80	; 128
    1410:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <setColumnAddress>
	setPageAddress(1,7);
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	67 e0       	ldi	r22, 0x07	; 7
    1418:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <setPageAddress>
	I2C_Start(oled_write_address);
    141c:	8a e7       	ldi	r24, 0x7A	; 122
    141e:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
	I2C_Write(CONTROL_DATA);
    1422:	80 e4       	ldi	r24, 0x40	; 64
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
    142a:	f2 e1       	ldi	r31, 0x12	; 18
    142c:	8f 2e       	mov	r8, r31
    142e:	91 2c       	mov	r9, r1
    1430:	8c 0e       	add	r8, r28
    1432:	9d 1e       	adc	r9, r29
    1434:	78 01       	movw	r14, r16
	for(uint8 i = 7 ; i < 14 ; i++){
    1436:	e9 e1       	ldi	r30, 0x19	; 25
    1438:	ae 2e       	mov	r10, r30
    143a:	b1 2c       	mov	r11, r1
    143c:	ac 0e       	add	r10, r28
    143e:	bd 1e       	adc	r11, r29
		I2C_Write(dash_bitmap[i]);
    1440:	f7 01       	movw	r30, r14
    1442:	81 91       	ld	r24, Z+
    1444:	7f 01       	movw	r14, r30
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>

	setColumnAddress(34,128);
	setPageAddress(1,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(uint8 i = 7 ; i < 14 ; i++){
    144c:	ea 14       	cp	r14, r10
    144e:	fb 04       	cpc	r15, r11
    1450:	b9 f7       	brne	.-18     	; 0x1440 <time_menu+0x1ca>
		I2C_Write(dash_bitmap[i]);
	}
	I2C_Stop();
    1452:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>

	//Printing 12
	number_write(2,41,1);
    1456:	82 e0       	ldi	r24, 0x02	; 2
    1458:	69 e2       	ldi	r22, 0x29	; 41
    145a:	41 e0       	ldi	r20, 0x01	; 1
    145c:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
	number_write(2,48,2);
    1460:	82 e0       	ldi	r24, 0x02	; 2
    1462:	60 e3       	ldi	r22, 0x30	; 48
    1464:	42 e0       	ldi	r20, 0x02	; 2
    1466:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>

	//Printing -
	setColumnAddress(55,128);
    146a:	87 e3       	ldi	r24, 0x37	; 55
    146c:	60 e8       	ldi	r22, 0x80	; 128
    146e:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <setColumnAddress>
	setPageAddress(2,7);
    1472:	82 e0       	ldi	r24, 0x02	; 2
    1474:	67 e0       	ldi	r22, 0x07	; 7
    1476:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <setPageAddress>
	I2C_Start(oled_write_address);
    147a:	8a e7       	ldi	r24, 0x7A	; 122
    147c:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
	I2C_Write(CONTROL_DATA);
    1480:	80 e4       	ldi	r24, 0x40	; 64
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
	for(uint8 i = 0 ; i < 7 ;i++){
		I2C_Write(dash_bitmap[i]);
    1488:	f6 01       	movw	r30, r12
    148a:	81 91       	ld	r24, Z+
    148c:	6f 01       	movw	r12, r30
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
	//Printing -
	setColumnAddress(55,128);
	setPageAddress(2,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(uint8 i = 0 ; i < 7 ;i++){
    1494:	c0 16       	cp	r12, r16
    1496:	d1 06       	cpc	r13, r17
    1498:	b9 f7       	brne	.-18     	; 0x1488 <time_menu+0x212>
		I2C_Write(dash_bitmap[i]);
	}
	I2C_Stop();
    149a:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>

	setColumnAddress(55,128);
    149e:	87 e3       	ldi	r24, 0x37	; 55
    14a0:	60 e8       	ldi	r22, 0x80	; 128
    14a2:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <setColumnAddress>
	setPageAddress(1,7);
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	67 e0       	ldi	r22, 0x07	; 7
    14aa:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <setPageAddress>
	I2C_Start(oled_write_address);
    14ae:	8a e7       	ldi	r24, 0x7A	; 122
    14b0:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
	I2C_Write(CONTROL_DATA);
    14b4:	80 e4       	ldi	r24, 0x40	; 64
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
	for(uint8 i = 7 ; i < 14 ; i++){
		I2C_Write(dash_bitmap[i]);
    14bc:	f4 01       	movw	r30, r8
    14be:	81 91       	ld	r24, Z+
    14c0:	4f 01       	movw	r8, r30
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>

	setColumnAddress(55,128);
	setPageAddress(1,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(uint8 i = 7 ; i < 14 ; i++){
    14c8:	8e 14       	cp	r8, r14
    14ca:	9f 04       	cpc	r9, r15
    14cc:	b9 f7       	brne	.-18     	; 0x14bc <time_menu+0x246>
		I2C_Write(dash_bitmap[i]);
	}
	I2C_Stop();
    14ce:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>

	//Printing 2023
	number_write(2,62,2);
    14d2:	82 e0       	ldi	r24, 0x02	; 2
    14d4:	6e e3       	ldi	r22, 0x3E	; 62
    14d6:	42 e0       	ldi	r20, 0x02	; 2
    14d8:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
	number_write(2,69,0);
    14dc:	82 e0       	ldi	r24, 0x02	; 2
    14de:	65 e4       	ldi	r22, 0x45	; 69
    14e0:	40 e0       	ldi	r20, 0x00	; 0
    14e2:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
	number_write(2,76,2);
    14e6:	82 e0       	ldi	r24, 0x02	; 2
    14e8:	6c e4       	ldi	r22, 0x4C	; 76
    14ea:	42 e0       	ldi	r20, 0x02	; 2
    14ec:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
	number_write(2,83,3);
    14f0:	82 e0       	ldi	r24, 0x02	; 2
    14f2:	63 e5       	ldi	r22, 0x53	; 83
    14f4:	43 e0       	ldi	r20, 0x03	; 3
    14f6:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>

	//Printing THU ----> 6
	letter_write(2,97,19);
    14fa:	82 e0       	ldi	r24, 0x02	; 2
    14fc:	61 e6       	ldi	r22, 0x61	; 97
    14fe:	43 e1       	ldi	r20, 0x13	; 19
    1500:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(2,104,7);
    1504:	82 e0       	ldi	r24, 0x02	; 2
    1506:	68 e6       	ldi	r22, 0x68	; 104
    1508:	47 e0       	ldi	r20, 0x07	; 7
    150a:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(2,111,20);
    150e:	82 e0       	ldi	r24, 0x02	; 2
    1510:	6f e6       	ldi	r22, 0x6F	; 111
    1512:	44 e1       	ldi	r20, 0x14	; 20
    1514:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
    1518:	dd 24       	eor	r13, r13
	CLOCK_DATA clock_input ;
	DATE_DATA date_input ;


	for(uint8 num_of_inputs = 0 ; num_of_inputs < 7 ; num_of_inputs++){
		if(num_of_inputs == 0){/********************************************************/
    151a:	dd 20       	and	r13, r13
    151c:	09 f0       	breq	.+2      	; 0x1520 <time_menu+0x2aa>
    151e:	58 c0       	rjmp	.+176    	; 0x15d0 <time_menu+0x35a>
			//this means that we are taking hours as an input.

			//for the underline
			setColumnAddress(41,55);
    1520:	89 e2       	ldi	r24, 0x29	; 41
    1522:	67 e3       	ldi	r22, 0x37	; 55
    1524:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <setColumnAddress>
			setPageAddress(3,7);
    1528:	83 e0       	ldi	r24, 0x03	; 3
    152a:	67 e0       	ldi	r22, 0x07	; 7
    152c:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <setPageAddress>
			I2C_Start(oled_write_address);
    1530:	8a e7       	ldi	r24, 0x7A	; 122
    1532:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
			I2C_Write(CONTROL_DATA);
    1536:	80 e4       	ldi	r24, 0x40	; 64
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
    153e:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8 i = 0 ; i < 14 ; i++){
				I2C_Write(0xC0);
    1540:	80 ec       	ldi	r24, 0xC0	; 192
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
			//for the underline
			setColumnAddress(41,55);
			setPageAddress(3,7);
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 14 ; i++){
    1548:	1f 5f       	subi	r17, 0xFF	; 255
    154a:	1e 30       	cpi	r17, 0x0E	; 14
    154c:	c9 f7       	brne	.-14     	; 0x1540 <time_menu+0x2ca>
				I2C_Write(0xC0);
			}
			I2C_Stop();
    154e:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>
    1552:	01 e0       	ldi	r16, 0x01	; 1

			uint8 hours_tracker = 1 ;
			uint8 which_button = 0 ;
			do{
				which_button = 0 ;
				which_button = button_check();
    1554:	0e 94 18 05 	call	0xa30	; 0xa30 <button_check>

				if(which_button == 3){
    1558:	83 30       	cpi	r24, 0x03	; 3
    155a:	59 f4       	brne	.+22     	; 0x1572 <time_menu+0x2fc>
					//this means that we pressed left
					//check if we stopping at letter a
					if(hours_tracker == 1){
    155c:	01 30       	cpi	r16, 0x01	; 1
    155e:	39 f4       	brne	.+14     	; 0x156e <time_menu+0x2f8>
						hours_tracker = 12 ;
						double_digit_write(5,41,hours_tracker);
    1560:	85 e0       	ldi	r24, 0x05	; 5
    1562:	69 e2       	ldi	r22, 0x29	; 41
    1564:	4c e0       	ldi	r20, 0x0C	; 12
    1566:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
    156a:	0c e0       	ldi	r16, 0x0C	; 12
    156c:	f3 cf       	rjmp	.-26     	; 0x1554 <time_menu+0x2de>
					}else{
						hours_tracker-- ;
    156e:	01 50       	subi	r16, 0x01	; 1
    1570:	0b c0       	rjmp	.+22     	; 0x1588 <time_menu+0x312>
						double_digit_write(5,41,hours_tracker);
					}

				}else if(which_button == 4){
    1572:	84 30       	cpi	r24, 0x04	; 4
    1574:	79 f4       	brne	.+30     	; 0x1594 <time_menu+0x31e>
					//this means that we pressed right
					//check if we stopping at letter z
					if(hours_tracker == 12){
    1576:	0c 30       	cpi	r16, 0x0C	; 12
    1578:	31 f4       	brne	.+12     	; 0x1586 <time_menu+0x310>
						hours_tracker = 1 ;
						double_digit_write(5,41,hours_tracker);
    157a:	85 e0       	ldi	r24, 0x05	; 5
    157c:	69 e2       	ldi	r22, 0x29	; 41
    157e:	41 e0       	ldi	r20, 0x01	; 1
    1580:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
    1584:	e6 cf       	rjmp	.-52     	; 0x1552 <time_menu+0x2dc>
					}else{
						hours_tracker++ ;
    1586:	0f 5f       	subi	r16, 0xFF	; 255
						double_digit_write(5,41,hours_tracker);
    1588:	85 e0       	ldi	r24, 0x05	; 5
    158a:	69 e2       	ldi	r22, 0x29	; 41
    158c:	40 2f       	mov	r20, r16
    158e:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
    1592:	e0 cf       	rjmp	.-64     	; 0x1554 <time_menu+0x2de>
					}
				}

			}while(which_button != 5);
    1594:	85 30       	cpi	r24, 0x05	; 5
    1596:	f1 f6       	brne	.-68     	; 0x1554 <time_menu+0x2de>
			//Storing hours in our struct for later rtc modification.
			clock_input.hours = dec_to_bcd(hours_tracker);

			//for clearing underline
			setColumnAddress(41,55);
    1598:	89 e2       	ldi	r24, 0x29	; 41
    159a:	67 e3       	ldi	r22, 0x37	; 55
    159c:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <setColumnAddress>
			setPageAddress(3,7);
    15a0:	83 e0       	ldi	r24, 0x03	; 3
    15a2:	67 e0       	ldi	r22, 0x07	; 7
    15a4:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <setPageAddress>
			I2C_Start(oled_write_address);
    15a8:	8a e7       	ldi	r24, 0x7A	; 122
    15aa:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
			I2C_Write(CONTROL_DATA);
    15ae:	80 e4       	ldi	r24, 0x40	; 64
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
    15b6:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8 i = 0 ; i < 14 ; i++){
				I2C_Write(0x00);
    15b8:	80 e0       	ldi	r24, 0x00	; 0
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
			//for clearing underline
			setColumnAddress(41,55);
			setPageAddress(3,7);
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 14 ; i++){
    15c0:	1f 5f       	subi	r17, 0xFF	; 255
    15c2:	1e 30       	cpi	r17, 0x0E	; 14
    15c4:	c9 f7       	brne	.-14     	; 0x15b8 <time_menu+0x342>
					}
				}

			}while(which_button != 5);
			//Storing hours in our struct for later rtc modification.
			clock_input.hours = dec_to_bcd(hours_tracker);
    15c6:	80 2f       	mov	r24, r16
    15c8:	0e 94 a4 00 	call	0x148	; 0x148 <dec_to_bcd>
    15cc:	b8 2e       	mov	r11, r24
    15ce:	5b c0       	rjmp	.+182    	; 0x1686 <time_menu+0x410>
			for(uint8 i = 0 ; i < 14 ; i++){
				I2C_Write(0x00);
			}
			I2C_Stop();

		}else if(num_of_inputs == 1){/********************************************************/
    15d0:	f1 e0       	ldi	r31, 0x01	; 1
    15d2:	df 16       	cp	r13, r31
    15d4:	09 f0       	breq	.+2      	; 0x15d8 <time_menu+0x362>
    15d6:	5a c0       	rjmp	.+180    	; 0x168c <time_menu+0x416>
			//we are adjusting minutes.

			//for the underline
			setColumnAddress(62,76);
    15d8:	8e e3       	ldi	r24, 0x3E	; 62
    15da:	6c e4       	ldi	r22, 0x4C	; 76
    15dc:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <setColumnAddress>
			setPageAddress(3,7);
    15e0:	83 e0       	ldi	r24, 0x03	; 3
    15e2:	67 e0       	ldi	r22, 0x07	; 7
    15e4:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <setPageAddress>
			I2C_Start(oled_write_address);
    15e8:	8a e7       	ldi	r24, 0x7A	; 122
    15ea:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
			I2C_Write(CONTROL_DATA);
    15ee:	80 e4       	ldi	r24, 0x40	; 64
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
    15f6:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8 i = 0 ; i < 14 ; i++){
				I2C_Write(0xC0);
    15f8:	80 ec       	ldi	r24, 0xC0	; 192
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
			//for the underline
			setColumnAddress(62,76);
			setPageAddress(3,7);
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 14 ; i++){
    1600:	1f 5f       	subi	r17, 0xFF	; 255
    1602:	1e 30       	cpi	r17, 0x0E	; 14
    1604:	c9 f7       	brne	.-14     	; 0x15f8 <time_menu+0x382>
				I2C_Write(0xC0);
			}
			I2C_Stop();
    1606:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>
    160a:	00 e0       	ldi	r16, 0x00	; 0

			uint8 minutes_tracker = 0 ;
			uint8 which_button = 0 ;
			do{
				which_button = 0 ;
				which_button = button_check();
    160c:	0e 94 18 05 	call	0xa30	; 0xa30 <button_check>

				if(which_button == 3){
    1610:	83 30       	cpi	r24, 0x03	; 3
    1612:	59 f4       	brne	.+22     	; 0x162a <time_menu+0x3b4>
					//this means that we pressed left
					//check if we stopping at letter a
					if(minutes_tracker == 0){
    1614:	00 23       	and	r16, r16
    1616:	39 f4       	brne	.+14     	; 0x1626 <time_menu+0x3b0>
						minutes_tracker = 59 ;
						double_digit_write(5,62,minutes_tracker);
    1618:	85 e0       	ldi	r24, 0x05	; 5
    161a:	6e e3       	ldi	r22, 0x3E	; 62
    161c:	4b e3       	ldi	r20, 0x3B	; 59
    161e:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
    1622:	0b e3       	ldi	r16, 0x3B	; 59
    1624:	f3 cf       	rjmp	.-26     	; 0x160c <time_menu+0x396>
					}else{
						minutes_tracker-- ;
    1626:	01 50       	subi	r16, 0x01	; 1
    1628:	0b c0       	rjmp	.+22     	; 0x1640 <time_menu+0x3ca>
						double_digit_write(5,62,minutes_tracker);
					}

				}else if(which_button == 4){
    162a:	84 30       	cpi	r24, 0x04	; 4
    162c:	79 f4       	brne	.+30     	; 0x164c <time_menu+0x3d6>
					//this means that we pressed right
					//check if we stopping at letter z
					if(minutes_tracker == 59){
    162e:	0b 33       	cpi	r16, 0x3B	; 59
    1630:	31 f4       	brne	.+12     	; 0x163e <time_menu+0x3c8>
						minutes_tracker = 0 ;
						double_digit_write(5,62,minutes_tracker);
    1632:	85 e0       	ldi	r24, 0x05	; 5
    1634:	6e e3       	ldi	r22, 0x3E	; 62
    1636:	40 e0       	ldi	r20, 0x00	; 0
    1638:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
    163c:	e6 cf       	rjmp	.-52     	; 0x160a <time_menu+0x394>
					}else{
						minutes_tracker++ ;
    163e:	0f 5f       	subi	r16, 0xFF	; 255
						double_digit_write(5,62,minutes_tracker);
    1640:	85 e0       	ldi	r24, 0x05	; 5
    1642:	6e e3       	ldi	r22, 0x3E	; 62
    1644:	40 2f       	mov	r20, r16
    1646:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
    164a:	e0 cf       	rjmp	.-64     	; 0x160c <time_menu+0x396>
					}
				}

			}while(which_button != 5);
    164c:	85 30       	cpi	r24, 0x05	; 5
    164e:	f1 f6       	brne	.-68     	; 0x160c <time_menu+0x396>
			//Storing hours in our struct for later rtc modification.
			clock_input.minutes = dec_to_bcd(minutes_tracker);

			//for clearing underline
			setColumnAddress(62,76);
    1650:	8e e3       	ldi	r24, 0x3E	; 62
    1652:	6c e4       	ldi	r22, 0x4C	; 76
    1654:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <setColumnAddress>
			setPageAddress(3,7);
    1658:	83 e0       	ldi	r24, 0x03	; 3
    165a:	67 e0       	ldi	r22, 0x07	; 7
    165c:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <setPageAddress>
			I2C_Start(oled_write_address);
    1660:	8a e7       	ldi	r24, 0x7A	; 122
    1662:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
			I2C_Write(CONTROL_DATA);
    1666:	80 e4       	ldi	r24, 0x40	; 64
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
    166e:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8 i = 0 ; i < 14 ; i++){
				I2C_Write(0x00);
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
			//for clearing underline
			setColumnAddress(62,76);
			setPageAddress(3,7);
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 14 ; i++){
    1678:	1f 5f       	subi	r17, 0xFF	; 255
    167a:	1e 30       	cpi	r17, 0x0E	; 14
    167c:	c9 f7       	brne	.-14     	; 0x1670 <time_menu+0x3fa>
					}
				}

			}while(which_button != 5);
			//Storing hours in our struct for later rtc modification.
			clock_input.minutes = dec_to_bcd(minutes_tracker);
    167e:	80 2f       	mov	r24, r16
    1680:	0e 94 a4 00 	call	0x148	; 0x148 <dec_to_bcd>
    1684:	a8 2e       	mov	r10, r24
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 14 ; i++){
				I2C_Write(0x00);
			}
			I2C_Stop();
    1686:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>
    168a:	35 c2       	rjmp	.+1130   	; 0x1af6 <time_menu+0x880>


		}else if(num_of_inputs == 2){/********************************************************/
    168c:	82 e0       	ldi	r24, 0x02	; 2
    168e:	d8 16       	cp	r13, r24
    1690:	09 f0       	breq	.+2      	; 0x1694 <time_menu+0x41e>
    1692:	4c c0       	rjmp	.+152    	; 0x172c <time_menu+0x4b6>
			//now we are choosing am or pm

			//for the underline
			setColumnAddress(76,90);
    1694:	8c e4       	ldi	r24, 0x4C	; 76
    1696:	6a e5       	ldi	r22, 0x5A	; 90
    1698:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <setColumnAddress>
			setPageAddress(3,7);
    169c:	83 e0       	ldi	r24, 0x03	; 3
    169e:	67 e0       	ldi	r22, 0x07	; 7
    16a0:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <setPageAddress>
			I2C_Start(oled_write_address);
    16a4:	8a e7       	ldi	r24, 0x7A	; 122
    16a6:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
			I2C_Write(CONTROL_DATA);
    16aa:	80 e4       	ldi	r24, 0x40	; 64
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
    16b2:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8 i = 0 ; i < 14 ; i++){
				I2C_Write(0xC0);
    16b4:	80 ec       	ldi	r24, 0xC0	; 192
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
			//for the underline
			setColumnAddress(76,90);
			setPageAddress(3,7);
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 14 ; i++){
    16bc:	1f 5f       	subi	r17, 0xFF	; 255
    16be:	1e 30       	cpi	r17, 0x0E	; 14
    16c0:	c9 f7       	brne	.-14     	; 0x16b4 <time_menu+0x43e>
				I2C_Write(0xC0);
			}
			I2C_Stop();
    16c2:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>
    16c6:	00 e0       	ldi	r16, 0x00	; 0
			//if am_pm_tracker == 0 ----> AM , if am_pm_tracker == 1 ----> PM
			uint8 am_pm_tracker = 0 ;
			uint8 which_button = 0 ;
			do{
				which_button = 0 ;
				which_button = button_check();
    16c8:	0e 94 18 05 	call	0xa30	; 0xa30 <button_check>
    16cc:	18 2f       	mov	r17, r24

				if(which_button == 3 || which_button == 4){
    16ce:	83 50       	subi	r24, 0x03	; 3
    16d0:	82 30       	cpi	r24, 0x02	; 2
    16d2:	78 f4       	brcc	.+30     	; 0x16f2 <time_menu+0x47c>
					//this means that we pressed left
					if(am_pm_tracker == 0){
    16d4:	00 23       	and	r16, r16
    16d6:	39 f4       	brne	.+14     	; 0x16e6 <time_menu+0x470>
						am_pm_tracker = 1;
						letter_write(5,76,15);
    16d8:	85 e0       	ldi	r24, 0x05	; 5
    16da:	6c e4       	ldi	r22, 0x4C	; 76
    16dc:	4f e0       	ldi	r20, 0x0F	; 15
    16de:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
    16e2:	01 e0       	ldi	r16, 0x01	; 1
    16e4:	06 c0       	rjmp	.+12     	; 0x16f2 <time_menu+0x47c>
					}else if(am_pm_tracker == 1){
						am_pm_tracker = 0 ;
						letter_write(5,76,0);
    16e6:	85 e0       	ldi	r24, 0x05	; 5
    16e8:	6c e4       	ldi	r22, 0x4C	; 76
    16ea:	40 e0       	ldi	r20, 0x00	; 0
    16ec:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
    16f0:	00 e0       	ldi	r16, 0x00	; 0
					}
				}

			}while(which_button != 5);
    16f2:	15 30       	cpi	r17, 0x05	; 5
    16f4:	49 f7       	brne	.-46     	; 0x16c8 <time_menu+0x452>

			clock_input.am_pm = am_pm_tracker  ;


			//for clearing underline
			setColumnAddress(76,90);
    16f6:	8c e4       	ldi	r24, 0x4C	; 76
    16f8:	6a e5       	ldi	r22, 0x5A	; 90
    16fa:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <setColumnAddress>
			setPageAddress(3,7);
    16fe:	83 e0       	ldi	r24, 0x03	; 3
    1700:	67 e0       	ldi	r22, 0x07	; 7
    1702:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <setPageAddress>
			I2C_Start(oled_write_address);
    1706:	8a e7       	ldi	r24, 0x7A	; 122
    1708:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
			I2C_Write(CONTROL_DATA);
    170c:	80 e4       	ldi	r24, 0x40	; 64
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
    1714:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8 i = 0 ; i < 14 ; i++){
				I2C_Write(0x00);
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
			//for clearing underline
			setColumnAddress(76,90);
			setPageAddress(3,7);
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 14 ; i++){
    171e:	1f 5f       	subi	r17, 0xFF	; 255
    1720:	1e 30       	cpi	r17, 0x0E	; 14
    1722:	c9 f7       	brne	.-14     	; 0x1716 <time_menu+0x4a0>
				I2C_Write(0x00);
			}
			I2C_Stop();
    1724:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>
    1728:	90 2e       	mov	r9, r16
    172a:	e5 c1       	rjmp	.+970    	; 0x1af6 <time_menu+0x880>


		}else if(num_of_inputs == 3){/********************************************************/
    172c:	e3 e0       	ldi	r30, 0x03	; 3
    172e:	de 16       	cp	r13, r30
    1730:	09 f0       	breq	.+2      	; 0x1734 <time_menu+0x4be>
    1732:	7e c0       	rjmp	.+252    	; 0x1830 <time_menu+0x5ba>
			//now we are adjusting the year

			//for the underline
			setColumnAddress(62,90);
    1734:	8e e3       	ldi	r24, 0x3E	; 62
    1736:	6a e5       	ldi	r22, 0x5A	; 90
    1738:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <setColumnAddress>
			setPageAddress(0,7);
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	67 e0       	ldi	r22, 0x07	; 7
    1740:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <setPageAddress>
			I2C_Start(oled_write_address);
    1744:	8a e7       	ldi	r24, 0x7A	; 122
    1746:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
			I2C_Write(CONTROL_DATA);
    174a:	80 e4       	ldi	r24, 0x40	; 64
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
    1752:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8 i = 0 ; i < 28 ; i++){
				I2C_Write(0xC0);
    1754:	80 ec       	ldi	r24, 0xC0	; 192
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
			//for the underline
			setColumnAddress(62,90);
			setPageAddress(0,7);
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 28 ; i++){
    175c:	1f 5f       	subi	r17, 0xFF	; 255
    175e:	1c 31       	cpi	r17, 0x1C	; 28
    1760:	c9 f7       	brne	.-14     	; 0x1754 <time_menu+0x4de>
				I2C_Write(0xC0);
			}
			I2C_Stop();
    1762:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>
    1766:	07 ee       	ldi	r16, 0xE7	; 231
    1768:	17 e0       	ldi	r17, 0x07	; 7

			uint16 year_tracker = 2023 ;
			uint8 which_button = 0 ;
			do{
				which_button = 0 ;
				which_button = button_check();
    176a:	0e 94 18 05 	call	0xa30	; 0xa30 <button_check>

				if(which_button == 3){
    176e:	83 30       	cpi	r24, 0x03	; 3
    1770:	81 f4       	brne	.+32     	; 0x1792 <time_menu+0x51c>
					//this means that we pressed left
					//check if we stopping at letter a
					if(year_tracker == 2023){
    1772:	f7 e0       	ldi	r31, 0x07	; 7
    1774:	07 3e       	cpi	r16, 0xE7	; 231
    1776:	1f 07       	cpc	r17, r31
    1778:	49 f4       	brne	.+18     	; 0x178c <time_menu+0x516>
						year_tracker = 2100 ;
						triple_digit_write(2,69,year_tracker);
    177a:	82 e0       	ldi	r24, 0x02	; 2
    177c:	65 e4       	ldi	r22, 0x45	; 69
    177e:	44 e3       	ldi	r20, 0x34	; 52
    1780:	58 e0       	ldi	r21, 0x08	; 8
    1782:	0e 94 be 04 	call	0x97c	; 0x97c <triple_digit_write>
    1786:	04 e3       	ldi	r16, 0x34	; 52
    1788:	18 e0       	ldi	r17, 0x08	; 8
    178a:	ef cf       	rjmp	.-34     	; 0x176a <time_menu+0x4f4>
					}else{
						year_tracker-- ;
    178c:	01 50       	subi	r16, 0x01	; 1
    178e:	10 40       	sbci	r17, 0x00	; 0
    1790:	0f c0       	rjmp	.+30     	; 0x17b0 <time_menu+0x53a>
						triple_digit_write(2,69,year_tracker);
					}

				}else if(which_button == 4){
    1792:	84 30       	cpi	r24, 0x04	; 4
    1794:	99 f4       	brne	.+38     	; 0x17bc <time_menu+0x546>
					//this means that we pressed right
					//check if we stopping at letter z
					if(year_tracker == 2100){
    1796:	88 e0       	ldi	r24, 0x08	; 8
    1798:	04 33       	cpi	r16, 0x34	; 52
    179a:	18 07       	cpc	r17, r24
    179c:	39 f4       	brne	.+14     	; 0x17ac <time_menu+0x536>
						year_tracker = 2023 ;
						triple_digit_write(2,69,year_tracker);
    179e:	82 e0       	ldi	r24, 0x02	; 2
    17a0:	65 e4       	ldi	r22, 0x45	; 69
    17a2:	47 ee       	ldi	r20, 0xE7	; 231
    17a4:	57 e0       	ldi	r21, 0x07	; 7
    17a6:	0e 94 be 04 	call	0x97c	; 0x97c <triple_digit_write>
    17aa:	dd cf       	rjmp	.-70     	; 0x1766 <time_menu+0x4f0>
					}else{
						year_tracker++ ;
    17ac:	0f 5f       	subi	r16, 0xFF	; 255
    17ae:	1f 4f       	sbci	r17, 0xFF	; 255
						triple_digit_write(2,69,year_tracker);
    17b0:	82 e0       	ldi	r24, 0x02	; 2
    17b2:	65 e4       	ldi	r22, 0x45	; 69
    17b4:	a8 01       	movw	r20, r16
    17b6:	0e 94 be 04 	call	0x97c	; 0x97c <triple_digit_write>
    17ba:	d7 cf       	rjmp	.-82     	; 0x176a <time_menu+0x4f4>
					}
				}

			}while(which_button != 5);
    17bc:	85 30       	cpi	r24, 0x05	; 5
    17be:	a9 f6       	brne	.-86     	; 0x176a <time_menu+0x4f4>
			year_tracker /= 10 ;
			last_two_digit = ((year_tracker % 10) * 10 ) + last_two_digit ;
			date_input.year = dec_to_bcd(last_two_digit) ;

			//for clearing/deleting the underline
			setColumnAddress(62,90);
    17c0:	8e e3       	ldi	r24, 0x3E	; 62
    17c2:	6a e5       	ldi	r22, 0x5A	; 90
    17c4:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <setColumnAddress>
			setPageAddress(0,7);
    17c8:	80 e0       	ldi	r24, 0x00	; 0
    17ca:	67 e0       	ldi	r22, 0x07	; 7
    17cc:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <setPageAddress>
			I2C_Start(oled_write_address);
    17d0:	8a e7       	ldi	r24, 0x7A	; 122
    17d2:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
			I2C_Write(CONTROL_DATA);
    17d6:	80 e4       	ldi	r24, 0x40	; 64
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
    17de:	ff 24       	eor	r15, r15
			for(uint8 i = 0 ; i < 28 ; i++){
				I2C_Write(0x00);
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
			//for clearing/deleting the underline
			setColumnAddress(62,90);
			setPageAddress(0,7);
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 28 ; i++){
    17e8:	f3 94       	inc	r15
    17ea:	ec e1       	ldi	r30, 0x1C	; 28
    17ec:	fe 16       	cp	r15, r30
    17ee:	c1 f7       	brne	.-16     	; 0x17e0 <time_menu+0x56a>
						triple_digit_write(2,69,year_tracker);
					}
				}

			}while(which_button != 5);
			uint8 last_two_digit = year_tracker % 10 ;
    17f0:	c8 01       	movw	r24, r16
    17f2:	6a e0       	ldi	r22, 0x0A	; 10
    17f4:	70 e0       	ldi	r23, 0x00	; 0
    17f6:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <__udivmodhi4>
    17fa:	48 2f       	mov	r20, r24
			year_tracker /= 10 ;
			last_two_digit = ((year_tracker % 10) * 10 ) + last_two_digit ;
			date_input.year = dec_to_bcd(last_two_digit) ;
    17fc:	c8 01       	movw	r24, r16
    17fe:	6a e0       	ldi	r22, 0x0A	; 10
    1800:	70 e0       	ldi	r23, 0x00	; 0
    1802:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <__udivmodhi4>
    1806:	cb 01       	movw	r24, r22
    1808:	6a e0       	ldi	r22, 0x0A	; 10
    180a:	70 e0       	ldi	r23, 0x00	; 0
    180c:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <__udivmodhi4>
    1810:	9c 01       	movw	r18, r24
    1812:	73 e0       	ldi	r23, 0x03	; 3
    1814:	88 0f       	add	r24, r24
    1816:	99 1f       	adc	r25, r25
    1818:	7a 95       	dec	r23
    181a:	e1 f7       	brne	.-8      	; 0x1814 <time_menu+0x59e>
    181c:	22 0f       	add	r18, r18
    181e:	33 1f       	adc	r19, r19
    1820:	82 0f       	add	r24, r18
    1822:	93 1f       	adc	r25, r19
    1824:	84 0f       	add	r24, r20
    1826:	0e 94 a4 00 	call	0x148	; 0x148 <dec_to_bcd>
    182a:	f8 2e       	mov	r15, r24
    182c:	88 24       	eor	r8, r8
    182e:	2b cf       	rjmp	.-426    	; 0x1686 <time_menu+0x410>
			for(uint8 i = 0 ; i < 28 ; i++){
				I2C_Write(0x00);
			}
			I2C_Stop();

		}else if(num_of_inputs == 4){/********************************************************/
    1830:	f4 e0       	ldi	r31, 0x04	; 4
    1832:	df 16       	cp	r13, r31
    1834:	09 f0       	breq	.+2      	; 0x1838 <time_menu+0x5c2>
    1836:	58 c0       	rjmp	.+176    	; 0x18e8 <time_menu+0x672>
			//this means that we are choosing the current month.

			//for the underline
			setColumnAddress(41,55);
    1838:	89 e2       	ldi	r24, 0x29	; 41
    183a:	67 e3       	ldi	r22, 0x37	; 55
    183c:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <setColumnAddress>
			setPageAddress(0,7);
    1840:	80 e0       	ldi	r24, 0x00	; 0
    1842:	67 e0       	ldi	r22, 0x07	; 7
    1844:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <setPageAddress>
			I2C_Start(oled_write_address);
    1848:	8a e7       	ldi	r24, 0x7A	; 122
    184a:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
			I2C_Write(CONTROL_DATA);
    184e:	80 e4       	ldi	r24, 0x40	; 64
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
    1856:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8 i = 0 ; i < 14 ; i++){
				I2C_Write(0xC0);
    1858:	80 ec       	ldi	r24, 0xC0	; 192
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
			//for the underline
			setColumnAddress(41,55);
			setPageAddress(0,7);
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 14 ; i++){
    1860:	1f 5f       	subi	r17, 0xFF	; 255
    1862:	1e 30       	cpi	r17, 0x0E	; 14
    1864:	c9 f7       	brne	.-14     	; 0x1858 <time_menu+0x5e2>
				I2C_Write(0xC0);
			}
			I2C_Stop();
    1866:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>
    186a:	0c e0       	ldi	r16, 0x0C	; 12

			uint8 month_tracker = 12 ;
			uint8 which_button = 0 ;
			do{
				which_button = 0 ;
				which_button = button_check();
    186c:	0e 94 18 05 	call	0xa30	; 0xa30 <button_check>

				if(which_button == 3){
    1870:	83 30       	cpi	r24, 0x03	; 3
    1872:	51 f4       	brne	.+20     	; 0x1888 <time_menu+0x612>
					//this means that we pressed left
					//check if we stopping at letter a
					if(month_tracker == 1){
    1874:	01 30       	cpi	r16, 0x01	; 1
    1876:	31 f4       	brne	.+12     	; 0x1884 <time_menu+0x60e>
						month_tracker = 12 ;
						double_digit_write(2,41,month_tracker);
    1878:	82 e0       	ldi	r24, 0x02	; 2
    187a:	69 e2       	ldi	r22, 0x29	; 41
    187c:	4c e0       	ldi	r20, 0x0C	; 12
    187e:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
    1882:	f3 cf       	rjmp	.-26     	; 0x186a <time_menu+0x5f4>
					}else{
						month_tracker-- ;
    1884:	01 50       	subi	r16, 0x01	; 1
    1886:	0c c0       	rjmp	.+24     	; 0x18a0 <time_menu+0x62a>
						double_digit_write(2,41,month_tracker);
					}

				}else if(which_button == 4){
    1888:	84 30       	cpi	r24, 0x04	; 4
    188a:	81 f4       	brne	.+32     	; 0x18ac <time_menu+0x636>
					//this means that we pressed right
					//check if we stopping at letter z
					if(month_tracker == 12){
    188c:	0c 30       	cpi	r16, 0x0C	; 12
    188e:	39 f4       	brne	.+14     	; 0x189e <time_menu+0x628>
						month_tracker = 1 ;
						double_digit_write(2,41,month_tracker);
    1890:	82 e0       	ldi	r24, 0x02	; 2
    1892:	69 e2       	ldi	r22, 0x29	; 41
    1894:	41 e0       	ldi	r20, 0x01	; 1
    1896:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
    189a:	01 e0       	ldi	r16, 0x01	; 1
    189c:	e7 cf       	rjmp	.-50     	; 0x186c <time_menu+0x5f6>
					}else{
						month_tracker++ ;
    189e:	0f 5f       	subi	r16, 0xFF	; 255
						double_digit_write(2,41,month_tracker);
    18a0:	82 e0       	ldi	r24, 0x02	; 2
    18a2:	69 e2       	ldi	r22, 0x29	; 41
    18a4:	40 2f       	mov	r20, r16
    18a6:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
    18aa:	e0 cf       	rjmp	.-64     	; 0x186c <time_menu+0x5f6>
					}
				}

			}while(which_button != 5);
    18ac:	85 30       	cpi	r24, 0x05	; 5
    18ae:	f1 f6       	brne	.-68     	; 0x186c <time_menu+0x5f6>
			date_input.month = dec_to_bcd(month_tracker) ;

			//for clearing the underline
			setColumnAddress(41,55);
    18b0:	89 e2       	ldi	r24, 0x29	; 41
    18b2:	67 e3       	ldi	r22, 0x37	; 55
    18b4:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <setColumnAddress>
			setPageAddress(0,7);
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	67 e0       	ldi	r22, 0x07	; 7
    18bc:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <setPageAddress>
			I2C_Start(oled_write_address);
    18c0:	8a e7       	ldi	r24, 0x7A	; 122
    18c2:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
			I2C_Write(CONTROL_DATA);
    18c6:	80 e4       	ldi	r24, 0x40	; 64
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
    18ce:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8 i = 0 ; i < 14 ; i++){
				I2C_Write(0x00);
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
			//for clearing the underline
			setColumnAddress(41,55);
			setPageAddress(0,7);
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 14 ; i++){
    18d8:	1f 5f       	subi	r17, 0xFF	; 255
    18da:	1e 30       	cpi	r17, 0x0E	; 14
    18dc:	c9 f7       	brne	.-14     	; 0x18d0 <time_menu+0x65a>
						double_digit_write(2,41,month_tracker);
					}
				}

			}while(which_button != 5);
			date_input.month = dec_to_bcd(month_tracker) ;
    18de:	80 2f       	mov	r24, r16
    18e0:	0e 94 a4 00 	call	0x148	; 0x148 <dec_to_bcd>
    18e4:	e8 2e       	mov	r14, r24
    18e6:	cf ce       	rjmp	.-610    	; 0x1686 <time_menu+0x410>
				I2C_Write(0x00);
			}
			I2C_Stop();


		}else if(num_of_inputs == 5){/********************************************************/
    18e8:	85 e0       	ldi	r24, 0x05	; 5
    18ea:	d8 16       	cp	r13, r24
    18ec:	09 f0       	breq	.+2      	; 0x18f0 <time_menu+0x67a>
    18ee:	9c c0       	rjmp	.+312    	; 0x1a28 <time_menu+0x7b2>

			//now we are choosing the day
			//for the underline
			setColumnAddress(20,34);
    18f0:	84 e1       	ldi	r24, 0x14	; 20
    18f2:	62 e2       	ldi	r22, 0x22	; 34
    18f4:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <setColumnAddress>
			setPageAddress(0,7);
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	67 e0       	ldi	r22, 0x07	; 7
    18fc:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <setPageAddress>
			I2C_Start(oled_write_address);
    1900:	8a e7       	ldi	r24, 0x7A	; 122
    1902:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
			I2C_Write(CONTROL_DATA);
    1906:	80 e4       	ldi	r24, 0x40	; 64
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
    190e:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8 i = 0 ; i < 14 ; i++){
				I2C_Write(0xC0);
    1910:	80 ec       	ldi	r24, 0xC0	; 192
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
			//for the underline
			setColumnAddress(20,34);
			setPageAddress(0,7);
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 14 ; i++){
    1918:	1f 5f       	subi	r17, 0xFF	; 255
    191a:	1e 30       	cpi	r17, 0x0E	; 14
    191c:	c9 f7       	brne	.-14     	; 0x1910 <time_menu+0x69a>
				I2C_Write(0xC0);
			}
			I2C_Stop();
    191e:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>
    1922:	1c e1       	ldi	r17, 0x1C	; 28
			uint8 which_button = 0 ;


			do{
				which_button = 0 ;
				which_button = button_check();
    1924:	0e 94 18 05 	call	0xa30	; 0xa30 <button_check>

				if(which_button == 3){
    1928:	83 30       	cpi	r24, 0x03	; 3
    192a:	a1 f5       	brne	.+104    	; 0x1994 <time_menu+0x71e>
					//we have a the following cases:
					//1.we are 1,3,5,7,8,10,12 ----> 31 day
					//2.we are 4,6,9,11 ---->30 days
					//3.February 28 days if it is not leap year , 29 days if it is leap year.{
					if(day_tracker == 1){
    192c:	11 30       	cpi	r17, 0x01	; 1
    192e:	81 f5       	brne	.+96     	; 0x1990 <time_menu+0x71a>
						if( (date_input.month == 2) && (is_it_leap_year(date_input.year)) ){
    1930:	e2 e0       	ldi	r30, 0x02	; 2
    1932:	ee 16       	cp	r14, r30
    1934:	99 f4       	brne	.+38     	; 0x195c <time_menu+0x6e6>
    1936:	8f 2d       	mov	r24, r15
    1938:	98 2d       	mov	r25, r8
    193a:	0e 94 80 00 	call	0x100	; 0x100 <is_it_leap_year>
    193e:	88 23       	and	r24, r24
    1940:	39 f0       	breq	.+14     	; 0x1950 <time_menu+0x6da>
							day_tracker = 29 ;
							double_digit_write(2,20,day_tracker);
    1942:	82 e0       	ldi	r24, 0x02	; 2
    1944:	64 e1       	ldi	r22, 0x14	; 20
    1946:	4d e1       	ldi	r20, 0x1D	; 29
    1948:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
    194c:	1d e1       	ldi	r17, 0x1D	; 29
    194e:	ea cf       	rjmp	.-44     	; 0x1924 <time_menu+0x6ae>
						}else if( (date_input.month == 2) && !(is_it_leap_year(date_input.year)) ){
							day_tracker = 28 ;
							double_digit_write(2,20,day_tracker);
    1950:	82 e0       	ldi	r24, 0x02	; 2
    1952:	64 e1       	ldi	r22, 0x14	; 20
    1954:	4c e1       	ldi	r20, 0x1C	; 28
    1956:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
    195a:	e3 cf       	rjmp	.-58     	; 0x1922 <time_menu+0x6ac>
						}else if(date_input.month == 4||date_input.month == 6||date_input.month == 9||date_input.month == 11){
    195c:	f4 e0       	ldi	r31, 0x04	; 4
    195e:	ef 16       	cp	r14, r31
    1960:	49 f0       	breq	.+18     	; 0x1974 <time_menu+0x6fe>
    1962:	86 e0       	ldi	r24, 0x06	; 6
    1964:	e8 16       	cp	r14, r24
    1966:	31 f0       	breq	.+12     	; 0x1974 <time_menu+0x6fe>
    1968:	e9 e0       	ldi	r30, 0x09	; 9
    196a:	ee 16       	cp	r14, r30
    196c:	19 f0       	breq	.+6      	; 0x1974 <time_menu+0x6fe>
    196e:	fb e0       	ldi	r31, 0x0B	; 11
    1970:	ef 16       	cp	r14, r31
    1972:	39 f4       	brne	.+14     	; 0x1982 <time_menu+0x70c>
							day_tracker = 30 ;
							double_digit_write(2,20,day_tracker);
    1974:	82 e0       	ldi	r24, 0x02	; 2
    1976:	64 e1       	ldi	r22, 0x14	; 20
    1978:	4e e1       	ldi	r20, 0x1E	; 30
    197a:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
    197e:	1e e1       	ldi	r17, 0x1E	; 30
    1980:	d1 cf       	rjmp	.-94     	; 0x1924 <time_menu+0x6ae>
						}else{
							day_tracker = 31 ;
							double_digit_write(2,20,day_tracker);
    1982:	82 e0       	ldi	r24, 0x02	; 2
    1984:	64 e1       	ldi	r22, 0x14	; 20
    1986:	4f e1       	ldi	r20, 0x1F	; 31
    1988:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
    198c:	1f e1       	ldi	r17, 0x1F	; 31
    198e:	ca cf       	rjmp	.-108    	; 0x1924 <time_menu+0x6ae>
						}
					}else{
						day_tracker-- ;
    1990:	11 50       	subi	r17, 0x01	; 1
    1992:	25 c0       	rjmp	.+74     	; 0x19de <time_menu+0x768>
						double_digit_write(2,20,day_tracker);
					}

				}else if(which_button == 4){
    1994:	84 30       	cpi	r24, 0x04	; 4
    1996:	49 f5       	brne	.+82     	; 0x19ea <time_menu+0x774>
					//this means that we pressed right
					//check if we stopping at letter z
					if( (date_input.month == 2) && (is_it_leap_year(date_input.year)) ){
    1998:	82 e0       	ldi	r24, 0x02	; 2
    199a:	e8 16       	cp	r14, r24
    199c:	61 f4       	brne	.+24     	; 0x19b6 <time_menu+0x740>
    199e:	8f 2d       	mov	r24, r15
    19a0:	98 2d       	mov	r25, r8
    19a2:	0e 94 80 00 	call	0x100	; 0x100 <is_it_leap_year>
    19a6:	88 23       	and	r24, r24
    19a8:	19 f0       	breq	.+6      	; 0x19b0 <time_menu+0x73a>
						if(day_tracker != 29){
    19aa:	1d 31       	cpi	r17, 0x1D	; 29
    19ac:	b9 f4       	brne	.+46     	; 0x19dc <time_menu+0x766>
    19ae:	14 c0       	rjmp	.+40     	; 0x19d8 <time_menu+0x762>
							day_tracker = 1 ;
						}
						double_digit_write(2,20,day_tracker);

					}else if( (date_input.month == 2) && !(is_it_leap_year(date_input.year)) ){
						if(day_tracker != 28){
    19b0:	1c 31       	cpi	r17, 0x1C	; 28
    19b2:	a1 f4       	brne	.+40     	; 0x19dc <time_menu+0x766>
    19b4:	11 c0       	rjmp	.+34     	; 0x19d8 <time_menu+0x762>
						}else{
							day_tracker = 1 ;
						}
						double_digit_write(2,20,day_tracker);

					}else if(date_input.month == 4||date_input.month == 6||date_input.month == 9||date_input.month == 11){
    19b6:	e4 e0       	ldi	r30, 0x04	; 4
    19b8:	ee 16       	cp	r14, r30
    19ba:	49 f0       	breq	.+18     	; 0x19ce <time_menu+0x758>
    19bc:	f6 e0       	ldi	r31, 0x06	; 6
    19be:	ef 16       	cp	r14, r31
    19c0:	31 f0       	breq	.+12     	; 0x19ce <time_menu+0x758>
    19c2:	89 e0       	ldi	r24, 0x09	; 9
    19c4:	e8 16       	cp	r14, r24
    19c6:	19 f0       	breq	.+6      	; 0x19ce <time_menu+0x758>
    19c8:	eb e0       	ldi	r30, 0x0B	; 11
    19ca:	ee 16       	cp	r14, r30
    19cc:	19 f4       	brne	.+6      	; 0x19d4 <time_menu+0x75e>
						if(day_tracker != 30){
    19ce:	1e 31       	cpi	r17, 0x1E	; 30
    19d0:	29 f4       	brne	.+10     	; 0x19dc <time_menu+0x766>
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <time_menu+0x762>
							day_tracker = 1 ;
						}
						double_digit_write(2,20,day_tracker);

					}else{
						if(day_tracker != 31){
    19d4:	1f 31       	cpi	r17, 0x1F	; 31
    19d6:	11 f4       	brne	.+4      	; 0x19dc <time_menu+0x766>
    19d8:	11 e0       	ldi	r17, 0x01	; 1
    19da:	01 c0       	rjmp	.+2      	; 0x19de <time_menu+0x768>
							day_tracker++;
    19dc:	1f 5f       	subi	r17, 0xFF	; 255
						}else{
							day_tracker = 1 ;
						}
						double_digit_write(2,20,day_tracker);
    19de:	82 e0       	ldi	r24, 0x02	; 2
    19e0:	64 e1       	ldi	r22, 0x14	; 20
    19e2:	41 2f       	mov	r20, r17
    19e4:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
    19e8:	9d cf       	rjmp	.-198    	; 0x1924 <time_menu+0x6ae>
					}
				}

			}while(which_button != 5);
    19ea:	85 30       	cpi	r24, 0x05	; 5
    19ec:	09 f0       	breq	.+2      	; 0x19f0 <time_menu+0x77a>
    19ee:	9a cf       	rjmp	.-204    	; 0x1924 <time_menu+0x6ae>
			date_input.date = dec_to_bcd(day_tracker) ;

			//for the underline
			setColumnAddress(20,34);
    19f0:	84 e1       	ldi	r24, 0x14	; 20
    19f2:	62 e2       	ldi	r22, 0x22	; 34
    19f4:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <setColumnAddress>
			setPageAddress(0,7);
    19f8:	80 e0       	ldi	r24, 0x00	; 0
    19fa:	67 e0       	ldi	r22, 0x07	; 7
    19fc:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <setPageAddress>
			I2C_Start(oled_write_address);
    1a00:	8a e7       	ldi	r24, 0x7A	; 122
    1a02:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
			I2C_Write(CONTROL_DATA);
    1a06:	80 e4       	ldi	r24, 0x40	; 64
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
    1a0e:	00 e0       	ldi	r16, 0x00	; 0
			for(uint8 i = 0 ; i < 14 ; i++){
				I2C_Write(0x00);
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
			//for the underline
			setColumnAddress(20,34);
			setPageAddress(0,7);
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 14 ; i++){
    1a18:	0f 5f       	subi	r16, 0xFF	; 255
    1a1a:	0e 30       	cpi	r16, 0x0E	; 14
    1a1c:	c9 f7       	brne	.-14     	; 0x1a10 <time_menu+0x79a>
						double_digit_write(2,20,day_tracker);
					}
				}

			}while(which_button != 5);
			date_input.date = dec_to_bcd(day_tracker) ;
    1a1e:	81 2f       	mov	r24, r17
    1a20:	0e 94 a4 00 	call	0x148	; 0x148 <dec_to_bcd>
    1a24:	c8 2e       	mov	r12, r24
    1a26:	2f ce       	rjmp	.-930    	; 0x1686 <time_menu+0x410>
			I2C_Stop();
		}else if(num_of_inputs == 6){/********************************************************/
			//now we are choosing the day name.

			//for the underline
			setColumnAddress(97,118);
    1a28:	81 e6       	ldi	r24, 0x61	; 97
    1a2a:	66 e7       	ldi	r22, 0x76	; 118
    1a2c:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <setColumnAddress>
			setPageAddress(0,7);
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	67 e0       	ldi	r22, 0x07	; 7
    1a34:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <setPageAddress>
			I2C_Start(oled_write_address);
    1a38:	8a e7       	ldi	r24, 0x7A	; 122
    1a3a:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
			I2C_Write(CONTROL_DATA);
    1a3e:	80 e4       	ldi	r24, 0x40	; 64
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
    1a46:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8 i = 0 ; i < 21 ; i++){
				I2C_Write(0xC0);
    1a48:	80 ec       	ldi	r24, 0xC0	; 192
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
			//for the underline
			setColumnAddress(97,118);
			setPageAddress(0,7);
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 21 ; i++){
    1a50:	1f 5f       	subi	r17, 0xFF	; 255
    1a52:	15 31       	cpi	r17, 0x15	; 21
    1a54:	c9 f7       	brne	.-14     	; 0x1a48 <time_menu+0x7d2>
				I2C_Write(0xC0);
			}
			I2C_Stop();
    1a56:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>
    1a5a:	06 e0       	ldi	r16, 0x06	; 6
			//starting from 1 to 7 , but in index form we will send "day_name_tracker - 1".
			uint8 day_name_tracker = 6 ;
			uint8 which_button = 0 ;
			do{
				which_button = 0 ;
				which_button = button_check();
    1a5c:	0e 94 18 05 	call	0xa30	; 0xa30 <button_check>

				if(which_button == 3){
    1a60:	83 30       	cpi	r24, 0x03	; 3
    1a62:	71 f4       	brne	.+28     	; 0x1a80 <time_menu+0x80a>
					//this means that we pressed left
					//check if we stopping at letter a
					if(day_name_tracker == 1){
    1a64:	01 30       	cpi	r16, 0x01	; 1
    1a66:	39 f4       	brne	.+14     	; 0x1a76 <time_menu+0x800>
						day_name_tracker = 7 ;
						day_name_print(day_name_tracker - 1 , days);
    1a68:	86 e0       	ldi	r24, 0x06	; 6
    1a6a:	66 e6       	ldi	r22, 0x66	; 102
    1a6c:	70 e0       	ldi	r23, 0x00	; 0
    1a6e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <day_name_print>
    1a72:	07 e0       	ldi	r16, 0x07	; 7
    1a74:	f3 cf       	rjmp	.-26     	; 0x1a5c <time_menu+0x7e6>
					}else{
						day_name_tracker-- ;
    1a76:	10 2f       	mov	r17, r16
    1a78:	11 50       	subi	r17, 0x01	; 1
						day_name_print(day_name_tracker - 1 , days);
    1a7a:	81 2f       	mov	r24, r17
    1a7c:	81 50       	subi	r24, 0x01	; 1
    1a7e:	0e c0       	rjmp	.+28     	; 0x1a9c <time_menu+0x826>
					}

				}else if(which_button == 4){
    1a80:	84 30       	cpi	r24, 0x04	; 4
    1a82:	91 f4       	brne	.+36     	; 0x1aa8 <time_menu+0x832>
					//this means that we pressed right
					//check if we stopping at letter z
					if(day_name_tracker == 7){
    1a84:	07 30       	cpi	r16, 0x07	; 7
    1a86:	39 f4       	brne	.+14     	; 0x1a96 <time_menu+0x820>
						day_name_tracker = 1 ;
						day_name_print(day_name_tracker - 1 , days);
    1a88:	80 e0       	ldi	r24, 0x00	; 0
    1a8a:	66 e6       	ldi	r22, 0x66	; 102
    1a8c:	70 e0       	ldi	r23, 0x00	; 0
    1a8e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <day_name_print>
    1a92:	01 e0       	ldi	r16, 0x01	; 1
    1a94:	e3 cf       	rjmp	.-58     	; 0x1a5c <time_menu+0x7e6>
					}else{
						day_name_tracker++ ;
    1a96:	10 2f       	mov	r17, r16
    1a98:	1f 5f       	subi	r17, 0xFF	; 255
						day_name_print(day_name_tracker - 1 , days);
    1a9a:	80 2f       	mov	r24, r16
    1a9c:	66 e6       	ldi	r22, 0x66	; 102
    1a9e:	70 e0       	ldi	r23, 0x00	; 0
    1aa0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <day_name_print>
	//For storing runtime input
	CLOCK_DATA clock_input ;
	DATE_DATA date_input ;


	for(uint8 num_of_inputs = 0 ; num_of_inputs < 7 ; num_of_inputs++){
    1aa4:	01 2f       	mov	r16, r17
    1aa6:	da cf       	rjmp	.-76     	; 0x1a5c <time_menu+0x7e6>
					}else{
						day_name_tracker++ ;
						day_name_print(day_name_tracker - 1 , days);
					}
				}
			}while(which_button != 5);
    1aa8:	85 30       	cpi	r24, 0x05	; 5
    1aaa:	c1 f6       	brne	.-80     	; 0x1a5c <time_menu+0x7e6>
			date_input.day = day_name_tracker ;

			//for clearing underline
			setColumnAddress(97,118);
    1aac:	81 e6       	ldi	r24, 0x61	; 97
    1aae:	66 e7       	ldi	r22, 0x76	; 118
    1ab0:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <setColumnAddress>
			setPageAddress(0,7);
    1ab4:	80 e0       	ldi	r24, 0x00	; 0
    1ab6:	67 e0       	ldi	r22, 0x07	; 7
    1ab8:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <setPageAddress>
			I2C_Start(oled_write_address);
    1abc:	8a e7       	ldi	r24, 0x7A	; 122
    1abe:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
			I2C_Write(CONTROL_DATA);
    1ac2:	80 e4       	ldi	r24, 0x40	; 64
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
    1aca:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8 i = 0 ; i < 21 ; i++){
				I2C_Write(0x00);
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
			//for clearing underline
			setColumnAddress(97,118);
			setPageAddress(0,7);
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 21 ; i++){
    1ad4:	1f 5f       	subi	r17, 0xFF	; 255
    1ad6:	15 31       	cpi	r17, 0x15	; 21
    1ad8:	c9 f7       	brne	.-14     	; 0x1acc <time_menu+0x856>
				I2C_Write(0x00);
			}
			I2C_Stop();
    1ada:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>
			//after taking all inputs now we will set the time\date and send data to the rtc.
			RTC_CLOCK_Write(clock_input.hours,clock_input.minutes,clock_input.seconds,clock_input.am_pm);
    1ade:	8b 2d       	mov	r24, r11
    1ae0:	6a 2d       	mov	r22, r10
    1ae2:	40 e0       	ldi	r20, 0x00	; 0
    1ae4:	29 2d       	mov	r18, r9
    1ae6:	0e 94 30 15 	call	0x2a60	; 0x2a60 <RTC_CLOCK_Write>
			RTC_DATE_Write(date_input.day,date_input.date,date_input.month,date_input.year);
    1aea:	80 2f       	mov	r24, r16
    1aec:	6c 2d       	mov	r22, r12
    1aee:	4e 2d       	mov	r20, r14
    1af0:	2f 2d       	mov	r18, r15
    1af2:	0e 94 08 15 	call	0x2a10	; 0x2a10 <RTC_DATE_Write>
	//For storing runtime input
	CLOCK_DATA clock_input ;
	DATE_DATA date_input ;


	for(uint8 num_of_inputs = 0 ; num_of_inputs < 7 ; num_of_inputs++){
    1af6:	d3 94       	inc	r13
    1af8:	f7 e0       	ldi	r31, 0x07	; 7
    1afa:	df 16       	cp	r13, r31
    1afc:	09 f0       	breq	.+2      	; 0x1b00 <time_menu+0x88a>
    1afe:	0d cd       	rjmp	.-1510   	; 0x151a <time_menu+0x2a4>
			RTC_DATE_Write(date_input.day,date_input.date,date_input.month,date_input.year);
		}

	}
	return 1 ;
}
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	69 96       	adiw	r28, 0x19	; 25
    1b04:	0f b6       	in	r0, 0x3f	; 63
    1b06:	f8 94       	cli
    1b08:	de bf       	out	0x3e, r29	; 62
    1b0a:	0f be       	out	0x3f, r0	; 63
    1b0c:	cd bf       	out	0x3d, r28	; 61
    1b0e:	cf 91       	pop	r28
    1b10:	df 91       	pop	r29
    1b12:	1f 91       	pop	r17
    1b14:	0f 91       	pop	r16
    1b16:	ff 90       	pop	r15
    1b18:	ef 90       	pop	r14
    1b1a:	df 90       	pop	r13
    1b1c:	cf 90       	pop	r12
    1b1e:	bf 90       	pop	r11
    1b20:	af 90       	pop	r10
    1b22:	9f 90       	pop	r9
    1b24:	8f 90       	pop	r8
    1b26:	08 95       	ret

00001b28 <name_menu>:
			return which_button ;
	}
	return which_button ;
}
/*****************************************************************************/
uint8 name_menu(void){
    1b28:	ef 92       	push	r14
    1b2a:	ff 92       	push	r15
    1b2c:	0f 93       	push	r16
    1b2e:	1f 93       	push	r17
    1b30:	df 93       	push	r29
    1b32:	cf 93       	push	r28
    1b34:	cd b7       	in	r28, 0x3d	; 61
    1b36:	de b7       	in	r29, 0x3e	; 62
    1b38:	2d 97       	sbiw	r28, 0x0d	; 13
    1b3a:	0f b6       	in	r0, 0x3f	; 63
    1b3c:	f8 94       	cli
    1b3e:	de bf       	out	0x3e, r29	; 62
    1b40:	0f be       	out	0x3f, r0	; 63
    1b42:	cd bf       	out	0x3d, r28	; 61

	//First we will print "enter your name" on the top of the screen.
	/*enter_name_arr is an array that hold the indexes of the letters in "enter your name" sentence.*/

	black_entire_screen();
    1b44:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <black_entire_screen>

	uint8 enter_name_arr[13] = {4,13,19,4,17,24,14,20,17,13,0,12,4};
    1b48:	de 01       	movw	r26, r28
    1b4a:	11 96       	adiw	r26, 0x01	; 1
    1b4c:	e5 ec       	ldi	r30, 0xC5	; 197
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	8d e0       	ldi	r24, 0x0D	; 13
    1b52:	01 90       	ld	r0, Z+
    1b54:	0d 92       	st	X+, r0
    1b56:	81 50       	subi	r24, 0x01	; 1
    1b58:	e1 f7       	brne	.-8      	; 0x1b52 <name_menu+0x2a>
    1b5a:	7e 01       	movw	r14, r28
    1b5c:	08 94       	sec
    1b5e:	e1 1c       	adc	r14, r1
    1b60:	f1 1c       	adc	r15, r1
    1b62:	00 e0       	ldi	r16, 0x00	; 0
    1b64:	10 e0       	ldi	r17, 0x00	; 0
	/*now we will print them on the screen*/
	uint8 starting_col = 0 ;
	for(uint8 letter_index = 0 ; letter_index < 13 ; letter_index++){


		if(letter_index == 5 || letter_index == 9){
    1b66:	15 30       	cpi	r17, 0x05	; 5
    1b68:	11 f0       	breq	.+4      	; 0x1b6e <name_menu+0x46>
    1b6a:	19 30       	cpi	r17, 0x09	; 9
    1b6c:	11 f4       	brne	.+4      	; 0x1b72 <name_menu+0x4a>
			starting_col += 14;
    1b6e:	02 5f       	subi	r16, 0xF2	; 242
    1b70:	01 c0       	rjmp	.+2      	; 0x1b74 <name_menu+0x4c>
		}else{
			starting_col += 7;
    1b72:	09 5f       	subi	r16, 0xF9	; 249
		}

		letter_write(7,starting_col,enter_name_arr[letter_index]);
    1b74:	87 e0       	ldi	r24, 0x07	; 7
    1b76:	60 2f       	mov	r22, r16
    1b78:	f7 01       	movw	r30, r14
    1b7a:	41 91       	ld	r20, Z+
    1b7c:	7f 01       	movw	r14, r30
    1b7e:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	black_entire_screen();

	uint8 enter_name_arr[13] = {4,13,19,4,17,24,14,20,17,13,0,12,4};
	/*now we will print them on the screen*/
	uint8 starting_col = 0 ;
	for(uint8 letter_index = 0 ; letter_index < 13 ; letter_index++){
    1b82:	1f 5f       	subi	r17, 0xFF	; 255
    1b84:	1d 30       	cpi	r17, 0x0D	; 13
    1b86:	79 f7       	brne	.-34     	; 0x1b66 <name_menu+0x3e>
    1b88:	92 ed       	ldi	r25, 0xD2	; 210
    1b8a:	e9 2e       	mov	r14, r25
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	f9 2e       	mov	r15, r25
    1b90:	00 e0       	ldi	r16, 0x00	; 0
	for(uint8 letter_in = 0 ; letter_in < 5 ; letter_in++){
		//we want to have a variable to keep track of what letter to show on screen.
		uint8 letter_count = 0 ;

		//now we print letter 'a' and underline it.
		letter_write(3,(letter_in * 7),0);
    1b92:	83 e0       	ldi	r24, 0x03	; 3
    1b94:	60 2f       	mov	r22, r16
    1b96:	40 e0       	ldi	r20, 0x00	; 0
    1b98:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>

		//for the underline
		setColumnAddress((letter_in * 7),8);
    1b9c:	80 2f       	mov	r24, r16
    1b9e:	68 e0       	ldi	r22, 0x08	; 8
    1ba0:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <setColumnAddress>
		setPageAddress(1,7);
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	67 e0       	ldi	r22, 0x07	; 7
    1ba8:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <setPageAddress>
		I2C_Start(oled_write_address);
    1bac:	8a e7       	ldi	r24, 0x7A	; 122
    1bae:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
		I2C_Write(CONTROL_DATA);
    1bb2:	80 e4       	ldi	r24, 0x40	; 64
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
    1bba:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8 i = 0 ; i < 7 ; i++){
			I2C_Write(0x03);
    1bbc:	83 e0       	ldi	r24, 0x03	; 3
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
		//for the underline
		setColumnAddress((letter_in * 7),8);
		setPageAddress(1,7);
		I2C_Start(oled_write_address);
		I2C_Write(CONTROL_DATA);
		for(uint8 i = 0 ; i < 7 ; i++){
    1bc4:	1f 5f       	subi	r17, 0xFF	; 255
    1bc6:	17 30       	cpi	r17, 0x07	; 7
    1bc8:	c9 f7       	brne	.-14     	; 0x1bbc <name_menu+0x94>
			I2C_Write(0x03);
		}
		I2C_Stop();
    1bca:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>
    1bce:	10 e0       	ldi	r17, 0x00	; 0
		//now we want to enter a do while loop in order to check for the buttons.
		//design a function that returns with the value of the button pressed.
		uint8 which_button = 0 ;
		do{
			which_button = 0 ;
			which_button = button_check();
    1bd0:	0e 94 18 05 	call	0xa30	; 0xa30 <button_check>

			if(which_button == 3){
    1bd4:	83 30       	cpi	r24, 0x03	; 3
    1bd6:	51 f4       	brne	.+20     	; 0x1bec <name_menu+0xc4>
				//this means that we pressed left
				//check if we stopping at letter a
				if(letter_count == 0){
    1bd8:	11 23       	and	r17, r17
    1bda:	31 f4       	brne	.+12     	; 0x1be8 <name_menu+0xc0>
					letter_count = 25 ;
					letter_write(3,(letter_in * 7),letter_count);
    1bdc:	60 2f       	mov	r22, r16
    1bde:	49 e1       	ldi	r20, 0x19	; 25
    1be0:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
    1be4:	19 e1       	ldi	r17, 0x19	; 25
    1be6:	f4 cf       	rjmp	.-24     	; 0x1bd0 <name_menu+0xa8>
				}else{
					letter_count-- ;
    1be8:	11 50       	subi	r17, 0x01	; 1
    1bea:	0b c0       	rjmp	.+22     	; 0x1c02 <name_menu+0xda>
					letter_write(3,(letter_in * 7),letter_count);
				}

			}else if(which_button == 4){
    1bec:	84 30       	cpi	r24, 0x04	; 4
    1bee:	79 f4       	brne	.+30     	; 0x1c0e <name_menu+0xe6>
				//this means that we pressed right
				//check if we stopping at letter z
				if(letter_count == 25){
    1bf0:	19 31       	cpi	r17, 0x19	; 25
    1bf2:	31 f4       	brne	.+12     	; 0x1c00 <name_menu+0xd8>
					letter_count = 0 ;
					letter_write(3,(letter_in * 7),letter_count);
    1bf4:	83 e0       	ldi	r24, 0x03	; 3
    1bf6:	60 2f       	mov	r22, r16
    1bf8:	40 e0       	ldi	r20, 0x00	; 0
    1bfa:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
    1bfe:	e7 cf       	rjmp	.-50     	; 0x1bce <name_menu+0xa6>
				}else{
					letter_count++ ;
    1c00:	1f 5f       	subi	r17, 0xFF	; 255
					letter_write(3,(letter_in * 7),letter_count);
    1c02:	83 e0       	ldi	r24, 0x03	; 3
    1c04:	60 2f       	mov	r22, r16
    1c06:	41 2f       	mov	r20, r17
    1c08:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
    1c0c:	e1 cf       	rjmp	.-62     	; 0x1bd0 <name_menu+0xa8>
				}
			}


		}while(which_button != 5);
    1c0e:	85 30       	cpi	r24, 0x05	; 5
    1c10:	f9 f6       	brne	.-66     	; 0x1bd0 <name_menu+0xa8>

		//now we need to store the letter the user have chosen.
		username[letter_in] = letter_count ;
    1c12:	f7 01       	movw	r30, r14
    1c14:	10 83       	st	Z, r17

		//now we need to clear the underline
		setColumnAddress((letter_in * 7),8);
    1c16:	80 2f       	mov	r24, r16
    1c18:	68 e0       	ldi	r22, 0x08	; 8
    1c1a:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <setColumnAddress>
		setPageAddress(1,7);
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	67 e0       	ldi	r22, 0x07	; 7
    1c22:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <setPageAddress>
		I2C_Start(oled_write_address);
    1c26:	8a e7       	ldi	r24, 0x7A	; 122
    1c28:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
		I2C_Write(CONTROL_DATA);
    1c2c:	80 e4       	ldi	r24, 0x40	; 64
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
    1c34:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8 i = 0 ; i < 7 ; i++){
			I2C_Write(0x00);
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
		//now we need to clear the underline
		setColumnAddress((letter_in * 7),8);
		setPageAddress(1,7);
		I2C_Start(oled_write_address);
		I2C_Write(CONTROL_DATA);
		for(uint8 i = 0 ; i < 7 ; i++){
    1c3e:	1f 5f       	subi	r17, 0xFF	; 255
    1c40:	17 30       	cpi	r17, 0x07	; 7
    1c42:	c9 f7       	brne	.-14     	; 0x1c36 <name_menu+0x10e>
			I2C_Write(0x00);
		}
		I2C_Stop();
    1c44:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>
    1c48:	09 5f       	subi	r16, 0xF9	; 249
    1c4a:	08 94       	sec
    1c4c:	e1 1c       	adc	r14, r1
    1c4e:	f1 1c       	adc	r15, r1


	//also we want an array of 5 bytes to store the name of the user.
	//uint8 username[5] = {0} ;

	for(uint8 letter_in = 0 ; letter_in < 5 ; letter_in++){
    1c50:	03 32       	cpi	r16, 0x23	; 35
    1c52:	09 f0       	breq	.+2      	; 0x1c56 <name_menu+0x12e>
    1c54:	9e cf       	rjmp	.-196    	; 0x1b92 <name_menu+0x6a>
		}
		I2C_Stop();

	}
	//now save the name inside eeprom starting from 0x1F9
	I2C_Start(0b10101010);
    1c56:	8a ea       	ldi	r24, 0xAA	; 170
    1c58:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
	//For the address of the boot check byte = 0x1F8
	I2C_Write(0xF9);
    1c5c:	89 ef       	ldi	r24, 0xF9	; 249
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
	for(uint8 i = 0 ; i < 5 ; i++){
		I2C_Write(username[i]);
    1c64:	80 91 d2 00 	lds	r24, 0x00D2
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
    1c6e:	80 91 d3 00 	lds	r24, 0x00D3
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
    1c78:	80 91 d4 00 	lds	r24, 0x00D4
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
    1c82:	80 91 d5 00 	lds	r24, 0x00D5
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
    1c8c:	80 91 d6 00 	lds	r24, 0x00D6
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
	}
	I2C_Stop();
    1c96:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>

	return 1 ; //adding name to eeprom done successfully.
}
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	2d 96       	adiw	r28, 0x0d	; 13
    1c9e:	0f b6       	in	r0, 0x3f	; 63
    1ca0:	f8 94       	cli
    1ca2:	de bf       	out	0x3e, r29	; 62
    1ca4:	0f be       	out	0x3f, r0	; 63
    1ca6:	cd bf       	out	0x3d, r28	; 61
    1ca8:	cf 91       	pop	r28
    1caa:	df 91       	pop	r29
    1cac:	1f 91       	pop	r17
    1cae:	0f 91       	pop	r16
    1cb0:	ff 90       	pop	r15
    1cb2:	ef 90       	pop	r14
    1cb4:	08 95       	ret

00001cb6 <button_init>:
	I2C_Stop();
}
/****************************************************************************/
void button_init(void){
	//For Pin2 PortC
	DIO_SetPinDirection(DIO_PORTC,DIO_PIN2,DIO_PIN_DIR_INPUT);
    1cb6:	82 e0       	ldi	r24, 0x02	; 2
    1cb8:	62 e0       	ldi	r22, 0x02	; 2
    1cba:	40 e0       	ldi	r20, 0x00	; 0
    1cbc:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_SetPinDirection>
	DIO_SetPullUpRes(DIO_PORTC, DIO_PIN2);
    1cc0:	82 e0       	ldi	r24, 0x02	; 2
    1cc2:	62 e0       	ldi	r22, 0x02	; 2
    1cc4:	0e 94 34 10 	call	0x2068	; 0x2068 <DIO_SetPullUpRes>


	//For the 3 buttons
	DIO_SetPinDirection(DIO_PORTC, DIO_PIN3, DIO_PIN_DIR_OUTPUT);
    1cc8:	82 e0       	ldi	r24, 0x02	; 2
    1cca:	63 e0       	ldi	r22, 0x03	; 3
    1ccc:	41 e0       	ldi	r20, 0x01	; 1
    1cce:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTC, DIO_PIN4, DIO_PIN_DIR_OUTPUT);
    1cd2:	82 e0       	ldi	r24, 0x02	; 2
    1cd4:	64 e0       	ldi	r22, 0x04	; 4
    1cd6:	41 e0       	ldi	r20, 0x01	; 1
    1cd8:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTC, DIO_PIN5, DIO_PIN_DIR_OUTPUT);
    1cdc:	82 e0       	ldi	r24, 0x02	; 2
    1cde:	65 e0       	ldi	r22, 0x05	; 5
    1ce0:	41 e0       	ldi	r20, 0x01	; 1
    1ce2:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_SetPinDirection>

	//Set the values to HIGH
	DIO_SetPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_VAL_HIGH);
    1ce6:	82 e0       	ldi	r24, 0x02	; 2
    1ce8:	63 e0       	ldi	r22, 0x03	; 3
    1cea:	41 e0       	ldi	r20, 0x01	; 1
    1cec:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTC,DIO_PIN4,DIO_PIN_VAL_HIGH);
    1cf0:	82 e0       	ldi	r24, 0x02	; 2
    1cf2:	64 e0       	ldi	r22, 0x04	; 4
    1cf4:	41 e0       	ldi	r20, 0x01	; 1
    1cf6:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTC,DIO_PIN5,DIO_PIN_VAL_HIGH);
    1cfa:	82 e0       	ldi	r24, 0x02	; 2
    1cfc:	65 e0       	ldi	r22, 0x05	; 5
    1cfe:	41 e0       	ldi	r20, 0x01	; 1
    1d00:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <DIO_SetPinValue>
}
    1d04:	08 95       	ret

00001d06 <DIO_SetPortDirection>:

#include "DIO.h"

void DIO_SetPortDirection(uint8 Port, uint8 Direction){

	switch(Port){
    1d06:	81 30       	cpi	r24, 0x01	; 1
    1d08:	79 f0       	breq	.+30     	; 0x1d28 <DIO_SetPortDirection+0x22>
    1d0a:	81 30       	cpi	r24, 0x01	; 1
    1d0c:	28 f0       	brcs	.+10     	; 0x1d18 <DIO_SetPortDirection+0x12>
    1d0e:	82 30       	cpi	r24, 0x02	; 2
    1d10:	99 f0       	breq	.+38     	; 0x1d38 <DIO_SetPortDirection+0x32>
    1d12:	83 30       	cpi	r24, 0x03	; 3
    1d14:	01 f5       	brne	.+64     	; 0x1d56 <DIO_SetPortDirection+0x50>
    1d16:	18 c0       	rjmp	.+48     	; 0x1d48 <DIO_SetPortDirection+0x42>
	case(DIO_PORTA):
						if(Direction == DIO_PORT_DIR_INPUT)
    1d18:	66 23       	and	r22, r22
    1d1a:	11 f4       	brne	.+4      	; 0x1d20 <DIO_SetPortDirection+0x1a>
							DDRA = DIO_PORT_DIR_INPUT ;
    1d1c:	1a ba       	out	0x1a, r1	; 26
    1d1e:	08 95       	ret
						else if(Direction == DIO_PORT_DIR_OUTPUT)
    1d20:	6f 3f       	cpi	r22, 0xFF	; 255
    1d22:	c9 f4       	brne	.+50     	; 0x1d56 <DIO_SetPortDirection+0x50>
							DDRA = DIO_PORT_DIR_OUTPUT ;
    1d24:	6a bb       	out	0x1a, r22	; 26
    1d26:	08 95       	ret
	break ;

	case(DIO_PORTB):
						if(Direction == DIO_PORT_DIR_INPUT)
    1d28:	66 23       	and	r22, r22
    1d2a:	11 f4       	brne	.+4      	; 0x1d30 <DIO_SetPortDirection+0x2a>
							DDRB = DIO_PORT_DIR_INPUT ;
    1d2c:	17 ba       	out	0x17, r1	; 23
    1d2e:	08 95       	ret
						else if(Direction == DIO_PORT_DIR_OUTPUT)
    1d30:	6f 3f       	cpi	r22, 0xFF	; 255
    1d32:	89 f4       	brne	.+34     	; 0x1d56 <DIO_SetPortDirection+0x50>
							DDRB = DIO_PORT_DIR_OUTPUT ;
    1d34:	67 bb       	out	0x17, r22	; 23
    1d36:	08 95       	ret
	break ;


	case(DIO_PORTC):
						if(Direction == DIO_PORT_DIR_INPUT)
    1d38:	66 23       	and	r22, r22
    1d3a:	11 f4       	brne	.+4      	; 0x1d40 <DIO_SetPortDirection+0x3a>
							DDRC = DIO_PORT_DIR_INPUT ;
    1d3c:	14 ba       	out	0x14, r1	; 20
    1d3e:	08 95       	ret
						else if(Direction == DIO_PORT_DIR_OUTPUT)
    1d40:	6f 3f       	cpi	r22, 0xFF	; 255
    1d42:	49 f4       	brne	.+18     	; 0x1d56 <DIO_SetPortDirection+0x50>
							DDRC = DIO_PORT_DIR_OUTPUT ;
    1d44:	64 bb       	out	0x14, r22	; 20
    1d46:	08 95       	ret
	break ;


	case(DIO_PORTD):
						if(Direction == DIO_PORT_DIR_INPUT)
    1d48:	66 23       	and	r22, r22
    1d4a:	11 f4       	brne	.+4      	; 0x1d50 <DIO_SetPortDirection+0x4a>
							DDRD = DIO_PORT_DIR_INPUT ;
    1d4c:	11 ba       	out	0x11, r1	; 17
    1d4e:	08 95       	ret
						else if(Direction == DIO_PORT_DIR_OUTPUT)
    1d50:	6f 3f       	cpi	r22, 0xFF	; 255
    1d52:	09 f4       	brne	.+2      	; 0x1d56 <DIO_SetPortDirection+0x50>
							DDRD = DIO_PORT_DIR_OUTPUT ;
    1d54:	61 bb       	out	0x11, r22	; 17
    1d56:	08 95       	ret

00001d58 <DIO_SetPinDirection>:
	}

}

void DIO_SetPinDirection(uint8 Port, uint8 Pin, uint8 Direction){
	switch(Port){
    1d58:	81 30       	cpi	r24, 0x01	; 1
    1d5a:	29 f1       	breq	.+74     	; 0x1da6 <DIO_SetPinDirection+0x4e>
    1d5c:	81 30       	cpi	r24, 0x01	; 1
    1d5e:	38 f0       	brcs	.+14     	; 0x1d6e <DIO_SetPinDirection+0x16>
    1d60:	82 30       	cpi	r24, 0x02	; 2
    1d62:	09 f4       	brne	.+2      	; 0x1d66 <DIO_SetPinDirection+0xe>
    1d64:	3c c0       	rjmp	.+120    	; 0x1dde <DIO_SetPinDirection+0x86>
    1d66:	83 30       	cpi	r24, 0x03	; 3
    1d68:	09 f0       	breq	.+2      	; 0x1d6c <DIO_SetPinDirection+0x14>
    1d6a:	6e c0       	rjmp	.+220    	; 0x1e48 <DIO_SetPinDirection+0xf0>
    1d6c:	53 c0       	rjmp	.+166    	; 0x1e14 <DIO_SetPinDirection+0xbc>

	case(DIO_PORTA):
			if(Direction == DIO_PIN_DIR_INPUT)
    1d6e:	44 23       	and	r20, r20
    1d70:	61 f4       	brne	.+24     	; 0x1d8a <DIO_SetPinDirection+0x32>
				CLR_BIT(DDRA,Pin);
    1d72:	2a b3       	in	r18, 0x1a	; 26
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	02 c0       	rjmp	.+4      	; 0x1d7e <DIO_SetPinDirection+0x26>
    1d7a:	88 0f       	add	r24, r24
    1d7c:	99 1f       	adc	r25, r25
    1d7e:	6a 95       	dec	r22
    1d80:	e2 f7       	brpl	.-8      	; 0x1d7a <DIO_SetPinDirection+0x22>
    1d82:	80 95       	com	r24
    1d84:	82 23       	and	r24, r18
    1d86:	8a bb       	out	0x1a, r24	; 26
    1d88:	08 95       	ret
			else if(Direction == DIO_PIN_DIR_OUTPUT)
    1d8a:	41 30       	cpi	r20, 0x01	; 1
    1d8c:	09 f0       	breq	.+2      	; 0x1d90 <DIO_SetPinDirection+0x38>
    1d8e:	5c c0       	rjmp	.+184    	; 0x1e48 <DIO_SetPinDirection+0xf0>
				SET_BIT(DDRA,Pin);
    1d90:	2a b3       	in	r18, 0x1a	; 26
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	02 c0       	rjmp	.+4      	; 0x1d9c <DIO_SetPinDirection+0x44>
    1d98:	88 0f       	add	r24, r24
    1d9a:	99 1f       	adc	r25, r25
    1d9c:	6a 95       	dec	r22
    1d9e:	e2 f7       	brpl	.-8      	; 0x1d98 <DIO_SetPinDirection+0x40>
    1da0:	28 2b       	or	r18, r24
    1da2:	2a bb       	out	0x1a, r18	; 26
    1da4:	08 95       	ret
	break;

	case(DIO_PORTB):
			if(Direction == DIO_PIN_DIR_INPUT)
    1da6:	44 23       	and	r20, r20
    1da8:	61 f4       	brne	.+24     	; 0x1dc2 <DIO_SetPinDirection+0x6a>
				CLR_BIT(DDRB,Pin);
    1daa:	27 b3       	in	r18, 0x17	; 23
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	02 c0       	rjmp	.+4      	; 0x1db6 <DIO_SetPinDirection+0x5e>
    1db2:	88 0f       	add	r24, r24
    1db4:	99 1f       	adc	r25, r25
    1db6:	6a 95       	dec	r22
    1db8:	e2 f7       	brpl	.-8      	; 0x1db2 <DIO_SetPinDirection+0x5a>
    1dba:	80 95       	com	r24
    1dbc:	82 23       	and	r24, r18
    1dbe:	87 bb       	out	0x17, r24	; 23
    1dc0:	08 95       	ret
			else if(Direction == DIO_PIN_DIR_OUTPUT)
    1dc2:	41 30       	cpi	r20, 0x01	; 1
    1dc4:	09 f0       	breq	.+2      	; 0x1dc8 <DIO_SetPinDirection+0x70>
    1dc6:	40 c0       	rjmp	.+128    	; 0x1e48 <DIO_SetPinDirection+0xf0>
				SET_BIT(DDRB,Pin);
    1dc8:	27 b3       	in	r18, 0x17	; 23
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	02 c0       	rjmp	.+4      	; 0x1dd4 <DIO_SetPinDirection+0x7c>
    1dd0:	88 0f       	add	r24, r24
    1dd2:	99 1f       	adc	r25, r25
    1dd4:	6a 95       	dec	r22
    1dd6:	e2 f7       	brpl	.-8      	; 0x1dd0 <DIO_SetPinDirection+0x78>
    1dd8:	28 2b       	or	r18, r24
    1dda:	27 bb       	out	0x17, r18	; 23
    1ddc:	08 95       	ret
	break;

	case(DIO_PORTC):
			if(Direction == DIO_PIN_DIR_INPUT)
    1dde:	44 23       	and	r20, r20
    1de0:	61 f4       	brne	.+24     	; 0x1dfa <DIO_SetPinDirection+0xa2>
				CLR_BIT(DDRC,Pin);
    1de2:	24 b3       	in	r18, 0x14	; 20
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	02 c0       	rjmp	.+4      	; 0x1dee <DIO_SetPinDirection+0x96>
    1dea:	88 0f       	add	r24, r24
    1dec:	99 1f       	adc	r25, r25
    1dee:	6a 95       	dec	r22
    1df0:	e2 f7       	brpl	.-8      	; 0x1dea <DIO_SetPinDirection+0x92>
    1df2:	80 95       	com	r24
    1df4:	82 23       	and	r24, r18
    1df6:	84 bb       	out	0x14, r24	; 20
    1df8:	08 95       	ret
			else if(Direction == DIO_PIN_DIR_OUTPUT)
    1dfa:	41 30       	cpi	r20, 0x01	; 1
    1dfc:	29 f5       	brne	.+74     	; 0x1e48 <DIO_SetPinDirection+0xf0>
				SET_BIT(DDRC,Pin);
    1dfe:	24 b3       	in	r18, 0x14	; 20
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	02 c0       	rjmp	.+4      	; 0x1e0a <DIO_SetPinDirection+0xb2>
    1e06:	88 0f       	add	r24, r24
    1e08:	99 1f       	adc	r25, r25
    1e0a:	6a 95       	dec	r22
    1e0c:	e2 f7       	brpl	.-8      	; 0x1e06 <DIO_SetPinDirection+0xae>
    1e0e:	28 2b       	or	r18, r24
    1e10:	24 bb       	out	0x14, r18	; 20
    1e12:	08 95       	ret
		break;

	case(DIO_PORTD):
			if(Direction == DIO_PIN_DIR_INPUT)
    1e14:	44 23       	and	r20, r20
    1e16:	61 f4       	brne	.+24     	; 0x1e30 <DIO_SetPinDirection+0xd8>
				CLR_BIT(DDRD,Pin);
    1e18:	21 b3       	in	r18, 0x11	; 17
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	02 c0       	rjmp	.+4      	; 0x1e24 <DIO_SetPinDirection+0xcc>
    1e20:	88 0f       	add	r24, r24
    1e22:	99 1f       	adc	r25, r25
    1e24:	6a 95       	dec	r22
    1e26:	e2 f7       	brpl	.-8      	; 0x1e20 <DIO_SetPinDirection+0xc8>
    1e28:	80 95       	com	r24
    1e2a:	82 23       	and	r24, r18
    1e2c:	81 bb       	out	0x11, r24	; 17
    1e2e:	08 95       	ret
			else if(Direction == DIO_PIN_DIR_OUTPUT)
    1e30:	41 30       	cpi	r20, 0x01	; 1
    1e32:	51 f4       	brne	.+20     	; 0x1e48 <DIO_SetPinDirection+0xf0>
				SET_BIT(DDRD,Pin);
    1e34:	21 b3       	in	r18, 0x11	; 17
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	02 c0       	rjmp	.+4      	; 0x1e40 <DIO_SetPinDirection+0xe8>
    1e3c:	88 0f       	add	r24, r24
    1e3e:	99 1f       	adc	r25, r25
    1e40:	6a 95       	dec	r22
    1e42:	e2 f7       	brpl	.-8      	; 0x1e3c <DIO_SetPinDirection+0xe4>
    1e44:	28 2b       	or	r18, r24
    1e46:	21 bb       	out	0x11, r18	; 17
    1e48:	08 95       	ret

00001e4a <DIO_SetPortValue>:
	}

}

void DIO_SetPortValue(uint8 Port, uint8 Value){
	switch(Value){
    1e4a:	66 23       	and	r22, r22
    1e4c:	61 f0       	breq	.+24     	; 0x1e66 <DIO_SetPortValue+0x1c>
    1e4e:	6f 3f       	cpi	r22, 0xFF	; 255
    1e50:	d9 f4       	brne	.+54     	; 0x1e88 <DIO_SetPortValue+0x3e>

	case(DIO_PORT_VAL_HIGH):
			switch(Port){
    1e52:	81 30       	cpi	r24, 0x01	; 1
    1e54:	21 f1       	breq	.+72     	; 0x1e9e <DIO_SetPortValue+0x54>
    1e56:	81 30       	cpi	r24, 0x01	; 1
    1e58:	00 f1       	brcs	.+64     	; 0x1e9a <DIO_SetPortValue+0x50>
    1e5a:	82 30       	cpi	r24, 0x02	; 2
    1e5c:	11 f1       	breq	.+68     	; 0x1ea2 <DIO_SetPortValue+0x58>
    1e5e:	83 30       	cpi	r24, 0x03	; 3
    1e60:	19 f5       	brne	.+70     	; 0x1ea8 <DIO_SetPortValue+0x5e>
					break;
			case(DIO_PORTC):
					PORTC = DIO_PORT_VAL_HIGH ;
					break;
			case(DIO_PORTD):
					PORTD = DIO_PORT_VAL_HIGH ;
    1e62:	62 bb       	out	0x12, r22	; 18
    1e64:	08 95       	ret
				break;
			}
		break;

		case(DIO_PORT_VAL_LOW):
			switch(Port){
    1e66:	81 30       	cpi	r24, 0x01	; 1
    1e68:	49 f0       	breq	.+18     	; 0x1e7c <DIO_SetPortValue+0x32>
    1e6a:	81 30       	cpi	r24, 0x01	; 1
    1e6c:	28 f0       	brcs	.+10     	; 0x1e78 <DIO_SetPortValue+0x2e>
    1e6e:	82 30       	cpi	r24, 0x02	; 2
    1e70:	39 f0       	breq	.+14     	; 0x1e80 <DIO_SetPortValue+0x36>
    1e72:	83 30       	cpi	r24, 0x03	; 3
    1e74:	c9 f4       	brne	.+50     	; 0x1ea8 <DIO_SetPortValue+0x5e>
    1e76:	06 c0       	rjmp	.+12     	; 0x1e84 <DIO_SetPortValue+0x3a>
			case(DIO_PORTA):
					PORTA = DIO_PORT_VAL_LOW ;
    1e78:	1b ba       	out	0x1b, r1	; 27
    1e7a:	08 95       	ret
					break;
			case(DIO_PORTB):
					PORTB = DIO_PORT_VAL_LOW ;
    1e7c:	18 ba       	out	0x18, r1	; 24
    1e7e:	08 95       	ret
					break;
			case(DIO_PORTC):
					PORTC = DIO_PORT_VAL_LOW ;
    1e80:	15 ba       	out	0x15, r1	; 21
    1e82:	08 95       	ret
					break;
			case(DIO_PORTD):
					PORTD = DIO_PORT_VAL_LOW ;
    1e84:	12 ba       	out	0x12, r1	; 18
    1e86:	08 95       	ret
				break;
			}
			break;

			default:
				switch(Port){
    1e88:	81 30       	cpi	r24, 0x01	; 1
    1e8a:	49 f0       	breq	.+18     	; 0x1e9e <DIO_SetPortValue+0x54>
    1e8c:	81 30       	cpi	r24, 0x01	; 1
    1e8e:	28 f0       	brcs	.+10     	; 0x1e9a <DIO_SetPortValue+0x50>
    1e90:	82 30       	cpi	r24, 0x02	; 2
    1e92:	39 f0       	breq	.+14     	; 0x1ea2 <DIO_SetPortValue+0x58>
    1e94:	83 30       	cpi	r24, 0x03	; 3
    1e96:	41 f4       	brne	.+16     	; 0x1ea8 <DIO_SetPortValue+0x5e>
    1e98:	06 c0       	rjmp	.+12     	; 0x1ea6 <DIO_SetPortValue+0x5c>
				case(DIO_PORTA):
						PORTA = Value ;
    1e9a:	6b bb       	out	0x1b, r22	; 27
    1e9c:	08 95       	ret
						break;
				case(DIO_PORTB):
						PORTB = Value ;
    1e9e:	68 bb       	out	0x18, r22	; 24
    1ea0:	08 95       	ret
						break;
				case(DIO_PORTC):
						PORTC = Value ;
    1ea2:	65 bb       	out	0x15, r22	; 21
    1ea4:	08 95       	ret
						break;
				case(DIO_PORTD):
						PORTD = Value ;
    1ea6:	62 bb       	out	0x12, r22	; 18
    1ea8:	08 95       	ret

00001eaa <DIO_SetPinValue>:
	}

}

void DIO_SetPinValue(uint8 Port, uint8 Pin, uint8 Value){
	switch(Value){
    1eaa:	44 23       	and	r20, r20
    1eac:	c9 f1       	breq	.+114    	; 0x1f20 <DIO_SetPinValue+0x76>
    1eae:	41 30       	cpi	r20, 0x01	; 1
    1eb0:	09 f0       	breq	.+2      	; 0x1eb4 <DIO_SetPinValue+0xa>
    1eb2:	6e c0       	rjmp	.+220    	; 0x1f90 <DIO_SetPinValue+0xe6>

	case(DIO_PIN_VAL_HIGH):
			switch(Port){
    1eb4:	81 30       	cpi	r24, 0x01	; 1
    1eb6:	99 f0       	breq	.+38     	; 0x1ede <DIO_SetPinValue+0x34>
    1eb8:	81 30       	cpi	r24, 0x01	; 1
    1eba:	30 f0       	brcs	.+12     	; 0x1ec8 <DIO_SetPinValue+0x1e>
    1ebc:	82 30       	cpi	r24, 0x02	; 2
    1ebe:	d1 f0       	breq	.+52     	; 0x1ef4 <DIO_SetPinValue+0x4a>
    1ec0:	83 30       	cpi	r24, 0x03	; 3
    1ec2:	09 f0       	breq	.+2      	; 0x1ec6 <DIO_SetPinValue+0x1c>
    1ec4:	65 c0       	rjmp	.+202    	; 0x1f90 <DIO_SetPinValue+0xe6>
    1ec6:	21 c0       	rjmp	.+66     	; 0x1f0a <DIO_SetPinValue+0x60>
			case(DIO_PORTA):
					SET_BIT(PORTA,Pin) ;
    1ec8:	2b b3       	in	r18, 0x1b	; 27
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	02 c0       	rjmp	.+4      	; 0x1ed4 <DIO_SetPinValue+0x2a>
    1ed0:	88 0f       	add	r24, r24
    1ed2:	99 1f       	adc	r25, r25
    1ed4:	6a 95       	dec	r22
    1ed6:	e2 f7       	brpl	.-8      	; 0x1ed0 <DIO_SetPinValue+0x26>
    1ed8:	28 2b       	or	r18, r24
    1eda:	2b bb       	out	0x1b, r18	; 27
    1edc:	08 95       	ret
					break;
			case(DIO_PORTB):
					SET_BIT(PORTB,Pin) ;
    1ede:	28 b3       	in	r18, 0x18	; 24
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	02 c0       	rjmp	.+4      	; 0x1eea <DIO_SetPinValue+0x40>
    1ee6:	88 0f       	add	r24, r24
    1ee8:	99 1f       	adc	r25, r25
    1eea:	6a 95       	dec	r22
    1eec:	e2 f7       	brpl	.-8      	; 0x1ee6 <DIO_SetPinValue+0x3c>
    1eee:	28 2b       	or	r18, r24
    1ef0:	28 bb       	out	0x18, r18	; 24
    1ef2:	08 95       	ret
					break;
			case(DIO_PORTC):
					SET_BIT(PORTC,Pin) ;
    1ef4:	25 b3       	in	r18, 0x15	; 21
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	02 c0       	rjmp	.+4      	; 0x1f00 <DIO_SetPinValue+0x56>
    1efc:	88 0f       	add	r24, r24
    1efe:	99 1f       	adc	r25, r25
    1f00:	6a 95       	dec	r22
    1f02:	e2 f7       	brpl	.-8      	; 0x1efc <DIO_SetPinValue+0x52>
    1f04:	28 2b       	or	r18, r24
    1f06:	25 bb       	out	0x15, r18	; 21
    1f08:	08 95       	ret
					break;
			case(DIO_PORTD):
					SET_BIT(PORTD,Pin) ;
    1f0a:	22 b3       	in	r18, 0x12	; 18
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	02 c0       	rjmp	.+4      	; 0x1f16 <DIO_SetPinValue+0x6c>
    1f12:	88 0f       	add	r24, r24
    1f14:	99 1f       	adc	r25, r25
    1f16:	6a 95       	dec	r22
    1f18:	e2 f7       	brpl	.-8      	; 0x1f12 <DIO_SetPinValue+0x68>
    1f1a:	28 2b       	or	r18, r24
    1f1c:	22 bb       	out	0x12, r18	; 18
    1f1e:	08 95       	ret
				break;
			}
	break;

	case(DIO_PIN_VAL_LOW):
			switch(Port){
    1f20:	81 30       	cpi	r24, 0x01	; 1
    1f22:	99 f0       	breq	.+38     	; 0x1f4a <DIO_SetPinValue+0xa0>
    1f24:	81 30       	cpi	r24, 0x01	; 1
    1f26:	28 f0       	brcs	.+10     	; 0x1f32 <DIO_SetPinValue+0x88>
    1f28:	82 30       	cpi	r24, 0x02	; 2
    1f2a:	d9 f0       	breq	.+54     	; 0x1f62 <DIO_SetPinValue+0xb8>
    1f2c:	83 30       	cpi	r24, 0x03	; 3
    1f2e:	81 f5       	brne	.+96     	; 0x1f90 <DIO_SetPinValue+0xe6>
    1f30:	24 c0       	rjmp	.+72     	; 0x1f7a <DIO_SetPinValue+0xd0>
			case(DIO_PORTA):
					CLR_BIT(PORTA,Pin) ;
    1f32:	2b b3       	in	r18, 0x1b	; 27
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	02 c0       	rjmp	.+4      	; 0x1f3e <DIO_SetPinValue+0x94>
    1f3a:	88 0f       	add	r24, r24
    1f3c:	99 1f       	adc	r25, r25
    1f3e:	6a 95       	dec	r22
    1f40:	e2 f7       	brpl	.-8      	; 0x1f3a <DIO_SetPinValue+0x90>
    1f42:	80 95       	com	r24
    1f44:	82 23       	and	r24, r18
    1f46:	8b bb       	out	0x1b, r24	; 27
    1f48:	08 95       	ret
					break;
			case(DIO_PORTB):
					CLR_BIT(PORTB,Pin) ;
    1f4a:	28 b3       	in	r18, 0x18	; 24
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	02 c0       	rjmp	.+4      	; 0x1f56 <DIO_SetPinValue+0xac>
    1f52:	88 0f       	add	r24, r24
    1f54:	99 1f       	adc	r25, r25
    1f56:	6a 95       	dec	r22
    1f58:	e2 f7       	brpl	.-8      	; 0x1f52 <DIO_SetPinValue+0xa8>
    1f5a:	80 95       	com	r24
    1f5c:	82 23       	and	r24, r18
    1f5e:	88 bb       	out	0x18, r24	; 24
    1f60:	08 95       	ret
					break;
			case(DIO_PORTC):
					CLR_BIT(PORTC,Pin) ;
    1f62:	25 b3       	in	r18, 0x15	; 21
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	02 c0       	rjmp	.+4      	; 0x1f6e <DIO_SetPinValue+0xc4>
    1f6a:	88 0f       	add	r24, r24
    1f6c:	99 1f       	adc	r25, r25
    1f6e:	6a 95       	dec	r22
    1f70:	e2 f7       	brpl	.-8      	; 0x1f6a <DIO_SetPinValue+0xc0>
    1f72:	80 95       	com	r24
    1f74:	82 23       	and	r24, r18
    1f76:	85 bb       	out	0x15, r24	; 21
    1f78:	08 95       	ret
					break;
			case(DIO_PORTD):
					CLR_BIT(PORTD,Pin) ;
    1f7a:	22 b3       	in	r18, 0x12	; 18
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	02 c0       	rjmp	.+4      	; 0x1f86 <DIO_SetPinValue+0xdc>
    1f82:	88 0f       	add	r24, r24
    1f84:	99 1f       	adc	r25, r25
    1f86:	6a 95       	dec	r22
    1f88:	e2 f7       	brpl	.-8      	; 0x1f82 <DIO_SetPinValue+0xd8>
    1f8a:	80 95       	com	r24
    1f8c:	82 23       	and	r24, r18
    1f8e:	82 bb       	out	0x12, r24	; 18
    1f90:	08 95       	ret

00001f92 <DIO_GetPortValue>:

}



void DIO_GetPortValue(uint8 Port, uint8 *Value){
    1f92:	fb 01       	movw	r30, r22

	switch(Port){
    1f94:	81 30       	cpi	r24, 0x01	; 1
    1f96:	49 f0       	breq	.+18     	; 0x1faa <DIO_GetPortValue+0x18>
    1f98:	81 30       	cpi	r24, 0x01	; 1
    1f9a:	28 f0       	brcs	.+10     	; 0x1fa6 <DIO_GetPortValue+0x14>
    1f9c:	82 30       	cpi	r24, 0x02	; 2
    1f9e:	39 f0       	breq	.+14     	; 0x1fae <DIO_GetPortValue+0x1c>
    1fa0:	83 30       	cpi	r24, 0x03	; 3
    1fa2:	51 f4       	brne	.+20     	; 0x1fb8 <DIO_GetPortValue+0x26>
    1fa4:	07 c0       	rjmp	.+14     	; 0x1fb4 <DIO_GetPortValue+0x22>
	case DIO_PORTA :
		*Value = PINA ;
    1fa6:	89 b3       	in	r24, 0x19	; 25
    1fa8:	03 c0       	rjmp	.+6      	; 0x1fb0 <DIO_GetPortValue+0x1e>
		break;

	case DIO_PORTB :
		*Value = PINB ;
    1faa:	86 b3       	in	r24, 0x16	; 22
    1fac:	01 c0       	rjmp	.+2      	; 0x1fb0 <DIO_GetPortValue+0x1e>
		break;

	case DIO_PORTC :
		*Value = PINC ;
    1fae:	83 b3       	in	r24, 0x13	; 19
    1fb0:	80 83       	st	Z, r24
    1fb2:	08 95       	ret
		break;

	case DIO_PORTD :
		*Value = PIND ;
    1fb4:	80 b3       	in	r24, 0x10	; 16
    1fb6:	80 83       	st	Z, r24
    1fb8:	08 95       	ret

00001fba <DIO_GetPinValue>:
		break;
	}

}

void DIO_GetPinValue(uint8 Port, uint8 Pin, uint8 *Value){
    1fba:	fa 01       	movw	r30, r20

	switch(Port){
    1fbc:	81 30       	cpi	r24, 0x01	; 1
    1fbe:	49 f0       	breq	.+18     	; 0x1fd2 <DIO_GetPinValue+0x18>
    1fc0:	81 30       	cpi	r24, 0x01	; 1
    1fc2:	28 f0       	brcs	.+10     	; 0x1fce <DIO_GetPinValue+0x14>
    1fc4:	82 30       	cpi	r24, 0x02	; 2
    1fc6:	39 f0       	breq	.+14     	; 0x1fd6 <DIO_GetPinValue+0x1c>
    1fc8:	83 30       	cpi	r24, 0x03	; 3
    1fca:	c1 f4       	brne	.+48     	; 0x1ffc <DIO_GetPinValue+0x42>
    1fcc:	0e c0       	rjmp	.+28     	; 0x1fea <DIO_GetPinValue+0x30>
	case DIO_PORTA :
		*Value = GET_BIT(PINA,Pin) ;
    1fce:	89 b3       	in	r24, 0x19	; 25
    1fd0:	03 c0       	rjmp	.+6      	; 0x1fd8 <DIO_GetPinValue+0x1e>
		break;

	case DIO_PORTB :
		*Value = GET_BIT(PINB,Pin) ;
    1fd2:	86 b3       	in	r24, 0x16	; 22
    1fd4:	01 c0       	rjmp	.+2      	; 0x1fd8 <DIO_GetPinValue+0x1e>
		break;

	case DIO_PORTC :
		*Value = GET_BIT(PINC,Pin) ;
    1fd6:	83 b3       	in	r24, 0x13	; 19
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	02 c0       	rjmp	.+4      	; 0x1fe0 <DIO_GetPinValue+0x26>
    1fdc:	95 95       	asr	r25
    1fde:	87 95       	ror	r24
    1fe0:	6a 95       	dec	r22
    1fe2:	e2 f7       	brpl	.-8      	; 0x1fdc <DIO_GetPinValue+0x22>
    1fe4:	81 70       	andi	r24, 0x01	; 1
    1fe6:	80 83       	st	Z, r24
    1fe8:	08 95       	ret
		break;

	case DIO_PORTD :
		*Value = GET_BIT(PIND,Pin) ;
    1fea:	80 b3       	in	r24, 0x10	; 16
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	02 c0       	rjmp	.+4      	; 0x1ff4 <DIO_GetPinValue+0x3a>
    1ff0:	95 95       	asr	r25
    1ff2:	87 95       	ror	r24
    1ff4:	6a 95       	dec	r22
    1ff6:	e2 f7       	brpl	.-8      	; 0x1ff0 <DIO_GetPinValue+0x36>
    1ff8:	81 70       	andi	r24, 0x01	; 1
    1ffa:	80 83       	st	Z, r24
    1ffc:	08 95       	ret

00001ffe <DIO_TogglePin>:
	}

}

void DIO_TogglePin(uint8 Port, uint8 Pin){
	switch(Port){
    1ffe:	81 30       	cpi	r24, 0x01	; 1
    2000:	91 f0       	breq	.+36     	; 0x2026 <DIO_TogglePin+0x28>
    2002:	81 30       	cpi	r24, 0x01	; 1
    2004:	28 f0       	brcs	.+10     	; 0x2010 <DIO_TogglePin+0x12>
    2006:	82 30       	cpi	r24, 0x02	; 2
    2008:	c9 f0       	breq	.+50     	; 0x203c <DIO_TogglePin+0x3e>
    200a:	83 30       	cpi	r24, 0x03	; 3
    200c:	61 f5       	brne	.+88     	; 0x2066 <DIO_TogglePin+0x68>
    200e:	21 c0       	rjmp	.+66     	; 0x2052 <DIO_TogglePin+0x54>
	case DIO_PORTA :
		Toggle_BIT(PORTA,Pin);
    2010:	2b b3       	in	r18, 0x1b	; 27
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	02 c0       	rjmp	.+4      	; 0x201c <DIO_TogglePin+0x1e>
    2018:	88 0f       	add	r24, r24
    201a:	99 1f       	adc	r25, r25
    201c:	6a 95       	dec	r22
    201e:	e2 f7       	brpl	.-8      	; 0x2018 <DIO_TogglePin+0x1a>
    2020:	28 27       	eor	r18, r24
    2022:	2b bb       	out	0x1b, r18	; 27
    2024:	08 95       	ret
		break;

	case DIO_PORTB :
		Toggle_BIT(PORTB,Pin);
    2026:	28 b3       	in	r18, 0x18	; 24
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	02 c0       	rjmp	.+4      	; 0x2032 <DIO_TogglePin+0x34>
    202e:	88 0f       	add	r24, r24
    2030:	99 1f       	adc	r25, r25
    2032:	6a 95       	dec	r22
    2034:	e2 f7       	brpl	.-8      	; 0x202e <DIO_TogglePin+0x30>
    2036:	28 27       	eor	r18, r24
    2038:	28 bb       	out	0x18, r18	; 24
    203a:	08 95       	ret
		break;

	case DIO_PORTC :
		Toggle_BIT(PORTC,Pin);
    203c:	25 b3       	in	r18, 0x15	; 21
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	02 c0       	rjmp	.+4      	; 0x2048 <DIO_TogglePin+0x4a>
    2044:	88 0f       	add	r24, r24
    2046:	99 1f       	adc	r25, r25
    2048:	6a 95       	dec	r22
    204a:	e2 f7       	brpl	.-8      	; 0x2044 <DIO_TogglePin+0x46>
    204c:	28 27       	eor	r18, r24
    204e:	25 bb       	out	0x15, r18	; 21
    2050:	08 95       	ret
		break;

	case DIO_PORTD :
		Toggle_BIT(PORTD,Pin);
    2052:	22 b3       	in	r18, 0x12	; 18
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	02 c0       	rjmp	.+4      	; 0x205e <DIO_TogglePin+0x60>
    205a:	88 0f       	add	r24, r24
    205c:	99 1f       	adc	r25, r25
    205e:	6a 95       	dec	r22
    2060:	e2 f7       	brpl	.-8      	; 0x205a <DIO_TogglePin+0x5c>
    2062:	28 27       	eor	r18, r24
    2064:	22 bb       	out	0x12, r18	; 18
    2066:	08 95       	ret

00002068 <DIO_SetPullUpRes>:

}


void DIO_SetPullUpRes(uint8 Port, uint8 Pin){
	switch(Port){
    2068:	81 30       	cpi	r24, 0x01	; 1
    206a:	91 f0       	breq	.+36     	; 0x2090 <DIO_SetPullUpRes+0x28>
    206c:	81 30       	cpi	r24, 0x01	; 1
    206e:	28 f0       	brcs	.+10     	; 0x207a <DIO_SetPullUpRes+0x12>
    2070:	82 30       	cpi	r24, 0x02	; 2
    2072:	c9 f0       	breq	.+50     	; 0x20a6 <DIO_SetPullUpRes+0x3e>
    2074:	83 30       	cpi	r24, 0x03	; 3
    2076:	61 f5       	brne	.+88     	; 0x20d0 <DIO_SetPullUpRes+0x68>
    2078:	21 c0       	rjmp	.+66     	; 0x20bc <DIO_SetPullUpRes+0x54>
	case DIO_PORTA :
		SET_BIT(PORTA,Pin);
    207a:	2b b3       	in	r18, 0x1b	; 27
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	02 c0       	rjmp	.+4      	; 0x2086 <DIO_SetPullUpRes+0x1e>
    2082:	88 0f       	add	r24, r24
    2084:	99 1f       	adc	r25, r25
    2086:	6a 95       	dec	r22
    2088:	e2 f7       	brpl	.-8      	; 0x2082 <DIO_SetPullUpRes+0x1a>
    208a:	28 2b       	or	r18, r24
    208c:	2b bb       	out	0x1b, r18	; 27
    208e:	08 95       	ret
		break;

	case DIO_PORTB :
		SET_BIT(PORTB,Pin);
    2090:	28 b3       	in	r18, 0x18	; 24
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	02 c0       	rjmp	.+4      	; 0x209c <DIO_SetPullUpRes+0x34>
    2098:	88 0f       	add	r24, r24
    209a:	99 1f       	adc	r25, r25
    209c:	6a 95       	dec	r22
    209e:	e2 f7       	brpl	.-8      	; 0x2098 <DIO_SetPullUpRes+0x30>
    20a0:	28 2b       	or	r18, r24
    20a2:	28 bb       	out	0x18, r18	; 24
    20a4:	08 95       	ret
		break;

	case DIO_PORTC :
		SET_BIT(PORTC,Pin);
    20a6:	25 b3       	in	r18, 0x15	; 21
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	02 c0       	rjmp	.+4      	; 0x20b2 <DIO_SetPullUpRes+0x4a>
    20ae:	88 0f       	add	r24, r24
    20b0:	99 1f       	adc	r25, r25
    20b2:	6a 95       	dec	r22
    20b4:	e2 f7       	brpl	.-8      	; 0x20ae <DIO_SetPullUpRes+0x46>
    20b6:	28 2b       	or	r18, r24
    20b8:	25 bb       	out	0x15, r18	; 21
    20ba:	08 95       	ret
		break;

	case DIO_PORTD :
		SET_BIT(PORTD,Pin);
    20bc:	22 b3       	in	r18, 0x12	; 18
    20be:	81 e0       	ldi	r24, 0x01	; 1
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	02 c0       	rjmp	.+4      	; 0x20c8 <DIO_SetPullUpRes+0x60>
    20c4:	88 0f       	add	r24, r24
    20c6:	99 1f       	adc	r25, r25
    20c8:	6a 95       	dec	r22
    20ca:	e2 f7       	brpl	.-8      	; 0x20c4 <DIO_SetPullUpRes+0x5c>
    20cc:	28 2b       	or	r18, r24
    20ce:	22 bb       	out	0x12, r18	; 18
    20d0:	08 95       	ret

000020d2 <TASK_CREATE>:

Task arr[NUM_TASKS] = {} ;


void TASK_CREATE(uint8 priority, uint8 period, void(*Func_ptr)(void)){
	arr[priority].Period = period ;
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	fc 01       	movw	r30, r24
    20d6:	ee 0f       	add	r30, r30
    20d8:	ff 1f       	adc	r31, r31
    20da:	e8 0f       	add	r30, r24
    20dc:	f9 1f       	adc	r31, r25
    20de:	e8 52       	subi	r30, 0x28	; 40
    20e0:	ff 4f       	sbci	r31, 0xFF	; 255
    20e2:	60 83       	st	Z, r22
	arr[priority].Func_ptr = Func_ptr ;
    20e4:	52 83       	std	Z+2, r21	; 0x02
    20e6:	41 83       	std	Z+1, r20	; 0x01
}
    20e8:	08 95       	ret

000020ea <Scheduler>:
		LCD_WriteString(name);
	}

}

void Scheduler(uint8 ticks){
    20ea:	1f 93       	push	r17
    20ec:	cf 93       	push	r28
    20ee:	df 93       	push	r29
    20f0:	18 2f       	mov	r17, r24
    20f2:	c8 ed       	ldi	r28, 0xD8	; 216
    20f4:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i = 0 ; i < NUM_TASKS ; i++){
		if(ticks % arr[i].Period == 0){
    20f6:	68 81       	ld	r22, Y
    20f8:	81 2f       	mov	r24, r17
    20fa:	0e 94 20 17 	call	0x2e40	; 0x2e40 <__udivmodqi4>
    20fe:	99 23       	and	r25, r25
    2100:	19 f4       	brne	.+6      	; 0x2108 <Scheduler+0x1e>
			arr[i].Func_ptr();
    2102:	e9 81       	ldd	r30, Y+1	; 0x01
    2104:	fa 81       	ldd	r31, Y+2	; 0x02
    2106:	09 95       	icall
    2108:	23 96       	adiw	r28, 0x03	; 3
	}

}

void Scheduler(uint8 ticks){
	for(int i = 0 ; i < NUM_TASKS ; i++){
    210a:	80 e0       	ldi	r24, 0x00	; 0
    210c:	c7 3e       	cpi	r28, 0xE7	; 231
    210e:	d8 07       	cpc	r29, r24
    2110:	91 f7       	brne	.-28     	; 0x20f6 <Scheduler+0xc>
		if(ticks % arr[i].Period == 0){
			arr[i].Func_ptr();
		}
	}
}
    2112:	df 91       	pop	r29
    2114:	cf 91       	pop	r28
    2116:	1f 91       	pop	r17
    2118:	08 95       	ret

0000211a <LCD>:
		flip *= -1;
	}
}

void LCD(void){
	LCD_Init();
    211a:	0e 94 8a 13 	call	0x2714	; 0x2714 <LCD_Init>

	static uint8 index = 0 ;
	static sint8 dir = 1 ;

	char *name = "Ahmed" ;
	if(index == 11 && dir == 1){
    211e:	60 91 e7 00 	lds	r22, 0x00E7
    2122:	6b 30       	cpi	r22, 0x0B	; 11
    2124:	69 f4       	brne	.+26     	; 0x2140 <LCD+0x26>
    2126:	80 91 9b 00 	lds	r24, 0x009B
    212a:	81 30       	cpi	r24, 0x01	; 1
    212c:	69 f5       	brne	.+90     	; 0x2188 <LCD+0x6e>
		dir *= -1 ;
    212e:	8f ef       	ldi	r24, 0xFF	; 255
    2130:	80 93 9b 00 	sts	0x009B, r24
		index += dir ;
    2134:	8a e0       	ldi	r24, 0x0A	; 10
    2136:	80 93 e7 00 	sts	0x00E7, r24
		LCD_GoTo(0,index);
    213a:	80 e0       	ldi	r24, 0x00	; 0
    213c:	6a e0       	ldi	r22, 0x0A	; 10
    213e:	0d c0       	rjmp	.+26     	; 0x215a <LCD+0x40>
		LCD_WriteString(name);
	}else if(index == 0 && dir == -1){
    2140:	66 23       	and	r22, r22
    2142:	91 f4       	brne	.+36     	; 0x2168 <LCD+0x4e>
    2144:	80 91 9b 00 	lds	r24, 0x009B
    2148:	8f 3f       	cpi	r24, 0xFF	; 255
    214a:	81 f4       	brne	.+32     	; 0x216c <LCD+0x52>
		dir *= -1 ;
    214c:	81 e0       	ldi	r24, 0x01	; 1
    214e:	80 93 9b 00 	sts	0x009B, r24
		index += dir ;
    2152:	80 93 e7 00 	sts	0x00E7, r24
		LCD_GoTo(0,index);
    2156:	80 e0       	ldi	r24, 0x00	; 0
    2158:	61 e0       	ldi	r22, 0x01	; 1
    215a:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <LCD_GoTo>
		LCD_WriteString(name);
    215e:	80 e6       	ldi	r24, 0x60	; 96
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	0e 94 25 13 	call	0x264a	; 0x264a <LCD_WriteString>
    2166:	08 95       	ret
	}else if(index >= 0 && index < 11){
    2168:	6b 30       	cpi	r22, 0x0B	; 11
    216a:	70 f4       	brcc	.+28     	; 0x2188 <LCD+0x6e>
		LCD_GoTo(0,index);
    216c:	80 e0       	ldi	r24, 0x00	; 0
    216e:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <LCD_GoTo>
		index += dir ;
    2172:	80 91 e7 00 	lds	r24, 0x00E7
    2176:	90 91 9b 00 	lds	r25, 0x009B
    217a:	89 0f       	add	r24, r25
    217c:	80 93 e7 00 	sts	0x00E7, r24
		LCD_WriteString(name);
    2180:	80 e6       	ldi	r24, 0x60	; 96
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	0e 94 25 13 	call	0x264a	; 0x264a <LCD_WriteString>
    2188:	08 95       	ret

0000218a <MOTOR>:
}

void MOTOR(void){
	static sint8 flip = 1 ;

	DIO_SetPinDirection(DIO_PORTD, DIO_PIN3, DIO_PIN_DIR_OUTPUT);
    218a:	83 e0       	ldi	r24, 0x03	; 3
    218c:	63 e0       	ldi	r22, 0x03	; 3
    218e:	41 e0       	ldi	r20, 0x01	; 1
    2190:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTD, DIO_PIN4, DIO_PIN_DIR_OUTPUT);
    2194:	83 e0       	ldi	r24, 0x03	; 3
    2196:	64 e0       	ldi	r22, 0x04	; 4
    2198:	41 e0       	ldi	r20, 0x01	; 1
    219a:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_SetPinDirection>

	if(flip == 1){
    219e:	80 91 9c 00 	lds	r24, 0x009C
    21a2:	81 30       	cpi	r24, 0x01	; 1
    21a4:	81 f4       	brne	.+32     	; 0x21c6 <MOTOR+0x3c>
		DIO_SetPinValue(DIO_PORTD,DIO_PIN3,DIO_PIN_VAL_HIGH);
    21a6:	83 e0       	ldi	r24, 0x03	; 3
    21a8:	63 e0       	ldi	r22, 0x03	; 3
    21aa:	41 e0       	ldi	r20, 0x01	; 1
    21ac:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <DIO_SetPinValue>
		DIO_SetPinValue(DIO_PORTD,DIO_PIN4,DIO_PIN_VAL_LOW);
    21b0:	83 e0       	ldi	r24, 0x03	; 3
    21b2:	64 e0       	ldi	r22, 0x04	; 4
    21b4:	40 e0       	ldi	r20, 0x00	; 0
    21b6:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <DIO_SetPinValue>
		flip *= -1 ;
    21ba:	80 91 9c 00 	lds	r24, 0x009C
    21be:	81 95       	neg	r24
    21c0:	80 93 9c 00 	sts	0x009C, r24
    21c4:	08 95       	ret
	}else if(flip == -1){
    21c6:	8f 3f       	cpi	r24, 0xFF	; 255
    21c8:	79 f4       	brne	.+30     	; 0x21e8 <MOTOR+0x5e>
		DIO_SetPinValue(DIO_PORTD,DIO_PIN3,DIO_PIN_VAL_LOW);
    21ca:	83 e0       	ldi	r24, 0x03	; 3
    21cc:	63 e0       	ldi	r22, 0x03	; 3
    21ce:	40 e0       	ldi	r20, 0x00	; 0
    21d0:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <DIO_SetPinValue>
		DIO_SetPinValue(DIO_PORTD,DIO_PIN4,DIO_PIN_VAL_HIGH);
    21d4:	83 e0       	ldi	r24, 0x03	; 3
    21d6:	64 e0       	ldi	r22, 0x04	; 4
    21d8:	41 e0       	ldi	r20, 0x01	; 1
    21da:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <DIO_SetPinValue>
		flip *= -1;
    21de:	80 91 9c 00 	lds	r24, 0x009C
    21e2:	81 95       	neg	r24
    21e4:	80 93 9c 00 	sts	0x009C, r24
    21e8:	08 95       	ret

000021ea <GRE_BLINK>:
	DIO_SetPinDirection(DIO_PORTD, DIO_PIN1, DIO_PIN_DIR_OUTPUT);
	DIO_TogglePin(DIO_PORTD, DIO_PIN1);
}

void GRE_BLINK(void){
	DIO_SetPinDirection(DIO_PORTD, DIO_PIN2, DIO_PIN_DIR_OUTPUT);
    21ea:	83 e0       	ldi	r24, 0x03	; 3
    21ec:	62 e0       	ldi	r22, 0x02	; 2
    21ee:	41 e0       	ldi	r20, 0x01	; 1
    21f0:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_SetPinDirection>
	DIO_TogglePin(DIO_PORTD, DIO_PIN2);
    21f4:	83 e0       	ldi	r24, 0x03	; 3
    21f6:	62 e0       	ldi	r22, 0x02	; 2
    21f8:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <DIO_TogglePin>
}
    21fc:	08 95       	ret

000021fe <YEL_BLINK>:
	DIO_SetPinDirection(DIO_PORTD, DIO_PIN0, DIO_PIN_DIR_OUTPUT);
	DIO_TogglePin(DIO_PORTD, DIO_PIN0);
}

void YEL_BLINK(void){
	DIO_SetPinDirection(DIO_PORTD, DIO_PIN1, DIO_PIN_DIR_OUTPUT);
    21fe:	83 e0       	ldi	r24, 0x03	; 3
    2200:	61 e0       	ldi	r22, 0x01	; 1
    2202:	41 e0       	ldi	r20, 0x01	; 1
    2204:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_SetPinDirection>
	DIO_TogglePin(DIO_PORTD, DIO_PIN1);
    2208:	83 e0       	ldi	r24, 0x03	; 3
    220a:	61 e0       	ldi	r22, 0x01	; 1
    220c:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <DIO_TogglePin>
}
    2210:	08 95       	ret

00002212 <RED_BLINK>:
	arr[priority].Period = period ;
	arr[priority].Func_ptr = Func_ptr ;
}

void RED_BLINK(void){
	DIO_SetPinDirection(DIO_PORTD, DIO_PIN0, DIO_PIN_DIR_OUTPUT);
    2212:	83 e0       	ldi	r24, 0x03	; 3
    2214:	60 e0       	ldi	r22, 0x00	; 0
    2216:	41 e0       	ldi	r20, 0x01	; 1
    2218:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_SetPinDirection>
	DIO_TogglePin(DIO_PORTD, DIO_PIN0);
    221c:	83 e0       	ldi	r24, 0x03	; 3
    221e:	60 e0       	ldi	r22, 0x00	; 0
    2220:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <DIO_TogglePin>
}
    2224:	08 95       	ret

00002226 <I2C_Init>:

#include "I2C.h"

void I2C_Init(void){
	//for 100 KHz communication speed
	TWBR = 32 ;
    2226:	80 e2       	ldi	r24, 0x20	; 32
    2228:	80 b9       	out	0x00, r24	; 0
	//TWBR = 72 ;
}
    222a:	08 95       	ret

0000222c <I2C_Start>:

uint8 I2C_Start(uint8 Slave_Address_W){
    222c:	98 2f       	mov	r25, r24
	uint8 status = 0x00 ;

	//0b10100100 -- Make TWINT bit = 0 , Generate Start bit , I2C Enable
	TWCR = 0b10100100 ;
    222e:	84 ea       	ldi	r24, 0xA4	; 164
    2230:	86 bf       	out	0x36, r24	; 54

	//wait until TWI finished generating start bit by checking TWI interrupt bit
	while(GET_BIT(TWCR,7) == 0);
    2232:	06 b6       	in	r0, 0x36	; 54
    2234:	07 fe       	sbrs	r0, 7
    2236:	fd cf       	rjmp	.-6      	; 0x2232 <I2C_Start+0x6>

	//get value inside status ( DON'T forget to mask Prescalar bits ) ( you need 5 MSB bits only )
	status = TWSR & 0xF8 ;
    2238:	81 b1       	in	r24, 0x01	; 1

	if(status != 0x08)
    223a:	88 7f       	andi	r24, 0xF8	; 248
    223c:	88 30       	cpi	r24, 0x08	; 8
    223e:	11 f0       	breq	.+4      	; 0x2244 <I2C_Start+0x18>
    2240:	80 e0       	ldi	r24, 0x00	; 0
    2242:	08 95       	ret
		return 0 ; //signal tells us that START bit failed

	//load Slave_Address to write to in TWDR - Data register
	TWDR = Slave_Address_W ;
    2244:	93 b9       	out	0x03, r25	; 3

	//Make TWINT bit = 0 , I2C Enable
	TWCR = 0b10000100 ;
    2246:	84 e8       	ldi	r24, 0x84	; 132
    2248:	86 bf       	out	0x36, r24	; 54

	//wait until making sure address has been sent
	while(GET_BIT(TWCR,7) == 0);
    224a:	06 b6       	in	r0, 0x36	; 54
    224c:	07 fe       	sbrs	r0, 7
    224e:	fd cf       	rjmp	.-6      	; 0x224a <I2C_Start+0x1e>

	status = TWSR & 0xF8 ;
    2250:	81 b1       	in	r24, 0x01	; 1
    2252:	88 7f       	andi	r24, 0xF8	; 248

	if(status == 0x18)
    2254:	88 31       	cpi	r24, 0x18	; 24
    2256:	11 f4       	brne	.+4      	; 0x225c <I2C_Start+0x30>
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	08 95       	ret
		return 1 ; //slave address + Write bit has been transmitted + ACK

	if(status == 0x20)
    225c:	80 32       	cpi	r24, 0x20	; 32
    225e:	11 f0       	breq	.+4      	; 0x2264 <I2C_Start+0x38>
    2260:	83 e0       	ldi	r24, 0x03	; 3
    2262:	08 95       	ret
    2264:	82 e0       	ldi	r24, 0x02	; 2
	else
		return 3 ; //slave address + Write bit failed



}
    2266:	08 95       	ret

00002268 <I2C_Repeated_Start>:

uint8 I2C_Repeated_Start(uint8 Slave_Address_R){
    2268:	98 2f       	mov	r25, r24
	uint8 status = 0x00 ;

	//0b10100100 -- Make TWINT bit = 0 , Generate Start bit , I2C Enable
	TWCR = 0b10100100 ;
    226a:	84 ea       	ldi	r24, 0xA4	; 164
    226c:	86 bf       	out	0x36, r24	; 54

	//wait until TWI finished generating start bit by checking TWI interrupt bit
	while(GET_BIT(TWCR,7) == 0);
    226e:	06 b6       	in	r0, 0x36	; 54
    2270:	07 fe       	sbrs	r0, 7
    2272:	fd cf       	rjmp	.-6      	; 0x226e <I2C_Repeated_Start+0x6>

	//get value inside status ( DON'T forget to mask prescaler bits ) ( you need 5 MSB bits only )
	status = TWSR & 0xF8 ;
    2274:	81 b1       	in	r24, 0x01	; 1

	//repeated start not transmitted
	if(status != 0x10)
    2276:	88 7f       	andi	r24, 0xF8	; 248
    2278:	80 31       	cpi	r24, 0x10	; 16
    227a:	11 f0       	breq	.+4      	; 0x2280 <I2C_Repeated_Start+0x18>
    227c:	80 e0       	ldi	r24, 0x00	; 0
    227e:	08 95       	ret
		return 0 ;

	//load Slave_Address to write to in TWDR - Data register
	TWDR = Slave_Address_R ;
    2280:	93 b9       	out	0x03, r25	; 3

	//Make TWINT bit = 0 , I2C Enable
	TWCR = 0b10000100 ;
    2282:	84 e8       	ldi	r24, 0x84	; 132
    2284:	86 bf       	out	0x36, r24	; 54

	//wait until making sure address has been sent
	while(GET_BIT(TWCR,7) == 0);
    2286:	06 b6       	in	r0, 0x36	; 54
    2288:	07 fe       	sbrs	r0, 7
    228a:	fd cf       	rjmp	.-6      	; 0x2286 <I2C_Repeated_Start+0x1e>

	status = TWSR & 0xF8 ;
    228c:	81 b1       	in	r24, 0x01	; 1
    228e:	88 7f       	andi	r24, 0xF8	; 248

	if(status == 0x40)
    2290:	80 34       	cpi	r24, 0x40	; 64
    2292:	11 f4       	brne	.+4      	; 0x2298 <I2C_Repeated_Start+0x30>
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	08 95       	ret
		return 1 ; //SLA+R transmitted and ACK received
	if(status == 0x48)
    2298:	88 34       	cpi	r24, 0x48	; 72
    229a:	11 f0       	breq	.+4      	; 0x22a0 <I2C_Repeated_Start+0x38>
    229c:	83 e0       	ldi	r24, 0x03	; 3
    229e:	08 95       	ret
    22a0:	82 e0       	ldi	r24, 0x02	; 2
		return 2 ; //SLA+R transmitted and NACK received
	else
		return 3 ; //SLA+R transmission failed


}
    22a2:	08 95       	ret

000022a4 <I2C_Write>:

uint8 I2C_Write(uint16 Data){
	uint8 status = 0x00 ;

	//Load data or address in TWDR
	TWDR = Data ;
    22a4:	83 b9       	out	0x03, r24	; 3

	//Make TWINT bit = 0 , I2C Enable
	TWCR = 0b10000100 ;
    22a6:	84 e8       	ldi	r24, 0x84	; 132
    22a8:	86 bf       	out	0x36, r24	; 54

	//wait until making sure data or address has been sent
	while(GET_BIT(TWCR,7) == 0);
    22aa:	06 b6       	in	r0, 0x36	; 54
    22ac:	07 fe       	sbrs	r0, 7
    22ae:	fd cf       	rjmp	.-6      	; 0x22aa <I2C_Write+0x6>

	status = TWSR & 0xF8 ;
    22b0:	81 b1       	in	r24, 0x01	; 1
    22b2:	88 7f       	andi	r24, 0xF8	; 248

	if(status == 0x28)
    22b4:	88 32       	cpi	r24, 0x28	; 40
    22b6:	11 f4       	brne	.+4      	; 0x22bc <I2C_Write+0x18>
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	08 95       	ret
		return 0 ; // data has been sent and ACK received
	if(status == 0x30)
    22bc:	80 33       	cpi	r24, 0x30	; 48
    22be:	11 f0       	breq	.+4      	; 0x22c4 <I2C_Write+0x20>
    22c0:	82 e0       	ldi	r24, 0x02	; 2
    22c2:	08 95       	ret
    22c4:	81 e0       	ldi	r24, 0x01	; 1
		return 1 ; // data has been sent and NACK received
	else
		return 2 ; // data transmission failed

}
    22c6:	08 95       	ret

000022c8 <I2C_Read_ACK>:

uint8 I2C_Read_ACK(void){

	//Send Acknowledgment , Set TWINT bit to zero , enable I2C
	TWCR = 0b11000100 ;
    22c8:	84 ec       	ldi	r24, 0xC4	; 196
    22ca:	86 bf       	out	0x36, r24	; 54

	while(GET_BIT(TWCR,7) == 0);
    22cc:	06 b6       	in	r0, 0x36	; 54
    22ce:	07 fe       	sbrs	r0, 7
    22d0:	fd cf       	rjmp	.-6      	; 0x22cc <I2C_Read_ACK+0x4>

	return TWDR ;
    22d2:	83 b1       	in	r24, 0x03	; 3
}
    22d4:	08 95       	ret

000022d6 <I2C_Read_NACK>:

uint8 I2C_Read_NACK(void){
	//Send NOT Acknowledgment , Set TWINT bit to zero , enable I2C
	TWCR = 0b10000100 ;
    22d6:	84 e8       	ldi	r24, 0x84	; 132
    22d8:	86 bf       	out	0x36, r24	; 54

	while(GET_BIT(TWCR,7) == 0);
    22da:	06 b6       	in	r0, 0x36	; 54
    22dc:	07 fe       	sbrs	r0, 7
    22de:	fd cf       	rjmp	.-6      	; 0x22da <I2C_Read_NACK+0x4>

	return TWDR ;
    22e0:	83 b1       	in	r24, 0x03	; 3
}
    22e2:	08 95       	ret

000022e4 <I2C_Stop>:

void  I2C_Stop(void){
	TWCR = 0b10010100 ;
    22e4:	84 e9       	ldi	r24, 0x94	; 148
    22e6:	86 bf       	out	0x36, r24	; 54

	while(GET_BIT(TWCR,4) == 1);
    22e8:	06 b6       	in	r0, 0x36	; 54
    22ea:	04 fc       	sbrc	r0, 4
    22ec:	fd cf       	rjmp	.-6      	; 0x22e8 <I2C_Stop+0x4>
}
    22ee:	08 95       	ret

000022f0 <eeprom_address>:
 */
#include "Internal_EEPROM.h"


void eeprom_address(uint16 address){
	EEARL = 0x00 | address ;
    22f0:	8e bb       	out	0x1e, r24	; 30
	EEARH = (address>>8);
    22f2:	9f bb       	out	0x1f, r25	; 31
}
    22f4:	08 95       	ret

000022f6 <eeprom_write>:


void eeprom_write(uint16 address , uint8 data){

	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
    22f6:	e1 99       	sbic	0x1c, 1	; 28
    22f8:	fe cf       	rjmp	.-4      	; 0x22f6 <eeprom_write>
	/* Set up address and data registers */
	EEAR = address;
    22fa:	9f bb       	out	0x1f, r25	; 31
    22fc:	8e bb       	out	0x1e, r24	; 30
	EEDR = data;
    22fe:	6d bb       	out	0x1d, r22	; 29

	/* Start eeprom write by setting EEWE */
	SET_BIT(EECR,2);
    2300:	e2 9a       	sbi	0x1c, 2	; 28
	SET_BIT(EECR,1);
    2302:	e1 9a       	sbi	0x1c, 1	; 28
	/* Write logical one to EEMWE */
	//EECR |= (1<<EEMWE);

}
    2304:	08 95       	ret

00002306 <eeprom_read>:


uint8 eeprom_read(uint16 address){
	//wait for the completion of the previous write operation
	while(EECR & (1<<1));
    2306:	e1 99       	sbic	0x1c, 1	; 28
    2308:	fe cf       	rjmp	.-4      	; 0x2306 <eeprom_read>

	//set up address register
	EEAR = address ;
    230a:	9f bb       	out	0x1f, r25	; 31
    230c:	8e bb       	out	0x1e, r24	; 30

	//start read operation by setting EERE bit in Control Register
	EECR |= (1<<0);
    230e:	e0 9a       	sbi	0x1c, 0	; 28

	//now return data from data register
	return EEDR ;
    2310:	8d b3       	in	r24, 0x1d	; 29

}
    2312:	08 95       	ret

00002314 <Interrupt_Init>:


void Interrupt_Init(void){

#if   GLOBAL_INTERRUPT_STATUS == GENERAL_INTERRUPT_ENABLE
	SET_BIT(SREG,7);
    2314:	8f b7       	in	r24, 0x3f	; 63
    2316:	80 68       	ori	r24, 0x80	; 128
    2318:	8f bf       	out	0x3f, r24	; 63
#elif GLOBAL_INTERRUPT_STATUS == GENERAL_INTERRUPT_DISABLE
	CLR_BIT(SREG,7);
#endif

}
    231a:	08 95       	ret

0000231c <Interrupt0_Init>:


void Interrupt_Init(void){

#if   GLOBAL_INTERRUPT_STATUS == GENERAL_INTERRUPT_ENABLE
	SET_BIT(SREG,7);
    231c:	8f b7       	in	r24, 0x3f	; 63
    231e:	80 68       	ori	r24, 0x80	; 128
    2320:	8f bf       	out	0x3f, r24	; 63

void Interrupt0_Init(void){
	Interrupt_Init();

	//Enabling External Interrupt Request 0
	SET_BIT(GICR,6);
    2322:	8b b7       	in	r24, 0x3b	; 59
    2324:	80 64       	ori	r24, 0x40	; 64
    2326:	8b bf       	out	0x3b, r24	; 59
	CLR_BIT(MCUCR,1);
#elif INTERRUPT0_TRIGGER == INTERRUPT_TRIGGER_RISING_EDGE
	SET_BIT(MCUCR,0);
	SET_BIT(MCUCR,1);
#elif INTERRUPT0_TRIGGER == INTERRUPT_TRIGGER_FALLING_EDGE
	CLR_BIT(MCUCR,0);
    2328:	85 b7       	in	r24, 0x35	; 53
    232a:	8e 7f       	andi	r24, 0xFE	; 254
    232c:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR,1);
    232e:	85 b7       	in	r24, 0x35	; 53
    2330:	82 60       	ori	r24, 0x02	; 2
    2332:	85 bf       	out	0x35, r24	; 53
#endif

}
    2334:	08 95       	ret

00002336 <Interrupt1_Init>:


void Interrupt_Init(void){

#if   GLOBAL_INTERRUPT_STATUS == GENERAL_INTERRUPT_ENABLE
	SET_BIT(SREG,7);
    2336:	8f b7       	in	r24, 0x3f	; 63
    2338:	80 68       	ori	r24, 0x80	; 128
    233a:	8f bf       	out	0x3f, r24	; 63
void Interrupt1_Init(void){

	Interrupt_Init();

	//Enabling External Interrupt Request 1
	SET_BIT(GICR,7);
    233c:	8b b7       	in	r24, 0x3b	; 59
    233e:	80 68       	ori	r24, 0x80	; 128
    2340:	8b bf       	out	0x3b, r24	; 59
	CLR_BIT(MCUCR,3);
#elif INTERRUPT1_TRIGGER == INTERRUPT_TRIGGER_ANY_LOGICAL_CHANGE
	SET_BIT(MCUCR,2);
	CLR_BIT(MCUCR,3);
#elif INTERRUPT1_TRIGGER == INTERRUPT_TRIGGER_RISING_EDGE
	SET_BIT(MCUCR,2);
    2342:	85 b7       	in	r24, 0x35	; 53
    2344:	84 60       	ori	r24, 0x04	; 4
    2346:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR,3);
    2348:	85 b7       	in	r24, 0x35	; 53
    234a:	88 60       	ori	r24, 0x08	; 8
    234c:	85 bf       	out	0x35, r24	; 53
#elif INTERRUPT1_TRIGGER == INTERRUPT_TRIGGER_FALLING_EDGE
	CLR_BIT(MCUCR,2);
	SET_BIT(MCUCR,3);
#endif

}
    234e:	08 95       	ret

00002350 <Interrupt2_Init>:


void Interrupt_Init(void){

#if   GLOBAL_INTERRUPT_STATUS == GENERAL_INTERRUPT_ENABLE
	SET_BIT(SREG,7);
    2350:	8f b7       	in	r24, 0x3f	; 63
    2352:	80 68       	ori	r24, 0x80	; 128
    2354:	8f bf       	out	0x3f, r24	; 63
void Interrupt2_Init(void){

	Interrupt_Init();

	//Enabling External Interrupt Request 2
	SET_BIT(GICR,5);
    2356:	8b b7       	in	r24, 0x3b	; 59
    2358:	80 62       	ori	r24, 0x20	; 32
    235a:	8b bf       	out	0x3b, r24	; 59

//IF BIT.6 IN MCUCSR REGISTER IS LOW(0-BIT CLEARED) THEN INT2 ARE TRIGGERED IN FALLING EDGE MODE
//IF BIT.6 IN MCUCSR REGISTER IS HIGH(1-BIT SET) THEN INT2 ARE TRIGGERED IN RISING EDGE MODE
//PAGE.65 in DATASHEET
#if INTERRUPT2_TRIGGER == INTERRUPT_TRIGGER_FALLING_EDGE
	CLR_BIT(MCUCSR,6);
    235c:	84 b7       	in	r24, 0x34	; 52
    235e:	8f 7b       	andi	r24, 0xBF	; 191
    2360:	84 bf       	out	0x34, r24	; 52
#elif INTERRUPT2_TRIGGER == INTERRUPT_TRIGGER_RISING_EDGE
	SET_BIT(MCUCSR,6);

#endif

}
    2362:	08 95       	ret

00002364 <Keypad_Val>:

}



uint8 Keypad_Val(void){
    2364:	9f 92       	push	r9
    2366:	af 92       	push	r10
    2368:	bf 92       	push	r11
    236a:	cf 92       	push	r12
    236c:	df 92       	push	r13
    236e:	ef 92       	push	r14
    2370:	ff 92       	push	r15
    2372:	0f 93       	push	r16
    2374:	1f 93       	push	r17
    2376:	df 93       	push	r29
    2378:	cf 93       	push	r28
    237a:	0f 92       	push	r0
    237c:	cd b7       	in	r28, 0x3d	; 61
    237e:	de b7       	in	r29, 0x3e	; 62
	//Here in this function we want to loop through the columns pins first
	uint8 COL_PIN = 0 ;
	uint8 ROW_PIN = 0 ;

	uint8 BUTTON = 1 ;
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	89 83       	std	Y+1, r24	; 0x01
    2384:	ee 24       	eor	r14, r14
    2386:	ff 24       	eor	r15, r15

		DIO_SetPinValue(KEYPAD_PORT,COL_PIN,DIO_PIN_VAL_LOW);

		for(ROW_PIN = ROW_INIT_PIN ;ROW_PIN <= ROW_FINAL_PIN; ROW_PIN++){

			DIO_GetPinValue(KEYPAD_PORT, ROW_PIN, &BUTTON);
    2388:	5e 01       	movw	r10, r28
    238a:	08 94       	sec
    238c:	a1 1c       	adc	r10, r1
    238e:	b1 1c       	adc	r11, r1

				while(BUTTON == BUTTON_PRESSED)
					DIO_GetPinValue(KEYPAD_PORT, ROW_PIN, &BUTTON);

			}else if(BUTTON == BUTTON_NOT_PRESSED){
				VAL = 99 ;
    2390:	93 e6       	ldi	r25, 0x63	; 99
    2392:	99 2e       	mov	r9, r25
uint8 Keypad_Val(void){
	//Here in this function we want to loop through the columns pins first
	uint8 COL_PIN = 0 ;
	uint8 ROW_PIN = 0 ;

	uint8 BUTTON = 1 ;
    2394:	84 e0       	ldi	r24, 0x04	; 4
    2396:	c8 2e       	mov	r12, r24
    2398:	ce 0c       	add	r12, r14
	static uint8 VAL = 0 ;

	for(COL_PIN = COL_INIT_PIN ;COL_PIN <= COL_FINAL_PIN; COL_PIN++){

		DIO_SetPinValue(KEYPAD_PORT,COL_PIN,DIO_PIN_VAL_LOW);
    239a:	82 e0       	ldi	r24, 0x02	; 2
    239c:	6c 2d       	mov	r22, r12
    239e:	40 e0       	ldi	r20, 0x00	; 0
    23a0:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <DIO_SetPinValue>
    23a4:	87 01       	movw	r16, r14
    23a6:	03 56       	subi	r16, 0x63	; 99
    23a8:	1f 4f       	sbci	r17, 0xFF	; 255
    23aa:	dd 24       	eor	r13, r13

		for(ROW_PIN = ROW_INIT_PIN ;ROW_PIN <= ROW_FINAL_PIN; ROW_PIN++){

			DIO_GetPinValue(KEYPAD_PORT, ROW_PIN, &BUTTON);
    23ac:	82 e0       	ldi	r24, 0x02	; 2
    23ae:	6d 2d       	mov	r22, r13
    23b0:	a5 01       	movw	r20, r10
    23b2:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <DIO_GetPinValue>

			if(BUTTON == BUTTON_PRESSED){
    23b6:	89 81       	ldd	r24, Y+1	; 0x01
    23b8:	88 23       	and	r24, r24
    23ba:	71 f4       	brne	.+28     	; 0x23d8 <Keypad_Val+0x74>
				VAL = KEYPAD_ARR[ROW_PIN][COL_PIN-COL_INIT_PIN];
    23bc:	f8 01       	movw	r30, r16
    23be:	80 81       	ld	r24, Z
    23c0:	80 93 e8 00 	sts	0x00E8, r24
    23c4:	05 c0       	rjmp	.+10     	; 0x23d0 <Keypad_Val+0x6c>

				while(BUTTON == BUTTON_PRESSED)
					DIO_GetPinValue(KEYPAD_PORT, ROW_PIN, &BUTTON);
    23c6:	82 e0       	ldi	r24, 0x02	; 2
    23c8:	6d 2d       	mov	r22, r13
    23ca:	a5 01       	movw	r20, r10
    23cc:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <DIO_GetPinValue>
			DIO_GetPinValue(KEYPAD_PORT, ROW_PIN, &BUTTON);

			if(BUTTON == BUTTON_PRESSED){
				VAL = KEYPAD_ARR[ROW_PIN][COL_PIN-COL_INIT_PIN];

				while(BUTTON == BUTTON_PRESSED)
    23d0:	89 81       	ldd	r24, Y+1	; 0x01
    23d2:	88 23       	and	r24, r24
    23d4:	c1 f3       	breq	.-16     	; 0x23c6 <Keypad_Val+0x62>
    23d6:	04 c0       	rjmp	.+8      	; 0x23e0 <Keypad_Val+0x7c>
					DIO_GetPinValue(KEYPAD_PORT, ROW_PIN, &BUTTON);

			}else if(BUTTON == BUTTON_NOT_PRESSED){
    23d8:	81 30       	cpi	r24, 0x01	; 1
    23da:	11 f4       	brne	.+4      	; 0x23e0 <Keypad_Val+0x7c>
				VAL = 99 ;
    23dc:	90 92 e8 00 	sts	0x00E8, r9

	for(COL_PIN = COL_INIT_PIN ;COL_PIN <= COL_FINAL_PIN; COL_PIN++){

		DIO_SetPinValue(KEYPAD_PORT,COL_PIN,DIO_PIN_VAL_LOW);

		for(ROW_PIN = ROW_INIT_PIN ;ROW_PIN <= ROW_FINAL_PIN; ROW_PIN++){
    23e0:	d3 94       	inc	r13
    23e2:	0c 5f       	subi	r16, 0xFC	; 252
    23e4:	1f 4f       	sbci	r17, 0xFF	; 255
    23e6:	f4 e0       	ldi	r31, 0x04	; 4
    23e8:	df 16       	cp	r13, r31
    23ea:	01 f7       	brne	.-64     	; 0x23ac <Keypad_Val+0x48>
			}else if(BUTTON == BUTTON_NOT_PRESSED){
				VAL = 99 ;
			}
		}

		DIO_SetPinValue(KEYPAD_PORT,COL_PIN,DIO_PIN_VAL_HIGH);
    23ec:	82 e0       	ldi	r24, 0x02	; 2
    23ee:	6c 2d       	mov	r22, r12
    23f0:	41 e0       	ldi	r20, 0x01	; 1
    23f2:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <DIO_SetPinValue>
    23f6:	08 94       	sec
    23f8:	e1 1c       	adc	r14, r1
    23fa:	f1 1c       	adc	r15, r1
	uint8 ROW_PIN = 0 ;

	uint8 BUTTON = 1 ;
	static uint8 VAL = 0 ;

	for(COL_PIN = COL_INIT_PIN ;COL_PIN <= COL_FINAL_PIN; COL_PIN++){
    23fc:	84 e0       	ldi	r24, 0x04	; 4
    23fe:	e8 16       	cp	r14, r24
    2400:	f1 04       	cpc	r15, r1
    2402:	41 f6       	brne	.-112    	; 0x2394 <Keypad_Val+0x30>

		DIO_SetPinValue(KEYPAD_PORT,COL_PIN,DIO_PIN_VAL_HIGH);
	}

	return VAL ;
}
    2404:	80 91 e8 00 	lds	r24, 0x00E8
    2408:	0f 90       	pop	r0
    240a:	cf 91       	pop	r28
    240c:	df 91       	pop	r29
    240e:	1f 91       	pop	r17
    2410:	0f 91       	pop	r16
    2412:	ff 90       	pop	r15
    2414:	ef 90       	pop	r14
    2416:	df 90       	pop	r13
    2418:	cf 90       	pop	r12
    241a:	bf 90       	pop	r11
    241c:	af 90       	pop	r10
    241e:	9f 90       	pop	r9
    2420:	08 95       	ret

00002422 <Keypad_Init>:
};

void Keypad_Init(void){

	//Make ROW Pins as an input
	DIO_SetPinDirection(KEYPAD_PORT,DIO_PIN0,DIO_PIN_DIR_INPUT);
    2422:	82 e0       	ldi	r24, 0x02	; 2
    2424:	60 e0       	ldi	r22, 0x00	; 0
    2426:	40 e0       	ldi	r20, 0x00	; 0
    2428:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,DIO_PIN1,DIO_PIN_DIR_INPUT);
    242c:	82 e0       	ldi	r24, 0x02	; 2
    242e:	61 e0       	ldi	r22, 0x01	; 1
    2430:	40 e0       	ldi	r20, 0x00	; 0
    2432:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,DIO_PIN2,DIO_PIN_DIR_INPUT);
    2436:	82 e0       	ldi	r24, 0x02	; 2
    2438:	62 e0       	ldi	r22, 0x02	; 2
    243a:	40 e0       	ldi	r20, 0x00	; 0
    243c:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,DIO_PIN3,DIO_PIN_DIR_INPUT);
    2440:	82 e0       	ldi	r24, 0x02	; 2
    2442:	63 e0       	ldi	r22, 0x03	; 3
    2444:	40 e0       	ldi	r20, 0x00	; 0
    2446:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_SetPinDirection>

	//Activate Pull Up Resistors on the input pins
	DIO_SetPullUpRes(KEYPAD_PORT, DIO_PIN0);
    244a:	82 e0       	ldi	r24, 0x02	; 2
    244c:	60 e0       	ldi	r22, 0x00	; 0
    244e:	0e 94 34 10 	call	0x2068	; 0x2068 <DIO_SetPullUpRes>
	DIO_SetPullUpRes(KEYPAD_PORT, DIO_PIN1);
    2452:	82 e0       	ldi	r24, 0x02	; 2
    2454:	61 e0       	ldi	r22, 0x01	; 1
    2456:	0e 94 34 10 	call	0x2068	; 0x2068 <DIO_SetPullUpRes>
	DIO_SetPullUpRes(KEYPAD_PORT, DIO_PIN2);
    245a:	82 e0       	ldi	r24, 0x02	; 2
    245c:	62 e0       	ldi	r22, 0x02	; 2
    245e:	0e 94 34 10 	call	0x2068	; 0x2068 <DIO_SetPullUpRes>
	DIO_SetPullUpRes(KEYPAD_PORT, DIO_PIN3);
    2462:	82 e0       	ldi	r24, 0x02	; 2
    2464:	63 e0       	ldi	r22, 0x03	; 3
    2466:	0e 94 34 10 	call	0x2068	; 0x2068 <DIO_SetPullUpRes>

	//Make COL Pins as an output
	DIO_SetPinDirection(KEYPAD_PORT,DIO_PIN4,DIO_PIN_DIR_OUTPUT);
    246a:	82 e0       	ldi	r24, 0x02	; 2
    246c:	64 e0       	ldi	r22, 0x04	; 4
    246e:	41 e0       	ldi	r20, 0x01	; 1
    2470:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,DIO_PIN5,DIO_PIN_DIR_OUTPUT);
    2474:	82 e0       	ldi	r24, 0x02	; 2
    2476:	65 e0       	ldi	r22, 0x05	; 5
    2478:	41 e0       	ldi	r20, 0x01	; 1
    247a:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,DIO_PIN6,DIO_PIN_DIR_OUTPUT);
    247e:	82 e0       	ldi	r24, 0x02	; 2
    2480:	66 e0       	ldi	r22, 0x06	; 6
    2482:	41 e0       	ldi	r20, 0x01	; 1
    2484:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,DIO_PIN7,DIO_PIN_DIR_OUTPUT);
    2488:	82 e0       	ldi	r24, 0x02	; 2
    248a:	67 e0       	ldi	r22, 0x07	; 7
    248c:	41 e0       	ldi	r20, 0x01	; 1
    248e:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_SetPinDirection>

	//Make COL Pins output high value
	DIO_SetPinValue(KEYPAD_PORT, DIO_PIN4, DIO_PIN_VAL_HIGH);
    2492:	82 e0       	ldi	r24, 0x02	; 2
    2494:	64 e0       	ldi	r22, 0x04	; 4
    2496:	41 e0       	ldi	r20, 0x01	; 1
    2498:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <DIO_SetPinValue>
	DIO_SetPinValue(KEYPAD_PORT, DIO_PIN5, DIO_PIN_VAL_HIGH);
    249c:	82 e0       	ldi	r24, 0x02	; 2
    249e:	65 e0       	ldi	r22, 0x05	; 5
    24a0:	41 e0       	ldi	r20, 0x01	; 1
    24a2:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <DIO_SetPinValue>
	DIO_SetPinValue(KEYPAD_PORT, DIO_PIN6, DIO_PIN_VAL_HIGH);
    24a6:	82 e0       	ldi	r24, 0x02	; 2
    24a8:	66 e0       	ldi	r22, 0x06	; 6
    24aa:	41 e0       	ldi	r20, 0x01	; 1
    24ac:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <DIO_SetPinValue>
	DIO_SetPinValue(KEYPAD_PORT, DIO_PIN7, DIO_PIN_VAL_HIGH);
    24b0:	82 e0       	ldi	r24, 0x02	; 2
    24b2:	67 e0       	ldi	r22, 0x07	; 7
    24b4:	41 e0       	ldi	r20, 0x01	; 1
    24b6:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <DIO_SetPinValue>


}
    24ba:	08 95       	ret

000024bc <LCD_WriteChar>:
#endif

}


void LCD_WriteChar(uint8 ch){
    24bc:	ff 92       	push	r15
    24be:	0f 93       	push	r16
    24c0:	1f 93       	push	r17
    24c2:	f8 2e       	mov	r15, r24
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_E_PIN,DIO_PIN_VAL_LOW);
	_delay_ms(1);

#elif LCD_MODE == 4

	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_RS_PIN,DIO_PIN_VAL_HIGH);
    24c4:	83 e0       	ldi	r24, 0x03	; 3
    24c6:	61 e0       	ldi	r22, 0x01	; 1
    24c8:	41 e0       	ldi	r20, 0x01	; 1
    24ca:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <DIO_SetPinValue>
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_RW_PIN,DIO_PIN_VAL_LOW);
    24ce:	83 e0       	ldi	r24, 0x03	; 3
    24d0:	62 e0       	ldi	r22, 0x02	; 2
    24d2:	40 e0       	ldi	r20, 0x00	; 0
    24d4:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <DIO_SetPinValue>
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_E_PIN,DIO_PIN_VAL_LOW);
    24d8:	83 e0       	ldi	r24, 0x03	; 3
    24da:	63 e0       	ldi	r22, 0x03	; 3
    24dc:	40 e0       	ldi	r20, 0x00	; 0
    24de:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <DIO_SetPinValue>

	//Send Highest nibble first
	LCD_4BIT_DATA_PORT = (LCD_4BIT_DATA_PORT & 0x0f)|(ch & 0xf0) ;
    24e2:	8b b3       	in	r24, 0x1b	; 27
    24e4:	9f 2d       	mov	r25, r15
    24e6:	90 7f       	andi	r25, 0xF0	; 240
    24e8:	8f 70       	andi	r24, 0x0F	; 15
    24ea:	98 2b       	or	r25, r24
    24ec:	9b bb       	out	0x1b, r25	; 27
	//Latch the highest nibble
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_E_PIN,DIO_PIN_VAL_HIGH);
    24ee:	83 e0       	ldi	r24, 0x03	; 3
    24f0:	63 e0       	ldi	r22, 0x03	; 3
    24f2:	41 e0       	ldi	r20, 0x01	; 1
    24f4:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <DIO_SetPinValue>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24f8:	00 ed       	ldi	r16, 0xD0	; 208
    24fa:	17 e0       	ldi	r17, 0x07	; 7
    24fc:	c8 01       	movw	r24, r16
    24fe:	01 97       	sbiw	r24, 0x01	; 1
    2500:	f1 f7       	brne	.-4      	; 0x24fe <LCD_WriteChar+0x42>
	_delay_ms(1);
	//Stop Latch to send lowest nibble
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_E_PIN,DIO_PIN_VAL_LOW);
    2502:	83 e0       	ldi	r24, 0x03	; 3
    2504:	63 e0       	ldi	r22, 0x03	; 3
    2506:	40 e0       	ldi	r20, 0x00	; 0
    2508:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <DIO_SetPinValue>
    250c:	c8 01       	movw	r24, r16
    250e:	01 97       	sbiw	r24, 0x01	; 1
    2510:	f1 f7       	brne	.-4      	; 0x250e <LCD_WriteChar+0x52>
	_delay_ms(1);

	//Send Highest nibble first
	LCD_4BIT_DATA_PORT = (LCD_4BIT_DATA_PORT & 0x0f)|(ch<<4) ;
    2512:	8b b3       	in	r24, 0x1b	; 27
    2514:	f2 94       	swap	r15
    2516:	90 ef       	ldi	r25, 0xF0	; 240
    2518:	f9 22       	and	r15, r25
    251a:	8f 70       	andi	r24, 0x0F	; 15
    251c:	8f 29       	or	r24, r15
    251e:	8b bb       	out	0x1b, r24	; 27
	//Latch the highest nibble
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_E_PIN,DIO_PIN_VAL_HIGH);
    2520:	83 e0       	ldi	r24, 0x03	; 3
    2522:	63 e0       	ldi	r22, 0x03	; 3
    2524:	41 e0       	ldi	r20, 0x01	; 1
    2526:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <DIO_SetPinValue>
    252a:	c8 01       	movw	r24, r16
    252c:	01 97       	sbiw	r24, 0x01	; 1
    252e:	f1 f7       	brne	.-4      	; 0x252c <LCD_WriteChar+0x70>
	_delay_ms(1);
	//Stop Latch to send lowest nibble
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_E_PIN,DIO_PIN_VAL_LOW);
    2530:	83 e0       	ldi	r24, 0x03	; 3
    2532:	63 e0       	ldi	r22, 0x03	; 3
    2534:	40 e0       	ldi	r20, 0x00	; 0
    2536:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <DIO_SetPinValue>
    253a:	c8 01       	movw	r24, r16
    253c:	01 97       	sbiw	r24, 0x01	; 1
    253e:	f1 f7       	brne	.-4      	; 0x253c <LCD_WriteChar+0x80>
	_delay_ms(1);

#endif

}
    2540:	1f 91       	pop	r17
    2542:	0f 91       	pop	r16
    2544:	ff 90       	pop	r15
    2546:	08 95       	ret

00002548 <LCD_WriteInteger>:
		LCD_WriteCommand(cmd);
	}
}


void LCD_WriteInteger(sint32 num){
    2548:	9f 92       	push	r9
    254a:	af 92       	push	r10
    254c:	bf 92       	push	r11
    254e:	cf 92       	push	r12
    2550:	df 92       	push	r13
    2552:	ef 92       	push	r14
    2554:	ff 92       	push	r15
    2556:	0f 93       	push	r16
    2558:	1f 93       	push	r17
    255a:	7b 01       	movw	r14, r22
    255c:	8c 01       	movw	r16, r24
	uint32 reversed = 0 ;
	uint8 num_length = 0 ;

	if(num == 0){
    255e:	61 15       	cp	r22, r1
    2560:	71 05       	cpc	r23, r1
    2562:	81 05       	cpc	r24, r1
    2564:	91 05       	cpc	r25, r1
    2566:	11 f4       	brne	.+4      	; 0x256c <LCD_WriteInteger+0x24>
		LCD_WriteChar('0');
    2568:	80 e3       	ldi	r24, 0x30	; 48
    256a:	0b c0       	rjmp	.+22     	; 0x2582 <LCD_WriteInteger+0x3a>
	}

	if(num < 0){
    256c:	97 ff       	sbrs	r25, 7
    256e:	0b c0       	rjmp	.+22     	; 0x2586 <LCD_WriteInteger+0x3e>
		num *= -1 ;
    2570:	10 95       	com	r17
    2572:	00 95       	com	r16
    2574:	f0 94       	com	r15
    2576:	e0 94       	com	r14
    2578:	e1 1c       	adc	r14, r1
    257a:	f1 1c       	adc	r15, r1
    257c:	01 1d       	adc	r16, r1
    257e:	11 1d       	adc	r17, r1
		LCD_WriteChar('-');
    2580:	8d e2       	ldi	r24, 0x2D	; 45
    2582:	0e 94 5e 12 	call	0x24bc	; 0x24bc <LCD_WriteChar>
    2586:	aa 24       	eor	r10, r10
    2588:	bb 24       	eor	r11, r11
    258a:	65 01       	movw	r12, r10
    258c:	99 24       	eor	r9, r9
    258e:	28 c0       	rjmp	.+80     	; 0x25e0 <LCD_WriteInteger+0x98>
	}

	while(num != 0){
		reversed = reversed + num%10;
    2590:	c8 01       	movw	r24, r16
    2592:	b7 01       	movw	r22, r14
    2594:	2a e0       	ldi	r18, 0x0A	; 10
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	40 e0       	ldi	r20, 0x00	; 0
    259a:	50 e0       	ldi	r21, 0x00	; 0
    259c:	0e 94 75 17 	call	0x2eea	; 0x2eea <__divmodsi4>
    25a0:	a6 0e       	add	r10, r22
    25a2:	b7 1e       	adc	r11, r23
    25a4:	c8 1e       	adc	r12, r24
    25a6:	d9 1e       	adc	r13, r25
		num_length++ ;

		num = num / 10 ;
    25a8:	c8 01       	movw	r24, r16
    25aa:	b7 01       	movw	r22, r14
    25ac:	2a e0       	ldi	r18, 0x0A	; 10
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	40 e0       	ldi	r20, 0x00	; 0
    25b2:	50 e0       	ldi	r21, 0x00	; 0
    25b4:	0e 94 75 17 	call	0x2eea	; 0x2eea <__divmodsi4>
    25b8:	c9 01       	movw	r24, r18
    25ba:	da 01       	movw	r26, r20
    25bc:	7c 01       	movw	r14, r24
    25be:	8d 01       	movw	r16, r26
		if(num != 0)
    25c0:	e1 14       	cp	r14, r1
    25c2:	f1 04       	cpc	r15, r1
    25c4:	01 05       	cpc	r16, r1
    25c6:	11 05       	cpc	r17, r1
    25c8:	51 f0       	breq	.+20     	; 0x25de <LCD_WriteInteger+0x96>
			reversed = reversed * 10 ;
    25ca:	c6 01       	movw	r24, r12
    25cc:	b5 01       	movw	r22, r10
    25ce:	2a e0       	ldi	r18, 0x0A	; 10
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	40 e0       	ldi	r20, 0x00	; 0
    25d4:	50 e0       	ldi	r21, 0x00	; 0
    25d6:	0e 94 01 17 	call	0x2e02	; 0x2e02 <__mulsi3>
    25da:	5b 01       	movw	r10, r22
    25dc:	6c 01       	movw	r12, r24
		LCD_WriteChar('-');
	}

	while(num != 0){
		reversed = reversed + num%10;
		num_length++ ;
    25de:	93 94       	inc	r9
	if(num < 0){
		num *= -1 ;
		LCD_WriteChar('-');
	}

	while(num != 0){
    25e0:	e1 14       	cp	r14, r1
    25e2:	f1 04       	cpc	r15, r1
    25e4:	01 05       	cpc	r16, r1
    25e6:	11 05       	cpc	r17, r1
    25e8:	99 f6       	brne	.-90     	; 0x2590 <LCD_WriteInteger+0x48>
    25ea:	19 c0       	rjmp	.+50     	; 0x261e <LCD_WriteInteger+0xd6>



	while(reversed != 0){
		uint8 digit = reversed %10 ;
		LCD_WriteChar(digit + '0');
    25ec:	c6 01       	movw	r24, r12
    25ee:	b5 01       	movw	r22, r10
    25f0:	2a e0       	ldi	r18, 0x0A	; 10
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	40 e0       	ldi	r20, 0x00	; 0
    25f6:	50 e0       	ldi	r21, 0x00	; 0
    25f8:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <__udivmodsi4>
    25fc:	86 2f       	mov	r24, r22
    25fe:	80 5d       	subi	r24, 0xD0	; 208
    2600:	0e 94 5e 12 	call	0x24bc	; 0x24bc <LCD_WriteChar>
		reversed = reversed / 10 ;
    2604:	c6 01       	movw	r24, r12
    2606:	b5 01       	movw	r22, r10
    2608:	2a e0       	ldi	r18, 0x0A	; 10
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	40 e0       	ldi	r20, 0x00	; 0
    260e:	50 e0       	ldi	r21, 0x00	; 0
    2610:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <__udivmodsi4>
    2614:	c9 01       	movw	r24, r18
    2616:	da 01       	movw	r26, r20
    2618:	5c 01       	movw	r10, r24
    261a:	6d 01       	movw	r12, r26
		num_length--;
    261c:	9a 94       	dec	r9
			reversed = reversed * 10 ;
	}



	while(reversed != 0){
    261e:	a1 14       	cp	r10, r1
    2620:	b1 04       	cpc	r11, r1
    2622:	c1 04       	cpc	r12, r1
    2624:	d1 04       	cpc	r13, r1
    2626:	11 f7       	brne	.-60     	; 0x25ec <LCD_WriteInteger+0xa4>
    2628:	04 c0       	rjmp	.+8      	; 0x2632 <LCD_WriteInteger+0xea>
		reversed = reversed / 10 ;
		num_length--;
	}

	while(num_length !=0){
		LCD_WriteChar('0');
    262a:	80 e3       	ldi	r24, 0x30	; 48
    262c:	0e 94 5e 12 	call	0x24bc	; 0x24bc <LCD_WriteChar>
		num_length--;
    2630:	9a 94       	dec	r9
		LCD_WriteChar(digit + '0');
		reversed = reversed / 10 ;
		num_length--;
	}

	while(num_length !=0){
    2632:	99 20       	and	r9, r9
    2634:	d1 f7       	brne	.-12     	; 0x262a <LCD_WriteInteger+0xe2>
		LCD_WriteChar('0');
		num_length--;
	}

}
    2636:	1f 91       	pop	r17
    2638:	0f 91       	pop	r16
    263a:	ff 90       	pop	r15
    263c:	ef 90       	pop	r14
    263e:	df 90       	pop	r13
    2640:	cf 90       	pop	r12
    2642:	bf 90       	pop	r11
    2644:	af 90       	pop	r10
    2646:	9f 90       	pop	r9
    2648:	08 95       	ret

0000264a <LCD_WriteString>:

#endif

}

void LCD_WriteString(uint8 *str){
    264a:	cf 93       	push	r28
    264c:	df 93       	push	r29
    264e:	ec 01       	movw	r28, r24
    2650:	03 c0       	rjmp	.+6      	; 0x2658 <LCD_WriteString+0xe>
	while(*str != '\0'){
		LCD_WriteChar(*str);
    2652:	0e 94 5e 12 	call	0x24bc	; 0x24bc <LCD_WriteChar>
		str++ ;
    2656:	21 96       	adiw	r28, 0x01	; 1
#endif

}

void LCD_WriteString(uint8 *str){
	while(*str != '\0'){
    2658:	88 81       	ld	r24, Y
    265a:	88 23       	and	r24, r24
    265c:	d1 f7       	brne	.-12     	; 0x2652 <LCD_WriteString+0x8>
		LCD_WriteChar(*str);
		str++ ;
	}
}
    265e:	df 91       	pop	r29
    2660:	cf 91       	pop	r28
    2662:	08 95       	ret

00002664 <LCD_WriteCommand>:

#endif
}


void LCD_WriteCommand(uint8 cmd){
    2664:	ff 92       	push	r15
    2666:	0f 93       	push	r16
    2668:	1f 93       	push	r17
    266a:	f8 2e       	mov	r15, r24
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_E_PIN,DIO_PIN_VAL_LOW);
	_delay_ms(1);


#elif LCD_MODE == 4
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_RS_PIN,DIO_PIN_VAL_LOW);
    266c:	83 e0       	ldi	r24, 0x03	; 3
    266e:	61 e0       	ldi	r22, 0x01	; 1
    2670:	40 e0       	ldi	r20, 0x00	; 0
    2672:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <DIO_SetPinValue>
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_RW_PIN,DIO_PIN_VAL_LOW);
    2676:	83 e0       	ldi	r24, 0x03	; 3
    2678:	62 e0       	ldi	r22, 0x02	; 2
    267a:	40 e0       	ldi	r20, 0x00	; 0
    267c:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <DIO_SetPinValue>
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_E_PIN,DIO_PIN_VAL_LOW);
    2680:	83 e0       	ldi	r24, 0x03	; 3
    2682:	63 e0       	ldi	r22, 0x03	; 3
    2684:	40 e0       	ldi	r20, 0x00	; 0
    2686:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <DIO_SetPinValue>

	//Send Highest nibble first
	LCD_4BIT_DATA_PORT = (LCD_4BIT_DATA_PORT & 0x0f)|(cmd & 0xf0) ;
    268a:	8b b3       	in	r24, 0x1b	; 27
    268c:	9f 2d       	mov	r25, r15
    268e:	90 7f       	andi	r25, 0xF0	; 240
    2690:	8f 70       	andi	r24, 0x0F	; 15
    2692:	98 2b       	or	r25, r24
    2694:	9b bb       	out	0x1b, r25	; 27
	//Latch the highest nibble
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_E_PIN,DIO_PIN_VAL_HIGH);
    2696:	83 e0       	ldi	r24, 0x03	; 3
    2698:	63 e0       	ldi	r22, 0x03	; 3
    269a:	41 e0       	ldi	r20, 0x01	; 1
    269c:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <DIO_SetPinValue>
    26a0:	00 ed       	ldi	r16, 0xD0	; 208
    26a2:	17 e0       	ldi	r17, 0x07	; 7
    26a4:	c8 01       	movw	r24, r16
    26a6:	01 97       	sbiw	r24, 0x01	; 1
    26a8:	f1 f7       	brne	.-4      	; 0x26a6 <LCD_WriteCommand+0x42>
	_delay_ms(1);
	//Stop Latch to send lowest nibble
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_E_PIN,DIO_PIN_VAL_LOW);
    26aa:	83 e0       	ldi	r24, 0x03	; 3
    26ac:	63 e0       	ldi	r22, 0x03	; 3
    26ae:	40 e0       	ldi	r20, 0x00	; 0
    26b0:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <DIO_SetPinValue>
    26b4:	c8 01       	movw	r24, r16
    26b6:	01 97       	sbiw	r24, 0x01	; 1
    26b8:	f1 f7       	brne	.-4      	; 0x26b6 <LCD_WriteCommand+0x52>
	_delay_ms(1);

	//Send Highest nibble first
	LCD_4BIT_DATA_PORT = (LCD_4BIT_DATA_PORT & 0x0f)|(cmd<<4) ;
    26ba:	8b b3       	in	r24, 0x1b	; 27
    26bc:	f2 94       	swap	r15
    26be:	20 ef       	ldi	r18, 0xF0	; 240
    26c0:	f2 22       	and	r15, r18
    26c2:	8f 70       	andi	r24, 0x0F	; 15
    26c4:	8f 29       	or	r24, r15
    26c6:	8b bb       	out	0x1b, r24	; 27
	//Latch the highest nibble
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_E_PIN,DIO_PIN_VAL_HIGH);
    26c8:	83 e0       	ldi	r24, 0x03	; 3
    26ca:	63 e0       	ldi	r22, 0x03	; 3
    26cc:	41 e0       	ldi	r20, 0x01	; 1
    26ce:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <DIO_SetPinValue>
    26d2:	c8 01       	movw	r24, r16
    26d4:	01 97       	sbiw	r24, 0x01	; 1
    26d6:	f1 f7       	brne	.-4      	; 0x26d4 <LCD_WriteCommand+0x70>
	_delay_ms(1);
	//Stop Latch to send lowest nibble
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_E_PIN,DIO_PIN_VAL_LOW);
    26d8:	83 e0       	ldi	r24, 0x03	; 3
    26da:	63 e0       	ldi	r22, 0x03	; 3
    26dc:	40 e0       	ldi	r20, 0x00	; 0
    26de:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <DIO_SetPinValue>
    26e2:	c8 01       	movw	r24, r16
    26e4:	01 97       	sbiw	r24, 0x01	; 1
    26e6:	f1 f7       	brne	.-4      	; 0x26e4 <LCD_WriteCommand+0x80>
	_delay_ms(1);

#endif

}
    26e8:	1f 91       	pop	r17
    26ea:	0f 91       	pop	r16
    26ec:	ff 90       	pop	r15
    26ee:	08 95       	ret

000026f0 <LCD_Clear>:

}


void LCD_Clear(void){
	LCD_WriteCommand(0x01);
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	0e 94 32 13 	call	0x2664	; 0x2664 <LCD_WriteCommand>
}
    26f6:	08 95       	ret

000026f8 <LCD_GoTo>:
	}
}


void LCD_GoTo(uint8 row,uint8 col){
	if(row == 0){
    26f8:	88 23       	and	r24, r24
    26fa:	29 f4       	brne	.+10     	; 0x2706 <LCD_GoTo+0xe>
		uint8 cmd = 0x80 + col ;
		LCD_WriteCommand(cmd);
    26fc:	86 2f       	mov	r24, r22
    26fe:	80 58       	subi	r24, 0x80	; 128
    2700:	0e 94 32 13 	call	0x2664	; 0x2664 <LCD_WriteCommand>
    2704:	08 95       	ret
	}else if(row == 1){
    2706:	81 30       	cpi	r24, 0x01	; 1
    2708:	21 f4       	brne	.+8      	; 0x2712 <LCD_GoTo+0x1a>
		uint8 cmd = 0xC0 + col ;
		LCD_WriteCommand(cmd);
    270a:	86 2f       	mov	r24, r22
    270c:	80 54       	subi	r24, 0x40	; 64
    270e:	0e 94 32 13 	call	0x2664	; 0x2664 <LCD_WriteCommand>
    2712:	08 95       	ret

00002714 <LCD_Init>:
	LCD_WriteCommand(0x0C); //Display ON , Cursor OFF
	LCD_WriteCommand(0x01); //Clear LCD screen
	LCD_WriteCommand(0x02); //Return Cursor to HOME

#elif LCD_MODE == 4
	DIO_SetPinDirection(LCD_8BIT_DATA_PORT,LCD_D4_PIN,DIO_PIN_DIR_OUTPUT);
    2714:	80 e0       	ldi	r24, 0x00	; 0
    2716:	64 e0       	ldi	r22, 0x04	; 4
    2718:	41 e0       	ldi	r20, 0x01	; 1
    271a:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_8BIT_DATA_PORT,LCD_D5_PIN,DIO_PIN_DIR_OUTPUT);
    271e:	80 e0       	ldi	r24, 0x00	; 0
    2720:	65 e0       	ldi	r22, 0x05	; 5
    2722:	41 e0       	ldi	r20, 0x01	; 1
    2724:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_8BIT_DATA_PORT,LCD_D6_PIN,DIO_PIN_DIR_OUTPUT);
    2728:	80 e0       	ldi	r24, 0x00	; 0
    272a:	66 e0       	ldi	r22, 0x06	; 6
    272c:	41 e0       	ldi	r20, 0x01	; 1
    272e:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_8BIT_DATA_PORT,LCD_D7_PIN,DIO_PIN_DIR_OUTPUT);
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	67 e0       	ldi	r22, 0x07	; 7
    2736:	41 e0       	ldi	r20, 0x01	; 1
    2738:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_SetPinDirection>

	DIO_SetPinDirection(LCD_8BIT_CONTROL_PORT,LCD_RS_PIN,DIO_PIN_DIR_OUTPUT);
    273c:	83 e0       	ldi	r24, 0x03	; 3
    273e:	61 e0       	ldi	r22, 0x01	; 1
    2740:	41 e0       	ldi	r20, 0x01	; 1
    2742:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_8BIT_CONTROL_PORT,LCD_RW_PIN,DIO_PIN_DIR_OUTPUT);
    2746:	83 e0       	ldi	r24, 0x03	; 3
    2748:	62 e0       	ldi	r22, 0x02	; 2
    274a:	41 e0       	ldi	r20, 0x01	; 1
    274c:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_8BIT_CONTROL_PORT,LCD_E_PIN,DIO_PIN_DIR_OUTPUT);
    2750:	83 e0       	ldi	r24, 0x03	; 3
    2752:	63 e0       	ldi	r22, 0x03	; 3
    2754:	41 e0       	ldi	r20, 0x01	; 1
    2756:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_SetPinDirection>

	LCD_WriteCommand(0x33); //For 4bit mode
    275a:	83 e3       	ldi	r24, 0x33	; 51
    275c:	0e 94 32 13 	call	0x2664	; 0x2664 <LCD_WriteCommand>
	LCD_WriteCommand(0x32);
    2760:	82 e3       	ldi	r24, 0x32	; 50
    2762:	0e 94 32 13 	call	0x2664	; 0x2664 <LCD_WriteCommand>
	LCD_WriteCommand(0x28);
    2766:	88 e2       	ldi	r24, 0x28	; 40
    2768:	0e 94 32 13 	call	0x2664	; 0x2664 <LCD_WriteCommand>

	LCD_WriteCommand(0x0C); //Display ON , Cursor OFF
    276c:	8c e0       	ldi	r24, 0x0C	; 12
    276e:	0e 94 32 13 	call	0x2664	; 0x2664 <LCD_WriteCommand>
	LCD_WriteCommand(0x01); //Clear LCD screen
    2772:	81 e0       	ldi	r24, 0x01	; 1
    2774:	0e 94 32 13 	call	0x2664	; 0x2664 <LCD_WriteCommand>
	LCD_WriteCommand(0x02); //Return Cursor to HOME
    2778:	82 e0       	ldi	r24, 0x02	; 2
    277a:	0e 94 32 13 	call	0x2664	; 0x2664 <LCD_WriteCommand>

#endif
}
    277e:	08 95       	ret

00002780 <SPI_Data_Transmit>:
void  SPI_Transmit_Term(void){
	DIO_SetPinValue(DIO_PORTB,DIO_PIN4,DIO_PIN_VAL_HIGH);
}

uint8 SPI_Data_Transmit(uint8 data){
	SPDR = data ;
    2780:	8f b9       	out	0x0f, r24	; 15

	while(GET_BIT(SPSR,7) == 0);
    2782:	77 9b       	sbis	0x0e, 7	; 14
    2784:	fe cf       	rjmp	.-4      	; 0x2782 <SPI_Data_Transmit+0x2>

	uint8 received_data = 0 ;
	received_data = SPDR ;
    2786:	8f b1       	in	r24, 0x0f	; 15

	return received_data ;

}
    2788:	08 95       	ret

0000278a <SPI_Transmit_Term>:
void  SPI_Transmit_Start(void){
	DIO_SetPinValue(DIO_PORTB,DIO_PIN4,DIO_PIN_VAL_LOW);
}

void  SPI_Transmit_Term(void){
	DIO_SetPinValue(DIO_PORTB,DIO_PIN4,DIO_PIN_VAL_HIGH);
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	64 e0       	ldi	r22, 0x04	; 4
    278e:	41 e0       	ldi	r20, 0x01	; 1
    2790:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <DIO_SetPinValue>
}
    2794:	08 95       	ret

00002796 <SPI_Transmit_Start>:


}

void  SPI_Transmit_Start(void){
	DIO_SetPinValue(DIO_PORTB,DIO_PIN4,DIO_PIN_VAL_LOW);
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	64 e0       	ldi	r22, 0x04	; 4
    279a:	40 e0       	ldi	r20, 0x00	; 0
    279c:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <DIO_SetPinValue>
}
    27a0:	08 95       	ret

000027a2 <SPI_Slave_Init>:

	SPCR =  0x53;

}
void  SPI_Slave_Init(void){
	DIO_SetPinDirection(DIO_PORTB, DIO_PIN4, DIO_PIN_DIR_INPUT);
    27a2:	81 e0       	ldi	r24, 0x01	; 1
    27a4:	64 e0       	ldi	r22, 0x04	; 4
    27a6:	40 e0       	ldi	r20, 0x00	; 0
    27a8:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTB, DIO_PIN5, DIO_PIN_DIR_INPUT);
    27ac:	81 e0       	ldi	r24, 0x01	; 1
    27ae:	65 e0       	ldi	r22, 0x05	; 5
    27b0:	40 e0       	ldi	r20, 0x00	; 0
    27b2:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTB, DIO_PIN6, DIO_PIN_DIR_OUTPUT);
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	66 e0       	ldi	r22, 0x06	; 6
    27ba:	41 e0       	ldi	r20, 0x01	; 1
    27bc:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTB, DIO_PIN7, DIO_PIN_DIR_INPUT);
    27c0:	81 e0       	ldi	r24, 0x01	; 1
    27c2:	67 e0       	ldi	r22, 0x07	; 7
    27c4:	40 e0       	ldi	r20, 0x00	; 0
    27c6:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_SetPinDirection>
	//SET_BIT(SPCR,5);

	//Slave Select
	//CLR_BIT(SPCR,4);

	SPCR = 0x40 ;
    27ca:	80 e4       	ldi	r24, 0x40	; 64
    27cc:	8d b9       	out	0x0d, r24	; 13


}
    27ce:	08 95       	ret

000027d0 <SPI_Master_Init>:


#include "SPI.h"

void  SPI_Master_Init(void){
	DIO_SetPinDirection(DIO_PORTB, DIO_PIN4, DIO_PIN_DIR_OUTPUT);
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	64 e0       	ldi	r22, 0x04	; 4
    27d4:	41 e0       	ldi	r20, 0x01	; 1
    27d6:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTB, DIO_PIN5, DIO_PIN_DIR_OUTPUT);
    27da:	81 e0       	ldi	r24, 0x01	; 1
    27dc:	65 e0       	ldi	r22, 0x05	; 5
    27de:	41 e0       	ldi	r20, 0x01	; 1
    27e0:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTB, DIO_PIN6, DIO_PIN_DIR_INPUT);
    27e4:	81 e0       	ldi	r24, 0x01	; 1
    27e6:	66 e0       	ldi	r22, 0x06	; 6
    27e8:	40 e0       	ldi	r20, 0x00	; 0
    27ea:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTB, DIO_PIN7, DIO_PIN_DIR_OUTPUT);
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	67 e0       	ldi	r22, 0x07	; 7
    27f2:	41 e0       	ldi	r20, 0x01	; 1
    27f4:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_SetPinDirection>

	//CLK/128
	//SET_BIT(SPCR,0);
	//SET_BIT(SPCR,1);

	SPCR =  0x53;
    27f8:	83 e5       	ldi	r24, 0x53	; 83
    27fa:	8d b9       	out	0x0d, r24	; 13

}
    27fc:	08 95       	ret

000027fe <Timer0_Init>:

void Timer0_Init(void){
#if Timer0_MODE == Timer0_NORMAL_MODE

	//Choosing normal mode
	CLR_BIT(TCCR0,3);
    27fe:	83 b7       	in	r24, 0x33	; 51
    2800:	87 7f       	andi	r24, 0xF7	; 247
    2802:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,6);
    2804:	83 b7       	in	r24, 0x33	; 51
    2806:	8f 7b       	andi	r24, 0xBF	; 191
    2808:	83 bf       	out	0x33, r24	; 51
	//Enable Global Interrupt
	//SET_BIT(SREG,7);

	//Enable overflow Interrupt
	//Timer/Counter0 Overflow Interrupt Enable
	SET_BIT(TIMSK,0);
    280a:	89 b7       	in	r24, 0x39	; 57
    280c:	81 60       	ori	r24, 0x01	; 1
    280e:	89 bf       	out	0x39, r24	; 57
	CLR_BIT(TIMSK,1);
    2810:	89 b7       	in	r24, 0x39	; 57
    2812:	8d 7f       	andi	r24, 0xFD	; 253
    2814:	89 bf       	out	0x39, r24	; 57
	SET_BIT(TCCR0,5);



#endif
}
    2816:	08 95       	ret

00002818 <Timer0_Start>:

void Timer0_Start(void){

	SET_BIT(TCCR0,0);
    2818:	83 b7       	in	r24, 0x33	; 51
    281a:	81 60       	ori	r24, 0x01	; 1
    281c:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,1);
    281e:	83 b7       	in	r24, 0x33	; 51
    2820:	8d 7f       	andi	r24, 0xFD	; 253
    2822:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,2);
    2824:	83 b7       	in	r24, 0x33	; 51
    2826:	84 60       	ori	r24, 0x04	; 4
    2828:	83 bf       	out	0x33, r24	; 51
}
    282a:	08 95       	ret

0000282c <Timer0_Stop>:

void Timer0_Stop(void){
	CLR_BIT(TCCR0,0);
    282c:	83 b7       	in	r24, 0x33	; 51
    282e:	8e 7f       	andi	r24, 0xFE	; 254
    2830:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,1);
    2832:	83 b7       	in	r24, 0x33	; 51
    2834:	8d 7f       	andi	r24, 0xFD	; 253
    2836:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,2);
    2838:	83 b7       	in	r24, 0x33	; 51
    283a:	8b 7f       	andi	r24, 0xFB	; 251
    283c:	83 bf       	out	0x33, r24	; 51
}
    283e:	08 95       	ret

00002840 <Timer0_delay_ms>:

void Timer0_delay_ms(uint32 delay_ms){
	uint8 Tick_Time = 1024/8 ; //this time is in micro seconds
	uint32 Total_Ticks = (delay_ms*1000) / Tick_Time ;
    2840:	28 ee       	ldi	r18, 0xE8	; 232
    2842:	33 e0       	ldi	r19, 0x03	; 3
    2844:	40 e0       	ldi	r20, 0x00	; 0
    2846:	50 e0       	ldi	r21, 0x00	; 0
    2848:	0e 94 01 17 	call	0x2e02	; 0x2e02 <__mulsi3>
    284c:	37 e0       	ldi	r19, 0x07	; 7
    284e:	96 95       	lsr	r25
    2850:	87 95       	ror	r24
    2852:	77 95       	ror	r23
    2854:	67 95       	ror	r22
    2856:	3a 95       	dec	r19
    2858:	d1 f7       	brne	.-12     	; 0x284e <Timer0_delay_ms+0xe>
	NUM_OVF = Total_Ticks / 256 ;
    285a:	27 2f       	mov	r18, r23
    285c:	38 2f       	mov	r19, r24
    285e:	49 2f       	mov	r20, r25
    2860:	55 27       	eor	r21, r21
    2862:	20 93 e9 00 	sts	0x00E9, r18
    2866:	30 93 ea 00 	sts	0x00EA, r19
    286a:	40 93 eb 00 	sts	0x00EB, r20
    286e:	50 93 ec 00 	sts	0x00EC, r21

#if Timer0_MODE == Timer0_NORMAL_MODE

	INIT_VAL = 256 - (Total_Ticks % 256) ;
    2872:	20 e0       	ldi	r18, 0x00	; 0
    2874:	31 e0       	ldi	r19, 0x01	; 1
    2876:	40 e0       	ldi	r20, 0x00	; 0
    2878:	50 e0       	ldi	r21, 0x00	; 0
    287a:	26 1b       	sub	r18, r22
    287c:	31 09       	sbc	r19, r1
    287e:	41 09       	sbc	r20, r1
    2880:	51 09       	sbc	r21, r1
    2882:	20 93 ed 00 	sts	0x00ED, r18
    2886:	30 93 ee 00 	sts	0x00EE, r19
    288a:	40 93 ef 00 	sts	0x00EF, r20
    288e:	50 93 f0 00 	sts	0x00F0, r21
	TCNT0 = INIT_VAL ;
    2892:	22 bf       	out	0x32, r18	; 50
#elif Timer0_MODE == Timer0_CTC_MODE

	INIT_VAL = Total_Ticks % 256 ;
	OCR0 = INIT_VAL ;
#endif
}
    2894:	08 95       	ret

00002896 <minute_delay>:


void minute_delay(void){
	Timer0_Init();
    2896:	0e 94 ff 13 	call	0x27fe	; 0x27fe <Timer0_Init>
	Timer0_Start();
    289a:	0e 94 0c 14 	call	0x2818	; 0x2818 <Timer0_Start>
    289e:	26 e2       	ldi	r18, 0x26	; 38
    28a0:	37 e0       	ldi	r19, 0x07	; 7


	//we will set number of overflows
	sint16 ovf_for_min = 1830 ;
	while(ovf_for_min > 0){
		if(GET_BIT(TIFR,0) == 1){
    28a2:	08 b6       	in	r0, 0x38	; 56
    28a4:	00 fe       	sbrs	r0, 0
    28a6:	fd cf       	rjmp	.-6      	; 0x28a2 <minute_delay+0xc>
			ovf_for_min-- ;
    28a8:	21 50       	subi	r18, 0x01	; 1
    28aa:	30 40       	sbci	r19, 0x00	; 0
			SET_BIT(TIFR,0) ;
    28ac:	88 b7       	in	r24, 0x38	; 56
    28ae:	81 60       	ori	r24, 0x01	; 1
    28b0:	88 bf       	out	0x38, r24	; 56
	Timer0_Start();


	//we will set number of overflows
	sint16 ovf_for_min = 1830 ;
	while(ovf_for_min > 0){
    28b2:	12 16       	cp	r1, r18
    28b4:	13 06       	cpc	r1, r19
    28b6:	ac f3       	brlt	.-22     	; 0x28a2 <minute_delay+0xc>
			ovf_for_min-- ;
			SET_BIT(TIFR,0) ;
		}
	}

	Timer0_Stop();
    28b8:	0e 94 16 14 	call	0x282c	; 0x282c <Timer0_Stop>
}
    28bc:	08 95       	ret

000028be <Fast_PWM_Motor>:



void Fast_PWM_Motor(uint8 OCR){
	OCR0 = OCR ;
    28be:	8c bf       	out	0x3c, r24	; 60
}
    28c0:	08 95       	ret

000028c2 <Timer1_Init>:
#include "Timer1.h"

void Timer1_Init(void){

	//make pin5 on portd output
	SET_BIT(DDRD,5);
    28c2:	8d 9a       	sbi	0x11, 5	; 17

	//fast pwm , TOP -->ICR1 , COMPARE-->OCR1A
	CLR_BIT(TCCR1A,0);
    28c4:	8f b5       	in	r24, 0x2f	; 47
    28c6:	8e 7f       	andi	r24, 0xFE	; 254
    28c8:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A,1);
    28ca:	8f b5       	in	r24, 0x2f	; 47
    28cc:	82 60       	ori	r24, 0x02	; 2
    28ce:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1B,3);
    28d0:	8e b5       	in	r24, 0x2e	; 46
    28d2:	88 60       	ori	r24, 0x08	; 8
    28d4:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,4);
    28d6:	8e b5       	in	r24, 0x2e	; 46
    28d8:	80 61       	ori	r24, 0x10	; 16
    28da:	8e bd       	out	0x2e, r24	; 46

	//Non inverted fast pwm
	CLR_BIT(TCCR1A,6);
    28dc:	8f b5       	in	r24, 0x2f	; 47
    28de:	8f 7b       	andi	r24, 0xBF	; 191
    28e0:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A,7);
    28e2:	8f b5       	in	r24, 0x2f	; 47
    28e4:	80 68       	ori	r24, 0x80	; 128
    28e6:	8f bd       	out	0x2f, r24	; 47

}
    28e8:	08 95       	ret

000028ea <Timer1_Start>:


void Timer1_Start(void){
	CLR_BIT(TCCR1B,0);
    28ea:	8e b5       	in	r24, 0x2e	; 46
    28ec:	8e 7f       	andi	r24, 0xFE	; 254
    28ee:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,1);
    28f0:	8e b5       	in	r24, 0x2e	; 46
    28f2:	8d 7f       	andi	r24, 0xFD	; 253
    28f4:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,2);
    28f6:	8e b5       	in	r24, 0x2e	; 46
    28f8:	84 60       	ori	r24, 0x04	; 4
    28fa:	8e bd       	out	0x2e, r24	; 46
}
    28fc:	08 95       	ret

000028fe <Timer1_Stop>:
void Timer1_Stop(void){
	CLR_BIT(TCCR1B,0);
    28fe:	8e b5       	in	r24, 0x2e	; 46
    2900:	8e 7f       	andi	r24, 0xFE	; 254
    2902:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,1);
    2904:	8e b5       	in	r24, 0x2e	; 46
    2906:	8d 7f       	andi	r24, 0xFD	; 253
    2908:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,2);
    290a:	8e b5       	in	r24, 0x2e	; 46
    290c:	8b 7f       	andi	r24, 0xFB	; 251
    290e:	8e bd       	out	0x2e, r24	; 46
}
    2910:	08 95       	ret

00002912 <Timer1_Generate>:


void Timer1_Generate(uint16 Duty , uint16 Top){
	OCR1A = Duty ;
    2912:	9b bd       	out	0x2b, r25	; 43
    2914:	8a bd       	out	0x2a, r24	; 42
	ICR1 = Top ;
    2916:	77 bd       	out	0x27, r23	; 39
    2918:	66 bd       	out	0x26, r22	; 38
}
    291a:	08 95       	ret

0000291c <UART_Tx>:
}


void UART_Tx(uint8 data){
	//put data we want to send in UDR register after that it will be shifted to output
	UDR = data;
    291c:	8c b9       	out	0x0c, r24	; 12

	//keep looping until data buffer register is empty
	while(GET_BIT(UCSRA,5) != 1);
    291e:	5d 9b       	sbis	0x0b, 5	; 11
    2920:	fe cf       	rjmp	.-4      	; 0x291e <UART_Tx+0x2>
}
    2922:	08 95       	ret

00002924 <UART_Tx_String>:

void UART_Tx_String(uint8 *data){
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	04 c0       	rjmp	.+8      	; 0x2930 <UART_Tx_String+0xc>
}


void UART_Tx(uint8 data){
	//put data we want to send in UDR register after that it will be shifted to output
	UDR = data;
    2928:	ec b9       	out	0x0c, r30	; 12

	//keep looping until data buffer register is empty
	while(GET_BIT(UCSRA,5) != 1);
    292a:	5d 9b       	sbis	0x0b, 5	; 11
    292c:	fe cf       	rjmp	.-4      	; 0x292a <UART_Tx_String+0x6>
void UART_Tx_String(uint8 *data){
	uint8 counter = 0 ;

	while(data[counter] != '\0'){
		UART_Tx(data[counter]);
		counter++ ;
    292e:	2f 5f       	subi	r18, 0xFF	; 255
}

void UART_Tx_String(uint8 *data){
	uint8 counter = 0 ;

	while(data[counter] != '\0'){
    2930:	fc 01       	movw	r30, r24
    2932:	e2 0f       	add	r30, r18
    2934:	f1 1d       	adc	r31, r1
    2936:	e0 81       	ld	r30, Z
    2938:	ee 23       	and	r30, r30
    293a:	b1 f7       	brne	.-20     	; 0x2928 <UART_Tx_String+0x4>
		UART_Tx(data[counter]);
		counter++ ;
	}
}
    293c:	08 95       	ret

0000293e <UART_Rx>:

uint8 UART_Rx(void){
	while(GET_BIT(UCSRA,7) != 1) ;
    293e:	5f 9b       	sbis	0x0b, 7	; 11
    2940:	fe cf       	rjmp	.-4      	; 0x293e <UART_Rx>

	return UDR ;
    2942:	8c b1       	in	r24, 0x0c	; 12
}
    2944:	08 95       	ret

00002946 <UART_Init>:


void UART_Init(){

	//Set Tx pin output direction
	DIO_SetPinDirection(DIO_PORTD,DIO_PIN1,DIO_PIN_DIR_OUTPUT);
    2946:	83 e0       	ldi	r24, 0x03	; 3
    2948:	61 e0       	ldi	r22, 0x01	; 1
    294a:	41 e0       	ldi	r20, 0x01	; 1
    294c:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_SetPinDirection>
	//Set Rx pin input direction
	DIO_SetPinDirection(DIO_PORTD, DIO_PIN0, DIO_PIN_DIR_INPUT);
    2950:	83 e0       	ldi	r24, 0x03	; 3
    2952:	60 e0       	ldi	r22, 0x00	; 0
    2954:	40 e0       	ldi	r20, 0x00	; 0
    2956:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_SetPinDirection>

	//BaudRate calculation --> value to be input to down counter prescalar
	UBRRL = ((Freq)/(16*Desired_Baud_Rate)) - 1;
    295a:	83 e3       	ldi	r24, 0x33	; 51
    295c:	89 b9       	out	0x09, r24	; 9

	//Enable Transmitter and Receiver
	SET_BIT(UCSRB,3);
    295e:	53 9a       	sbi	0x0a, 3	; 10
	SET_BIT(UCSRB,4);
    2960:	54 9a       	sbi	0x0a, 4	; 10

	//Asynchronous Operation
	//Stop Bits -->1 bit
	//Disable Parity
	//8 data bits
	UCSRC = 0x86 ; //0b1000 0110
    2962:	86 e8       	ldi	r24, 0x86	; 134
    2964:	80 bd       	out	0x20, r24	; 32

}
    2966:	08 95       	ret

00002968 <RTC_DATE_Read>:

	I2C_Stop();

}

void RTC_DATE_Read(uint8 starting_read_address , DATE_DATA *Data_Holder){
    2968:	ff 92       	push	r15
    296a:	0f 93       	push	r16
    296c:	1f 93       	push	r17
    296e:	f8 2e       	mov	r15, r24
    2970:	8b 01       	movw	r16, r22
	//first we want to Initialize clock rate of I2C & Generate start and send SLA+W address
	I2C_Init();
    2972:	0e 94 13 11 	call	0x2226	; 0x2226 <I2C_Init>
	I2C_Start(RTC_SLA_W);
    2976:	80 ed       	ldi	r24, 0xD0	; 208
    2978:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
	//now we will set the pointer to the address we want to read from
	I2C_Write(starting_read_address);
    297c:	8f 2d       	mov	r24, r15
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>

	//now we will generate a repeated start but in reading mode this time
	I2C_Repeated_Start(RTC_SLA_R);
    2984:	81 ed       	ldi	r24, 0xD1	; 209
    2986:	0e 94 34 11 	call	0x2268	; 0x2268 <I2C_Repeated_Start>
	Data_Holder->day = I2C_Read_ACK();
    298a:	0e 94 64 11 	call	0x22c8	; 0x22c8 <I2C_Read_ACK>
    298e:	f8 01       	movw	r30, r16
    2990:	80 83       	st	Z, r24
	Data_Holder->date = I2C_Read_ACK();
    2992:	0e 94 64 11 	call	0x22c8	; 0x22c8 <I2C_Read_ACK>
    2996:	f8 01       	movw	r30, r16
    2998:	81 83       	std	Z+1, r24	; 0x01
	Data_Holder->month = I2C_Read_ACK();
    299a:	0e 94 64 11 	call	0x22c8	; 0x22c8 <I2C_Read_ACK>
    299e:	f8 01       	movw	r30, r16
    29a0:	82 83       	std	Z+2, r24	; 0x02
	Data_Holder->year = I2C_Read_NACK();
    29a2:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <I2C_Read_NACK>
    29a6:	f8 01       	movw	r30, r16
    29a8:	83 83       	std	Z+3, r24	; 0x03
    29aa:	14 82       	std	Z+4, r1	; 0x04

	I2C_Stop();
    29ac:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>

}
    29b0:	1f 91       	pop	r17
    29b2:	0f 91       	pop	r16
    29b4:	ff 90       	pop	r15
    29b6:	08 95       	ret

000029b8 <RTC_CLOCK_Read>:
	I2C_Write(year);
	I2C_Stop();
}


void RTC_CLOCK_Read(uint8 starting_read_address , CLOCK_DATA *Data_Holder){
    29b8:	ff 92       	push	r15
    29ba:	0f 93       	push	r16
    29bc:	1f 93       	push	r17
    29be:	f8 2e       	mov	r15, r24
    29c0:	8b 01       	movw	r16, r22
	//first we want to Initialize clock rate of I2C & Generate start and send SLA+W address
	I2C_Init();
    29c2:	0e 94 13 11 	call	0x2226	; 0x2226 <I2C_Init>
	I2C_Start(RTC_SLA_W);
    29c6:	80 ed       	ldi	r24, 0xD0	; 208
    29c8:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
	//now we will set the pointer to the address we want to read from
	I2C_Write(starting_read_address);
    29cc:	8f 2d       	mov	r24, r15
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>

	//now we will generate a repeated start but in reading mode this time
	I2C_Repeated_Start(RTC_SLA_R);
    29d4:	81 ed       	ldi	r24, 0xD1	; 209
    29d6:	0e 94 34 11 	call	0x2268	; 0x2268 <I2C_Repeated_Start>
	Data_Holder->seconds = I2C_Read_ACK();
    29da:	0e 94 64 11 	call	0x22c8	; 0x22c8 <I2C_Read_ACK>
    29de:	f8 01       	movw	r30, r16
    29e0:	80 83       	st	Z, r24
	Data_Holder->minutes = I2C_Read_ACK();
    29e2:	0e 94 64 11 	call	0x22c8	; 0x22c8 <I2C_Read_ACK>
    29e6:	f8 01       	movw	r30, r16
    29e8:	81 83       	std	Z+1, r24	; 0x01
	Data_Holder->hours = I2C_Read_NACK() ;
    29ea:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <I2C_Read_NACK>
    29ee:	f8 01       	movw	r30, r16
    29f0:	82 83       	std	Z+2, r24	; 0x02
	Data_Holder->am_pm = ( ( Data_Holder->hours & 0b00100000 ) >> 5 ) ;
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	80 72       	andi	r24, 0x20	; 32
    29f6:	90 70       	andi	r25, 0x00	; 0
    29f8:	25 e0       	ldi	r18, 0x05	; 5
    29fa:	95 95       	asr	r25
    29fc:	87 95       	ror	r24
    29fe:	2a 95       	dec	r18
    2a00:	e1 f7       	brne	.-8      	; 0x29fa <RTC_CLOCK_Read+0x42>
    2a02:	83 83       	std	Z+3, r24	; 0x03

	I2C_Stop();
    2a04:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>

}
    2a08:	1f 91       	pop	r17
    2a0a:	0f 91       	pop	r16
    2a0c:	ff 90       	pop	r15
    2a0e:	08 95       	ret

00002a10 <RTC_DATE_Write>:
	//stop communication
	I2C_Stop();

}

void RTC_DATE_Write(uint8 day , uint8 date , uint8 month , uint8 year){
    2a10:	ef 92       	push	r14
    2a12:	ff 92       	push	r15
    2a14:	0f 93       	push	r16
    2a16:	1f 93       	push	r17
    2a18:	18 2f       	mov	r17, r24
    2a1a:	06 2f       	mov	r16, r22
    2a1c:	f4 2e       	mov	r15, r20
    2a1e:	e2 2e       	mov	r14, r18
	//first we want to Initialize clock rate of I2C & Generate start and send SLA+W address
	I2C_Init();
    2a20:	0e 94 13 11 	call	0x2226	; 0x2226 <I2C_Init>
	I2C_Start(RTC_SLA_W);
    2a24:	80 ed       	ldi	r24, 0xD0	; 208
    2a26:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>

	//now we want to write the starting writing register address
	I2C_Write(0x03); //Starting from seconds register address (0x03)
    2a2a:	83 e0       	ldi	r24, 0x03	; 3
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
	//now you pass the values : day , date , month , year
	I2C_Write(day);
    2a32:	81 2f       	mov	r24, r17
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
	I2C_Write(date);
    2a3a:	80 2f       	mov	r24, r16
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
	I2C_Write(month);
    2a42:	8f 2d       	mov	r24, r15
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
	I2C_Write(year);
    2a4a:	8e 2d       	mov	r24, r14
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
	I2C_Stop();
    2a52:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>
}
    2a56:	1f 91       	pop	r17
    2a58:	0f 91       	pop	r16
    2a5a:	ff 90       	pop	r15
    2a5c:	ef 90       	pop	r14
    2a5e:	08 95       	ret

00002a60 <RTC_CLOCK_Write>:


#include "ds3231.h"


void RTC_CLOCK_Write(uint8 hour , uint8 min , uint8 sec , uint8 AM_PM){
    2a60:	ef 92       	push	r14
    2a62:	ff 92       	push	r15
    2a64:	0f 93       	push	r16
    2a66:	1f 93       	push	r17
    2a68:	08 2f       	mov	r16, r24
    2a6a:	e6 2e       	mov	r14, r22
    2a6c:	f4 2e       	mov	r15, r20
    2a6e:	12 2f       	mov	r17, r18
	//first we want to Initialize clock rate of I2C & Generate start and send SLA+W address
	I2C_Init();
    2a70:	0e 94 13 11 	call	0x2226	; 0x2226 <I2C_Init>
	I2C_Start(RTC_SLA_W);
    2a74:	80 ed       	ldi	r24, 0xD0	; 208
    2a76:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>

	//now we want to write the starting writing register address
	I2C_Write(0x00); //Starting from seconds register address (0x00)
    2a7a:	80 e0       	ldi	r24, 0x00	; 0
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
	//now you pass the values : sec , min , hours ;
	I2C_Write(sec);
    2a82:	8f 2d       	mov	r24, r15
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
	I2C_Write(min);
    2a8a:	8e 2d       	mov	r24, r14
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>

	//0b01000000 means 12 hours mode
	hour = hour | (AM_PM<<5) | 0b01000000;
    2a92:	00 64       	ori	r16, 0x40	; 64
    2a94:	12 95       	swap	r17
    2a96:	11 0f       	add	r17, r17
    2a98:	10 7e       	andi	r17, 0xE0	; 224
	I2C_Write(hour);
    2a9a:	81 2f       	mov	r24, r17
    2a9c:	80 2b       	or	r24, r16
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>

	//stop communication
	I2C_Stop();
    2aa4:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>

}
    2aa8:	1f 91       	pop	r17
    2aaa:	0f 91       	pop	r16
    2aac:	ff 90       	pop	r15
    2aae:	ef 90       	pop	r14
    2ab0:	08 95       	ret

00002ab2 <main>:
#include "Application_Header.h"
#include "Timer0.h"


int main(){
	I2C_Init();
    2ab2:	0e 94 13 11 	call	0x2226	; 0x2226 <I2C_Init>
	Initialize();
    2ab6:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <Initialize>
	button_init();
    2aba:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <button_init>
	DIO_SetPinDirection(DIO_PORTC,DIO_PIN7,DIO_PIN_DIR_OUTPUT);
    2abe:	82 e0       	ldi	r24, 0x02	; 2
    2ac0:	67 e0       	ldi	r22, 0x07	; 7
    2ac2:	41 e0       	ldi	r20, 0x01	; 1
    2ac4:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_SetPinDirection>


	uint8 setup_done_correctly = 0;
	if(boot_check() == 0xFF){
    2ac8:	0e 94 1a 01 	call	0x234	; 0x234 <boot_check>
    2acc:	8f 3f       	cpi	r24, 0xFF	; 255
    2ace:	39 f4       	brne	.+14     	; 0x2ade <main+0x2c>
		//first time booting up
		name_menu();
    2ad0:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <name_menu>
		setup_done_correctly = time_menu();
    2ad4:	0e 94 3b 09 	call	0x1276	; 0x1276 <time_menu>
		while(1){
		main_menu();
		}
	}

	if(setup_done_correctly){
    2ad8:	88 23       	and	r24, r24
    2ada:	41 f4       	brne	.+16     	; 0x2aec <main+0x3a>
    2adc:	0c c0       	rjmp	.+24     	; 0x2af6 <main+0x44>
	uint8 setup_done_correctly = 0;
	if(boot_check() == 0xFF){
		//first time booting up
		name_menu();
		setup_done_correctly = time_menu();
	}else if(boot_check() == 0x01){
    2ade:	0e 94 1a 01 	call	0x234	; 0x234 <boot_check>
    2ae2:	81 30       	cpi	r24, 0x01	; 1
    2ae4:	41 f4       	brne	.+16     	; 0x2af6 <main+0x44>
		while(1){
		main_menu();
    2ae6:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <main_menu>
    2aea:	fd cf       	rjmp	.-6      	; 0x2ae6 <main+0x34>
		}
	}

	if(setup_done_correctly){
		system_set();
    2aec:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <system_set>
		while(1){
			main_menu();
    2af0:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <main_menu>
    2af4:	fd cf       	rjmp	.-6      	; 0x2af0 <main+0x3e>
    2af6:	ff cf       	rjmp	.-2      	; 0x2af6 <main+0x44>

00002af8 <sendBuffer>:

void setPageStart(uint8 address){
	sendCommand(COMMAND_SET_PAGE_START_ADDRESS | (address & 0x07));
}

void sendBuffer(const uint8 *buffer , unsigned long length ){
    2af8:	af 92       	push	r10
    2afa:	bf 92       	push	r11
    2afc:	cf 92       	push	r12
    2afe:	df 92       	push	r13
    2b00:	ef 92       	push	r14
    2b02:	ff 92       	push	r15
    2b04:	0f 93       	push	r16
    2b06:	1f 93       	push	r17
    2b08:	cf 93       	push	r28
    2b0a:	df 93       	push	r29
    2b0c:	ec 01       	movw	r28, r24
    2b0e:	5a 01       	movw	r10, r20
    2b10:	6b 01       	movw	r12, r22
	I2C_Init();
    2b12:	0e 94 13 11 	call	0x2226	; 0x2226 <I2C_Init>
	I2C_Start(oled_write_address);
    2b16:	8a e7       	ldi	r24, 0x7A	; 122
    2b18:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
	I2C_Write(CONTROL_DATA);
    2b1c:	80 e4       	ldi	r24, 0x40	; 64
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
    2b24:	ee 24       	eor	r14, r14
    2b26:	ff 24       	eor	r15, r15
    2b28:	87 01       	movw	r16, r14
    2b2a:	0c c0       	rjmp	.+24     	; 0x2b44 <sendBuffer+0x4c>
	for(unsigned long i = 0 ; i < length ; i++){
		I2C_Write(buffer[i]);
    2b2c:	fe 01       	movw	r30, r28
    2b2e:	ee 0d       	add	r30, r14
    2b30:	ff 1d       	adc	r31, r15
    2b32:	80 81       	ld	r24, Z
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>

void sendBuffer(const uint8 *buffer , unsigned long length ){
	I2C_Init();
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(unsigned long i = 0 ; i < length ; i++){
    2b3a:	08 94       	sec
    2b3c:	e1 1c       	adc	r14, r1
    2b3e:	f1 1c       	adc	r15, r1
    2b40:	01 1d       	adc	r16, r1
    2b42:	11 1d       	adc	r17, r1
    2b44:	ea 14       	cp	r14, r10
    2b46:	fb 04       	cpc	r15, r11
    2b48:	0c 05       	cpc	r16, r12
    2b4a:	1d 05       	cpc	r17, r13
    2b4c:	78 f3       	brcs	.-34     	; 0x2b2c <sendBuffer+0x34>
		I2C_Write(buffer[i]);
	}
	I2C_Stop();
    2b4e:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>
}
    2b52:	df 91       	pop	r29
    2b54:	cf 91       	pop	r28
    2b56:	1f 91       	pop	r17
    2b58:	0f 91       	pop	r16
    2b5a:	ff 90       	pop	r15
    2b5c:	ef 90       	pop	r14
    2b5e:	df 90       	pop	r13
    2b60:	cf 90       	pop	r12
    2b62:	bf 90       	pop	r11
    2b64:	af 90       	pop	r10
    2b66:	08 95       	ret

00002b68 <sendCommand>:
 */

#include "ssd1306.h"


void sendCommand(uint8 cmd){
    2b68:	1f 93       	push	r17
    2b6a:	18 2f       	mov	r17, r24
	I2C_Init();
    2b6c:	0e 94 13 11 	call	0x2226	; 0x2226 <I2C_Init>
	I2C_Start(oled_write_address);
    2b70:	8a e7       	ldi	r24, 0x7A	; 122
    2b72:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
	I2C_Write(CONTROL_COMMAND);
    2b76:	80 e0       	ldi	r24, 0x00	; 0
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
	I2C_Write(cmd);
    2b7e:	81 2f       	mov	r24, r17
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
	I2C_Stop();
    2b86:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>
}
    2b8a:	1f 91       	pop	r17
    2b8c:	08 95       	ret

00002b8e <setPageAddress>:
        sendCommand(COMMAND_COLUMN_ADDRESS);
        sendCommand(start);
        sendCommand(end);
}

void setPageAddress(uint8 start, uint8 end){
    2b8e:	0f 93       	push	r16
    2b90:	1f 93       	push	r17
    2b92:	18 2f       	mov	r17, r24
    2b94:	06 2f       	mov	r16, r22
    sendCommand(COMMAND_SET_PAGE_ADDRESS);
    2b96:	82 e2       	ldi	r24, 0x22	; 34
    2b98:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <sendCommand>
    sendCommand(start & 0x07);
    2b9c:	81 2f       	mov	r24, r17
    2b9e:	87 70       	andi	r24, 0x07	; 7
    2ba0:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <sendCommand>
    sendCommand(end & 0x07);
    2ba4:	80 2f       	mov	r24, r16
    2ba6:	87 70       	andi	r24, 0x07	; 7
    2ba8:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <sendCommand>
}
    2bac:	1f 91       	pop	r17
    2bae:	0f 91       	pop	r16
    2bb0:	08 95       	ret

00002bb2 <setColumnAddress>:
		setPageStart(i);
		sendBuffer(page_buf,sizeof(page_buf));
	}
}

void setColumnAddress(uint8 start, uint8 end){
    2bb2:	0f 93       	push	r16
    2bb4:	1f 93       	push	r17
    2bb6:	18 2f       	mov	r17, r24
    2bb8:	06 2f       	mov	r16, r22
        sendCommand(COMMAND_COLUMN_ADDRESS);
    2bba:	81 e2       	ldi	r24, 0x21	; 33
    2bbc:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <sendCommand>
        sendCommand(start);
    2bc0:	81 2f       	mov	r24, r17
    2bc2:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <sendCommand>
        sendCommand(end);
    2bc6:	80 2f       	mov	r24, r16
    2bc8:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <sendCommand>
}
    2bcc:	1f 91       	pop	r17
    2bce:	0f 91       	pop	r16
    2bd0:	08 95       	ret

00002bd2 <setAddressingMode>:
		I2C_Write(buffer[i]);
	}
	I2C_Stop();
}

void setAddressingMode(uint8 mode){
    2bd2:	1f 93       	push	r17
    2bd4:	18 2f       	mov	r17, r24
	sendCommand(COMMAND_ADDRESSING_MODE);
    2bd6:	80 e0       	ldi	r24, 0x00	; 0
    2bd8:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <sendCommand>
	sendCommand(mode);
    2bdc:	81 2f       	mov	r24, r17
    2bde:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <sendCommand>
}
    2be2:	1f 91       	pop	r17
    2be4:	08 95       	ret

00002be6 <setPageStart>:
void resume(uint8 ignore_ram){
	sendCommand(COMMAND_DISPLAY_RESUME | ignore_ram);
}

void setPageStart(uint8 address){
	sendCommand(COMMAND_SET_PAGE_START_ADDRESS | (address & 0x07));
    2be6:	87 70       	andi	r24, 0x07	; 7
    2be8:	80 6b       	ori	r24, 0xB0	; 176
    2bea:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <sendCommand>
}
    2bee:	08 95       	ret

00002bf0 <clear>:
void setAddressingMode(uint8 mode){
	sendCommand(COMMAND_ADDRESSING_MODE);
	sendCommand(mode);
}

void clear(){
    2bf0:	ef 92       	push	r14
    2bf2:	ff 92       	push	r15
    2bf4:	0f 93       	push	r16
    2bf6:	1f 93       	push	r17
    2bf8:	df 93       	push	r29
    2bfa:	cf 93       	push	r28
    2bfc:	cd b7       	in	r28, 0x3d	; 61
    2bfe:	de b7       	in	r29, 0x3e	; 62
    2c00:	c0 58       	subi	r28, 0x80	; 128
    2c02:	d0 40       	sbci	r29, 0x00	; 0
    2c04:	0f b6       	in	r0, 0x3f	; 63
    2c06:	f8 94       	cli
    2c08:	de bf       	out	0x3e, r29	; 62
    2c0a:	0f be       	out	0x3f, r0	; 63
    2c0c:	cd bf       	out	0x3d, r28	; 61
	//clear the display by writing a zeroed page buffer
	uint8 page_buf[128] = {0};
    2c0e:	8e 01       	movw	r16, r28
    2c10:	0f 5f       	subi	r16, 0xFF	; 255
    2c12:	1f 4f       	sbci	r17, 0xFF	; 255
    2c14:	80 e8       	ldi	r24, 0x80	; 128
    2c16:	f8 01       	movw	r30, r16
    2c18:	11 92       	st	Z+, r1
    2c1a:	8a 95       	dec	r24
    2c1c:	e9 f7       	brne	.-6      	; 0x2c18 <clear+0x28>
	setAddressingMode(0x02);
    2c1e:	82 e0       	ldi	r24, 0x02	; 2
    2c20:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <setAddressingMode>
    2c24:	ff 24       	eor	r15, r15
	for(int i = 0 ; i < 8 ; i++){
		setPageStart(i);
		sendBuffer(page_buf,sizeof(page_buf));
    2c26:	e0 2e       	mov	r14, r16
    2c28:	01 2f       	mov	r16, r17
void clear(){
	//clear the display by writing a zeroed page buffer
	uint8 page_buf[128] = {0};
	setAddressingMode(0x02);
	for(int i = 0 ; i < 8 ; i++){
		setPageStart(i);
    2c2a:	8f 2d       	mov	r24, r15
    2c2c:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <setPageStart>
		sendBuffer(page_buf,sizeof(page_buf));
    2c30:	8e 2d       	mov	r24, r14
    2c32:	90 2f       	mov	r25, r16
    2c34:	40 e8       	ldi	r20, 0x80	; 128
    2c36:	50 e0       	ldi	r21, 0x00	; 0
    2c38:	60 e0       	ldi	r22, 0x00	; 0
    2c3a:	70 e0       	ldi	r23, 0x00	; 0
    2c3c:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <sendBuffer>
    2c40:	f3 94       	inc	r15

void clear(){
	//clear the display by writing a zeroed page buffer
	uint8 page_buf[128] = {0};
	setAddressingMode(0x02);
	for(int i = 0 ; i < 8 ; i++){
    2c42:	f8 e0       	ldi	r31, 0x08	; 8
    2c44:	ff 16       	cp	r15, r31
    2c46:	89 f7       	brne	.-30     	; 0x2c2a <clear+0x3a>
		setPageStart(i);
		sendBuffer(page_buf,sizeof(page_buf));
	}
}
    2c48:	c0 58       	subi	r28, 0x80	; 128
    2c4a:	df 4f       	sbci	r29, 0xFF	; 255
    2c4c:	0f b6       	in	r0, 0x3f	; 63
    2c4e:	f8 94       	cli
    2c50:	de bf       	out	0x3e, r29	; 62
    2c52:	0f be       	out	0x3f, r0	; 63
    2c54:	cd bf       	out	0x3d, r28	; 61
    2c56:	cf 91       	pop	r28
    2c58:	df 91       	pop	r29
    2c5a:	1f 91       	pop	r17
    2c5c:	0f 91       	pop	r16
    2c5e:	ff 90       	pop	r15
    2c60:	ef 90       	pop	r14
    2c62:	08 95       	ret

00002c64 <resume>:
void scroll(uint8 e){
	sendCommand(COMMAND_SCROLL_ACTIVATION | e);
}

void resume(uint8 ignore_ram){
	sendCommand(COMMAND_DISPLAY_RESUME | ignore_ram);
    2c64:	84 6a       	ori	r24, 0xA4	; 164
    2c66:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <sendCommand>
}
    2c6a:	08 95       	ret

00002c6c <scroll>:
void Invert(uint8 invert){
	sendCommand(COMMAND_DISPLAY_INVERSE | invert);
}

void scroll(uint8 e){
	sendCommand(COMMAND_SCROLL_ACTIVATION | e);
    2c6c:	8e 62       	ori	r24, 0x2E	; 46
    2c6e:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <sendCommand>
}
    2c72:	08 95       	ret

00002c74 <Invert>:
	sendCommand(COMMAND_CHARGE_PUMP);
	sendCommand(0x10 | (enabled<<2));
}

void Invert(uint8 invert){
	sendCommand(COMMAND_DISPLAY_INVERSE | invert);
    2c74:	86 6a       	ori	r24, 0xA6	; 166
    2c76:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <sendCommand>
}
    2c7a:	08 95       	ret

00002c7c <enableChargePump>:
void setMuliplexRatio(uint8 ratio){
	sendCommand(COMMAND_MULTIPLEX_RATIO);
	sendCommand(ratio & 0x3F);
}

void enableChargePump(uint8 enabled){
    2c7c:	1f 93       	push	r17
    2c7e:	18 2f       	mov	r17, r24
	sendCommand(COMMAND_CHARGE_PUMP);
    2c80:	8d e8       	ldi	r24, 0x8D	; 141
    2c82:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <sendCommand>
	sendCommand(0x10 | (enabled<<2));
    2c86:	11 0f       	add	r17, r17
    2c88:	11 0f       	add	r17, r17
    2c8a:	81 2f       	mov	r24, r17
    2c8c:	80 61       	ori	r24, 0x10	; 16
    2c8e:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <sendCommand>
}
    2c92:	1f 91       	pop	r17
    2c94:	08 95       	ret

00002c96 <setMuliplexRatio>:
void setClockConfig(uint8 divide , uint8 freq){
	sendCommand(COMMAND_DISPLAY_CLOCK_DIVIDE);
	sendCommand( ((freq&0x0F)<<4) | (divide & 0x0F));
}

void setMuliplexRatio(uint8 ratio){
    2c96:	1f 93       	push	r17
    2c98:	18 2f       	mov	r17, r24
	sendCommand(COMMAND_MULTIPLEX_RATIO);
    2c9a:	88 ea       	ldi	r24, 0xA8	; 168
    2c9c:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <sendCommand>
	sendCommand(ratio & 0x3F);
    2ca0:	81 2f       	mov	r24, r17
    2ca2:	8f 73       	andi	r24, 0x3F	; 63
    2ca4:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <sendCommand>
}
    2ca8:	1f 91       	pop	r17
    2caa:	08 95       	ret

00002cac <setClockConfig>:
void setContrast(uint8 value){
	sendCommand(COMMAND_CONTRAST);
	sendCommand(value);
}

void setClockConfig(uint8 divide , uint8 freq){
    2cac:	0f 93       	push	r16
    2cae:	1f 93       	push	r17
    2cb0:	08 2f       	mov	r16, r24
    2cb2:	16 2f       	mov	r17, r22
	sendCommand(COMMAND_DISPLAY_CLOCK_DIVIDE);
    2cb4:	85 ed       	ldi	r24, 0xD5	; 213
    2cb6:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <sendCommand>
	sendCommand( ((freq&0x0F)<<4) | (divide & 0x0F));
    2cba:	12 95       	swap	r17
    2cbc:	10 7f       	andi	r17, 0xF0	; 240
    2cbe:	0f 70       	andi	r16, 0x0F	; 15
    2cc0:	81 2f       	mov	r24, r17
    2cc2:	80 2b       	or	r24, r16
    2cc4:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <sendCommand>
}
    2cc8:	1f 91       	pop	r17
    2cca:	0f 91       	pop	r16
    2ccc:	08 95       	ret

00002cce <setContrast>:

	sendCommand(COMMAND_COM_CONFIG);
	sendCommand(config);
}

void setContrast(uint8 value){
    2cce:	1f 93       	push	r17
    2cd0:	18 2f       	mov	r17, r24
	sendCommand(COMMAND_CONTRAST);
    2cd2:	81 e8       	ldi	r24, 0x81	; 129
    2cd4:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <sendCommand>
	sendCommand(value);
    2cd8:	81 2f       	mov	r24, r17
    2cda:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <sendCommand>
}
    2cde:	1f 91       	pop	r17
    2ce0:	08 95       	ret

00002ce2 <setComConfig>:

void setComScanReverse(uint8 r){
	sendCommand(COMMAND_COM_SCAN_DIRECTION | (r<<3));
}

void setComConfig(uint8 com_alt, uint8 left_right_remap){
    2ce2:	0f 93       	push	r16
    2ce4:	1f 93       	push	r17
    2ce6:	18 2f       	mov	r17, r24
    2ce8:	06 2f       	mov	r16, r22
	const uint8 config = (com_alt <<4) | (left_right_remap << 5) | (0x02);

	sendCommand(COMMAND_COM_CONFIG);
    2cea:	8a ed       	ldi	r24, 0xDA	; 218
    2cec:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <sendCommand>
	sendCommand(config);
    2cf0:	12 95       	swap	r17
    2cf2:	10 7f       	andi	r17, 0xF0	; 240
    2cf4:	12 60       	ori	r17, 0x02	; 2
    2cf6:	02 95       	swap	r16
    2cf8:	00 0f       	add	r16, r16
    2cfa:	00 7e       	andi	r16, 0xE0	; 224
    2cfc:	80 2f       	mov	r24, r16
    2cfe:	81 2b       	or	r24, r17
    2d00:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <sendCommand>
}
    2d04:	1f 91       	pop	r17
    2d06:	0f 91       	pop	r16
    2d08:	08 95       	ret

00002d0a <setComScanReverse>:
void setSegmentRemap(uint8 remap){
	sendCommand(COMMAND_SEGMENT_REMAP | remap);
}

void setComScanReverse(uint8 r){
	sendCommand(COMMAND_COM_SCAN_DIRECTION | (r<<3));
    2d0a:	88 0f       	add	r24, r24
    2d0c:	88 0f       	add	r24, r24
    2d0e:	88 0f       	add	r24, r24
    2d10:	80 6c       	ori	r24, 0xC0	; 192
    2d12:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <sendCommand>
}
    2d16:	08 95       	ret

00002d18 <setSegmentRemap>:
void setDisplayStartLine(uint8 line){
	sendCommand(COMMAND_DISPLAY_START_LINE | (line & 0x3F));
}

void setSegmentRemap(uint8 remap){
	sendCommand(COMMAND_SEGMENT_REMAP | remap);
    2d18:	80 6a       	ori	r24, 0xA0	; 160
    2d1a:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <sendCommand>
}
    2d1e:	08 95       	ret

00002d20 <setDisplayStartLine>:
	sendCommand(COMMAND_DISPLAY_OFFSET);
	sendCommand(offset & 0x3F); //anded with 0x3F to choose from 0 to 63 ; 0x3F = 63d.
}

void setDisplayStartLine(uint8 line){
	sendCommand(COMMAND_DISPLAY_START_LINE | (line & 0x3F));
    2d20:	8f 73       	andi	r24, 0x3F	; 63
    2d22:	80 64       	ori	r24, 0x40	; 64
    2d24:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <sendCommand>
}
    2d28:	08 95       	ret

00002d2a <setDisplayOffset>:

void enable(uint8 on){
	sendCommand(COMMAND_DISPLAY_ON | on) ;
}

void setDisplayOffset(uint8 offset){
    2d2a:	1f 93       	push	r17
    2d2c:	18 2f       	mov	r17, r24
	sendCommand(COMMAND_DISPLAY_OFFSET);
    2d2e:	83 ed       	ldi	r24, 0xD3	; 211
    2d30:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <sendCommand>
	sendCommand(offset & 0x3F); //anded with 0x3F to choose from 0 to 63 ; 0x3F = 63d.
    2d34:	81 2f       	mov	r24, r17
    2d36:	8f 73       	andi	r24, 0x3F	; 63
    2d38:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <sendCommand>
}
    2d3c:	1f 91       	pop	r17
    2d3e:	08 95       	ret

00002d40 <enable>:
	I2C_Write(cmd);
	I2C_Stop();
}

void enable(uint8 on){
	sendCommand(COMMAND_DISPLAY_ON | on) ;
    2d40:	8e 6a       	ori	r24, 0xAE	; 174
    2d42:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <sendCommand>
}
    2d46:	08 95       	ret

00002d48 <Initialize>:

}


void Initialize(void){
	enable(0);
    2d48:	80 e0       	ldi	r24, 0x00	; 0
    2d4a:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <enable>
	setDisplayOffset(0);
    2d4e:	80 e0       	ldi	r24, 0x00	; 0
    2d50:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <setDisplayOffset>
	setDisplayStartLine(0);
    2d54:	80 e0       	ldi	r24, 0x00	; 0
    2d56:	0e 94 90 16 	call	0x2d20	; 0x2d20 <setDisplayStartLine>
	setSegmentRemap(1);
    2d5a:	81 e0       	ldi	r24, 0x01	; 1
    2d5c:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <setSegmentRemap>
	setComScanReverse(0);
    2d60:	80 e0       	ldi	r24, 0x00	; 0
    2d62:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <setComScanReverse>
	setComConfig(1, 0);
    2d66:	81 e0       	ldi	r24, 0x01	; 1
    2d68:	60 e0       	ldi	r22, 0x00	; 0
    2d6a:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <setComConfig>
	setContrast(0x7F);
    2d6e:	8f e7       	ldi	r24, 0x7F	; 127
    2d70:	0e 94 67 16 	call	0x2cce	; 0x2cce <setContrast>
	setClockConfig(0x00, 0x08);
    2d74:	80 e0       	ldi	r24, 0x00	; 0
    2d76:	68 e0       	ldi	r22, 0x08	; 8
    2d78:	0e 94 56 16 	call	0x2cac	; 0x2cac <setClockConfig>
	setMuliplexRatio(63);
    2d7c:	8f e3       	ldi	r24, 0x3F	; 63
    2d7e:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <setMuliplexRatio>
	enableChargePump(1);
    2d82:	81 e0       	ldi	r24, 0x01	; 1
    2d84:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <enableChargePump>
	Invert(0);
    2d88:	80 e0       	ldi	r24, 0x00	; 0
    2d8a:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <Invert>
	scroll(0);
    2d8e:	80 e0       	ldi	r24, 0x00	; 0
    2d90:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <scroll>
	enable(1);
    2d94:	81 e0       	ldi	r24, 0x01	; 1
    2d96:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <enable>
	resume(0);
    2d9a:	80 e0       	ldi	r24, 0x00	; 0
    2d9c:	0e 94 32 16 	call	0x2c64	; 0x2c64 <resume>
	clear();
    2da0:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <clear>
}
    2da4:	08 95       	ret

00002da6 <sendBufferPage>:
    sendCommand(COMMAND_SET_PAGE_ADDRESS);
    sendCommand(start & 0x07);
    sendCommand(end & 0x07);
}

void sendBufferPage(const uint8 *buffer , uint8 page){
    2da6:	0f 93       	push	r16
    2da8:	1f 93       	push	r17
    2daa:	cf 93       	push	r28
    2dac:	df 93       	push	r29
    2dae:	ec 01       	movw	r28, r24
    2db0:	16 2f       	mov	r17, r22
	//we want to make a loop for each page
	setColumnAddress(0,127);
    2db2:	80 e0       	ldi	r24, 0x00	; 0
    2db4:	6f e7       	ldi	r22, 0x7F	; 127
    2db6:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <setColumnAddress>
	setPageAddress(page,7);
    2dba:	81 2f       	mov	r24, r17
    2dbc:	67 e0       	ldi	r22, 0x07	; 7
    2dbe:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <setPageAddress>

	//first initialize the communication
	I2C_Init();
    2dc2:	0e 94 13 11 	call	0x2226	; 0x2226 <I2C_Init>
	I2C_Start(oled_write_address);
    2dc6:	8a e7       	ldi	r24, 0x7A	; 122
    2dc8:	0e 94 16 11 	call	0x222c	; 0x222c <I2C_Start>
	I2C_Write(CONTROL_DATA);
    2dcc:	80 e4       	ldi	r24, 0x40	; 64
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>

	uint8 start_byte_in_bitmap = page * 128 ;
    2dd4:	17 95       	ror	r17
    2dd6:	11 27       	eor	r17, r17
    2dd8:	17 95       	ror	r17
	uint8 end_byte_in_bitmap = start_byte_in_bitmap + 127 ;
    2dda:	01 2f       	mov	r16, r17
    2ddc:	01 58       	subi	r16, 0x81	; 129
    2dde:	08 c0       	rjmp	.+16     	; 0x2df0 <sendBufferPage+0x4a>
	for(;start_byte_in_bitmap <= end_byte_in_bitmap ; start_byte_in_bitmap++){
		I2C_Write(buffer[start_byte_in_bitmap]);
    2de0:	fe 01       	movw	r30, r28
    2de2:	e1 0f       	add	r30, r17
    2de4:	f1 1d       	adc	r31, r1
    2de6:	80 81       	ld	r24, Z
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	0e 94 52 11 	call	0x22a4	; 0x22a4 <I2C_Write>
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);

	uint8 start_byte_in_bitmap = page * 128 ;
	uint8 end_byte_in_bitmap = start_byte_in_bitmap + 127 ;
	for(;start_byte_in_bitmap <= end_byte_in_bitmap ; start_byte_in_bitmap++){
    2dee:	1f 5f       	subi	r17, 0xFF	; 255
    2df0:	01 17       	cp	r16, r17
    2df2:	b0 f7       	brcc	.-20     	; 0x2de0 <sendBufferPage+0x3a>
		I2C_Write(buffer[start_byte_in_bitmap]);
	}
	I2C_Stop();
    2df4:	0e 94 72 11 	call	0x22e4	; 0x22e4 <I2C_Stop>


}
    2df8:	df 91       	pop	r29
    2dfa:	cf 91       	pop	r28
    2dfc:	1f 91       	pop	r17
    2dfe:	0f 91       	pop	r16
    2e00:	08 95       	ret

00002e02 <__mulsi3>:
    2e02:	62 9f       	mul	r22, r18
    2e04:	d0 01       	movw	r26, r0
    2e06:	73 9f       	mul	r23, r19
    2e08:	f0 01       	movw	r30, r0
    2e0a:	82 9f       	mul	r24, r18
    2e0c:	e0 0d       	add	r30, r0
    2e0e:	f1 1d       	adc	r31, r1
    2e10:	64 9f       	mul	r22, r20
    2e12:	e0 0d       	add	r30, r0
    2e14:	f1 1d       	adc	r31, r1
    2e16:	92 9f       	mul	r25, r18
    2e18:	f0 0d       	add	r31, r0
    2e1a:	83 9f       	mul	r24, r19
    2e1c:	f0 0d       	add	r31, r0
    2e1e:	74 9f       	mul	r23, r20
    2e20:	f0 0d       	add	r31, r0
    2e22:	65 9f       	mul	r22, r21
    2e24:	f0 0d       	add	r31, r0
    2e26:	99 27       	eor	r25, r25
    2e28:	72 9f       	mul	r23, r18
    2e2a:	b0 0d       	add	r27, r0
    2e2c:	e1 1d       	adc	r30, r1
    2e2e:	f9 1f       	adc	r31, r25
    2e30:	63 9f       	mul	r22, r19
    2e32:	b0 0d       	add	r27, r0
    2e34:	e1 1d       	adc	r30, r1
    2e36:	f9 1f       	adc	r31, r25
    2e38:	bd 01       	movw	r22, r26
    2e3a:	cf 01       	movw	r24, r30
    2e3c:	11 24       	eor	r1, r1
    2e3e:	08 95       	ret

00002e40 <__udivmodqi4>:
    2e40:	99 1b       	sub	r25, r25
    2e42:	79 e0       	ldi	r23, 0x09	; 9
    2e44:	04 c0       	rjmp	.+8      	; 0x2e4e <__udivmodqi4_ep>

00002e46 <__udivmodqi4_loop>:
    2e46:	99 1f       	adc	r25, r25
    2e48:	96 17       	cp	r25, r22
    2e4a:	08 f0       	brcs	.+2      	; 0x2e4e <__udivmodqi4_ep>
    2e4c:	96 1b       	sub	r25, r22

00002e4e <__udivmodqi4_ep>:
    2e4e:	88 1f       	adc	r24, r24
    2e50:	7a 95       	dec	r23
    2e52:	c9 f7       	brne	.-14     	; 0x2e46 <__udivmodqi4_loop>
    2e54:	80 95       	com	r24
    2e56:	08 95       	ret

00002e58 <__udivmodhi4>:
    2e58:	aa 1b       	sub	r26, r26
    2e5a:	bb 1b       	sub	r27, r27
    2e5c:	51 e1       	ldi	r21, 0x11	; 17
    2e5e:	07 c0       	rjmp	.+14     	; 0x2e6e <__udivmodhi4_ep>

00002e60 <__udivmodhi4_loop>:
    2e60:	aa 1f       	adc	r26, r26
    2e62:	bb 1f       	adc	r27, r27
    2e64:	a6 17       	cp	r26, r22
    2e66:	b7 07       	cpc	r27, r23
    2e68:	10 f0       	brcs	.+4      	; 0x2e6e <__udivmodhi4_ep>
    2e6a:	a6 1b       	sub	r26, r22
    2e6c:	b7 0b       	sbc	r27, r23

00002e6e <__udivmodhi4_ep>:
    2e6e:	88 1f       	adc	r24, r24
    2e70:	99 1f       	adc	r25, r25
    2e72:	5a 95       	dec	r21
    2e74:	a9 f7       	brne	.-22     	; 0x2e60 <__udivmodhi4_loop>
    2e76:	80 95       	com	r24
    2e78:	90 95       	com	r25
    2e7a:	bc 01       	movw	r22, r24
    2e7c:	cd 01       	movw	r24, r26
    2e7e:	08 95       	ret

00002e80 <__divmodhi4>:
    2e80:	97 fb       	bst	r25, 7
    2e82:	09 2e       	mov	r0, r25
    2e84:	07 26       	eor	r0, r23
    2e86:	0a d0       	rcall	.+20     	; 0x2e9c <__divmodhi4_neg1>
    2e88:	77 fd       	sbrc	r23, 7
    2e8a:	04 d0       	rcall	.+8      	; 0x2e94 <__divmodhi4_neg2>
    2e8c:	e5 df       	rcall	.-54     	; 0x2e58 <__udivmodhi4>
    2e8e:	06 d0       	rcall	.+12     	; 0x2e9c <__divmodhi4_neg1>
    2e90:	00 20       	and	r0, r0
    2e92:	1a f4       	brpl	.+6      	; 0x2e9a <__divmodhi4_exit>

00002e94 <__divmodhi4_neg2>:
    2e94:	70 95       	com	r23
    2e96:	61 95       	neg	r22
    2e98:	7f 4f       	sbci	r23, 0xFF	; 255

00002e9a <__divmodhi4_exit>:
    2e9a:	08 95       	ret

00002e9c <__divmodhi4_neg1>:
    2e9c:	f6 f7       	brtc	.-4      	; 0x2e9a <__divmodhi4_exit>
    2e9e:	90 95       	com	r25
    2ea0:	81 95       	neg	r24
    2ea2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ea4:	08 95       	ret

00002ea6 <__udivmodsi4>:
    2ea6:	a1 e2       	ldi	r26, 0x21	; 33
    2ea8:	1a 2e       	mov	r1, r26
    2eaa:	aa 1b       	sub	r26, r26
    2eac:	bb 1b       	sub	r27, r27
    2eae:	fd 01       	movw	r30, r26
    2eb0:	0d c0       	rjmp	.+26     	; 0x2ecc <__udivmodsi4_ep>

00002eb2 <__udivmodsi4_loop>:
    2eb2:	aa 1f       	adc	r26, r26
    2eb4:	bb 1f       	adc	r27, r27
    2eb6:	ee 1f       	adc	r30, r30
    2eb8:	ff 1f       	adc	r31, r31
    2eba:	a2 17       	cp	r26, r18
    2ebc:	b3 07       	cpc	r27, r19
    2ebe:	e4 07       	cpc	r30, r20
    2ec0:	f5 07       	cpc	r31, r21
    2ec2:	20 f0       	brcs	.+8      	; 0x2ecc <__udivmodsi4_ep>
    2ec4:	a2 1b       	sub	r26, r18
    2ec6:	b3 0b       	sbc	r27, r19
    2ec8:	e4 0b       	sbc	r30, r20
    2eca:	f5 0b       	sbc	r31, r21

00002ecc <__udivmodsi4_ep>:
    2ecc:	66 1f       	adc	r22, r22
    2ece:	77 1f       	adc	r23, r23
    2ed0:	88 1f       	adc	r24, r24
    2ed2:	99 1f       	adc	r25, r25
    2ed4:	1a 94       	dec	r1
    2ed6:	69 f7       	brne	.-38     	; 0x2eb2 <__udivmodsi4_loop>
    2ed8:	60 95       	com	r22
    2eda:	70 95       	com	r23
    2edc:	80 95       	com	r24
    2ede:	90 95       	com	r25
    2ee0:	9b 01       	movw	r18, r22
    2ee2:	ac 01       	movw	r20, r24
    2ee4:	bd 01       	movw	r22, r26
    2ee6:	cf 01       	movw	r24, r30
    2ee8:	08 95       	ret

00002eea <__divmodsi4>:
    2eea:	97 fb       	bst	r25, 7
    2eec:	09 2e       	mov	r0, r25
    2eee:	05 26       	eor	r0, r21
    2ef0:	0e d0       	rcall	.+28     	; 0x2f0e <__divmodsi4_neg1>
    2ef2:	57 fd       	sbrc	r21, 7
    2ef4:	04 d0       	rcall	.+8      	; 0x2efe <__divmodsi4_neg2>
    2ef6:	d7 df       	rcall	.-82     	; 0x2ea6 <__udivmodsi4>
    2ef8:	0a d0       	rcall	.+20     	; 0x2f0e <__divmodsi4_neg1>
    2efa:	00 1c       	adc	r0, r0
    2efc:	38 f4       	brcc	.+14     	; 0x2f0c <__divmodsi4_exit>

00002efe <__divmodsi4_neg2>:
    2efe:	50 95       	com	r21
    2f00:	40 95       	com	r20
    2f02:	30 95       	com	r19
    2f04:	21 95       	neg	r18
    2f06:	3f 4f       	sbci	r19, 0xFF	; 255
    2f08:	4f 4f       	sbci	r20, 0xFF	; 255
    2f0a:	5f 4f       	sbci	r21, 0xFF	; 255

00002f0c <__divmodsi4_exit>:
    2f0c:	08 95       	ret

00002f0e <__divmodsi4_neg1>:
    2f0e:	f6 f7       	brtc	.-4      	; 0x2f0c <__divmodsi4_exit>
    2f10:	90 95       	com	r25
    2f12:	80 95       	com	r24
    2f14:	70 95       	com	r23
    2f16:	61 95       	neg	r22
    2f18:	7f 4f       	sbci	r23, 0xFF	; 255
    2f1a:	8f 4f       	sbci	r24, 0xFF	; 255
    2f1c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f1e:	08 95       	ret

00002f20 <__eerd_byte_m32>:
    2f20:	e1 99       	sbic	0x1c, 1	; 28
    2f22:	fe cf       	rjmp	.-4      	; 0x2f20 <__eerd_byte_m32>
    2f24:	9f bb       	out	0x1f, r25	; 31
    2f26:	8e bb       	out	0x1e, r24	; 30
    2f28:	e0 9a       	sbi	0x1c, 0	; 28
    2f2a:	99 27       	eor	r25, r25
    2f2c:	8d b3       	in	r24, 0x1d	; 29
    2f2e:	08 95       	ret

00002f30 <_exit>:
    2f30:	f8 94       	cli

00002f32 <__stop_program>:
    2f32:	ff cf       	rjmp	.-2      	; 0x2f32 <__stop_program>
