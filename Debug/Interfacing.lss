
Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000049b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000078  00800060  000049b4  00004a48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000046e  008000d8  008000d8  00004ac0  2**0
                  ALLOC
  3 .stab         0000aa04  00000000  00000000  00004ac0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000042b8  00000000  00000000  0000f4c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 65 17 	jmp	0x2eca	; 0x2eca <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 eb       	ldi	r30, 0xB4	; 180
      68:	f9 e4       	ldi	r31, 0x49	; 73
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3d       	cpi	r26, 0xD8	; 216
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	15 e0       	ldi	r17, 0x05	; 5
      78:	a8 ed       	ldi	r26, 0xD8	; 216
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 34       	cpi	r26, 0x46	; 70
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 67 16 	call	0x2cce	; 0x2cce <main>
      8a:	0c 94 d8 24 	jmp	0x49b0	; 0x49b0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_Init>:
      92:	83 30       	cpi	r24, 0x03	; 3
      94:	b9 f0       	breq	.+46     	; 0xc4 <ADC_Init+0x32>
      96:	84 30       	cpi	r24, 0x04	; 4
      98:	28 f4       	brcc	.+10     	; 0xa4 <ADC_Init+0x12>
      9a:	81 30       	cpi	r24, 0x01	; 1
      9c:	71 f0       	breq	.+28     	; 0xba <ADC_Init+0x28>
      9e:	82 30       	cpi	r24, 0x02	; 2
      a0:	78 f4       	brcc	.+30     	; 0xc0 <ADC_Init+0x2e>
      a2:	09 c0       	rjmp	.+18     	; 0xb6 <ADC_Init+0x24>
      a4:	85 30       	cpi	r24, 0x05	; 5
      a6:	a1 f0       	breq	.+40     	; 0xd0 <ADC_Init+0x3e>
      a8:	85 30       	cpi	r24, 0x05	; 5
      aa:	80 f0       	brcs	.+32     	; 0xcc <ADC_Init+0x3a>
      ac:	86 30       	cpi	r24, 0x06	; 6
      ae:	99 f0       	breq	.+38     	; 0xd6 <ADC_Init+0x44>
      b0:	87 30       	cpi	r24, 0x07	; 7
      b2:	b1 f4       	brne	.+44     	; 0xe0 <ADC_Init+0x4e>
      b4:	12 c0       	rjmp	.+36     	; 0xda <ADC_Init+0x48>
      b6:	38 98       	cbi	0x07, 0	; 7
      b8:	01 c0       	rjmp	.+2      	; 0xbc <ADC_Init+0x2a>
      ba:	38 9a       	sbi	0x07, 0	; 7
      bc:	39 98       	cbi	0x07, 1	; 7
      be:	04 c0       	rjmp	.+8      	; 0xc8 <ADC_Init+0x36>
      c0:	38 98       	cbi	0x07, 0	; 7
      c2:	01 c0       	rjmp	.+2      	; 0xc6 <ADC_Init+0x34>
      c4:	38 9a       	sbi	0x07, 0	; 7
      c6:	39 9a       	sbi	0x07, 1	; 7
      c8:	3a 98       	cbi	0x07, 2	; 7
      ca:	0a c0       	rjmp	.+20     	; 0xe0 <ADC_Init+0x4e>
      cc:	38 98       	cbi	0x07, 0	; 7
      ce:	01 c0       	rjmp	.+2      	; 0xd2 <ADC_Init+0x40>
      d0:	38 9a       	sbi	0x07, 0	; 7
      d2:	39 98       	cbi	0x07, 1	; 7
      d4:	04 c0       	rjmp	.+8      	; 0xde <ADC_Init+0x4c>
      d6:	38 98       	cbi	0x07, 0	; 7
      d8:	01 c0       	rjmp	.+2      	; 0xdc <ADC_Init+0x4a>
      da:	38 9a       	sbi	0x07, 0	; 7
      dc:	39 9a       	sbi	0x07, 1	; 7
      de:	3a 9a       	sbi	0x07, 2	; 7
      e0:	3e 9a       	sbi	0x07, 6	; 7
      e2:	3f 98       	cbi	0x07, 7	; 7
      e4:	30 98       	cbi	0x06, 0	; 6
      e6:	31 9a       	sbi	0x06, 1	; 6
      e8:	32 9a       	sbi	0x06, 2	; 6
      ea:	35 9a       	sbi	0x06, 5	; 6
      ec:	3d 98       	cbi	0x07, 5	; 7
      ee:	37 9a       	sbi	0x06, 7	; 6
      f0:	08 95       	ret

000000f2 <ADC_Read>:


uint16 ADC_Read(void){
//first start conversion and wait until ADC finishes conversion
	//1.Start conversion
	SET_BIT(ADCSRA, 6);
      f2:	36 9a       	sbi	0x06, 6	; 6
	//2.wait until Data Registers are updated
	while( GET_BIT(ADCSRA,4) == 0);
      f4:	34 9b       	sbis	0x06, 4	; 6
      f6:	fe cf       	rjmp	.-4      	; 0xf4 <ADC_Read+0x2>


	uint16 value = ADC_D_VAL ;
      f8:	24 b1       	in	r18, 0x04	; 4
      fa:	35 b1       	in	r19, 0x05	; 5


	return value ;

}
      fc:	c9 01       	movw	r24, r18
      fe:	08 95       	ret

00000100 <is_it_leap_year>:
	number /= 10 ;
	digit = number % 10 ;
	number_write(page_num,col_num,digit);
}
/*********************************************************************/
uint8 is_it_leap_year(uint16 year){
     100:	9c 01       	movw	r18, r24
	uint8 holder = year % 10 ;
     102:	6a e0       	ldi	r22, 0x0A	; 10
     104:	70 e0       	ldi	r23, 0x00	; 0
     106:	0e 94 76 24 	call	0x48ec	; 0x48ec <__udivmodhi4>
     10a:	e8 2f       	mov	r30, r24
     10c:	40 e0       	ldi	r20, 0x00	; 0
     10e:	c9 01       	movw	r24, r18
     110:	6a e0       	ldi	r22, 0x0A	; 10
     112:	70 e0       	ldi	r23, 0x00	; 0
     114:	0e 94 76 24 	call	0x48ec	; 0x48ec <__udivmodhi4>
     118:	cb 01       	movw	r24, r22
     11a:	6a e0       	ldi	r22, 0x0A	; 10
     11c:	70 e0       	ldi	r23, 0x00	; 0
     11e:	0e 94 76 24 	call	0x48ec	; 0x48ec <__udivmodhi4>
     122:	9c 01       	movw	r18, r24
     124:	63 e0       	ldi	r22, 0x03	; 3
     126:	88 0f       	add	r24, r24
     128:	99 1f       	adc	r25, r25
     12a:	6a 95       	dec	r22
     12c:	e1 f7       	brne	.-8      	; 0x126 <is_it_leap_year+0x26>
     12e:	22 0f       	add	r18, r18
     130:	33 1f       	adc	r19, r19
     132:	82 0f       	add	r24, r18
     134:	93 1f       	adc	r25, r19
     136:	e8 0f       	add	r30, r24
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	e3 70       	andi	r30, 0x03	; 3
     13c:	f0 70       	andi	r31, 0x00	; 0
     13e:	ef 2b       	or	r30, r31
     140:	09 f4       	brne	.+2      	; 0x144 <is_it_leap_year+0x44>
     142:	41 e0       	ldi	r20, 0x01	; 1
	if(holder % 4 == 0){
		return 1 ; //it is leap year.
	}else{
		return 0 ; //it is not a leap year.
	}
}
     144:	84 2f       	mov	r24, r20
     146:	08 95       	ret

00000148 <dec_to_bcd>:
	for(uint8 letter_index = 0 ; letter_index < 3 ; letter_index++){
		letter_write(2,((letter_index*7)+97),ptr[day_name_track][letter_index]) ;
	}
}
/*********************************************************************/
uint8 dec_to_bcd(uint8 dec){
     148:	48 2f       	mov	r20, r24
	uint8 digit = dec % 10 ;
	dec /= 10 ;
	digit = ( dec << 4 ) | digit ;
     14a:	6a e0       	ldi	r22, 0x0A	; 10
     14c:	0e 94 6a 24 	call	0x48d4	; 0x48d4 <__udivmodqi4>
     150:	28 2f       	mov	r18, r24
     152:	30 e0       	ldi	r19, 0x00	; 0
     154:	74 e0       	ldi	r23, 0x04	; 4
     156:	22 0f       	add	r18, r18
     158:	33 1f       	adc	r19, r19
     15a:	7a 95       	dec	r23
     15c:	e1 f7       	brne	.-8      	; 0x156 <dec_to_bcd+0xe>
     15e:	84 2f       	mov	r24, r20
     160:	0e 94 6a 24 	call	0x48d4	; 0x48d4 <__udivmodqi4>
	return digit ;
}
     164:	89 2f       	mov	r24, r25
     166:	82 2b       	or	r24, r18
     168:	08 95       	ret

0000016a <bcd_to_dec>:

	}
	return 1 ;
}
/*********************************************************************/
uint8 bcd_to_dec(uint8 bcd){
     16a:	98 2f       	mov	r25, r24
	uint8 tens = (bcd >> 4) * 10 ;
     16c:	82 95       	swap	r24
     16e:	8f 70       	andi	r24, 0x0F	; 15
     170:	2a e0       	ldi	r18, 0x0A	; 10
     172:	82 9f       	mul	r24, r18
     174:	80 2d       	mov	r24, r0
     176:	11 24       	eor	r1, r1
     178:	9f 70       	andi	r25, 0x0F	; 15
	tens = tens + (bcd & 0b00001111) ;
	return tens ;
}
     17a:	89 0f       	add	r24, r25
     17c:	08 95       	ret

0000017e <lamp_on_off>:

/*********************************************************************/
void lamp_on_off(void){
	static uint8 status = 0 ;

	if(status == 0){
     17e:	80 91 dd 00 	lds	r24, 0x00DD
     182:	88 23       	and	r24, r24
     184:	49 f4       	brne	.+18     	; 0x198 <lamp_on_off+0x1a>
		DIO_SetPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_VAL_HIGH);
     186:	82 e0       	ldi	r24, 0x02	; 2
     188:	67 e0       	ldi	r22, 0x07	; 7
     18a:	41 e0       	ldi	r20, 0x01	; 1
     18c:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <DIO_SetPinValue>
		status = 1;
     190:	81 e0       	ldi	r24, 0x01	; 1
     192:	80 93 dd 00 	sts	0x00DD, r24
     196:	08 95       	ret
	}else if(status){
		DIO_SetPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_VAL_LOW);
     198:	82 e0       	ldi	r24, 0x02	; 2
     19a:	67 e0       	ldi	r22, 0x07	; 7
     19c:	40 e0       	ldi	r20, 0x00	; 0
     19e:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <DIO_SetPinValue>
		status = 0;
     1a2:	10 92 dd 00 	sts	0x00DD, r1
     1a6:	08 95       	ret

000001a8 <black_entire_screen>:



}
/*********************************************************************/
void black_entire_screen(void){
     1a8:	1f 93       	push	r17
     1aa:	cf 93       	push	r28
     1ac:	df 93       	push	r29
     1ae:	10 e0       	ldi	r17, 0x00	; 0
	//WE WANT TO BLACK OUT THE ENTIRE SCREEN

	for(int i = 0 ; i <= 7 ; i++){
		setColumnAddress(0,128);
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	60 e8       	ldi	r22, 0x80	; 128
     1b4:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <setColumnAddress>
		setPageAddress(i,7);
     1b8:	81 2f       	mov	r24, r17
     1ba:	67 e0       	ldi	r22, 0x07	; 7
     1bc:	0e 94 3f 1b 	call	0x367e	; 0x367e <setPageAddress>
		I2C_Start(oled_write_address);
     1c0:	8a e7       	ldi	r24, 0x7A	; 122
     1c2:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
		I2C_Write(CONTROL_DATA);
     1c6:	80 e4       	ldi	r24, 0x40	; 64
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
     1ce:	c0 e0       	ldi	r28, 0x00	; 0
     1d0:	d0 e0       	ldi	r29, 0x00	; 0
		for(int i = 0 ; i < 128 ; i++){
			I2C_Write(0x00);
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
	for(int i = 0 ; i <= 7 ; i++){
		setColumnAddress(0,128);
		setPageAddress(i,7);
		I2C_Start(oled_write_address);
		I2C_Write(CONTROL_DATA);
		for(int i = 0 ; i < 128 ; i++){
     1da:	21 96       	adiw	r28, 0x01	; 1
     1dc:	c0 38       	cpi	r28, 0x80	; 128
     1de:	d1 05       	cpc	r29, r1
     1e0:	c1 f7       	brne	.-16     	; 0x1d2 <black_entire_screen+0x2a>
			I2C_Write(0x00);
		}
		I2C_Stop();
     1e2:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>
     1e6:	1f 5f       	subi	r17, 0xFF	; 255
}
/*********************************************************************/
void black_entire_screen(void){
	//WE WANT TO BLACK OUT THE ENTIRE SCREEN

	for(int i = 0 ; i <= 7 ; i++){
     1e8:	18 30       	cpi	r17, 0x08	; 8
     1ea:	11 f7       	brne	.-60     	; 0x1b0 <black_entire_screen+0x8>
		for(int i = 0 ; i < 128 ; i++){
			I2C_Write(0x00);
		}
		I2C_Stop();
	}
}
     1ec:	df 91       	pop	r29
     1ee:	cf 91       	pop	r28
     1f0:	1f 91       	pop	r17
     1f2:	08 95       	ret

000001f4 <system_set>:
	I2C_Write(0xFF);
	I2C_Stop();
}
/****************************************************************************/
void system_set(void){
	I2C_Init();
     1f4:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <I2C_Init>
	I2C_Start(0b10101010);
     1f8:	8a ea       	ldi	r24, 0xAA	; 170
     1fa:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
	//For the address of the boot check byte = 0x1F8
	I2C_Write(0xF8);
     1fe:	88 ef       	ldi	r24, 0xF8	; 248
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
	I2C_Write(0x01);
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
	I2C_Stop();
     20e:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>
}
     212:	08 95       	ret

00000214 <system_reset>:
	return boot_byte ;
}

/****************************************************************************/
void system_reset(void){
	I2C_Init();
     214:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <I2C_Init>
	I2C_Start(0b10101010);
     218:	8a ea       	ldi	r24, 0xAA	; 170
     21a:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
	//For the address of the boot check byte = 0x1F8
	I2C_Write(0xF8);
     21e:	88 ef       	ldi	r24, 0xF8	; 248
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
	I2C_Write(0xFF);
     226:	8f ef       	ldi	r24, 0xFF	; 255
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
	I2C_Stop();
     22e:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>
}
     232:	08 95       	ret

00000234 <color_choice_white>:
		}
		I2C_Stop();
	}
}
/*********************************************************************/
void color_choice_white(uint8 number_of_choice){
     234:	3f 92       	push	r3
     236:	4f 92       	push	r4
     238:	5f 92       	push	r5
     23a:	6f 92       	push	r6
     23c:	7f 92       	push	r7
     23e:	8f 92       	push	r8
     240:	9f 92       	push	r9
     242:	af 92       	push	r10
     244:	bf 92       	push	r11
     246:	cf 92       	push	r12
     248:	df 92       	push	r13
     24a:	ef 92       	push	r14
     24c:	ff 92       	push	r15
     24e:	0f 93       	push	r16
     250:	1f 93       	push	r17
     252:	df 93       	push	r29
     254:	cf 93       	push	r28
     256:	cd b7       	in	r28, 0x3d	; 61
     258:	de b7       	in	r29, 0x3e	; 62
     25a:	28 97       	sbiw	r28, 0x08	; 8
     25c:	0f b6       	in	r0, 0x3f	; 63
     25e:	f8 94       	cli
     260:	de bf       	out	0x3e, r29	; 62
     262:	0f be       	out	0x3f, r0	; 63
     264:	cd bf       	out	0x3d, r28	; 61
	//color either 0----> black , 1---->white
	//we have 3 choices , 1---->study timer , 2---->clock , 3---->lamp on/off

	sint8 starting_page = choice_page_index[number_of_choice];
     266:	e8 2f       	mov	r30, r24
     268:	f0 e0       	ldi	r31, 0x00	; 0
     26a:	e4 56       	subi	r30, 0x64	; 100
     26c:	ff 4f       	sbci	r31, 0xFF	; 255
     26e:	30 80       	ld	r3, Z
		}
		I2C_Stop();
	}
}
/*********************************************************************/
void color_choice_white(uint8 number_of_choice){
     270:	83 2d       	mov	r24, r3
     272:	99 27       	eor	r25, r25
     274:	87 fd       	sbrc	r24, 7
     276:	90 95       	com	r25
     278:	a7 e0       	ldi	r26, 0x07	; 7
     27a:	ca 2e       	mov	r12, r26
     27c:	d1 2c       	mov	r13, r1
     27e:	c8 1a       	sub	r12, r24
     280:	d9 0a       	sbc	r13, r25
     282:	d6 94       	lsr	r13
     284:	dc 2c       	mov	r13, r12
     286:	cc 24       	eor	r12, r12
     288:	d7 94       	ror	r13
     28a:	c7 94       	ror	r12
     28c:	46 01       	movw	r8, r12
     28e:	aa 24       	eor	r10, r10
     290:	97 fc       	sbrc	r9, 7
     292:	a0 94       	com	r10
     294:	ba 2c       	mov	r11, r10
     296:	1a 82       	std	Y+2, r1	; 0x02
     298:	19 82       	std	Y+1, r1	; 0x01
	sint8 starting_page = choice_page_index[number_of_choice];
	uint8 ending_page = starting_page-1;



	for(; starting_page >= ending_page ;starting_page--){
     29a:	9c 83       	std	Y+4, r25	; 0x04
     29c:	8b 83       	std	Y+3, r24	; 0x03
void color_choice_white(uint8 number_of_choice){
	//color either 0----> black , 1---->white
	//we have 3 choices , 1---->study timer , 2---->clock , 3---->lamp on/off

	sint8 starting_page = choice_page_index[number_of_choice];
	uint8 ending_page = starting_page-1;
     29e:	3a 94       	dec	r3



	for(; starting_page >= ending_page ;starting_page--){
     2a0:	23 2d       	mov	r18, r3
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	3e 83       	std	Y+6, r19	; 0x06
     2a6:	2d 83       	std	Y+5, r18	; 0x05
     2a8:	33 94       	inc	r3
     2aa:	4c c0       	rjmp	.+152    	; 0x344 <color_choice_white+0x110>
		setColumnAddress(0,127);
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	6f e7       	ldi	r22, 0x7F	; 127
     2b0:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <setColumnAddress>
		setPageAddress(starting_page,7);
     2b4:	83 2d       	mov	r24, r3
     2b6:	39 81       	ldd	r19, Y+1	; 0x01
     2b8:	83 1b       	sub	r24, r19
     2ba:	67 e0       	ldi	r22, 0x07	; 7
     2bc:	0e 94 3f 1b 	call	0x367e	; 0x367e <setPageAddress>
		I2C_Init();
     2c0:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <I2C_Init>
		I2C_Start(oled_write_address);
     2c4:	8a e7       	ldi	r24, 0x7A	; 122
     2c6:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
		I2C_Write(CONTROL_DATA);
     2ca:	80 e4       	ldi	r24, 0x40	; 64
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
     2d2:	ef e7       	ldi	r30, 0x7F	; 127
     2d4:	4e 2e       	mov	r4, r30
     2d6:	51 2c       	mov	r5, r1
     2d8:	61 2c       	mov	r6, r1
     2da:	71 2c       	mov	r7, r1
     2dc:	48 0c       	add	r4, r8
     2de:	59 1c       	adc	r5, r9
     2e0:	6a 1c       	adc	r6, r10
     2e2:	7b 1c       	adc	r7, r11
     2e4:	85 01       	movw	r16, r10
     2e6:	74 01       	movw	r14, r8
     2e8:	d8 86       	std	Y+8, r13	; 0x08
     2ea:	cf 82       	std	Y+7, r12	; 0x07
     2ec:	13 c0       	rjmp	.+38     	; 0x314 <color_choice_white+0xe0>
		uint32 end_byte_index = start_byte_index + 127 ;


		//this means black the choice
		for(;start_byte_index < end_byte_index ; start_byte_index++){
			I2C_Write(~(eeprom_read_byte(start_byte_index)));
     2ee:	8f 81       	ldd	r24, Y+7	; 0x07
     2f0:	98 85       	ldd	r25, Y+8	; 0x08
     2f2:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <__eerd_byte_m32>
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	80 95       	com	r24
     2fa:	90 95       	com	r25
     2fc:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
		//end byte to write
		uint32 end_byte_index = start_byte_index + 127 ;


		//this means black the choice
		for(;start_byte_index < end_byte_index ; start_byte_index++){
     300:	08 94       	sec
     302:	e1 1c       	adc	r14, r1
     304:	f1 1c       	adc	r15, r1
     306:	01 1d       	adc	r16, r1
     308:	11 1d       	adc	r17, r1
     30a:	8f 81       	ldd	r24, Y+7	; 0x07
     30c:	98 85       	ldd	r25, Y+8	; 0x08
     30e:	01 96       	adiw	r24, 0x01	; 1
     310:	98 87       	std	Y+8, r25	; 0x08
     312:	8f 83       	std	Y+7, r24	; 0x07
     314:	e4 14       	cp	r14, r4
     316:	f5 04       	cpc	r15, r5
     318:	06 05       	cpc	r16, r6
     31a:	17 05       	cpc	r17, r7
     31c:	40 f3       	brcs	.-48     	; 0x2ee <color_choice_white+0xba>
			I2C_Write(~(eeprom_read_byte(start_byte_index)));
		}
		I2C_Stop();
     31e:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>
     322:	a9 81       	ldd	r26, Y+1	; 0x01
     324:	ba 81       	ldd	r27, Y+2	; 0x02
     326:	11 96       	adiw	r26, 0x01	; 1
     328:	ba 83       	std	Y+2, r27	; 0x02
     32a:	a9 83       	std	Y+1, r26	; 0x01
     32c:	e0 e8       	ldi	r30, 0x80	; 128
     32e:	f0 e0       	ldi	r31, 0x00	; 0
     330:	ce 0e       	add	r12, r30
     332:	df 1e       	adc	r13, r31
     334:	80 e8       	ldi	r24, 0x80	; 128
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	a0 e0       	ldi	r26, 0x00	; 0
     33a:	b0 e0       	ldi	r27, 0x00	; 0
     33c:	88 0e       	add	r8, r24
     33e:	99 1e       	adc	r9, r25
     340:	aa 1e       	adc	r10, r26
     342:	bb 1e       	adc	r11, r27
	sint8 starting_page = choice_page_index[number_of_choice];
	uint8 ending_page = starting_page-1;



	for(; starting_page >= ending_page ;starting_page--){
     344:	8b 81       	ldd	r24, Y+3	; 0x03
     346:	9c 81       	ldd	r25, Y+4	; 0x04
     348:	a9 81       	ldd	r26, Y+1	; 0x01
     34a:	ba 81       	ldd	r27, Y+2	; 0x02
     34c:	8a 1b       	sub	r24, r26
     34e:	9b 0b       	sbc	r25, r27
     350:	ed 81       	ldd	r30, Y+5	; 0x05
     352:	fe 81       	ldd	r31, Y+6	; 0x06
     354:	8e 17       	cp	r24, r30
     356:	9f 07       	cpc	r25, r31
     358:	0c f0       	brlt	.+2      	; 0x35c <color_choice_white+0x128>
     35a:	a8 cf       	rjmp	.-176    	; 0x2ac <color_choice_white+0x78>
		for(;start_byte_index < end_byte_index ; start_byte_index++){
			I2C_Write(~(eeprom_read_byte(start_byte_index)));
		}
		I2C_Stop();
	}
}
     35c:	28 96       	adiw	r28, 0x08	; 8
     35e:	0f b6       	in	r0, 0x3f	; 63
     360:	f8 94       	cli
     362:	de bf       	out	0x3e, r29	; 62
     364:	0f be       	out	0x3f, r0	; 63
     366:	cd bf       	out	0x3d, r28	; 61
     368:	cf 91       	pop	r28
     36a:	df 91       	pop	r29
     36c:	1f 91       	pop	r17
     36e:	0f 91       	pop	r16
     370:	ff 90       	pop	r15
     372:	ef 90       	pop	r14
     374:	df 90       	pop	r13
     376:	cf 90       	pop	r12
     378:	bf 90       	pop	r11
     37a:	af 90       	pop	r10
     37c:	9f 90       	pop	r9
     37e:	8f 90       	pop	r8
     380:	7f 90       	pop	r7
     382:	6f 90       	pop	r6
     384:	5f 90       	pop	r5
     386:	4f 90       	pop	r4
     388:	3f 90       	pop	r3
     38a:	08 95       	ret

0000038c <color_choice_black>:
		I2C_Stop();
	}
}
/*********************************************************************/
uint8 choice_page_index[4] = {0 , 5 , 3 , 1};
void color_choice_black(uint8 number_of_choice){
     38c:	3f 92       	push	r3
     38e:	4f 92       	push	r4
     390:	5f 92       	push	r5
     392:	6f 92       	push	r6
     394:	7f 92       	push	r7
     396:	8f 92       	push	r8
     398:	9f 92       	push	r9
     39a:	af 92       	push	r10
     39c:	bf 92       	push	r11
     39e:	cf 92       	push	r12
     3a0:	df 92       	push	r13
     3a2:	ef 92       	push	r14
     3a4:	ff 92       	push	r15
     3a6:	0f 93       	push	r16
     3a8:	1f 93       	push	r17
     3aa:	df 93       	push	r29
     3ac:	cf 93       	push	r28
     3ae:	cd b7       	in	r28, 0x3d	; 61
     3b0:	de b7       	in	r29, 0x3e	; 62
     3b2:	28 97       	sbiw	r28, 0x08	; 8
     3b4:	0f b6       	in	r0, 0x3f	; 63
     3b6:	f8 94       	cli
     3b8:	de bf       	out	0x3e, r29	; 62
     3ba:	0f be       	out	0x3f, r0	; 63
     3bc:	cd bf       	out	0x3d, r28	; 61
	//color either 0----> black , 1---->white
	//we have 3 choices , 1---->study timer , 2---->clock , 3---->lamp on/off

	sint8 starting_page = choice_page_index[number_of_choice];
     3be:	e8 2f       	mov	r30, r24
     3c0:	f0 e0       	ldi	r31, 0x00	; 0
     3c2:	e4 56       	subi	r30, 0x64	; 100
     3c4:	ff 4f       	sbci	r31, 0xFF	; 255
     3c6:	30 80       	ld	r3, Z
		I2C_Stop();
	}
}
/*********************************************************************/
uint8 choice_page_index[4] = {0 , 5 , 3 , 1};
void color_choice_black(uint8 number_of_choice){
     3c8:	83 2d       	mov	r24, r3
     3ca:	99 27       	eor	r25, r25
     3cc:	87 fd       	sbrc	r24, 7
     3ce:	90 95       	com	r25
     3d0:	07 e0       	ldi	r16, 0x07	; 7
     3d2:	c0 2e       	mov	r12, r16
     3d4:	d1 2c       	mov	r13, r1
     3d6:	c8 1a       	sub	r12, r24
     3d8:	d9 0a       	sbc	r13, r25
     3da:	d6 94       	lsr	r13
     3dc:	dc 2c       	mov	r13, r12
     3de:	cc 24       	eor	r12, r12
     3e0:	d7 94       	ror	r13
     3e2:	c7 94       	ror	r12
     3e4:	46 01       	movw	r8, r12
     3e6:	aa 24       	eor	r10, r10
     3e8:	97 fc       	sbrc	r9, 7
     3ea:	a0 94       	com	r10
     3ec:	ba 2c       	mov	r11, r10
     3ee:	1a 82       	std	Y+2, r1	; 0x02
     3f0:	19 82       	std	Y+1, r1	; 0x01
	sint8 starting_page = choice_page_index[number_of_choice];
	uint8 ending_page = starting_page-1;



	for(; starting_page >= ending_page ;starting_page--){
     3f2:	9c 83       	std	Y+4, r25	; 0x04
     3f4:	8b 83       	std	Y+3, r24	; 0x03
void color_choice_black(uint8 number_of_choice){
	//color either 0----> black , 1---->white
	//we have 3 choices , 1---->study timer , 2---->clock , 3---->lamp on/off

	sint8 starting_page = choice_page_index[number_of_choice];
	uint8 ending_page = starting_page-1;
     3f6:	3a 94       	dec	r3



	for(; starting_page >= ending_page ;starting_page--){
     3f8:	23 2d       	mov	r18, r3
     3fa:	30 e0       	ldi	r19, 0x00	; 0
     3fc:	3e 83       	std	Y+6, r19	; 0x06
     3fe:	2d 83       	std	Y+5, r18	; 0x05
     400:	33 94       	inc	r3
     402:	4a c0       	rjmp	.+148    	; 0x498 <color_choice_black+0x10c>
		setColumnAddress(0,127);
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	6f e7       	ldi	r22, 0x7F	; 127
     408:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <setColumnAddress>
		setPageAddress(starting_page,7);
     40c:	83 2d       	mov	r24, r3
     40e:	39 81       	ldd	r19, Y+1	; 0x01
     410:	83 1b       	sub	r24, r19
     412:	67 e0       	ldi	r22, 0x07	; 7
     414:	0e 94 3f 1b 	call	0x367e	; 0x367e <setPageAddress>
		I2C_Init();
     418:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <I2C_Init>
		I2C_Start(oled_write_address);
     41c:	8a e7       	ldi	r24, 0x7A	; 122
     41e:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
		I2C_Write(CONTROL_DATA);
     422:	80 e4       	ldi	r24, 0x40	; 64
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
     42a:	bf e7       	ldi	r27, 0x7F	; 127
     42c:	4b 2e       	mov	r4, r27
     42e:	51 2c       	mov	r5, r1
     430:	61 2c       	mov	r6, r1
     432:	71 2c       	mov	r7, r1
     434:	48 0c       	add	r4, r8
     436:	59 1c       	adc	r5, r9
     438:	6a 1c       	adc	r6, r10
     43a:	7b 1c       	adc	r7, r11
     43c:	85 01       	movw	r16, r10
     43e:	74 01       	movw	r14, r8
     440:	d8 86       	std	Y+8, r13	; 0x08
     442:	cf 82       	std	Y+7, r12	; 0x07
     444:	11 c0       	rjmp	.+34     	; 0x468 <color_choice_black+0xdc>
		uint32 end_byte_index = start_byte_index + 127 ;


		//this means black the choice
		for(;start_byte_index < end_byte_index ; start_byte_index++){
			I2C_Write(eeprom_read_byte(start_byte_index));
     446:	8f 81       	ldd	r24, Y+7	; 0x07
     448:	98 85       	ldd	r25, Y+8	; 0x08
     44a:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <__eerd_byte_m32>
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
		//end byte to write
		uint32 end_byte_index = start_byte_index + 127 ;


		//this means black the choice
		for(;start_byte_index < end_byte_index ; start_byte_index++){
     454:	08 94       	sec
     456:	e1 1c       	adc	r14, r1
     458:	f1 1c       	adc	r15, r1
     45a:	01 1d       	adc	r16, r1
     45c:	11 1d       	adc	r17, r1
     45e:	8f 81       	ldd	r24, Y+7	; 0x07
     460:	98 85       	ldd	r25, Y+8	; 0x08
     462:	01 96       	adiw	r24, 0x01	; 1
     464:	98 87       	std	Y+8, r25	; 0x08
     466:	8f 83       	std	Y+7, r24	; 0x07
     468:	e4 14       	cp	r14, r4
     46a:	f5 04       	cpc	r15, r5
     46c:	06 05       	cpc	r16, r6
     46e:	17 05       	cpc	r17, r7
     470:	50 f3       	brcs	.-44     	; 0x446 <color_choice_black+0xba>
			I2C_Write(eeprom_read_byte(start_byte_index));
		}
		I2C_Stop();
     472:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>
     476:	a9 81       	ldd	r26, Y+1	; 0x01
     478:	ba 81       	ldd	r27, Y+2	; 0x02
     47a:	11 96       	adiw	r26, 0x01	; 1
     47c:	ba 83       	std	Y+2, r27	; 0x02
     47e:	a9 83       	std	Y+1, r26	; 0x01
     480:	e0 e8       	ldi	r30, 0x80	; 128
     482:	f0 e0       	ldi	r31, 0x00	; 0
     484:	ce 0e       	add	r12, r30
     486:	df 1e       	adc	r13, r31
     488:	80 e8       	ldi	r24, 0x80	; 128
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	a0 e0       	ldi	r26, 0x00	; 0
     48e:	b0 e0       	ldi	r27, 0x00	; 0
     490:	88 0e       	add	r8, r24
     492:	99 1e       	adc	r9, r25
     494:	aa 1e       	adc	r10, r26
     496:	bb 1e       	adc	r11, r27
	sint8 starting_page = choice_page_index[number_of_choice];
	uint8 ending_page = starting_page-1;



	for(; starting_page >= ending_page ;starting_page--){
     498:	8b 81       	ldd	r24, Y+3	; 0x03
     49a:	9c 81       	ldd	r25, Y+4	; 0x04
     49c:	a9 81       	ldd	r26, Y+1	; 0x01
     49e:	ba 81       	ldd	r27, Y+2	; 0x02
     4a0:	8a 1b       	sub	r24, r26
     4a2:	9b 0b       	sbc	r25, r27
     4a4:	ed 81       	ldd	r30, Y+5	; 0x05
     4a6:	fe 81       	ldd	r31, Y+6	; 0x06
     4a8:	8e 17       	cp	r24, r30
     4aa:	9f 07       	cpc	r25, r31
     4ac:	0c f0       	brlt	.+2      	; 0x4b0 <color_choice_black+0x124>
     4ae:	aa cf       	rjmp	.-172    	; 0x404 <color_choice_black+0x78>
		for(;start_byte_index < end_byte_index ; start_byte_index++){
			I2C_Write(eeprom_read_byte(start_byte_index));
		}
		I2C_Stop();
	}
}
     4b0:	28 96       	adiw	r28, 0x08	; 8
     4b2:	0f b6       	in	r0, 0x3f	; 63
     4b4:	f8 94       	cli
     4b6:	de bf       	out	0x3e, r29	; 62
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	cd bf       	out	0x3d, r28	; 61
     4bc:	cf 91       	pop	r28
     4be:	df 91       	pop	r29
     4c0:	1f 91       	pop	r17
     4c2:	0f 91       	pop	r16
     4c4:	ff 90       	pop	r15
     4c6:	ef 90       	pop	r14
     4c8:	df 90       	pop	r13
     4ca:	cf 90       	pop	r12
     4cc:	bf 90       	pop	r11
     4ce:	af 90       	pop	r10
     4d0:	9f 90       	pop	r9
     4d2:	8f 90       	pop	r8
     4d4:	7f 90       	pop	r7
     4d6:	6f 90       	pop	r6
     4d8:	5f 90       	pop	r5
     4da:	4f 90       	pop	r4
     4dc:	3f 90       	pop	r3
     4de:	08 95       	ret

000004e0 <boot_check>:
	}

	I2C_Stop();
}
/*******************************************************************/
uint8 boot_check(void){
     4e0:	1f 93       	push	r17
	/*Initiate the communication to eeprom*/
	I2C_Init();
     4e2:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <I2C_Init>
	I2C_Start(0b10101010);
     4e6:	8a ea       	ldi	r24, 0xAA	; 170
     4e8:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
	/*For the address of the boot check byte = 0x1F8*/
	I2C_Write(0xF8);
     4ec:	88 ef       	ldi	r24, 0xF8	; 248
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
	/*now we want to re-initiate the communication again to read mode*/
	I2C_Repeated_Start(0b10101011);
     4f4:	8b ea       	ldi	r24, 0xAB	; 171
     4f6:	0e 94 7d 10 	call	0x20fa	; 0x20fa <I2C_Repeated_Start>
	/*read the boot_byte mode if 0xFF---->first time booting if 0x01---->already booted up before.*/
	uint8 boot_byte = I2C_Read_NACK();
     4fa:	0e 94 b4 10 	call	0x2168	; 0x2168 <I2C_Read_NACK>
     4fe:	18 2f       	mov	r17, r24
	I2C_Stop();
     500:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>
	return boot_byte ;
}
     504:	81 2f       	mov	r24, r17
     506:	1f 91       	pop	r17
     508:	08 95       	ret

0000050a <letter_write>:
	I2C_Stop();

}

/********************************************************************************/
void letter_write(uint8 page_num , uint8 col_num , uint8 letter_index){
     50a:	bf 92       	push	r11
     50c:	cf 92       	push	r12
     50e:	df 92       	push	r13
     510:	ef 92       	push	r14
     512:	ff 92       	push	r15
     514:	0f 93       	push	r16
     516:	1f 93       	push	r17
     518:	df 93       	push	r29
     51a:	cf 93       	push	r28
     51c:	cd b7       	in	r28, 0x3d	; 61
     51e:	de b7       	in	r29, 0x3e	; 62
     520:	2e 97       	sbiw	r28, 0x0e	; 14
     522:	0f b6       	in	r0, 0x3f	; 63
     524:	f8 94       	cli
     526:	de bf       	out	0x3e, r29	; 62
     528:	0f be       	out	0x3f, r0	; 63
     52a:	cd bf       	out	0x3d, r28	; 61
     52c:	b8 2e       	mov	r11, r24
     52e:	c6 2e       	mov	r12, r22
     530:	14 2f       	mov	r17, r20
	I2C_Init();
     532:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <I2C_Init>
	/*storing bytes array*/
	uint8 bitmap_holder[14] = {0};
     536:	0e e0       	ldi	r16, 0x0E	; 14
     538:	7e 01       	movw	r14, r28
     53a:	08 94       	sec
     53c:	e1 1c       	adc	r14, r1
     53e:	f1 1c       	adc	r15, r1
     540:	f7 01       	movw	r30, r14
     542:	80 2f       	mov	r24, r16
     544:	11 92       	st	Z+, r1
     546:	8a 95       	dec	r24
     548:	e9 f7       	brne	.-6      	; 0x544 <letter_write+0x3a>


	//first we want to send that we want to write and write the start reading address.
	//but take care that the first 8 letters(index ----> 0 to 7) are stored in BLOCK 1 in eeprom.
	//and the latter 18 letters (index ----> 8 to 17) are stored in BLOCK 2 in eeprom.
	if(letter_index >= 0 && letter_index <= 7){
     54a:	18 30       	cpi	r17, 0x08	; 8
     54c:	e0 f4       	brcc	.+56     	; 0x586 <letter_write+0x7c>

		I2C_Start(Slave_Address_W);
     54e:	88 ea       	ldi	r24, 0xA8	; 168
     550:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
		/*calculate the starting reading address depend on the number_index)*/
		uint8 address = ( ( letter_index * 14 ) + 140 );
		I2C_Write(address);
     554:	10 9f       	mul	r17, r16
     556:	c0 01       	movw	r24, r0
     558:	11 24       	eor	r1, r1
     55a:	84 57       	subi	r24, 0x74	; 116
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
		/*now initiate the communication again but this time in read mode*/
		I2C_Repeated_Start(Slave_Address_R);
     562:	89 ea       	ldi	r24, 0xA9	; 169
     564:	0e 94 7d 10 	call	0x20fa	; 0x20fa <I2C_Repeated_Start>
     568:	87 01       	movw	r16, r14

		/*now reading from the eeprom and storing in "bitmap_holder" array*/
		for(uint8 byte_address = 0 ; byte_address < 13 ; byte_address++){
     56a:	5e e0       	ldi	r21, 0x0E	; 14
     56c:	e5 2e       	mov	r14, r21
     56e:	f1 2c       	mov	r15, r1
     570:	ec 0e       	add	r14, r28
     572:	fd 1e       	adc	r15, r29
			bitmap_holder[byte_address] = I2C_Read_ACK();
     574:	0e 94 ad 10 	call	0x215a	; 0x215a <I2C_Read_ACK>
     578:	f8 01       	movw	r30, r16
     57a:	81 93       	st	Z+, r24
     57c:	8f 01       	movw	r16, r30
		I2C_Write(address);
		/*now initiate the communication again but this time in read mode*/
		I2C_Repeated_Start(Slave_Address_R);

		/*now reading from the eeprom and storing in "bitmap_holder" array*/
		for(uint8 byte_address = 0 ; byte_address < 13 ; byte_address++){
     57e:	ee 15       	cp	r30, r14
     580:	ff 05       	cpc	r31, r15
     582:	c1 f7       	brne	.-16     	; 0x574 <letter_write+0x6a>
     584:	54 c0       	rjmp	.+168    	; 0x62e <letter_write+0x124>
			bitmap_holder[byte_address] = I2C_Read_ACK();
		}
		bitmap_holder[13] = I2C_Read_NACK();
		I2C_Stop();

	}else if(letter_index == 8){
     586:	18 30       	cpi	r17, 0x08	; 8
     588:	99 f5       	brne	.+102    	; 0x5f0 <letter_write+0xe6>

		I2C_Start(Slave_Address_W);
     58a:	88 ea       	ldi	r24, 0xA8	; 168
     58c:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
		/*calculate the starting reading address depend on the number_index)*/
		uint8 address = ( ( letter_index * 14 ) + 140 );
		I2C_Write(address);
     590:	8c ef       	ldi	r24, 0xFC	; 252
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
		/*now initiate the communication again but this time in read mode*/
		I2C_Repeated_Start(Slave_Address_R);
     598:	89 ea       	ldi	r24, 0xA9	; 169
     59a:	0e 94 7d 10 	call	0x20fa	; 0x20fa <I2C_Repeated_Start>

		for(uint8 byte_address = 0 ; byte_address < 3 ; byte_address++){
			bitmap_holder[byte_address] = I2C_Read_ACK();
     59e:	0e 94 ad 10 	call	0x215a	; 0x215a <I2C_Read_ACK>
     5a2:	89 83       	std	Y+1, r24	; 0x01
     5a4:	0e 94 ad 10 	call	0x215a	; 0x215a <I2C_Read_ACK>
     5a8:	8a 83       	std	Y+2, r24	; 0x02
     5aa:	0e 94 ad 10 	call	0x215a	; 0x215a <I2C_Read_ACK>
     5ae:	8b 83       	std	Y+3, r24	; 0x03
		}
		bitmap_holder[3] = I2C_Read_NACK();
     5b0:	0e 94 b4 10 	call	0x2168	; 0x2168 <I2C_Read_NACK>
     5b4:	8c 83       	std	Y+4, r24	; 0x04
		I2C_Stop();
     5b6:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>

		I2C_Start(0b10101010);
     5ba:	8a ea       	ldi	r24, 0xAA	; 170
     5bc:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
		I2C_Write(0x00);
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
		I2C_Repeated_Start(0b10101011);
     5c8:	8b ea       	ldi	r24, 0xAB	; 171
     5ca:	0e 94 7d 10 	call	0x20fa	; 0x20fa <I2C_Repeated_Start>
     5ce:	8e 01       	movw	r16, r28
     5d0:	0b 5f       	subi	r16, 0xFB	; 251
     5d2:	1f 4f       	sbci	r17, 0xFF	; 255
		for(uint8 byte_address = 4 ; byte_address < 13 ; byte_address++){
     5d4:	4e e0       	ldi	r20, 0x0E	; 14
     5d6:	e4 2e       	mov	r14, r20
     5d8:	f1 2c       	mov	r15, r1
     5da:	ec 0e       	add	r14, r28
     5dc:	fd 1e       	adc	r15, r29
			bitmap_holder[byte_address] = I2C_Read_ACK();
     5de:	0e 94 ad 10 	call	0x215a	; 0x215a <I2C_Read_ACK>
     5e2:	f8 01       	movw	r30, r16
     5e4:	81 93       	st	Z+, r24
     5e6:	8f 01       	movw	r16, r30
		I2C_Stop();

		I2C_Start(0b10101010);
		I2C_Write(0x00);
		I2C_Repeated_Start(0b10101011);
		for(uint8 byte_address = 4 ; byte_address < 13 ; byte_address++){
     5e8:	ee 15       	cp	r30, r14
     5ea:	ff 05       	cpc	r31, r15
     5ec:	c1 f7       	brne	.-16     	; 0x5de <letter_write+0xd4>
     5ee:	1f c0       	rjmp	.+62     	; 0x62e <letter_write+0x124>
			bitmap_holder[byte_address] = I2C_Read_ACK();
		}
		bitmap_holder[13] = I2C_Read_NACK();
		I2C_Stop();

	}else if(letter_index > 8 && letter_index <= 25){
     5f0:	81 2f       	mov	r24, r17
     5f2:	89 50       	subi	r24, 0x09	; 9
     5f4:	81 31       	cpi	r24, 0x11	; 17
     5f6:	00 f5       	brcc	.+64     	; 0x638 <letter_write+0x12e>

		I2C_Start(0b10101010);//to start reading from block 0
     5f8:	8a ea       	ldi	r24, 0xAA	; 170
     5fa:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
		/*calculate the starting reading address depend on the number_index)*/
		uint8 address = (( (letter_index-9) * 14 ) + 10);
		I2C_Write(address);
     5fe:	10 9f       	mul	r17, r16
     600:	c0 01       	movw	r24, r0
     602:	11 24       	eor	r1, r1
     604:	84 57       	subi	r24, 0x74	; 116
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
		/*now initiate the communication again but this time in read mode*/
		I2C_Repeated_Start(0b10101011);
     60c:	8b ea       	ldi	r24, 0xAB	; 171
     60e:	0e 94 7d 10 	call	0x20fa	; 0x20fa <I2C_Repeated_Start>
     612:	87 01       	movw	r16, r14

		/*now reading from the eeprom and storing in "bitmap_holder" array*/
		for(uint8 byte_address = 0 ; byte_address < 13 ; byte_address++){
     614:	3e e0       	ldi	r19, 0x0E	; 14
     616:	e3 2e       	mov	r14, r19
     618:	f1 2c       	mov	r15, r1
     61a:	ec 0e       	add	r14, r28
     61c:	fd 1e       	adc	r15, r29
			bitmap_holder[byte_address] = I2C_Read_ACK();
     61e:	0e 94 ad 10 	call	0x215a	; 0x215a <I2C_Read_ACK>
     622:	f8 01       	movw	r30, r16
     624:	81 93       	st	Z+, r24
     626:	8f 01       	movw	r16, r30
		I2C_Write(address);
		/*now initiate the communication again but this time in read mode*/
		I2C_Repeated_Start(0b10101011);

		/*now reading from the eeprom and storing in "bitmap_holder" array*/
		for(uint8 byte_address = 0 ; byte_address < 13 ; byte_address++){
     628:	ee 15       	cp	r30, r14
     62a:	ff 05       	cpc	r31, r15
     62c:	c1 f7       	brne	.-16     	; 0x61e <letter_write+0x114>
			bitmap_holder[byte_address] = I2C_Read_ACK();
		}
		bitmap_holder[13] = I2C_Read_NACK();
     62e:	0e 94 b4 10 	call	0x2168	; 0x2168 <I2C_Read_NACK>
     632:	8e 87       	std	Y+14, r24	; 0x0e
		I2C_Stop();
     634:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>

	}

	/*now after getting the data from the eeprom we want to send it to the oled screen*/
	setColumnAddress(col_num,col_num+7);
     638:	27 e0       	ldi	r18, 0x07	; 7
     63a:	d2 2e       	mov	r13, r18
     63c:	dc 0c       	add	r13, r12
     63e:	8c 2d       	mov	r24, r12
     640:	6d 2d       	mov	r22, r13
     642:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <setColumnAddress>
	setPageAddress(page_num,7);
     646:	8b 2d       	mov	r24, r11
     648:	67 e0       	ldi	r22, 0x07	; 7
     64a:	0e 94 3f 1b 	call	0x367e	; 0x367e <setPageAddress>
	I2C_Start(oled_write_address);
     64e:	8a e7       	ldi	r24, 0x7A	; 122
     650:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
	I2C_Write(CONTROL_DATA);
     654:	80 e4       	ldi	r24, 0x40	; 64
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
     65c:	8e 01       	movw	r16, r28
     65e:	0f 5f       	subi	r16, 0xFF	; 255
     660:	1f 4f       	sbci	r17, 0xFF	; 255

	for(uint8 byte_address = 0 ; byte_address < 7 ; byte_address++){
     662:	98 e0       	ldi	r25, 0x08	; 8
     664:	e9 2e       	mov	r14, r25
     666:	f1 2c       	mov	r15, r1
     668:	ec 0e       	add	r14, r28
     66a:	fd 1e       	adc	r15, r29
		I2C_Write(bitmap_holder[byte_address]);
     66c:	f8 01       	movw	r30, r16
     66e:	81 91       	ld	r24, Z+
     670:	8f 01       	movw	r16, r30
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
	setColumnAddress(col_num,col_num+7);
	setPageAddress(page_num,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);

	for(uint8 byte_address = 0 ; byte_address < 7 ; byte_address++){
     678:	0e 15       	cp	r16, r14
     67a:	1f 05       	cpc	r17, r15
     67c:	b9 f7       	brne	.-18     	; 0x66c <letter_write+0x162>
		I2C_Write(bitmap_holder[byte_address]);
	}

	I2C_Stop();
     67e:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>
	setColumnAddress(col_num,col_num+7);
     682:	8c 2d       	mov	r24, r12
     684:	6d 2d       	mov	r22, r13
     686:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <setColumnAddress>
	setPageAddress(page_num-1,7);
     68a:	8b 2d       	mov	r24, r11
     68c:	81 50       	subi	r24, 0x01	; 1
     68e:	67 e0       	ldi	r22, 0x07	; 7
     690:	0e 94 3f 1b 	call	0x367e	; 0x367e <setPageAddress>
	I2C_Start(oled_write_address);
     694:	8a e7       	ldi	r24, 0x7A	; 122
     696:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
	I2C_Write(CONTROL_DATA);
     69a:	80 e4       	ldi	r24, 0x40	; 64
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>

	for(uint8 byte_address = 7 ; byte_address < 14 ; byte_address++){
     6a2:	8f e0       	ldi	r24, 0x0F	; 15
     6a4:	e8 2e       	mov	r14, r24
     6a6:	f1 2c       	mov	r15, r1
     6a8:	ec 0e       	add	r14, r28
     6aa:	fd 1e       	adc	r15, r29
		I2C_Write(bitmap_holder[byte_address]);
     6ac:	f8 01       	movw	r30, r16
     6ae:	81 91       	ld	r24, Z+
     6b0:	8f 01       	movw	r16, r30
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
	setColumnAddress(col_num,col_num+7);
	setPageAddress(page_num-1,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);

	for(uint8 byte_address = 7 ; byte_address < 14 ; byte_address++){
     6b8:	0e 15       	cp	r16, r14
     6ba:	1f 05       	cpc	r17, r15
     6bc:	b9 f7       	brne	.-18     	; 0x6ac <letter_write+0x1a2>
		I2C_Write(bitmap_holder[byte_address]);
	}

	I2C_Stop();
     6be:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>
}
     6c2:	2e 96       	adiw	r28, 0x0e	; 14
     6c4:	0f b6       	in	r0, 0x3f	; 63
     6c6:	f8 94       	cli
     6c8:	de bf       	out	0x3e, r29	; 62
     6ca:	0f be       	out	0x3f, r0	; 63
     6cc:	cd bf       	out	0x3d, r28	; 61
     6ce:	cf 91       	pop	r28
     6d0:	df 91       	pop	r29
     6d2:	1f 91       	pop	r17
     6d4:	0f 91       	pop	r16
     6d6:	ff 90       	pop	r15
     6d8:	ef 90       	pop	r14
     6da:	df 90       	pop	r13
     6dc:	cf 90       	pop	r12
     6de:	bf 90       	pop	r11
     6e0:	08 95       	ret

000006e2 <day_name_print>:
	}else{
		return 0 ; //it is not a leap year.
	}
}
/*********************************************************************/
void day_name_print(uint8 day_name_track , uint8 ptr[][3]){
     6e2:	1f 93       	push	r17
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
     6e8:	eb 01       	movw	r28, r22
     6ea:	93 e0       	ldi	r25, 0x03	; 3
     6ec:	89 9f       	mul	r24, r25
     6ee:	c0 01       	movw	r24, r0
     6f0:	11 24       	eor	r1, r1
     6f2:	c8 0f       	add	r28, r24
     6f4:	d9 1f       	adc	r29, r25
     6f6:	11 e6       	ldi	r17, 0x61	; 97
	for(uint8 letter_index = 0 ; letter_index < 3 ; letter_index++){
		letter_write(2,((letter_index*7)+97),ptr[day_name_track][letter_index]) ;
     6f8:	82 e0       	ldi	r24, 0x02	; 2
     6fa:	61 2f       	mov	r22, r17
     6fc:	49 91       	ld	r20, Y+
     6fe:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
     702:	19 5f       	subi	r17, 0xF9	; 249
		return 0 ; //it is not a leap year.
	}
}
/*********************************************************************/
void day_name_print(uint8 day_name_track , uint8 ptr[][3]){
	for(uint8 letter_index = 0 ; letter_index < 3 ; letter_index++){
     704:	16 37       	cpi	r17, 0x76	; 118
     706:	c1 f7       	brne	.-16     	; 0x6f8 <day_name_print+0x16>
		letter_write(2,((letter_index*7)+97),ptr[day_name_track][letter_index]) ;
	}
}
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
     70c:	1f 91       	pop	r17
     70e:	08 95       	ret

00000710 <printing_menu_with_choice>:
	digit = ( dec << 4 ) | digit ;
	return digit ;
}
/*********************************************************************/

void printing_menu_with_choice(void){
     710:	5f 92       	push	r5
     712:	6f 92       	push	r6
     714:	7f 92       	push	r7
     716:	8f 92       	push	r8
     718:	9f 92       	push	r9
     71a:	af 92       	push	r10
     71c:	bf 92       	push	r11
     71e:	cf 92       	push	r12
     720:	df 92       	push	r13
     722:	ef 92       	push	r14
     724:	ff 92       	push	r15
     726:	0f 93       	push	r16
     728:	1f 93       	push	r17
     72a:	cf 93       	push	r28
     72c:	df 93       	push	r29
     72e:	e7 e0       	ldi	r30, 0x07	; 7
     730:	5e 2e       	mov	r5, r30
     732:	aa 24       	eor	r10, r10
     734:	bb 24       	eor	r11, r11
     736:	65 01       	movw	r12, r10


	for(sint8 i = 7; i >= 0 ; i--){
			setColumnAddress(0,127);
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	6f e7       	ldi	r22, 0x7F	; 127
     73c:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <setColumnAddress>
			setPageAddress(i,7);
     740:	85 2d       	mov	r24, r5
     742:	67 e0       	ldi	r22, 0x07	; 7
     744:	0e 94 3f 1b 	call	0x367e	; 0x367e <setPageAddress>
			I2C_Init();
     748:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <I2C_Init>
			I2C_Start(oled_write_address);
     74c:	8a e7       	ldi	r24, 0x7A	; 122
     74e:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
			I2C_Write(CONTROL_DATA);
     752:	80 e4       	ldi	r24, 0x40	; 64
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
     75a:	7f e7       	ldi	r23, 0x7F	; 127
     75c:	67 2e       	mov	r6, r23
     75e:	71 2c       	mov	r7, r1
     760:	81 2c       	mov	r8, r1
     762:	91 2c       	mov	r9, r1
     764:	6a 0c       	add	r6, r10
     766:	7b 1c       	adc	r7, r11
     768:	8c 1c       	adc	r8, r12
     76a:	9d 1c       	adc	r9, r13

			//start byte to write
			uint32 start_byte_index = (7-i) * 128 ;
			//end byte to write
			uint32 end_byte_index = start_byte_index + 127 ;
			if(i == 5 || i == 4){
     76c:	85 2d       	mov	r24, r5
     76e:	84 50       	subi	r24, 0x04	; 4
     770:	82 30       	cpi	r24, 0x02	; 2
     772:	20 f0       	brcs	.+8      	; 0x77c <printing_menu_with_choice+0x6c>
     774:	e5 01       	movw	r28, r10
     776:	86 01       	movw	r16, r12
     778:	75 01       	movw	r14, r10
     77a:	24 c0       	rjmp	.+72     	; 0x7c4 <printing_menu_with_choice+0xb4>
     77c:	e5 01       	movw	r28, r10
     77e:	86 01       	movw	r16, r12
     780:	75 01       	movw	r14, r10
     782:	0e c0       	rjmp	.+28     	; 0x7a0 <printing_menu_with_choice+0x90>
				for(;start_byte_index < end_byte_index ; start_byte_index++){
					I2C_Write(~(eeprom_read_byte(start_byte_index)));
     784:	ce 01       	movw	r24, r28
     786:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <__eerd_byte_m32>
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	80 95       	com	r24
     78e:	90 95       	com	r25
     790:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
			//start byte to write
			uint32 start_byte_index = (7-i) * 128 ;
			//end byte to write
			uint32 end_byte_index = start_byte_index + 127 ;
			if(i == 5 || i == 4){
				for(;start_byte_index < end_byte_index ; start_byte_index++){
     794:	08 94       	sec
     796:	e1 1c       	adc	r14, r1
     798:	f1 1c       	adc	r15, r1
     79a:	01 1d       	adc	r16, r1
     79c:	11 1d       	adc	r17, r1
     79e:	21 96       	adiw	r28, 0x01	; 1
     7a0:	e6 14       	cp	r14, r6
     7a2:	f7 04       	cpc	r15, r7
     7a4:	08 05       	cpc	r16, r8
     7a6:	19 05       	cpc	r17, r9
     7a8:	68 f3       	brcs	.-38     	; 0x784 <printing_menu_with_choice+0x74>
     7aa:	11 c0       	rjmp	.+34     	; 0x7ce <printing_menu_with_choice+0xbe>
					I2C_Write(~(eeprom_read_byte(start_byte_index)));
				}
			}else{
				for(;start_byte_index < end_byte_index ; start_byte_index++){
					I2C_Write(eeprom_read_byte(start_byte_index));
     7ac:	ce 01       	movw	r24, r28
     7ae:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <__eerd_byte_m32>
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
			if(i == 5 || i == 4){
				for(;start_byte_index < end_byte_index ; start_byte_index++){
					I2C_Write(~(eeprom_read_byte(start_byte_index)));
				}
			}else{
				for(;start_byte_index < end_byte_index ; start_byte_index++){
     7b8:	08 94       	sec
     7ba:	e1 1c       	adc	r14, r1
     7bc:	f1 1c       	adc	r15, r1
     7be:	01 1d       	adc	r16, r1
     7c0:	11 1d       	adc	r17, r1
     7c2:	21 96       	adiw	r28, 0x01	; 1
     7c4:	e6 14       	cp	r14, r6
     7c6:	f7 04       	cpc	r15, r7
     7c8:	08 05       	cpc	r16, r8
     7ca:	19 05       	cpc	r17, r9
     7cc:	78 f3       	brcs	.-34     	; 0x7ac <printing_menu_with_choice+0x9c>
					I2C_Write(eeprom_read_byte(start_byte_index));
				}
			}
			I2C_Stop();
     7ce:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>
/*********************************************************************/

void printing_menu_with_choice(void){


	for(sint8 i = 7; i >= 0 ; i--){
     7d2:	5a 94       	dec	r5
     7d4:	80 e8       	ldi	r24, 0x80	; 128
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	a0 e0       	ldi	r26, 0x00	; 0
     7da:	b0 e0       	ldi	r27, 0x00	; 0
     7dc:	a8 0e       	add	r10, r24
     7de:	b9 1e       	adc	r11, r25
     7e0:	ca 1e       	adc	r12, r26
     7e2:	db 1e       	adc	r13, r27
     7e4:	9f ef       	ldi	r25, 0xFF	; 255
     7e6:	59 16       	cp	r5, r25
     7e8:	09 f0       	breq	.+2      	; 0x7ec <printing_menu_with_choice+0xdc>
     7ea:	a6 cf       	rjmp	.-180    	; 0x738 <printing_menu_with_choice+0x28>
			}
			I2C_Stop();
	}


	I2C_Start(0b10101010); //Starting communication with the external eeprom.
     7ec:	8a ea       	ldi	r24, 0xAA	; 170
     7ee:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
	I2C_Write(0xF9); //Writing the starting address to read from the eeprom.
     7f2:	89 ef       	ldi	r24, 0xF9	; 249
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
	I2C_Repeated_Start(0b10101011);//Rs & telling the eeprom that we will read from it.
     7fa:	8b ea       	ldi	r24, 0xAB	; 171
     7fc:	0e 94 7d 10 	call	0x20fa	; 0x20fa <I2C_Repeated_Start>
     800:	68 ed       	ldi	r22, 0xD8	; 216
     802:	e6 2e       	mov	r14, r22
     804:	60 e0       	ldi	r22, 0x00	; 0
     806:	f6 2e       	mov	r15, r22
     808:	e7 01       	movw	r28, r14
	for(uint8 i = 0 ; i < 4 ; i++){
		username[i] = I2C_Read_ACK();
     80a:	0e 94 ad 10 	call	0x215a	; 0x215a <I2C_Read_ACK>
     80e:	89 93       	st	Y+, r24


	I2C_Start(0b10101010); //Starting communication with the external eeprom.
	I2C_Write(0xF9); //Writing the starting address to read from the eeprom.
	I2C_Repeated_Start(0b10101011);//Rs & telling the eeprom that we will read from it.
	for(uint8 i = 0 ; i < 4 ; i++){
     810:	a0 e0       	ldi	r26, 0x00	; 0
     812:	cc 3d       	cpi	r28, 0xDC	; 220
     814:	da 07       	cpc	r29, r26
     816:	c9 f7       	brne	.-14     	; 0x80a <printing_menu_with_choice+0xfa>
		username[i] = I2C_Read_ACK();
	}
	username[4] = I2C_Read_NACK();
     818:	0e 94 b4 10 	call	0x2168	; 0x2168 <I2C_Read_NACK>
     81c:	88 83       	st	Y, r24
	I2C_Stop();
     81e:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>
     822:	18 e3       	ldi	r17, 0x38	; 56

	//now print the name on the OLED
	for(uint8 i = 0 ; i < 5 ; i++){
		letter_write(7,(56+(7*i)),username[i]);
     824:	87 e0       	ldi	r24, 0x07	; 7
     826:	61 2f       	mov	r22, r17
     828:	f7 01       	movw	r30, r14
     82a:	41 91       	ld	r20, Z+
     82c:	7f 01       	movw	r14, r30
     82e:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
     832:	19 5f       	subi	r17, 0xF9	; 249
	}
	username[4] = I2C_Read_NACK();
	I2C_Stop();

	//now print the name on the OLED
	for(uint8 i = 0 ; i < 5 ; i++){
     834:	1b 35       	cpi	r17, 0x5B	; 91
     836:	b1 f7       	brne	.-20     	; 0x824 <printing_menu_with_choice+0x114>
		letter_write(7,(56+(7*i)),username[i]);
	}



}
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	1f 91       	pop	r17
     83e:	0f 91       	pop	r16
     840:	ff 90       	pop	r15
     842:	ef 90       	pop	r14
     844:	df 90       	pop	r13
     846:	cf 90       	pop	r12
     848:	bf 90       	pop	r11
     84a:	af 90       	pop	r10
     84c:	9f 90       	pop	r9
     84e:	8f 90       	pop	r8
     850:	7f 90       	pop	r7
     852:	6f 90       	pop	r6
     854:	5f 90       	pop	r5
     856:	08 95       	ret

00000858 <number_write>:
//bitmap array for -
uint8 dash_bitmap[14] = {0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};


/********************************************************************************/
void number_write(uint8 page_num , uint8 col_num , uint8 number_index){
     858:	af 92       	push	r10
     85a:	bf 92       	push	r11
     85c:	cf 92       	push	r12
     85e:	df 92       	push	r13
     860:	ef 92       	push	r14
     862:	ff 92       	push	r15
     864:	0f 93       	push	r16
     866:	1f 93       	push	r17
     868:	df 93       	push	r29
     86a:	cf 93       	push	r28
     86c:	cd b7       	in	r28, 0x3d	; 61
     86e:	de b7       	in	r29, 0x3e	; 62
     870:	2e 97       	sbiw	r28, 0x0e	; 14
     872:	0f b6       	in	r0, 0x3f	; 63
     874:	f8 94       	cli
     876:	de bf       	out	0x3e, r29	; 62
     878:	0f be       	out	0x3f, r0	; 63
     87a:	cd bf       	out	0x3d, r28	; 61
     87c:	a8 2e       	mov	r10, r24
     87e:	b6 2e       	mov	r11, r22
     880:	e4 2e       	mov	r14, r20
	I2C_Init();
     882:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <I2C_Init>
	/*storing bytes array*/
	uint8 bitmap_holder[14] = {0};
     886:	1e e0       	ldi	r17, 0x0E	; 14
     888:	f1 2e       	mov	r15, r17
     88a:	8e 01       	movw	r16, r28
     88c:	0f 5f       	subi	r16, 0xFF	; 255
     88e:	1f 4f       	sbci	r17, 0xFF	; 255
     890:	f8 01       	movw	r30, r16
     892:	8f 2d       	mov	r24, r15
     894:	11 92       	st	Z+, r1
     896:	8a 95       	dec	r24
     898:	e9 f7       	brne	.-6      	; 0x894 <__stack+0x35>


	//first we want to send that we want to write and write the start reading address.
	I2C_Start(Slave_Address_W);
     89a:	88 ea       	ldi	r24, 0xA8	; 168
     89c:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>

	/*calculate the starting reading address depend on the number_index)*/
	uint8 address = ( number_index * 14 );
	I2C_Write(address);
     8a0:	ef 9c       	mul	r14, r15
     8a2:	80 2d       	mov	r24, r0
     8a4:	11 24       	eor	r1, r1
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>

	/*now initiate the communication again but this time in read mode*/
	I2C_Repeated_Start(Slave_Address_R);
     8ac:	89 ea       	ldi	r24, 0xA9	; 169
     8ae:	0e 94 7d 10 	call	0x20fa	; 0x20fa <I2C_Repeated_Start>
     8b2:	78 01       	movw	r14, r16

	/*now reading from the eeprom and storing in "bitmap_holder" array*/
	for(uint8 byte_address = 0 ; byte_address < 13 ; byte_address++){
     8b4:	be e0       	ldi	r27, 0x0E	; 14
     8b6:	cb 2e       	mov	r12, r27
     8b8:	d1 2c       	mov	r13, r1
     8ba:	cc 0e       	add	r12, r28
     8bc:	dd 1e       	adc	r13, r29
		bitmap_holder[byte_address] = I2C_Read_ACK();
     8be:	0e 94 ad 10 	call	0x215a	; 0x215a <I2C_Read_ACK>
     8c2:	f7 01       	movw	r30, r14
     8c4:	81 93       	st	Z+, r24
     8c6:	7f 01       	movw	r14, r30

	/*now initiate the communication again but this time in read mode*/
	I2C_Repeated_Start(Slave_Address_R);

	/*now reading from the eeprom and storing in "bitmap_holder" array*/
	for(uint8 byte_address = 0 ; byte_address < 13 ; byte_address++){
     8c8:	ec 15       	cp	r30, r12
     8ca:	fd 05       	cpc	r31, r13
     8cc:	c1 f7       	brne	.-16     	; 0x8be <__stack+0x5f>
		bitmap_holder[byte_address] = I2C_Read_ACK();
	}
	bitmap_holder[13] = I2C_Read_NACK();
     8ce:	0e 94 b4 10 	call	0x2168	; 0x2168 <I2C_Read_NACK>
     8d2:	8e 87       	std	Y+14, r24	; 0x0e
	I2C_Stop();
     8d4:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>

	/*now after getting the data from the eeprom we want to send it to the oled screen*/
	setColumnAddress(col_num,col_num+7);
     8d8:	a7 e0       	ldi	r26, 0x07	; 7
     8da:	da 2e       	mov	r13, r26
     8dc:	db 0c       	add	r13, r11
     8de:	8b 2d       	mov	r24, r11
     8e0:	6d 2d       	mov	r22, r13
     8e2:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <setColumnAddress>
	setPageAddress(page_num,7);
     8e6:	8a 2d       	mov	r24, r10
     8e8:	67 e0       	ldi	r22, 0x07	; 7
     8ea:	0e 94 3f 1b 	call	0x367e	; 0x367e <setPageAddress>
	I2C_Start(oled_write_address);
     8ee:	8a e7       	ldi	r24, 0x7A	; 122
     8f0:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
	I2C_Write(CONTROL_DATA);
     8f4:	80 e4       	ldi	r24, 0x40	; 64
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>

	for(uint8 byte_address = 0 ; byte_address < 7 ; byte_address++){
     8fc:	f8 e0       	ldi	r31, 0x08	; 8
     8fe:	ef 2e       	mov	r14, r31
     900:	f1 2c       	mov	r15, r1
     902:	ec 0e       	add	r14, r28
     904:	fd 1e       	adc	r15, r29
		I2C_Write(bitmap_holder[byte_address]);
     906:	f8 01       	movw	r30, r16
     908:	81 91       	ld	r24, Z+
     90a:	8f 01       	movw	r16, r30
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
	setColumnAddress(col_num,col_num+7);
	setPageAddress(page_num,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);

	for(uint8 byte_address = 0 ; byte_address < 7 ; byte_address++){
     912:	0e 15       	cp	r16, r14
     914:	1f 05       	cpc	r17, r15
     916:	b9 f7       	brne	.-18     	; 0x906 <__stack+0xa7>
		I2C_Write(bitmap_holder[byte_address]);
	}

	I2C_Stop();
     918:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>
	setColumnAddress(col_num,col_num+7);
     91c:	8b 2d       	mov	r24, r11
     91e:	6d 2d       	mov	r22, r13
     920:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <setColumnAddress>
	setPageAddress(page_num-1,7);
     924:	8a 2d       	mov	r24, r10
     926:	81 50       	subi	r24, 0x01	; 1
     928:	67 e0       	ldi	r22, 0x07	; 7
     92a:	0e 94 3f 1b 	call	0x367e	; 0x367e <setPageAddress>
	I2C_Start(oled_write_address);
     92e:	8a e7       	ldi	r24, 0x7A	; 122
     930:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
	I2C_Write(CONTROL_DATA);
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
     93c:	78 01       	movw	r14, r16

	for(uint8 byte_address = 7 ; byte_address < 14 ; byte_address++){
     93e:	8e 01       	movw	r16, r28
     940:	01 5f       	subi	r16, 0xF1	; 241
     942:	1f 4f       	sbci	r17, 0xFF	; 255
		I2C_Write(bitmap_holder[byte_address]);
     944:	f7 01       	movw	r30, r14
     946:	81 91       	ld	r24, Z+
     948:	7f 01       	movw	r14, r30
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
	setColumnAddress(col_num,col_num+7);
	setPageAddress(page_num-1,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);

	for(uint8 byte_address = 7 ; byte_address < 14 ; byte_address++){
     950:	e0 16       	cp	r14, r16
     952:	f1 06       	cpc	r15, r17
     954:	b9 f7       	brne	.-18     	; 0x944 <__stack+0xe5>
		I2C_Write(bitmap_holder[byte_address]);
	}

	I2C_Stop();
     956:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>

}
     95a:	2e 96       	adiw	r28, 0x0e	; 14
     95c:	0f b6       	in	r0, 0x3f	; 63
     95e:	f8 94       	cli
     960:	de bf       	out	0x3e, r29	; 62
     962:	0f be       	out	0x3f, r0	; 63
     964:	cd bf       	out	0x3d, r28	; 61
     966:	cf 91       	pop	r28
     968:	df 91       	pop	r29
     96a:	1f 91       	pop	r17
     96c:	0f 91       	pop	r16
     96e:	ff 90       	pop	r15
     970:	ef 90       	pop	r14
     972:	df 90       	pop	r13
     974:	cf 90       	pop	r12
     976:	bf 90       	pop	r11
     978:	af 90       	pop	r10
     97a:	08 95       	ret

0000097c <triple_digit_write>:
	number_write(page_num,col_num+7,digit);
	number /= 10 ;
	number_write(page_num,col_num,number);
}
/*********************************************************************/
void triple_digit_write(uint8 page_num , uint8 col_num , uint16 number){
     97c:	ef 92       	push	r14
     97e:	ff 92       	push	r15
     980:	0f 93       	push	r16
     982:	1f 93       	push	r17
     984:	f8 2e       	mov	r15, r24
     986:	e6 2e       	mov	r14, r22
     988:	8a 01       	movw	r16, r20
	uint8 digit = number % 10 ;
	number_write(page_num,(col_num+14),digit);
     98a:	26 2f       	mov	r18, r22
     98c:	22 5f       	subi	r18, 0xF2	; 242
     98e:	ca 01       	movw	r24, r20
     990:	6a e0       	ldi	r22, 0x0A	; 10
     992:	70 e0       	ldi	r23, 0x00	; 0
     994:	0e 94 76 24 	call	0x48ec	; 0x48ec <__udivmodhi4>
     998:	48 2f       	mov	r20, r24
     99a:	8f 2d       	mov	r24, r15
     99c:	62 2f       	mov	r22, r18
     99e:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
	number /= 10 ;
     9a2:	c8 01       	movw	r24, r16
     9a4:	6a e0       	ldi	r22, 0x0A	; 10
     9a6:	70 e0       	ldi	r23, 0x00	; 0
     9a8:	0e 94 76 24 	call	0x48ec	; 0x48ec <__udivmodhi4>
     9ac:	16 2f       	mov	r17, r22
     9ae:	07 2f       	mov	r16, r23
	digit = number % 10 ;
	number_write(page_num,col_num+7,digit);
     9b0:	2e 2d       	mov	r18, r14
     9b2:	29 5f       	subi	r18, 0xF9	; 249
     9b4:	86 2f       	mov	r24, r22
     9b6:	97 2f       	mov	r25, r23
     9b8:	6a e0       	ldi	r22, 0x0A	; 10
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	0e 94 76 24 	call	0x48ec	; 0x48ec <__udivmodhi4>
     9c0:	48 2f       	mov	r20, r24
     9c2:	8f 2d       	mov	r24, r15
     9c4:	62 2f       	mov	r22, r18
     9c6:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
	number /= 10 ;
	digit = number % 10 ;
	number_write(page_num,col_num,digit);
     9ca:	81 2f       	mov	r24, r17
     9cc:	90 2f       	mov	r25, r16
     9ce:	6a e0       	ldi	r22, 0x0A	; 10
     9d0:	70 e0       	ldi	r23, 0x00	; 0
     9d2:	0e 94 76 24 	call	0x48ec	; 0x48ec <__udivmodhi4>
     9d6:	cb 01       	movw	r24, r22
     9d8:	6a e0       	ldi	r22, 0x0A	; 10
     9da:	70 e0       	ldi	r23, 0x00	; 0
     9dc:	0e 94 76 24 	call	0x48ec	; 0x48ec <__udivmodhi4>
     9e0:	48 2f       	mov	r20, r24
     9e2:	8f 2d       	mov	r24, r15
     9e4:	6e 2d       	mov	r22, r14
     9e6:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
}
     9ea:	1f 91       	pop	r17
     9ec:	0f 91       	pop	r16
     9ee:	ff 90       	pop	r15
     9f0:	ef 90       	pop	r14
     9f2:	08 95       	ret

000009f4 <double_digit_write>:
	I2C_Stop();

	return 1 ; //adding name to eeprom done successfully.
}
/**********************************************************************/
void double_digit_write(uint8 page_num , uint8 col_num , uint8 number){
     9f4:	ff 92       	push	r15
     9f6:	0f 93       	push	r16
     9f8:	1f 93       	push	r17
     9fa:	08 2f       	mov	r16, r24
     9fc:	f6 2e       	mov	r15, r22
     9fe:	14 2f       	mov	r17, r20
	uint8 digit = number % 10 ;
	number_write(page_num,col_num+7,digit);
     a00:	26 2f       	mov	r18, r22
     a02:	29 5f       	subi	r18, 0xF9	; 249
     a04:	84 2f       	mov	r24, r20
     a06:	6a e0       	ldi	r22, 0x0A	; 10
     a08:	0e 94 6a 24 	call	0x48d4	; 0x48d4 <__udivmodqi4>
     a0c:	80 2f       	mov	r24, r16
     a0e:	62 2f       	mov	r22, r18
     a10:	49 2f       	mov	r20, r25
     a12:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
	number /= 10 ;
	number_write(page_num,col_num,number);
     a16:	81 2f       	mov	r24, r17
     a18:	6a e0       	ldi	r22, 0x0A	; 10
     a1a:	0e 94 6a 24 	call	0x48d4	; 0x48d4 <__udivmodqi4>
     a1e:	48 2f       	mov	r20, r24
     a20:	80 2f       	mov	r24, r16
     a22:	6f 2d       	mov	r22, r15
     a24:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
}
     a28:	1f 91       	pop	r17
     a2a:	0f 91       	pop	r16
     a2c:	ff 90       	pop	r15
     a2e:	08 95       	ret

00000a30 <button_check>:
	DIO_SetPinValue(DIO_PORTC,DIO_PIN4,DIO_PIN_VAL_HIGH);
	DIO_SetPinValue(DIO_PORTC,DIO_PIN5,DIO_PIN_VAL_HIGH);
}

/****************************************************************************/
uint8 button_check(void){
     a30:	df 92       	push	r13
     a32:	ef 92       	push	r14
     a34:	ff 92       	push	r15
     a36:	0f 93       	push	r16
     a38:	1f 93       	push	r17
     a3a:	df 93       	push	r29
     a3c:	cf 93       	push	r28
     a3e:	0f 92       	push	r0
     a40:	cd b7       	in	r28, 0x3d	; 61
     a42:	de b7       	in	r29, 0x3e	; 62
     a44:	03 e0       	ldi	r16, 0x03	; 3

	uint8 which_button = 0 ;

	//now we want to loop over the pins 3,4,5 and set each one to low and check if pin2 get LOW value.
	for(uint8 COL_PIN = 3 ; COL_PIN <= 5 ; COL_PIN++){
		uint8 button_pressed = 1 ;
     a46:	dd 24       	eor	r13, r13
     a48:	d3 94       	inc	r13

		DIO_SetPinValue(DIO_PORTC,COL_PIN,DIO_PIN_VAL_LOW);
		DIO_GetPinValue(DIO_PORTC,DIO_PIN2, &button_pressed);
     a4a:	7e 01       	movw	r14, r28
     a4c:	08 94       	sec
     a4e:	e1 1c       	adc	r14, r1
     a50:	f1 1c       	adc	r15, r1

	uint8 which_button = 0 ;

	//now we want to loop over the pins 3,4,5 and set each one to low and check if pin2 get LOW value.
	for(uint8 COL_PIN = 3 ; COL_PIN <= 5 ; COL_PIN++){
		uint8 button_pressed = 1 ;
     a52:	d9 82       	std	Y+1, r13	; 0x01

		DIO_SetPinValue(DIO_PORTC,COL_PIN,DIO_PIN_VAL_LOW);
     a54:	82 e0       	ldi	r24, 0x02	; 2
     a56:	60 2f       	mov	r22, r16
     a58:	40 e0       	ldi	r20, 0x00	; 0
     a5a:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <DIO_SetPinValue>
		DIO_GetPinValue(DIO_PORTC,DIO_PIN2, &button_pressed);
     a5e:	82 e0       	ldi	r24, 0x02	; 2
     a60:	62 e0       	ldi	r22, 0x02	; 2
     a62:	a7 01       	movw	r20, r14
     a64:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <DIO_GetPinValue>

		//0 means button is pressed
		if(button_pressed == 0){
     a68:	89 81       	ldd	r24, Y+1	; 0x01
     a6a:	88 23       	and	r24, r24
     a6c:	39 f0       	breq	.+14     	; 0xa7c <button_check+0x4c>
     a6e:	10 e0       	ldi	r17, 0x00	; 0
     a70:	09 c0       	rjmp	.+18     	; 0xa84 <button_check+0x54>
			which_button = COL_PIN ;

			while(button_pressed == 0){
				DIO_GetPinValue(DIO_PORTC, DIO_PIN2, &button_pressed);
     a72:	82 e0       	ldi	r24, 0x02	; 2
     a74:	62 e0       	ldi	r22, 0x02	; 2
     a76:	a7 01       	movw	r20, r14
     a78:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <DIO_GetPinValue>

		//0 means button is pressed
		if(button_pressed == 0){
			which_button = COL_PIN ;

			while(button_pressed == 0){
     a7c:	89 81       	ldd	r24, Y+1	; 0x01
     a7e:	88 23       	and	r24, r24
     a80:	c1 f3       	breq	.-16     	; 0xa72 <button_check+0x42>
     a82:	10 2f       	mov	r17, r16
				DIO_GetPinValue(DIO_PORTC, DIO_PIN2, &button_pressed);
			}
		}

		DIO_SetPinValue(DIO_PORTC,COL_PIN,DIO_PIN_VAL_HIGH);
     a84:	82 e0       	ldi	r24, 0x02	; 2
     a86:	60 2f       	mov	r22, r16
     a88:	41 e0       	ldi	r20, 0x01	; 1
     a8a:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <DIO_SetPinValue>
		if(which_button != 0)
     a8e:	11 23       	and	r17, r17
     a90:	19 f4       	brne	.+6      	; 0xa98 <button_check+0x68>
uint8 button_check(void){

	uint8 which_button = 0 ;

	//now we want to loop over the pins 3,4,5 and set each one to low and check if pin2 get LOW value.
	for(uint8 COL_PIN = 3 ; COL_PIN <= 5 ; COL_PIN++){
     a92:	0f 5f       	subi	r16, 0xFF	; 255
     a94:	06 30       	cpi	r16, 0x06	; 6
     a96:	e9 f6       	brne	.-70     	; 0xa52 <button_check+0x22>
		DIO_SetPinValue(DIO_PORTC,COL_PIN,DIO_PIN_VAL_HIGH);
		if(which_button != 0)
			return which_button ;
	}
	return which_button ;
}
     a98:	81 2f       	mov	r24, r17
     a9a:	0f 90       	pop	r0
     a9c:	cf 91       	pop	r28
     a9e:	df 91       	pop	r29
     aa0:	1f 91       	pop	r17
     aa2:	0f 91       	pop	r16
     aa4:	ff 90       	pop	r15
     aa6:	ef 90       	pop	r14
     aa8:	df 90       	pop	r13
     aaa:	08 95       	ret

00000aac <study_timer>:
	return 1;

}
/*********************************************************************/

uint8 study_timer(void){
     aac:	0f 93       	push	r16
     aae:	1f 93       	push	r17

	black_entire_screen();
     ab0:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <black_entire_screen>
	//studying min
	letter_write(7,1,18);
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	61 e0       	ldi	r22, 0x01	; 1
     ab8:	42 e1       	ldi	r20, 0x12	; 18
     aba:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,8,19);
     abe:	87 e0       	ldi	r24, 0x07	; 7
     ac0:	68 e0       	ldi	r22, 0x08	; 8
     ac2:	43 e1       	ldi	r20, 0x13	; 19
     ac4:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,15,20);
     ac8:	87 e0       	ldi	r24, 0x07	; 7
     aca:	6f e0       	ldi	r22, 0x0F	; 15
     acc:	44 e1       	ldi	r20, 0x14	; 20
     ace:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,22,3);
     ad2:	87 e0       	ldi	r24, 0x07	; 7
     ad4:	66 e1       	ldi	r22, 0x16	; 22
     ad6:	43 e0       	ldi	r20, 0x03	; 3
     ad8:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,29,24);
     adc:	87 e0       	ldi	r24, 0x07	; 7
     ade:	6d e1       	ldi	r22, 0x1D	; 29
     ae0:	48 e1       	ldi	r20, 0x18	; 24
     ae2:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,36,8);
     ae6:	87 e0       	ldi	r24, 0x07	; 7
     ae8:	64 e2       	ldi	r22, 0x24	; 36
     aea:	48 e0       	ldi	r20, 0x08	; 8
     aec:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,43,13);
     af0:	87 e0       	ldi	r24, 0x07	; 7
     af2:	6b e2       	ldi	r22, 0x2B	; 43
     af4:	4d e0       	ldi	r20, 0x0D	; 13
     af6:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,50,6);
     afa:	87 e0       	ldi	r24, 0x07	; 7
     afc:	62 e3       	ldi	r22, 0x32	; 50
     afe:	46 e0       	ldi	r20, 0x06	; 6
     b00:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>

	letter_write(7,64,12);
     b04:	87 e0       	ldi	r24, 0x07	; 7
     b06:	60 e4       	ldi	r22, 0x40	; 64
     b08:	4c e0       	ldi	r20, 0x0C	; 12
     b0a:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,71,8);
     b0e:	87 e0       	ldi	r24, 0x07	; 7
     b10:	67 e4       	ldi	r22, 0x47	; 71
     b12:	48 e0       	ldi	r20, 0x08	; 8
     b14:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,78,13);
     b18:	87 e0       	ldi	r24, 0x07	; 7
     b1a:	6e e4       	ldi	r22, 0x4E	; 78
     b1c:	4d e0       	ldi	r20, 0x0D	; 13
     b1e:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,85,18);
     b22:	87 e0       	ldi	r24, 0x07	; 7
     b24:	65 e5       	ldi	r22, 0x55	; 85
     b26:	42 e1       	ldi	r20, 0x12	; 18
     b28:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>

	//first we will print 00
	number_write(4,48,0);
     b2c:	84 e0       	ldi	r24, 0x04	; 4
     b2e:	60 e3       	ldi	r22, 0x30	; 48
     b30:	40 e0       	ldi	r20, 0x00	; 0
     b32:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
	number_write(4,55,0);
     b36:	84 e0       	ldi	r24, 0x04	; 4
     b38:	67 e3       	ldi	r22, 0x37	; 55
     b3a:	40 e0       	ldi	r20, 0x00	; 0
     b3c:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>

	//writing min beside 00
	letter_write(4,69,12);
     b40:	84 e0       	ldi	r24, 0x04	; 4
     b42:	65 e4       	ldi	r22, 0x45	; 69
     b44:	4c e0       	ldi	r20, 0x0C	; 12
     b46:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(4,76,8);
     b4a:	84 e0       	ldi	r24, 0x04	; 4
     b4c:	6c e4       	ldi	r22, 0x4C	; 76
     b4e:	48 e0       	ldi	r20, 0x08	; 8
     b50:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(4,83,13);
     b54:	84 e0       	ldi	r24, 0x04	; 4
     b56:	63 e5       	ldi	r22, 0x53	; 83
     b58:	4d e0       	ldi	r20, 0x0D	; 13
     b5a:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>

	//drawing the underline
	setColumnAddress(48,62);
     b5e:	80 e3       	ldi	r24, 0x30	; 48
     b60:	6e e3       	ldi	r22, 0x3E	; 62
     b62:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <setColumnAddress>
	setPageAddress(2,7);
     b66:	82 e0       	ldi	r24, 0x02	; 2
     b68:	67 e0       	ldi	r22, 0x07	; 7
     b6a:	0e 94 3f 1b 	call	0x367e	; 0x367e <setPageAddress>
	I2C_Start(oled_write_address);
     b6e:	8a e7       	ldi	r24, 0x7A	; 122
     b70:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
	I2C_Write(CONTROL_DATA);
     b74:	80 e4       	ldi	r24, 0x40	; 64
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
     b7c:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8 i = 0 ; i < 14 ; i++){
		I2C_Write(0xC0);
     b7e:	80 ec       	ldi	r24, 0xC0	; 192
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
	//drawing the underline
	setColumnAddress(48,62);
	setPageAddress(2,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(uint8 i = 0 ; i < 14 ; i++){
     b86:	1f 5f       	subi	r17, 0xFF	; 255
     b88:	1e 30       	cpi	r17, 0x0E	; 14
     b8a:	c9 f7       	brne	.-14     	; 0xb7e <study_timer+0xd2>
		I2C_Write(0xC0);
	}
	I2C_Stop();
     b8c:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>
     b90:	00 e0       	ldi	r16, 0x00	; 0

	uint8 timer_tracker = 0 ;
	uint8 which_button = 0 ;
	do{
		which_button = 0 ;
		which_button = button_check();
     b92:	0e 94 18 05 	call	0xa30	; 0xa30 <button_check>

		if(which_button == 3){
     b96:	83 30       	cpi	r24, 0x03	; 3
     b98:	59 f4       	brne	.+22     	; 0xbb0 <study_timer+0x104>
			//this means that we pressed left
			//check if we stopping at letter a
			if(timer_tracker == 0){
     b9a:	00 23       	and	r16, r16
     b9c:	39 f4       	brne	.+14     	; 0xbac <study_timer+0x100>
				timer_tracker = 95 ;
				double_digit_write(4,48,timer_tracker);
     b9e:	84 e0       	ldi	r24, 0x04	; 4
     ba0:	60 e3       	ldi	r22, 0x30	; 48
     ba2:	4f e5       	ldi	r20, 0x5F	; 95
     ba4:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
     ba8:	0f e5       	ldi	r16, 0x5F	; 95
     baa:	f3 cf       	rjmp	.-26     	; 0xb92 <study_timer+0xe6>
			}else{
				timer_tracker-=5 ;
     bac:	05 50       	subi	r16, 0x05	; 5
     bae:	0a c0       	rjmp	.+20     	; 0xbc4 <study_timer+0x118>
				double_digit_write(4,48,timer_tracker);
			}

		}else if(which_button == 4){
     bb0:	84 30       	cpi	r24, 0x04	; 4
     bb2:	71 f4       	brne	.+28     	; 0xbd0 <study_timer+0x124>
			//this means that we pressed right
			//check if we stopping at letter z
			if(timer_tracker == 95){
     bb4:	0f 35       	cpi	r16, 0x5F	; 95
     bb6:	29 f4       	brne	.+10     	; 0xbc2 <study_timer+0x116>
				timer_tracker = 0 ;
				double_digit_write(4,48,timer_tracker);
     bb8:	60 e3       	ldi	r22, 0x30	; 48
     bba:	40 e0       	ldi	r20, 0x00	; 0
     bbc:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
     bc0:	e7 cf       	rjmp	.-50     	; 0xb90 <study_timer+0xe4>
			}else{
				timer_tracker+=5 ;
     bc2:	0b 5f       	subi	r16, 0xFB	; 251
				double_digit_write(4,48,timer_tracker);
     bc4:	84 e0       	ldi	r24, 0x04	; 4
     bc6:	60 e3       	ldi	r22, 0x30	; 48
     bc8:	40 2f       	mov	r20, r16
     bca:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
     bce:	e1 cf       	rjmp	.-62     	; 0xb92 <study_timer+0xe6>
			}
		}

	}while(which_button != 5);
     bd0:	85 30       	cpi	r24, 0x05	; 5
     bd2:	f9 f6       	brne	.-66     	; 0xb92 <study_timer+0xe6>

	//here we will black entire screen and print a studying motive and then start the timer.
	black_entire_screen();
     bd4:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <black_entire_screen>

	//keep going
	letter_write(7,1,10);
     bd8:	87 e0       	ldi	r24, 0x07	; 7
     bda:	61 e0       	ldi	r22, 0x01	; 1
     bdc:	4a e0       	ldi	r20, 0x0A	; 10
     bde:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,8,4);
     be2:	87 e0       	ldi	r24, 0x07	; 7
     be4:	68 e0       	ldi	r22, 0x08	; 8
     be6:	44 e0       	ldi	r20, 0x04	; 4
     be8:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,15,4);
     bec:	87 e0       	ldi	r24, 0x07	; 7
     bee:	6f e0       	ldi	r22, 0x0F	; 15
     bf0:	44 e0       	ldi	r20, 0x04	; 4
     bf2:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,22,15);
     bf6:	87 e0       	ldi	r24, 0x07	; 7
     bf8:	66 e1       	ldi	r22, 0x16	; 22
     bfa:	4f e0       	ldi	r20, 0x0F	; 15
     bfc:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>

	letter_write(7,36,6);
     c00:	87 e0       	ldi	r24, 0x07	; 7
     c02:	64 e2       	ldi	r22, 0x24	; 36
     c04:	46 e0       	ldi	r20, 0x06	; 6
     c06:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,43,14);
     c0a:	87 e0       	ldi	r24, 0x07	; 7
     c0c:	6b e2       	ldi	r22, 0x2B	; 43
     c0e:	4e e0       	ldi	r20, 0x0E	; 14
     c10:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,50,8);
     c14:	87 e0       	ldi	r24, 0x07	; 7
     c16:	62 e3       	ldi	r22, 0x32	; 50
     c18:	48 e0       	ldi	r20, 0x08	; 8
     c1a:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,57,13);
     c1e:	87 e0       	ldi	r24, 0x07	; 7
     c20:	69 e3       	ldi	r22, 0x39	; 57
     c22:	4d e0       	ldi	r20, 0x0D	; 13
     c24:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,64,6);
     c28:	87 e0       	ldi	r24, 0x07	; 7
     c2a:	60 e4       	ldi	r22, 0x40	; 64
     c2c:	46 e0       	ldi	r20, 0x06	; 6
     c2e:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>

	//print start min
	double_digit_write(4,48,timer_tracker);
     c32:	84 e0       	ldi	r24, 0x04	; 4
     c34:	60 e3       	ldi	r22, 0x30	; 48
     c36:	40 2f       	mov	r20, r16
     c38:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
	//writing min beside 00
	letter_write(4,69,12);
     c3c:	84 e0       	ldi	r24, 0x04	; 4
     c3e:	65 e4       	ldi	r22, 0x45	; 69
     c40:	4c e0       	ldi	r20, 0x0C	; 12
     c42:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(4,76,8);
     c46:	84 e0       	ldi	r24, 0x04	; 4
     c48:	6c e4       	ldi	r22, 0x4C	; 76
     c4a:	48 e0       	ldi	r20, 0x08	; 8
     c4c:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(4,83,13);
     c50:	84 e0       	ldi	r24, 0x04	; 4
     c52:	63 e5       	ldi	r22, 0x53	; 83
     c54:	4d e0       	ldi	r20, 0x0D	; 13
     c56:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>

	//drawing the underline
	setColumnAddress(48,62);
     c5a:	80 e3       	ldi	r24, 0x30	; 48
     c5c:	6e e3       	ldi	r22, 0x3E	; 62
     c5e:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <setColumnAddress>
	setPageAddress(2,7);
     c62:	82 e0       	ldi	r24, 0x02	; 2
     c64:	67 e0       	ldi	r22, 0x07	; 7
     c66:	0e 94 3f 1b 	call	0x367e	; 0x367e <setPageAddress>
	I2C_Start(oled_write_address);
     c6a:	8a e7       	ldi	r24, 0x7A	; 122
     c6c:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
	I2C_Write(CONTROL_DATA);
     c70:	80 e4       	ldi	r24, 0x40	; 64
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
     c78:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8 i = 0 ; i < 14 ; i++){
		I2C_Write(0xC0);
     c7a:	80 ec       	ldi	r24, 0xC0	; 192
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
	//drawing the underline
	setColumnAddress(48,62);
	setPageAddress(2,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(uint8 i = 0 ; i < 14 ; i++){
     c82:	1f 5f       	subi	r17, 0xFF	; 255
     c84:	1e 30       	cpi	r17, 0x0E	; 14
     c86:	c9 f7       	brne	.-14     	; 0xc7a <study_timer+0x1ce>
		I2C_Write(0xC0);
	}
	I2C_Stop();
     c88:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>
     c8c:	08 c0       	rjmp	.+16     	; 0xc9e <study_timer+0x1f2>

	while(timer_tracker ){
		minute_delay();
     c8e:	0e 94 94 13 	call	0x2728	; 0x2728 <minute_delay>
		timer_tracker--;
     c92:	01 50       	subi	r16, 0x01	; 1
		double_digit_write(4,48,timer_tracker);
     c94:	84 e0       	ldi	r24, 0x04	; 4
     c96:	60 e3       	ldi	r22, 0x30	; 48
     c98:	40 2f       	mov	r20, r16
     c9a:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
	for(uint8 i = 0 ; i < 14 ; i++){
		I2C_Write(0xC0);
	}
	I2C_Stop();

	while(timer_tracker ){
     c9e:	00 23       	and	r16, r16
     ca0:	b1 f7       	brne	.-20     	; 0xc8e <study_timer+0x1e2>
	}

	//session finished
	return 1 ;

}
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	1f 91       	pop	r17
     ca6:	0f 91       	pop	r16
     ca8:	08 95       	ret

00000caa <live_clock>:
	uint8 tens = (bcd >> 4) * 10 ;
	tens = tens + (bcd & 0b00001111) ;
	return tens ;
}
/*********************************************************************/
uint8 live_clock(void){
     caa:	2f 92       	push	r2
     cac:	3f 92       	push	r3
     cae:	4f 92       	push	r4
     cb0:	5f 92       	push	r5
     cb2:	6f 92       	push	r6
     cb4:	7f 92       	push	r7
     cb6:	8f 92       	push	r8
     cb8:	9f 92       	push	r9
     cba:	af 92       	push	r10
     cbc:	bf 92       	push	r11
     cbe:	cf 92       	push	r12
     cc0:	df 92       	push	r13
     cc2:	ef 92       	push	r14
     cc4:	ff 92       	push	r15
     cc6:	0f 93       	push	r16
     cc8:	1f 93       	push	r17
     cca:	df 93       	push	r29
     ccc:	cf 93       	push	r28
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
     cd2:	29 97       	sbiw	r28, 0x09	; 9
     cd4:	0f b6       	in	r0, 0x3f	; 63
     cd6:	f8 94       	cli
     cd8:	de bf       	out	0x3e, r29	; 62
     cda:	0f be       	out	0x3f, r0	; 63
     cdc:	cd bf       	out	0x3d, r28	; 61

	black_entire_screen();
     cde:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <black_entire_screen>
	//making struct object to hold the data coming from the RTC
	CLOCK_DATA CLOCK_HOLDER_NEW , CLOCK_HOLDER_OLD;
	DATE_DATA DATE_HOLDER_NEW , DATE_HOLDER_OLD;

	//for storing data for the first comparison
	CLOCK_HOLDER_OLD = CLOCK_HOLDER_NEW;
     ce2:	4c 80       	ldd	r4, Y+4	; 0x04
     ce4:	2a 80       	ldd	r2, Y+2	; 0x02
     ce6:	bb 80       	ldd	r11, Y+3	; 0x03
	RTC_CLOCK_Read(0x00,&CLOCK_HOLDER_NEW);
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	be 01       	movw	r22, r28
     cec:	6f 5f       	subi	r22, 0xFF	; 255
     cee:	7f 4f       	sbci	r23, 0xFF	; 255
     cf0:	0e 94 25 14 	call	0x284a	; 0x284a <RTC_CLOCK_Read>
	RTC_DATE_Read(0x03,&DATE_HOLDER_NEW);
     cf4:	83 e0       	ldi	r24, 0x03	; 3
     cf6:	be 01       	movw	r22, r28
     cf8:	6b 5f       	subi	r22, 0xFB	; 251
     cfa:	7f 4f       	sbci	r23, 0xFF	; 255
     cfc:	0e 94 fd 13 	call	0x27fa	; 0x27fa <RTC_DATE_Read>

	//to mask the clock bits only and remove PM/AM and 24/12 hour format bits.
	CLOCK_HOLDER_NEW.hours &= 0b00011111 ;
     d00:	8b 81       	ldd	r24, Y+3	; 0x03
     d02:	48 2f       	mov	r20, r24
     d04:	4f 71       	andi	r20, 0x1F	; 31
     d06:	4b 83       	std	Y+3, r20	; 0x03
	}
	return 1 ;
}
/*********************************************************************/
uint8 bcd_to_dec(uint8 bcd){
	uint8 tens = (bcd >> 4) * 10 ;
     d08:	42 95       	swap	r20
     d0a:	4f 70       	andi	r20, 0x0F	; 15
     d0c:	9a e0       	ldi	r25, 0x0A	; 10
     d0e:	49 9f       	mul	r20, r25
     d10:	40 2d       	mov	r20, r0
     d12:	11 24       	eor	r1, r1

	//to mask the clock bits only and remove PM/AM and 24/12 hour format bits.
	CLOCK_HOLDER_NEW.hours &= 0b00011111 ;

	//Printing current time
	double_digit_write(5, 41, bcd_to_dec(CLOCK_HOLDER_NEW.hours));
     d14:	8f 70       	andi	r24, 0x0F	; 15
     d16:	48 0f       	add	r20, r24
     d18:	85 e0       	ldi	r24, 0x05	; 5
     d1a:	69 e2       	ldi	r22, 0x29	; 41
     d1c:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>

	//Printing :
	setColumnAddress(55,128);
     d20:	87 e3       	ldi	r24, 0x37	; 55
     d22:	60 e8       	ldi	r22, 0x80	; 128
     d24:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <setColumnAddress>
	setPageAddress(5,7);
     d28:	85 e0       	ldi	r24, 0x05	; 5
     d2a:	67 e0       	ldi	r22, 0x07	; 7
     d2c:	0e 94 3f 1b 	call	0x367e	; 0x367e <setPageAddress>
	I2C_Start(oled_write_address);
     d30:	8a e7       	ldi	r24, 0x7A	; 122
     d32:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
	I2C_Write(CONTROL_DATA);
     d36:	80 e4       	ldi	r24, 0x40	; 64
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
     d3e:	00 e8       	ldi	r16, 0x80	; 128
     d40:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8 i = 0 ; i < 7 ;i++){
		I2C_Write(double_dot_bitmap[i]);
     d42:	f8 01       	movw	r30, r16
     d44:	81 91       	ld	r24, Z+
     d46:	8f 01       	movw	r16, r30
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
	//Printing :
	setColumnAddress(55,128);
	setPageAddress(5,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(uint8 i = 0 ; i < 7 ;i++){
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	07 38       	cpi	r16, 0x87	; 135
     d52:	1f 07       	cpc	r17, r31
     d54:	b1 f7       	brne	.-20     	; 0xd42 <live_clock+0x98>
		I2C_Write(double_dot_bitmap[i]);
	}
	I2C_Stop();
     d56:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>

	setColumnAddress(55,128);
     d5a:	87 e3       	ldi	r24, 0x37	; 55
     d5c:	60 e8       	ldi	r22, 0x80	; 128
     d5e:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <setColumnAddress>
	setPageAddress(4,7);
     d62:	84 e0       	ldi	r24, 0x04	; 4
     d64:	67 e0       	ldi	r22, 0x07	; 7
     d66:	0e 94 3f 1b 	call	0x367e	; 0x367e <setPageAddress>
	I2C_Start(oled_write_address);
     d6a:	8a e7       	ldi	r24, 0x7A	; 122
     d6c:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
	I2C_Write(CONTROL_DATA);
     d70:	80 e4       	ldi	r24, 0x40	; 64
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
	for(uint8 i = 7 ; i < 14 ; i++){
		I2C_Write(double_dot_bitmap[i]);
     d78:	f8 01       	movw	r30, r16
     d7a:	81 91       	ld	r24, Z+
     d7c:	8f 01       	movw	r16, r30
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>

	setColumnAddress(55,128);
	setPageAddress(4,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(uint8 i = 7 ; i < 14 ; i++){
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	0e 38       	cpi	r16, 0x8E	; 142
     d88:	1f 07       	cpc	r17, r31
     d8a:	b1 f7       	brne	.-20     	; 0xd78 <live_clock+0xce>
		I2C_Write(double_dot_bitmap[i]);
	}
	I2C_Stop();
     d8c:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>

	double_digit_write(5 ,62 ,bcd_to_dec(CLOCK_HOLDER_NEW.minutes));
     d90:	8a 81       	ldd	r24, Y+2	; 0x02
	}
	return 1 ;
}
/*********************************************************************/
uint8 bcd_to_dec(uint8 bcd){
	uint8 tens = (bcd >> 4) * 10 ;
     d92:	48 2f       	mov	r20, r24
     d94:	42 95       	swap	r20
     d96:	4f 70       	andi	r20, 0x0F	; 15
     d98:	9a e0       	ldi	r25, 0x0A	; 10
     d9a:	49 9f       	mul	r20, r25
     d9c:	40 2d       	mov	r20, r0
     d9e:	11 24       	eor	r1, r1
	for(uint8 i = 7 ; i < 14 ; i++){
		I2C_Write(double_dot_bitmap[i]);
	}
	I2C_Stop();

	double_digit_write(5 ,62 ,bcd_to_dec(CLOCK_HOLDER_NEW.minutes));
     da0:	8f 70       	andi	r24, 0x0F	; 15
     da2:	48 0f       	add	r20, r24
     da4:	85 e0       	ldi	r24, 0x05	; 5
     da6:	6e e3       	ldi	r22, 0x3E	; 62
     da8:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>

	//writing pm or am
	if(CLOCK_HOLDER_NEW.am_pm){
     dac:	8c 81       	ldd	r24, Y+4	; 0x04
     dae:	88 23       	and	r24, r24
     db0:	21 f0       	breq	.+8      	; 0xdba <live_clock+0x110>
		//this means that we are pm
		letter_write(5,76,15);
     db2:	85 e0       	ldi	r24, 0x05	; 5
     db4:	6c e4       	ldi	r22, 0x4C	; 76
     db6:	4f e0       	ldi	r20, 0x0F	; 15
     db8:	03 c0       	rjmp	.+6      	; 0xdc0 <live_clock+0x116>
		letter_write(5,83,12);
	}else if(CLOCK_HOLDER_NEW.am_pm == 0){
		letter_write(5,76,0);
     dba:	85 e0       	ldi	r24, 0x05	; 5
     dbc:	6c e4       	ldi	r22, 0x4C	; 76
     dbe:	40 e0       	ldi	r20, 0x00	; 0
     dc0:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
		letter_write(5,83,12);
     dc4:	85 e0       	ldi	r24, 0x05	; 5
     dc6:	63 e5       	ldi	r22, 0x53	; 83
     dc8:	4c e0       	ldi	r20, 0x0C	; 12
     dca:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	}

	//writing the day from date
	double_digit_write(2,20,bcd_to_dec(DATE_HOLDER_NEW.date));
     dce:	8e 81       	ldd	r24, Y+6	; 0x06
	}
	return 1 ;
}
/*********************************************************************/
uint8 bcd_to_dec(uint8 bcd){
	uint8 tens = (bcd >> 4) * 10 ;
     dd0:	48 2f       	mov	r20, r24
     dd2:	42 95       	swap	r20
     dd4:	4f 70       	andi	r20, 0x0F	; 15
     dd6:	9a e0       	ldi	r25, 0x0A	; 10
     dd8:	49 9f       	mul	r20, r25
     dda:	40 2d       	mov	r20, r0
     ddc:	11 24       	eor	r1, r1
		letter_write(5,76,0);
		letter_write(5,83,12);
	}

	//writing the day from date
	double_digit_write(2,20,bcd_to_dec(DATE_HOLDER_NEW.date));
     dde:	8f 70       	andi	r24, 0x0F	; 15
     de0:	48 0f       	add	r20, r24
     de2:	82 e0       	ldi	r24, 0x02	; 2
     de4:	64 e1       	ldi	r22, 0x14	; 20
     de6:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>


	//Printing -
	setColumnAddress(34,128);
     dea:	82 e2       	ldi	r24, 0x22	; 34
     dec:	60 e8       	ldi	r22, 0x80	; 128
     dee:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <setColumnAddress>
	setPageAddress(2,7);
     df2:	82 e0       	ldi	r24, 0x02	; 2
     df4:	67 e0       	ldi	r22, 0x07	; 7
     df6:	0e 94 3f 1b 	call	0x367e	; 0x367e <setPageAddress>
	I2C_Start(oled_write_address);
     dfa:	8a e7       	ldi	r24, 0x7A	; 122
     dfc:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
	I2C_Write(CONTROL_DATA);
     e00:	80 e4       	ldi	r24, 0x40	; 64
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
     e08:	8e e8       	ldi	r24, 0x8E	; 142
     e0a:	c8 2e       	mov	r12, r24
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	d8 2e       	mov	r13, r24
     e10:	86 01       	movw	r16, r12
	for(uint8 i = 0 ; i < 7 ;i++){
		I2C_Write(dash_bitmap[i]);
     e12:	f8 01       	movw	r30, r16
     e14:	81 91       	ld	r24, Z+
     e16:	8f 01       	movw	r16, r30
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
	//Printing -
	setColumnAddress(34,128);
	setPageAddress(2,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(uint8 i = 0 ; i < 7 ;i++){
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	05 39       	cpi	r16, 0x95	; 149
     e22:	1f 07       	cpc	r17, r31
     e24:	b1 f7       	brne	.-20     	; 0xe12 <live_clock+0x168>
		I2C_Write(dash_bitmap[i]);
	}
	I2C_Stop();
     e26:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>

	setColumnAddress(34,128);
     e2a:	82 e2       	ldi	r24, 0x22	; 34
     e2c:	60 e8       	ldi	r22, 0x80	; 128
     e2e:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <setColumnAddress>
	setPageAddress(1,7);
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	67 e0       	ldi	r22, 0x07	; 7
     e36:	0e 94 3f 1b 	call	0x367e	; 0x367e <setPageAddress>
	I2C_Start(oled_write_address);
     e3a:	8a e7       	ldi	r24, 0x7A	; 122
     e3c:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
	I2C_Write(CONTROL_DATA);
     e40:	80 e4       	ldi	r24, 0x40	; 64
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
     e48:	78 01       	movw	r14, r16
	for(uint8 i = 7 ; i < 14 ; i++){
		I2C_Write(dash_bitmap[i]);
     e4a:	f8 01       	movw	r30, r16
     e4c:	81 91       	ld	r24, Z+
     e4e:	8f 01       	movw	r16, r30
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>

	setColumnAddress(34,128);
	setPageAddress(1,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(uint8 i = 7 ; i < 14 ; i++){
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	0c 39       	cpi	r16, 0x9C	; 156
     e5a:	1f 07       	cpc	r17, r31
     e5c:	b1 f7       	brne	.-20     	; 0xe4a <live_clock+0x1a0>
		I2C_Write(dash_bitmap[i]);
	}
	I2C_Stop();
     e5e:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>

	//writing the month
	double_digit_write(2, 41, bcd_to_dec(DATE_HOLDER_NEW.month));
     e62:	8f 81       	ldd	r24, Y+7	; 0x07
	}
	return 1 ;
}
/*********************************************************************/
uint8 bcd_to_dec(uint8 bcd){
	uint8 tens = (bcd >> 4) * 10 ;
     e64:	48 2f       	mov	r20, r24
     e66:	42 95       	swap	r20
     e68:	4f 70       	andi	r20, 0x0F	; 15
     e6a:	9a e0       	ldi	r25, 0x0A	; 10
     e6c:	49 9f       	mul	r20, r25
     e6e:	40 2d       	mov	r20, r0
     e70:	11 24       	eor	r1, r1
		I2C_Write(dash_bitmap[i]);
	}
	I2C_Stop();

	//writing the month
	double_digit_write(2, 41, bcd_to_dec(DATE_HOLDER_NEW.month));
     e72:	8f 70       	andi	r24, 0x0F	; 15
     e74:	48 0f       	add	r20, r24
     e76:	82 e0       	ldi	r24, 0x02	; 2
     e78:	69 e2       	ldi	r22, 0x29	; 41
     e7a:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>

	//Printing -
	setColumnAddress(55,128);
     e7e:	87 e3       	ldi	r24, 0x37	; 55
     e80:	60 e8       	ldi	r22, 0x80	; 128
     e82:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <setColumnAddress>
	setPageAddress(2,7);
     e86:	82 e0       	ldi	r24, 0x02	; 2
     e88:	67 e0       	ldi	r22, 0x07	; 7
     e8a:	0e 94 3f 1b 	call	0x367e	; 0x367e <setPageAddress>
	I2C_Start(oled_write_address);
     e8e:	8a e7       	ldi	r24, 0x7A	; 122
     e90:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
	I2C_Write(CONTROL_DATA);
     e94:	80 e4       	ldi	r24, 0x40	; 64
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
	for(uint8 i = 0 ; i < 7 ;i++){
		I2C_Write(dash_bitmap[i]);
     e9c:	f6 01       	movw	r30, r12
     e9e:	81 91       	ld	r24, Z+
     ea0:	6f 01       	movw	r12, r30
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
	//Printing -
	setColumnAddress(55,128);
	setPageAddress(2,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(uint8 i = 0 ; i < 7 ;i++){
     ea8:	f5 e9       	ldi	r31, 0x95	; 149
     eaa:	cf 16       	cp	r12, r31
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	df 06       	cpc	r13, r31
     eb0:	a9 f7       	brne	.-22     	; 0xe9c <live_clock+0x1f2>
		I2C_Write(dash_bitmap[i]);
	}
	I2C_Stop();
     eb2:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>

	setColumnAddress(55,128);
     eb6:	87 e3       	ldi	r24, 0x37	; 55
     eb8:	60 e8       	ldi	r22, 0x80	; 128
     eba:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <setColumnAddress>
	setPageAddress(1,7);
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	67 e0       	ldi	r22, 0x07	; 7
     ec2:	0e 94 3f 1b 	call	0x367e	; 0x367e <setPageAddress>
	I2C_Start(oled_write_address);
     ec6:	8a e7       	ldi	r24, 0x7A	; 122
     ec8:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
	I2C_Write(CONTROL_DATA);
     ecc:	80 e4       	ldi	r24, 0x40	; 64
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
	for(uint8 i = 7 ; i < 14 ; i++){
		I2C_Write(dash_bitmap[i]);
     ed4:	f7 01       	movw	r30, r14
     ed6:	81 91       	ld	r24, Z+
     ed8:	7f 01       	movw	r14, r30
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>

	setColumnAddress(55,128);
	setPageAddress(1,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(uint8 i = 7 ; i < 14 ; i++){
     ee0:	fc e9       	ldi	r31, 0x9C	; 156
     ee2:	ef 16       	cp	r14, r31
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	ff 06       	cpc	r15, r31
     ee8:	a9 f7       	brne	.-22     	; 0xed4 <live_clock+0x22a>
		I2C_Write(dash_bitmap[i]);
	}
	I2C_Stop();
     eea:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>

	//writing the thousand index 2 in 2023
	number_write(2,62,2);
     eee:	82 e0       	ldi	r24, 0x02	; 2
     ef0:	6e e3       	ldi	r22, 0x3E	; 62
     ef2:	42 e0       	ldi	r20, 0x02	; 2
     ef4:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
	triple_digit_write(2, 69, bcd_to_dec(DATE_HOLDER_NEW.year));
     ef8:	88 85       	ldd	r24, Y+8	; 0x08
	}
	return 1 ;
}
/*********************************************************************/
uint8 bcd_to_dec(uint8 bcd){
	uint8 tens = (bcd >> 4) * 10 ;
     efa:	48 2f       	mov	r20, r24
     efc:	42 95       	swap	r20
     efe:	4f 70       	andi	r20, 0x0F	; 15
     f00:	9a e0       	ldi	r25, 0x0A	; 10
     f02:	49 9f       	mul	r20, r25
     f04:	40 2d       	mov	r20, r0
     f06:	11 24       	eor	r1, r1
	}
	I2C_Stop();

	//writing the thousand index 2 in 2023
	number_write(2,62,2);
	triple_digit_write(2, 69, bcd_to_dec(DATE_HOLDER_NEW.year));
     f08:	8f 70       	andi	r24, 0x0F	; 15
     f0a:	48 0f       	add	r20, r24
     f0c:	82 e0       	ldi	r24, 0x02	; 2
     f0e:	65 e4       	ldi	r22, 0x45	; 69
     f10:	50 e0       	ldi	r21, 0x00	; 0
     f12:	0e 94 be 04 	call	0x97c	; 0x97c <triple_digit_write>

	//printing the day
	day_name_print(DATE_HOLDER_NEW.day - 1 , days);
     f16:	8d 81       	ldd	r24, Y+5	; 0x05
     f18:	81 50       	subi	r24, 0x01	; 1
     f1a:	6b e6       	ldi	r22, 0x6B	; 107
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <day_name_print>
	}
	return 1 ;
}
/*********************************************************************/
uint8 bcd_to_dec(uint8 bcd){
	uint8 tens = (bcd >> 4) * 10 ;
     f22:	0a e0       	ldi	r16, 0x0A	; 10
     f24:	a0 2e       	mov	r10, r16



	uint8 which_button = 0 ;
	do{
		which_button = button_check();
     f26:	0e 94 18 05 	call	0xa30	; 0xa30 <button_check>
     f2a:	38 2e       	mov	r3, r24

		//now checking and reading time
		RTC_CLOCK_Read(0x00,&CLOCK_HOLDER_NEW);
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	be 01       	movw	r22, r28
     f30:	6f 5f       	subi	r22, 0xFF	; 255
     f32:	7f 4f       	sbci	r23, 0xFF	; 255
     f34:	0e 94 25 14 	call	0x284a	; 0x284a <RTC_CLOCK_Read>
		if(CLOCK_HOLDER_NEW.hours != CLOCK_HOLDER_OLD.hours){
     f38:	cb 80       	ldd	r12, Y+3	; 0x03
     f3a:	cb 14       	cp	r12, r11
     f3c:	81 f0       	breq	.+32     	; 0xf5e <live_clock+0x2b4>
			CLOCK_HOLDER_NEW.hours &= 0b00011111 ;
     f3e:	8f e1       	ldi	r24, 0x1F	; 31
     f40:	c8 22       	and	r12, r24
     f42:	cb 82       	std	Y+3, r12	; 0x03
	}
	return 1 ;
}
/*********************************************************************/
uint8 bcd_to_dec(uint8 bcd){
	uint8 tens = (bcd >> 4) * 10 ;
     f44:	4c 2d       	mov	r20, r12
     f46:	42 95       	swap	r20
     f48:	4f 70       	andi	r20, 0x0F	; 15
     f4a:	4a 9d       	mul	r20, r10
     f4c:	40 2d       	mov	r20, r0
     f4e:	11 24       	eor	r1, r1
		//now checking and reading time
		RTC_CLOCK_Read(0x00,&CLOCK_HOLDER_NEW);
		if(CLOCK_HOLDER_NEW.hours != CLOCK_HOLDER_OLD.hours){
			CLOCK_HOLDER_NEW.hours &= 0b00011111 ;
			CLOCK_HOLDER_OLD.hours = CLOCK_HOLDER_NEW.hours;
			double_digit_write(5, 41, bcd_to_dec(CLOCK_HOLDER_OLD.hours));
     f50:	8c 2d       	mov	r24, r12
     f52:	8f 70       	andi	r24, 0x0F	; 15
     f54:	48 0f       	add	r20, r24
     f56:	85 e0       	ldi	r24, 0x05	; 5
     f58:	69 e2       	ldi	r22, 0x29	; 41
     f5a:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
		}

		if(CLOCK_HOLDER_NEW.minutes != CLOCK_HOLDER_OLD.minutes){
     f5e:	ba 80       	ldd	r11, Y+2	; 0x02
     f60:	b2 14       	cp	r11, r2
     f62:	69 f0       	breq	.+26     	; 0xf7e <live_clock+0x2d4>
	}
	return 1 ;
}
/*********************************************************************/
uint8 bcd_to_dec(uint8 bcd){
	uint8 tens = (bcd >> 4) * 10 ;
     f64:	4b 2d       	mov	r20, r11
     f66:	42 95       	swap	r20
     f68:	4f 70       	andi	r20, 0x0F	; 15
     f6a:	4a 9d       	mul	r20, r10
     f6c:	40 2d       	mov	r20, r0
     f6e:	11 24       	eor	r1, r1
			double_digit_write(5, 41, bcd_to_dec(CLOCK_HOLDER_OLD.hours));
		}

		if(CLOCK_HOLDER_NEW.minutes != CLOCK_HOLDER_OLD.minutes){
			CLOCK_HOLDER_OLD.minutes = CLOCK_HOLDER_NEW.minutes ;
			double_digit_write(5, 62, bcd_to_dec(CLOCK_HOLDER_OLD.minutes));
     f70:	8b 2d       	mov	r24, r11
     f72:	8f 70       	andi	r24, 0x0F	; 15
     f74:	48 0f       	add	r20, r24
     f76:	85 e0       	ldi	r24, 0x05	; 5
     f78:	6e e3       	ldi	r22, 0x3E	; 62
     f7a:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
		}

		if(CLOCK_HOLDER_NEW.am_pm != CLOCK_HOLDER_OLD.am_pm){
     f7e:	1c 81       	ldd	r17, Y+4	; 0x04
     f80:	14 15       	cp	r17, r4
     f82:	c9 f0       	breq	.+50     	; 0xfb6 <live_clock+0x30c>
			CLOCK_HOLDER_OLD.am_pm = CLOCK_HOLDER_NEW.am_pm ;
			//writing pm or am
			if(CLOCK_HOLDER_OLD.am_pm){
     f84:	11 23       	and	r17, r17
     f86:	61 f0       	breq	.+24     	; 0xfa0 <live_clock+0x2f6>
				//this means that we are pm
				letter_write(5,76,15);
     f88:	85 e0       	ldi	r24, 0x05	; 5
     f8a:	6c e4       	ldi	r22, 0x4C	; 76
     f8c:	4f e0       	ldi	r20, 0x0F	; 15
     f8e:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
				letter_write(5,83,12);
     f92:	85 e0       	ldi	r24, 0x05	; 5
     f94:	63 e5       	ldi	r22, 0x53	; 83
     f96:	4c e0       	ldi	r20, 0x0C	; 12
     f98:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
     f9c:	41 2e       	mov	r4, r17
     f9e:	0b c0       	rjmp	.+22     	; 0xfb6 <live_clock+0x30c>
			}else if(CLOCK_HOLDER_OLD.am_pm == 0){
				letter_write(5,76,0);
     fa0:	85 e0       	ldi	r24, 0x05	; 5
     fa2:	6c e4       	ldi	r22, 0x4C	; 76
     fa4:	40 e0       	ldi	r20, 0x00	; 0
     fa6:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
				letter_write(5,83,12);
     faa:	85 e0       	ldi	r24, 0x05	; 5
     fac:	63 e5       	ldi	r22, 0x53	; 83
     fae:	4c e0       	ldi	r20, 0x0C	; 12
     fb0:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
     fb4:	44 24       	eor	r4, r4
		}



		//now checking and reading date
		RTC_DATE_Read(0x03,&DATE_HOLDER_NEW);
     fb6:	83 e0       	ldi	r24, 0x03	; 3
     fb8:	be 01       	movw	r22, r28
     fba:	6b 5f       	subi	r22, 0xFB	; 251
     fbc:	7f 4f       	sbci	r23, 0xFF	; 255
     fbe:	0e 94 fd 13 	call	0x27fa	; 0x27fa <RTC_DATE_Read>

		if(DATE_HOLDER_NEW.date != DATE_HOLDER_OLD.date){
     fc2:	de 80       	ldd	r13, Y+6	; 0x06
     fc4:	d7 14       	cp	r13, r7
     fc6:	21 f4       	brne	.+8      	; 0xfd0 <live_clock+0x326>
     fc8:	f5 2c       	mov	r15, r5
     fca:	84 01       	movw	r16, r8
     fcc:	e6 2c       	mov	r14, r6
     fce:	3a c0       	rjmp	.+116    	; 0x1044 <live_clock+0x39a>
	}
	return 1 ;
}
/*********************************************************************/
uint8 bcd_to_dec(uint8 bcd){
	uint8 tens = (bcd >> 4) * 10 ;
     fd0:	4d 2d       	mov	r20, r13
     fd2:	42 95       	swap	r20
     fd4:	4f 70       	andi	r20, 0x0F	; 15
     fd6:	4a 9d       	mul	r20, r10
     fd8:	40 2d       	mov	r20, r0
     fda:	11 24       	eor	r1, r1
		//now checking and reading date
		RTC_DATE_Read(0x03,&DATE_HOLDER_NEW);

		if(DATE_HOLDER_NEW.date != DATE_HOLDER_OLD.date){
			DATE_HOLDER_OLD.date = DATE_HOLDER_NEW.date ;
			double_digit_write(2,20,bcd_to_dec(DATE_HOLDER_NEW.date));
     fdc:	8d 2d       	mov	r24, r13
     fde:	8f 70       	andi	r24, 0x0F	; 15
     fe0:	48 0f       	add	r20, r24
     fe2:	82 e0       	ldi	r24, 0x02	; 2
     fe4:	64 e1       	ldi	r22, 0x14	; 20
     fe6:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>

			if(DATE_HOLDER_NEW.month != DATE_HOLDER_OLD.month){
     fea:	ef 80       	ldd	r14, Y+7	; 0x07
     fec:	e6 14       	cp	r14, r6
     fee:	69 f0       	breq	.+26     	; 0x100a <live_clock+0x360>
	}
	return 1 ;
}
/*********************************************************************/
uint8 bcd_to_dec(uint8 bcd){
	uint8 tens = (bcd >> 4) * 10 ;
     ff0:	4e 2d       	mov	r20, r14
     ff2:	42 95       	swap	r20
     ff4:	4f 70       	andi	r20, 0x0F	; 15
     ff6:	4a 9d       	mul	r20, r10
     ff8:	40 2d       	mov	r20, r0
     ffa:	11 24       	eor	r1, r1
			DATE_HOLDER_OLD.date = DATE_HOLDER_NEW.date ;
			double_digit_write(2,20,bcd_to_dec(DATE_HOLDER_NEW.date));

			if(DATE_HOLDER_NEW.month != DATE_HOLDER_OLD.month){
				DATE_HOLDER_OLD.month = DATE_HOLDER_NEW.month ;
				double_digit_write(2, 41, bcd_to_dec(DATE_HOLDER_NEW.month));
     ffc:	8e 2d       	mov	r24, r14
     ffe:	8f 70       	andi	r24, 0x0F	; 15
    1000:	48 0f       	add	r20, r24
    1002:	82 e0       	ldi	r24, 0x02	; 2
    1004:	69 e2       	ldi	r22, 0x29	; 41
    1006:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
			}

			if(DATE_HOLDER_NEW.year != DATE_HOLDER_OLD.year){
    100a:	08 85       	ldd	r16, Y+8	; 0x08
    100c:	19 85       	ldd	r17, Y+9	; 0x09
    100e:	08 15       	cp	r16, r8
    1010:	19 05       	cpc	r17, r9
    1012:	71 f0       	breq	.+28     	; 0x1030 <live_clock+0x386>
				DATE_HOLDER_OLD.year = DATE_HOLDER_NEW.year ;
				triple_digit_write(2, 69, bcd_to_dec(DATE_HOLDER_NEW.year));
    1014:	80 2f       	mov	r24, r16
	}
	return 1 ;
}
/*********************************************************************/
uint8 bcd_to_dec(uint8 bcd){
	uint8 tens = (bcd >> 4) * 10 ;
    1016:	40 2f       	mov	r20, r16
    1018:	42 95       	swap	r20
    101a:	4f 70       	andi	r20, 0x0F	; 15
    101c:	4a 9d       	mul	r20, r10
    101e:	40 2d       	mov	r20, r0
    1020:	11 24       	eor	r1, r1
				double_digit_write(2, 41, bcd_to_dec(DATE_HOLDER_NEW.month));
			}

			if(DATE_HOLDER_NEW.year != DATE_HOLDER_OLD.year){
				DATE_HOLDER_OLD.year = DATE_HOLDER_NEW.year ;
				triple_digit_write(2, 69, bcd_to_dec(DATE_HOLDER_NEW.year));
    1022:	8f 70       	andi	r24, 0x0F	; 15
    1024:	48 0f       	add	r20, r24
    1026:	82 e0       	ldi	r24, 0x02	; 2
    1028:	65 e4       	ldi	r22, 0x45	; 69
    102a:	50 e0       	ldi	r21, 0x00	; 0
    102c:	0e 94 be 04 	call	0x97c	; 0x97c <triple_digit_write>
			}

			if(DATE_HOLDER_NEW.day != DATE_HOLDER_OLD.day){
    1030:	fd 80       	ldd	r15, Y+5	; 0x05
    1032:	f5 14       	cp	r15, r5
    1034:	31 f0       	breq	.+12     	; 0x1042 <live_clock+0x398>
				DATE_HOLDER_OLD.day = DATE_HOLDER_NEW.day ;
				day_name_print(DATE_HOLDER_NEW.day - 1 , days);
    1036:	8f 2d       	mov	r24, r15
    1038:	81 50       	subi	r24, 0x01	; 1
    103a:	6b e6       	ldi	r22, 0x6B	; 107
    103c:	70 e0       	ldi	r23, 0x00	; 0
    103e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <day_name_print>
    1042:	7d 2c       	mov	r7, r13
			}

		}

	}while(which_button != 5);
    1044:	e5 e0       	ldi	r30, 0x05	; 5
    1046:	3e 16       	cp	r3, r30
    1048:	31 f0       	breq	.+12     	; 0x1056 <live_clock+0x3ac>
    104a:	2b 2c       	mov	r2, r11
    104c:	bc 2c       	mov	r11, r12
    104e:	5f 2c       	mov	r5, r15
    1050:	48 01       	movw	r8, r16
    1052:	6e 2c       	mov	r6, r14
    1054:	68 cf       	rjmp	.-304    	; 0xf26 <live_clock+0x27c>

	return 1;

}
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	29 96       	adiw	r28, 0x09	; 9
    105a:	0f b6       	in	r0, 0x3f	; 63
    105c:	f8 94       	cli
    105e:	de bf       	out	0x3e, r29	; 62
    1060:	0f be       	out	0x3f, r0	; 63
    1062:	cd bf       	out	0x3d, r28	; 61
    1064:	cf 91       	pop	r28
    1066:	df 91       	pop	r29
    1068:	1f 91       	pop	r17
    106a:	0f 91       	pop	r16
    106c:	ff 90       	pop	r15
    106e:	ef 90       	pop	r14
    1070:	df 90       	pop	r13
    1072:	cf 90       	pop	r12
    1074:	bf 90       	pop	r11
    1076:	af 90       	pop	r10
    1078:	9f 90       	pop	r9
    107a:	8f 90       	pop	r8
    107c:	7f 90       	pop	r7
    107e:	6f 90       	pop	r6
    1080:	5f 90       	pop	r5
    1082:	4f 90       	pop	r4
    1084:	3f 90       	pop	r3
    1086:	2f 90       	pop	r2
    1088:	08 95       	ret

0000108a <main_menu>:
		status = 0;
	}
}
/*********************************************************************/

uint8 main_menu(void){
    108a:	0f 93       	push	r16
    108c:	1f 93       	push	r17

	printing_menu_with_choice();
    108e:	0e 94 88 03 	call	0x710	; 0x710 <printing_menu_with_choice>
    1092:	11 e0       	ldi	r17, 0x01	; 1
	//now we want to take the buttons input
	uint8 which_button = 0 ;
	uint8 menu_tracker = 1 ; //this means that we will land on the first option on the main menu.
	do{
		which_button = 0 ;
		which_button = button_check();
    1094:	0e 94 18 05 	call	0xa30	; 0xa30 <button_check>

		if(which_button == 3){//here which_button == 3 (we will deal with it as UP direction).
    1098:	83 30       	cpi	r24, 0x03	; 3
    109a:	69 f4       	brne	.+26     	; 0x10b6 <main_menu+0x2c>
			if(menu_tracker == 1){
    109c:	11 30       	cpi	r17, 0x01	; 1
    109e:	41 f4       	brne	.+16     	; 0x10b0 <main_menu+0x26>
				menu_tracker = 3 ;
				color_choice_black(1);
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	0e 94 c6 01 	call	0x38c	; 0x38c <color_choice_black>
				color_choice_white(3);
    10a6:	83 e0       	ldi	r24, 0x03	; 3
    10a8:	0e 94 1a 01 	call	0x234	; 0x234 <color_choice_white>
    10ac:	13 e0       	ldi	r17, 0x03	; 3
    10ae:	f2 cf       	rjmp	.-28     	; 0x1094 <main_menu+0xa>
			}else{
				//working fine
				menu_tracker-- ;
    10b0:	01 2f       	mov	r16, r17
    10b2:	01 50       	subi	r16, 0x01	; 1
    10b4:	0d c0       	rjmp	.+26     	; 0x10d0 <main_menu+0x46>
				color_choice_black(menu_tracker+1);
				color_choice_white(menu_tracker);
			}
		}else if(which_button == 4){// here which_button == 4 (we will deal with it as DOWN Direction).
    10b6:	84 30       	cpi	r24, 0x04	; 4
    10b8:	99 f4       	brne	.+38     	; 0x10e0 <main_menu+0x56>
			if(menu_tracker == 3){
    10ba:	13 30       	cpi	r17, 0x03	; 3
    10bc:	39 f4       	brne	.+14     	; 0x10cc <main_menu+0x42>
				menu_tracker = 1 ;
				color_choice_black(3);
    10be:	83 e0       	ldi	r24, 0x03	; 3
    10c0:	0e 94 c6 01 	call	0x38c	; 0x38c <color_choice_black>
				color_choice_white(1);
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	0e 94 1a 01 	call	0x234	; 0x234 <color_choice_white>
    10ca:	e3 cf       	rjmp	.-58     	; 0x1092 <main_menu+0x8>
			}else{
				//working fine
				menu_tracker++ ;
    10cc:	01 2f       	mov	r16, r17
    10ce:	0f 5f       	subi	r16, 0xFF	; 255
				color_choice_black(menu_tracker-1);
    10d0:	81 2f       	mov	r24, r17
    10d2:	0e 94 c6 01 	call	0x38c	; 0x38c <color_choice_black>
				color_choice_white(menu_tracker);
    10d6:	80 2f       	mov	r24, r16
    10d8:	0e 94 1a 01 	call	0x234	; 0x234 <color_choice_white>
	if(menu_tracker == 1){
		study_timer();
	}else if(menu_tracker == 2){
		live_clock();
	}else if(menu_tracker == 3){
		lamp_on_off();
    10dc:	10 2f       	mov	r17, r16
    10de:	da cf       	rjmp	.-76     	; 0x1094 <main_menu+0xa>
				menu_tracker++ ;
				color_choice_black(menu_tracker-1);
				color_choice_white(menu_tracker);
			}
		}
	}while(which_button != 5);
    10e0:	85 30       	cpi	r24, 0x05	; 5
    10e2:	c1 f6       	brne	.-80     	; 0x1094 <main_menu+0xa>
	//if "menu_tracker" ----> 1 , We will call study_timer function.
	//if "menu_tracker" ----> 2 , We will call clock function.
	//if "menu_tracker" ----> 3 , We will call Lamp ON/OFF function.


	if(menu_tracker == 1){
    10e4:	11 30       	cpi	r17, 0x01	; 1
    10e6:	19 f4       	brne	.+6      	; 0x10ee <main_menu+0x64>
		study_timer();
    10e8:	0e 94 56 05 	call	0xaac	; 0xaac <study_timer>
    10ec:	09 c0       	rjmp	.+18     	; 0x1100 <main_menu+0x76>
	}else if(menu_tracker == 2){
    10ee:	12 30       	cpi	r17, 0x02	; 2
    10f0:	19 f4       	brne	.+6      	; 0x10f8 <main_menu+0x6e>
		live_clock();
    10f2:	0e 94 55 06 	call	0xcaa	; 0xcaa <live_clock>
    10f6:	04 c0       	rjmp	.+8      	; 0x1100 <main_menu+0x76>
	}else if(menu_tracker == 3){
    10f8:	13 30       	cpi	r17, 0x03	; 3
    10fa:	11 f4       	brne	.+4      	; 0x1100 <main_menu+0x76>
		lamp_on_off();
    10fc:	0e 94 bf 00 	call	0x17e	; 0x17e <lamp_on_off>
	}

	return 1 ;

}
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	1f 91       	pop	r17
    1104:	0f 91       	pop	r16
    1106:	08 95       	ret

00001108 <time_menu>:
		}
		I2C_Stop();
	}
}
/*******************************************************************/
uint8 time_menu(void){
    1108:	8f 92       	push	r8
    110a:	9f 92       	push	r9
    110c:	af 92       	push	r10
    110e:	bf 92       	push	r11
    1110:	cf 92       	push	r12
    1112:	df 92       	push	r13
    1114:	ef 92       	push	r14
    1116:	ff 92       	push	r15
    1118:	0f 93       	push	r16
    111a:	1f 93       	push	r17
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
    1124:	69 97       	sbiw	r28, 0x19	; 25
    1126:	0f b6       	in	r0, 0x3f	; 63
    1128:	f8 94       	cli
    112a:	de bf       	out	0x3e, r29	; 62
    112c:	0f be       	out	0x3f, r0	; 63
    112e:	cd bf       	out	0x3d, r28	; 61

	//WE WANT TO BLACK OUT THE ENTIRE SCREEN

	black_entire_screen();
    1130:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <black_entire_screen>

	//"adjust time" prompt letters array.
	uint8 adjust_time_arr[10] = {0,3,9,20,18,19,19,8,12,4};
    1134:	de 01       	movw	r26, r28
    1136:	11 96       	adiw	r26, 0x01	; 1
    1138:	e0 ec       	ldi	r30, 0xC0	; 192
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	8a e0       	ldi	r24, 0x0A	; 10
    113e:	01 90       	ld	r0, Z+
    1140:	0d 92       	st	X+, r0
    1142:	81 50       	subi	r24, 0x01	; 1
    1144:	e1 f7       	brne	.-8      	; 0x113e <time_menu+0x36>
    1146:	7e 01       	movw	r14, r28
    1148:	08 94       	sec
    114a:	e1 1c       	adc	r14, r1
    114c:	f1 1c       	adc	r15, r1
    114e:	87 01       	movw	r16, r14
    1150:	94 e1       	ldi	r25, 0x14	; 20

	uint8 starting_col = 20 ;
	for(uint8 letter_index = 0 ; letter_index < 10 ; letter_index++){
    1152:	bb e0       	ldi	r27, 0x0B	; 11
    1154:	cb 2e       	mov	r12, r27
    1156:	d1 2c       	mov	r13, r1
    1158:	cc 0e       	add	r12, r28
    115a:	dd 1e       	adc	r13, r29


		if(letter_index == 6){
    115c:	80 2f       	mov	r24, r16
    115e:	8e 19       	sub	r24, r14
    1160:	86 30       	cpi	r24, 0x06	; 6
    1162:	11 f4       	brne	.+4      	; 0x1168 <time_menu+0x60>
			starting_col += 14;
    1164:	92 5f       	subi	r25, 0xF2	; 242
    1166:	01 c0       	rjmp	.+2      	; 0x116a <time_menu+0x62>
		}else{
			starting_col += 7;
    1168:	99 5f       	subi	r25, 0xF9	; 249
		}

		letter_write(7,starting_col,adjust_time_arr[letter_index]);
    116a:	87 e0       	ldi	r24, 0x07	; 7
    116c:	69 2f       	mov	r22, r25
    116e:	f8 01       	movw	r30, r16
    1170:	41 91       	ld	r20, Z+
    1172:	8f 01       	movw	r16, r30
    1174:	99 8f       	std	Y+25, r25	; 0x19
    1176:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>

	//"adjust time" prompt letters array.
	uint8 adjust_time_arr[10] = {0,3,9,20,18,19,19,8,12,4};

	uint8 starting_col = 20 ;
	for(uint8 letter_index = 0 ; letter_index < 10 ; letter_index++){
    117a:	99 8d       	ldd	r25, Y+25	; 0x19
    117c:	0c 15       	cp	r16, r12
    117e:	1d 05       	cpc	r17, r13
    1180:	69 f7       	brne	.-38     	; 0x115c <time_menu+0x54>

	/************************************************************/
	//Printing time 00:00 AM

	//Printing 00
	number_write(5,41,0);
    1182:	85 e0       	ldi	r24, 0x05	; 5
    1184:	69 e2       	ldi	r22, 0x29	; 41
    1186:	40 e0       	ldi	r20, 0x00	; 0
    1188:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
	number_write(5,48,1);
    118c:	85 e0       	ldi	r24, 0x05	; 5
    118e:	60 e3       	ldi	r22, 0x30	; 48
    1190:	41 e0       	ldi	r20, 0x01	; 1
    1192:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>

	//Printing :
	setColumnAddress(55,128);
    1196:	87 e3       	ldi	r24, 0x37	; 55
    1198:	60 e8       	ldi	r22, 0x80	; 128
    119a:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <setColumnAddress>
	setPageAddress(5,7);
    119e:	85 e0       	ldi	r24, 0x05	; 5
    11a0:	67 e0       	ldi	r22, 0x07	; 7
    11a2:	0e 94 3f 1b 	call	0x367e	; 0x367e <setPageAddress>
	I2C_Start(oled_write_address);
    11a6:	8a e7       	ldi	r24, 0x7A	; 122
    11a8:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
	I2C_Write(CONTROL_DATA);
    11ac:	80 e4       	ldi	r24, 0x40	; 64
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
    11b4:	00 e8       	ldi	r16, 0x80	; 128
    11b6:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8 i = 0 ; i < 7 ;i++){
		I2C_Write(double_dot_bitmap[i]);
    11b8:	f8 01       	movw	r30, r16
    11ba:	81 91       	ld	r24, Z+
    11bc:	8f 01       	movw	r16, r30
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
	//Printing :
	setColumnAddress(55,128);
	setPageAddress(5,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(uint8 i = 0 ; i < 7 ;i++){
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	07 38       	cpi	r16, 0x87	; 135
    11c8:	1f 07       	cpc	r17, r31
    11ca:	b1 f7       	brne	.-20     	; 0x11b8 <time_menu+0xb0>
		I2C_Write(double_dot_bitmap[i]);
	}
	I2C_Stop();
    11cc:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>

	setColumnAddress(55,128);
    11d0:	87 e3       	ldi	r24, 0x37	; 55
    11d2:	60 e8       	ldi	r22, 0x80	; 128
    11d4:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <setColumnAddress>
	setPageAddress(4,7);
    11d8:	84 e0       	ldi	r24, 0x04	; 4
    11da:	67 e0       	ldi	r22, 0x07	; 7
    11dc:	0e 94 3f 1b 	call	0x367e	; 0x367e <setPageAddress>
	I2C_Start(oled_write_address);
    11e0:	8a e7       	ldi	r24, 0x7A	; 122
    11e2:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
	I2C_Write(CONTROL_DATA);
    11e6:	80 e4       	ldi	r24, 0x40	; 64
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
	for(uint8 i = 7 ; i < 14 ; i++){
		I2C_Write(double_dot_bitmap[i]);
    11ee:	f8 01       	movw	r30, r16
    11f0:	81 91       	ld	r24, Z+
    11f2:	8f 01       	movw	r16, r30
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>

	setColumnAddress(55,128);
	setPageAddress(4,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(uint8 i = 7 ; i < 14 ; i++){
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	0e 38       	cpi	r16, 0x8E	; 142
    11fe:	1f 07       	cpc	r17, r31
    1200:	b1 f7       	brne	.-20     	; 0x11ee <time_menu+0xe6>
		I2C_Write(double_dot_bitmap[i]);
	}
	I2C_Stop();
    1202:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>

	//Printing 00
	number_write(5,62,0);
    1206:	85 e0       	ldi	r24, 0x05	; 5
    1208:	6e e3       	ldi	r22, 0x3E	; 62
    120a:	40 e0       	ldi	r20, 0x00	; 0
    120c:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
	number_write(5,69,0);
    1210:	85 e0       	ldi	r24, 0x05	; 5
    1212:	65 e4       	ldi	r22, 0x45	; 69
    1214:	40 e0       	ldi	r20, 0x00	; 0
    1216:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>

	//Printing AM
	letter_write(5,76,0);
    121a:	85 e0       	ldi	r24, 0x05	; 5
    121c:	6c e4       	ldi	r22, 0x4C	; 76
    121e:	40 e0       	ldi	r20, 0x00	; 0
    1220:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(5,83,12);
    1224:	85 e0       	ldi	r24, 0x05	; 5
    1226:	63 e5       	ldi	r22, 0x53	; 83
    1228:	4c e0       	ldi	r20, 0x0C	; 12
    122a:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>

	/************************************************************/
	//Printing 28-12-2023 SUN

	//Printing 28
	number_write(2,20,2);
    122e:	82 e0       	ldi	r24, 0x02	; 2
    1230:	64 e1       	ldi	r22, 0x14	; 20
    1232:	42 e0       	ldi	r20, 0x02	; 2
    1234:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
	number_write(2,27,8);
    1238:	82 e0       	ldi	r24, 0x02	; 2
    123a:	6b e1       	ldi	r22, 0x1B	; 27
    123c:	48 e0       	ldi	r20, 0x08	; 8
    123e:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>

	uint8 dash_bitmap[14] = {0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    1242:	de 01       	movw	r26, r28
    1244:	1b 96       	adiw	r26, 0x0b	; 11
    1246:	e2 eb       	ldi	r30, 0xB2	; 178
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	8e e0       	ldi	r24, 0x0E	; 14
    124c:	01 90       	ld	r0, Z+
    124e:	0d 92       	st	X+, r0
    1250:	81 50       	subi	r24, 0x01	; 1
    1252:	e1 f7       	brne	.-8      	; 0x124c <time_menu+0x144>
	//Printing -
	setColumnAddress(34,128);
    1254:	82 e2       	ldi	r24, 0x22	; 34
    1256:	60 e8       	ldi	r22, 0x80	; 128
    1258:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <setColumnAddress>
	setPageAddress(2,7);
    125c:	82 e0       	ldi	r24, 0x02	; 2
    125e:	67 e0       	ldi	r22, 0x07	; 7
    1260:	0e 94 3f 1b 	call	0x367e	; 0x367e <setPageAddress>
	I2C_Start(oled_write_address);
    1264:	8a e7       	ldi	r24, 0x7A	; 122
    1266:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
	I2C_Write(CONTROL_DATA);
    126a:	80 e4       	ldi	r24, 0x40	; 64
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
    1272:	ab e0       	ldi	r26, 0x0B	; 11
    1274:	ca 2e       	mov	r12, r26
    1276:	d1 2c       	mov	r13, r1
    1278:	cc 0e       	add	r12, r28
    127a:	dd 1e       	adc	r13, r29
    127c:	86 01       	movw	r16, r12
	for(uint8 i = 0 ; i < 7 ;i++){
    127e:	f2 e1       	ldi	r31, 0x12	; 18
    1280:	ef 2e       	mov	r14, r31
    1282:	f1 2c       	mov	r15, r1
    1284:	ec 0e       	add	r14, r28
    1286:	fd 1e       	adc	r15, r29
		I2C_Write(dash_bitmap[i]);
    1288:	f8 01       	movw	r30, r16
    128a:	81 91       	ld	r24, Z+
    128c:	8f 01       	movw	r16, r30
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
	//Printing -
	setColumnAddress(34,128);
	setPageAddress(2,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(uint8 i = 0 ; i < 7 ;i++){
    1294:	0e 15       	cp	r16, r14
    1296:	1f 05       	cpc	r17, r15
    1298:	b9 f7       	brne	.-18     	; 0x1288 <time_menu+0x180>
		I2C_Write(dash_bitmap[i]);
	}
	I2C_Stop();
    129a:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>

	setColumnAddress(34,128);
    129e:	82 e2       	ldi	r24, 0x22	; 34
    12a0:	60 e8       	ldi	r22, 0x80	; 128
    12a2:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <setColumnAddress>
	setPageAddress(1,7);
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	67 e0       	ldi	r22, 0x07	; 7
    12aa:	0e 94 3f 1b 	call	0x367e	; 0x367e <setPageAddress>
	I2C_Start(oled_write_address);
    12ae:	8a e7       	ldi	r24, 0x7A	; 122
    12b0:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
	I2C_Write(CONTROL_DATA);
    12b4:	80 e4       	ldi	r24, 0x40	; 64
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
    12bc:	e2 e1       	ldi	r30, 0x12	; 18
    12be:	8e 2e       	mov	r8, r30
    12c0:	91 2c       	mov	r9, r1
    12c2:	8c 0e       	add	r8, r28
    12c4:	9d 1e       	adc	r9, r29
    12c6:	78 01       	movw	r14, r16
	for(uint8 i = 7 ; i < 14 ; i++){
    12c8:	79 e1       	ldi	r23, 0x19	; 25
    12ca:	a7 2e       	mov	r10, r23
    12cc:	b1 2c       	mov	r11, r1
    12ce:	ac 0e       	add	r10, r28
    12d0:	bd 1e       	adc	r11, r29
		I2C_Write(dash_bitmap[i]);
    12d2:	f7 01       	movw	r30, r14
    12d4:	81 91       	ld	r24, Z+
    12d6:	7f 01       	movw	r14, r30
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>

	setColumnAddress(34,128);
	setPageAddress(1,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(uint8 i = 7 ; i < 14 ; i++){
    12de:	ea 14       	cp	r14, r10
    12e0:	fb 04       	cpc	r15, r11
    12e2:	b9 f7       	brne	.-18     	; 0x12d2 <time_menu+0x1ca>
		I2C_Write(dash_bitmap[i]);
	}
	I2C_Stop();
    12e4:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>

	//Printing 12
	number_write(2,41,1);
    12e8:	82 e0       	ldi	r24, 0x02	; 2
    12ea:	69 e2       	ldi	r22, 0x29	; 41
    12ec:	41 e0       	ldi	r20, 0x01	; 1
    12ee:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
	number_write(2,48,2);
    12f2:	82 e0       	ldi	r24, 0x02	; 2
    12f4:	60 e3       	ldi	r22, 0x30	; 48
    12f6:	42 e0       	ldi	r20, 0x02	; 2
    12f8:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>

	//Printing -
	setColumnAddress(55,128);
    12fc:	87 e3       	ldi	r24, 0x37	; 55
    12fe:	60 e8       	ldi	r22, 0x80	; 128
    1300:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <setColumnAddress>
	setPageAddress(2,7);
    1304:	82 e0       	ldi	r24, 0x02	; 2
    1306:	67 e0       	ldi	r22, 0x07	; 7
    1308:	0e 94 3f 1b 	call	0x367e	; 0x367e <setPageAddress>
	I2C_Start(oled_write_address);
    130c:	8a e7       	ldi	r24, 0x7A	; 122
    130e:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
	I2C_Write(CONTROL_DATA);
    1312:	80 e4       	ldi	r24, 0x40	; 64
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
	for(uint8 i = 0 ; i < 7 ;i++){
		I2C_Write(dash_bitmap[i]);
    131a:	f6 01       	movw	r30, r12
    131c:	81 91       	ld	r24, Z+
    131e:	6f 01       	movw	r12, r30
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
	//Printing -
	setColumnAddress(55,128);
	setPageAddress(2,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(uint8 i = 0 ; i < 7 ;i++){
    1326:	c0 16       	cp	r12, r16
    1328:	d1 06       	cpc	r13, r17
    132a:	b9 f7       	brne	.-18     	; 0x131a <time_menu+0x212>
		I2C_Write(dash_bitmap[i]);
	}
	I2C_Stop();
    132c:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>

	setColumnAddress(55,128);
    1330:	87 e3       	ldi	r24, 0x37	; 55
    1332:	60 e8       	ldi	r22, 0x80	; 128
    1334:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <setColumnAddress>
	setPageAddress(1,7);
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	67 e0       	ldi	r22, 0x07	; 7
    133c:	0e 94 3f 1b 	call	0x367e	; 0x367e <setPageAddress>
	I2C_Start(oled_write_address);
    1340:	8a e7       	ldi	r24, 0x7A	; 122
    1342:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
	I2C_Write(CONTROL_DATA);
    1346:	80 e4       	ldi	r24, 0x40	; 64
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
	for(uint8 i = 7 ; i < 14 ; i++){
		I2C_Write(dash_bitmap[i]);
    134e:	f4 01       	movw	r30, r8
    1350:	81 91       	ld	r24, Z+
    1352:	4f 01       	movw	r8, r30
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>

	setColumnAddress(55,128);
	setPageAddress(1,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(uint8 i = 7 ; i < 14 ; i++){
    135a:	8e 14       	cp	r8, r14
    135c:	9f 04       	cpc	r9, r15
    135e:	b9 f7       	brne	.-18     	; 0x134e <time_menu+0x246>
		I2C_Write(dash_bitmap[i]);
	}
	I2C_Stop();
    1360:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>

	//Printing 2023
	number_write(2,62,2);
    1364:	82 e0       	ldi	r24, 0x02	; 2
    1366:	6e e3       	ldi	r22, 0x3E	; 62
    1368:	42 e0       	ldi	r20, 0x02	; 2
    136a:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
	number_write(2,69,0);
    136e:	82 e0       	ldi	r24, 0x02	; 2
    1370:	65 e4       	ldi	r22, 0x45	; 69
    1372:	40 e0       	ldi	r20, 0x00	; 0
    1374:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
	number_write(2,76,2);
    1378:	82 e0       	ldi	r24, 0x02	; 2
    137a:	6c e4       	ldi	r22, 0x4C	; 76
    137c:	42 e0       	ldi	r20, 0x02	; 2
    137e:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
	number_write(2,83,3);
    1382:	82 e0       	ldi	r24, 0x02	; 2
    1384:	63 e5       	ldi	r22, 0x53	; 83
    1386:	43 e0       	ldi	r20, 0x03	; 3
    1388:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>

	//Printing THU ----> 6
	letter_write(2,97,19);
    138c:	82 e0       	ldi	r24, 0x02	; 2
    138e:	61 e6       	ldi	r22, 0x61	; 97
    1390:	43 e1       	ldi	r20, 0x13	; 19
    1392:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(2,104,7);
    1396:	82 e0       	ldi	r24, 0x02	; 2
    1398:	68 e6       	ldi	r22, 0x68	; 104
    139a:	47 e0       	ldi	r20, 0x07	; 7
    139c:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(2,111,20);
    13a0:	82 e0       	ldi	r24, 0x02	; 2
    13a2:	6f e6       	ldi	r22, 0x6F	; 111
    13a4:	44 e1       	ldi	r20, 0x14	; 20
    13a6:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
    13aa:	dd 24       	eor	r13, r13
	CLOCK_DATA clock_input ;
	DATE_DATA date_input ;


	for(uint8 num_of_inputs = 0 ; num_of_inputs < 7 ; num_of_inputs++){
		if(num_of_inputs == 0){/********************************************************/
    13ac:	dd 20       	and	r13, r13
    13ae:	09 f0       	breq	.+2      	; 0x13b2 <time_menu+0x2aa>
    13b0:	58 c0       	rjmp	.+176    	; 0x1462 <time_menu+0x35a>
			//this means that we are taking hours as an input.

			//for the underline
			setColumnAddress(41,55);
    13b2:	89 e2       	ldi	r24, 0x29	; 41
    13b4:	67 e3       	ldi	r22, 0x37	; 55
    13b6:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <setColumnAddress>
			setPageAddress(3,7);
    13ba:	83 e0       	ldi	r24, 0x03	; 3
    13bc:	67 e0       	ldi	r22, 0x07	; 7
    13be:	0e 94 3f 1b 	call	0x367e	; 0x367e <setPageAddress>
			I2C_Start(oled_write_address);
    13c2:	8a e7       	ldi	r24, 0x7A	; 122
    13c4:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
			I2C_Write(CONTROL_DATA);
    13c8:	80 e4       	ldi	r24, 0x40	; 64
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
    13d0:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8 i = 0 ; i < 14 ; i++){
				I2C_Write(0xC0);
    13d2:	80 ec       	ldi	r24, 0xC0	; 192
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
			//for the underline
			setColumnAddress(41,55);
			setPageAddress(3,7);
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 14 ; i++){
    13da:	1f 5f       	subi	r17, 0xFF	; 255
    13dc:	1e 30       	cpi	r17, 0x0E	; 14
    13de:	c9 f7       	brne	.-14     	; 0x13d2 <time_menu+0x2ca>
				I2C_Write(0xC0);
			}
			I2C_Stop();
    13e0:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>
    13e4:	01 e0       	ldi	r16, 0x01	; 1

			uint8 hours_tracker = 1 ;
			uint8 which_button = 0 ;
			do{
				which_button = 0 ;
				which_button = button_check();
    13e6:	0e 94 18 05 	call	0xa30	; 0xa30 <button_check>

				if(which_button == 3){
    13ea:	83 30       	cpi	r24, 0x03	; 3
    13ec:	59 f4       	brne	.+22     	; 0x1404 <time_menu+0x2fc>
					//this means that we pressed left
					//check if we stopping at letter a
					if(hours_tracker == 1){
    13ee:	01 30       	cpi	r16, 0x01	; 1
    13f0:	39 f4       	brne	.+14     	; 0x1400 <time_menu+0x2f8>
						hours_tracker = 12 ;
						double_digit_write(5,41,hours_tracker);
    13f2:	85 e0       	ldi	r24, 0x05	; 5
    13f4:	69 e2       	ldi	r22, 0x29	; 41
    13f6:	4c e0       	ldi	r20, 0x0C	; 12
    13f8:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
    13fc:	0c e0       	ldi	r16, 0x0C	; 12
    13fe:	f3 cf       	rjmp	.-26     	; 0x13e6 <time_menu+0x2de>
					}else{
						hours_tracker-- ;
    1400:	01 50       	subi	r16, 0x01	; 1
    1402:	0b c0       	rjmp	.+22     	; 0x141a <time_menu+0x312>
						double_digit_write(5,41,hours_tracker);
					}

				}else if(which_button == 4){
    1404:	84 30       	cpi	r24, 0x04	; 4
    1406:	79 f4       	brne	.+30     	; 0x1426 <time_menu+0x31e>
					//this means that we pressed right
					//check if we stopping at letter z
					if(hours_tracker == 12){
    1408:	0c 30       	cpi	r16, 0x0C	; 12
    140a:	31 f4       	brne	.+12     	; 0x1418 <time_menu+0x310>
						hours_tracker = 1 ;
						double_digit_write(5,41,hours_tracker);
    140c:	85 e0       	ldi	r24, 0x05	; 5
    140e:	69 e2       	ldi	r22, 0x29	; 41
    1410:	41 e0       	ldi	r20, 0x01	; 1
    1412:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
    1416:	e6 cf       	rjmp	.-52     	; 0x13e4 <time_menu+0x2dc>
					}else{
						hours_tracker++ ;
    1418:	0f 5f       	subi	r16, 0xFF	; 255
						double_digit_write(5,41,hours_tracker);
    141a:	85 e0       	ldi	r24, 0x05	; 5
    141c:	69 e2       	ldi	r22, 0x29	; 41
    141e:	40 2f       	mov	r20, r16
    1420:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
    1424:	e0 cf       	rjmp	.-64     	; 0x13e6 <time_menu+0x2de>
					}
				}

			}while(which_button != 5);
    1426:	85 30       	cpi	r24, 0x05	; 5
    1428:	f1 f6       	brne	.-68     	; 0x13e6 <time_menu+0x2de>
			//Storing hours in our struct for later rtc modification.
			clock_input.hours = dec_to_bcd(hours_tracker);

			//for clearing underline
			setColumnAddress(41,55);
    142a:	89 e2       	ldi	r24, 0x29	; 41
    142c:	67 e3       	ldi	r22, 0x37	; 55
    142e:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <setColumnAddress>
			setPageAddress(3,7);
    1432:	83 e0       	ldi	r24, 0x03	; 3
    1434:	67 e0       	ldi	r22, 0x07	; 7
    1436:	0e 94 3f 1b 	call	0x367e	; 0x367e <setPageAddress>
			I2C_Start(oled_write_address);
    143a:	8a e7       	ldi	r24, 0x7A	; 122
    143c:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
			I2C_Write(CONTROL_DATA);
    1440:	80 e4       	ldi	r24, 0x40	; 64
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
    1448:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8 i = 0 ; i < 14 ; i++){
				I2C_Write(0x00);
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
			//for clearing underline
			setColumnAddress(41,55);
			setPageAddress(3,7);
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 14 ; i++){
    1452:	1f 5f       	subi	r17, 0xFF	; 255
    1454:	1e 30       	cpi	r17, 0x0E	; 14
    1456:	c9 f7       	brne	.-14     	; 0x144a <time_menu+0x342>
					}
				}

			}while(which_button != 5);
			//Storing hours in our struct for later rtc modification.
			clock_input.hours = dec_to_bcd(hours_tracker);
    1458:	80 2f       	mov	r24, r16
    145a:	0e 94 a4 00 	call	0x148	; 0x148 <dec_to_bcd>
    145e:	b8 2e       	mov	r11, r24
    1460:	5b c0       	rjmp	.+182    	; 0x1518 <time_menu+0x410>
			for(uint8 i = 0 ; i < 14 ; i++){
				I2C_Write(0x00);
			}
			I2C_Stop();

		}else if(num_of_inputs == 1){/********************************************************/
    1462:	f1 e0       	ldi	r31, 0x01	; 1
    1464:	df 16       	cp	r13, r31
    1466:	09 f0       	breq	.+2      	; 0x146a <time_menu+0x362>
    1468:	5a c0       	rjmp	.+180    	; 0x151e <time_menu+0x416>
			//we are adjusting minutes.

			//for the underline
			setColumnAddress(62,76);
    146a:	8e e3       	ldi	r24, 0x3E	; 62
    146c:	6c e4       	ldi	r22, 0x4C	; 76
    146e:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <setColumnAddress>
			setPageAddress(3,7);
    1472:	83 e0       	ldi	r24, 0x03	; 3
    1474:	67 e0       	ldi	r22, 0x07	; 7
    1476:	0e 94 3f 1b 	call	0x367e	; 0x367e <setPageAddress>
			I2C_Start(oled_write_address);
    147a:	8a e7       	ldi	r24, 0x7A	; 122
    147c:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
			I2C_Write(CONTROL_DATA);
    1480:	80 e4       	ldi	r24, 0x40	; 64
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
    1488:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8 i = 0 ; i < 14 ; i++){
				I2C_Write(0xC0);
    148a:	80 ec       	ldi	r24, 0xC0	; 192
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
			//for the underline
			setColumnAddress(62,76);
			setPageAddress(3,7);
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 14 ; i++){
    1492:	1f 5f       	subi	r17, 0xFF	; 255
    1494:	1e 30       	cpi	r17, 0x0E	; 14
    1496:	c9 f7       	brne	.-14     	; 0x148a <time_menu+0x382>
				I2C_Write(0xC0);
			}
			I2C_Stop();
    1498:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>
    149c:	00 e0       	ldi	r16, 0x00	; 0

			uint8 minutes_tracker = 0 ;
			uint8 which_button = 0 ;
			do{
				which_button = 0 ;
				which_button = button_check();
    149e:	0e 94 18 05 	call	0xa30	; 0xa30 <button_check>

				if(which_button == 3){
    14a2:	83 30       	cpi	r24, 0x03	; 3
    14a4:	59 f4       	brne	.+22     	; 0x14bc <time_menu+0x3b4>
					//this means that we pressed left
					//check if we stopping at letter a
					if(minutes_tracker == 0){
    14a6:	00 23       	and	r16, r16
    14a8:	39 f4       	brne	.+14     	; 0x14b8 <time_menu+0x3b0>
						minutes_tracker = 59 ;
						double_digit_write(5,62,minutes_tracker);
    14aa:	85 e0       	ldi	r24, 0x05	; 5
    14ac:	6e e3       	ldi	r22, 0x3E	; 62
    14ae:	4b e3       	ldi	r20, 0x3B	; 59
    14b0:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
    14b4:	0b e3       	ldi	r16, 0x3B	; 59
    14b6:	f3 cf       	rjmp	.-26     	; 0x149e <time_menu+0x396>
					}else{
						minutes_tracker-- ;
    14b8:	01 50       	subi	r16, 0x01	; 1
    14ba:	0b c0       	rjmp	.+22     	; 0x14d2 <time_menu+0x3ca>
						double_digit_write(5,62,minutes_tracker);
					}

				}else if(which_button == 4){
    14bc:	84 30       	cpi	r24, 0x04	; 4
    14be:	79 f4       	brne	.+30     	; 0x14de <time_menu+0x3d6>
					//this means that we pressed right
					//check if we stopping at letter z
					if(minutes_tracker == 59){
    14c0:	0b 33       	cpi	r16, 0x3B	; 59
    14c2:	31 f4       	brne	.+12     	; 0x14d0 <time_menu+0x3c8>
						minutes_tracker = 0 ;
						double_digit_write(5,62,minutes_tracker);
    14c4:	85 e0       	ldi	r24, 0x05	; 5
    14c6:	6e e3       	ldi	r22, 0x3E	; 62
    14c8:	40 e0       	ldi	r20, 0x00	; 0
    14ca:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
    14ce:	e6 cf       	rjmp	.-52     	; 0x149c <time_menu+0x394>
					}else{
						minutes_tracker++ ;
    14d0:	0f 5f       	subi	r16, 0xFF	; 255
						double_digit_write(5,62,minutes_tracker);
    14d2:	85 e0       	ldi	r24, 0x05	; 5
    14d4:	6e e3       	ldi	r22, 0x3E	; 62
    14d6:	40 2f       	mov	r20, r16
    14d8:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
    14dc:	e0 cf       	rjmp	.-64     	; 0x149e <time_menu+0x396>
					}
				}

			}while(which_button != 5);
    14de:	85 30       	cpi	r24, 0x05	; 5
    14e0:	f1 f6       	brne	.-68     	; 0x149e <time_menu+0x396>
			//Storing hours in our struct for later rtc modification.
			clock_input.minutes = dec_to_bcd(minutes_tracker);

			//for clearing underline
			setColumnAddress(62,76);
    14e2:	8e e3       	ldi	r24, 0x3E	; 62
    14e4:	6c e4       	ldi	r22, 0x4C	; 76
    14e6:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <setColumnAddress>
			setPageAddress(3,7);
    14ea:	83 e0       	ldi	r24, 0x03	; 3
    14ec:	67 e0       	ldi	r22, 0x07	; 7
    14ee:	0e 94 3f 1b 	call	0x367e	; 0x367e <setPageAddress>
			I2C_Start(oled_write_address);
    14f2:	8a e7       	ldi	r24, 0x7A	; 122
    14f4:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
			I2C_Write(CONTROL_DATA);
    14f8:	80 e4       	ldi	r24, 0x40	; 64
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
    1500:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8 i = 0 ; i < 14 ; i++){
				I2C_Write(0x00);
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
			//for clearing underline
			setColumnAddress(62,76);
			setPageAddress(3,7);
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 14 ; i++){
    150a:	1f 5f       	subi	r17, 0xFF	; 255
    150c:	1e 30       	cpi	r17, 0x0E	; 14
    150e:	c9 f7       	brne	.-14     	; 0x1502 <time_menu+0x3fa>
					}
				}

			}while(which_button != 5);
			//Storing hours in our struct for later rtc modification.
			clock_input.minutes = dec_to_bcd(minutes_tracker);
    1510:	80 2f       	mov	r24, r16
    1512:	0e 94 a4 00 	call	0x148	; 0x148 <dec_to_bcd>
    1516:	a8 2e       	mov	r10, r24
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 14 ; i++){
				I2C_Write(0x00);
			}
			I2C_Stop();
    1518:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>
    151c:	35 c2       	rjmp	.+1130   	; 0x1988 <time_menu+0x880>


		}else if(num_of_inputs == 2){/********************************************************/
    151e:	82 e0       	ldi	r24, 0x02	; 2
    1520:	d8 16       	cp	r13, r24
    1522:	09 f0       	breq	.+2      	; 0x1526 <time_menu+0x41e>
    1524:	4c c0       	rjmp	.+152    	; 0x15be <time_menu+0x4b6>
			//now we are choosing am or pm

			//for the underline
			setColumnAddress(76,90);
    1526:	8c e4       	ldi	r24, 0x4C	; 76
    1528:	6a e5       	ldi	r22, 0x5A	; 90
    152a:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <setColumnAddress>
			setPageAddress(3,7);
    152e:	83 e0       	ldi	r24, 0x03	; 3
    1530:	67 e0       	ldi	r22, 0x07	; 7
    1532:	0e 94 3f 1b 	call	0x367e	; 0x367e <setPageAddress>
			I2C_Start(oled_write_address);
    1536:	8a e7       	ldi	r24, 0x7A	; 122
    1538:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
			I2C_Write(CONTROL_DATA);
    153c:	80 e4       	ldi	r24, 0x40	; 64
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
    1544:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8 i = 0 ; i < 14 ; i++){
				I2C_Write(0xC0);
    1546:	80 ec       	ldi	r24, 0xC0	; 192
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
			//for the underline
			setColumnAddress(76,90);
			setPageAddress(3,7);
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 14 ; i++){
    154e:	1f 5f       	subi	r17, 0xFF	; 255
    1550:	1e 30       	cpi	r17, 0x0E	; 14
    1552:	c9 f7       	brne	.-14     	; 0x1546 <time_menu+0x43e>
				I2C_Write(0xC0);
			}
			I2C_Stop();
    1554:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>
    1558:	00 e0       	ldi	r16, 0x00	; 0
			//if am_pm_tracker == 0 ----> AM , if am_pm_tracker == 1 ----> PM
			uint8 am_pm_tracker = 0 ;
			uint8 which_button = 0 ;
			do{
				which_button = 0 ;
				which_button = button_check();
    155a:	0e 94 18 05 	call	0xa30	; 0xa30 <button_check>
    155e:	18 2f       	mov	r17, r24

				if(which_button == 3 || which_button == 4){
    1560:	83 50       	subi	r24, 0x03	; 3
    1562:	82 30       	cpi	r24, 0x02	; 2
    1564:	78 f4       	brcc	.+30     	; 0x1584 <time_menu+0x47c>
					//this means that we pressed left
					if(am_pm_tracker == 0){
    1566:	00 23       	and	r16, r16
    1568:	39 f4       	brne	.+14     	; 0x1578 <time_menu+0x470>
						am_pm_tracker = 1;
						letter_write(5,76,15);
    156a:	85 e0       	ldi	r24, 0x05	; 5
    156c:	6c e4       	ldi	r22, 0x4C	; 76
    156e:	4f e0       	ldi	r20, 0x0F	; 15
    1570:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
    1574:	01 e0       	ldi	r16, 0x01	; 1
    1576:	06 c0       	rjmp	.+12     	; 0x1584 <time_menu+0x47c>
					}else if(am_pm_tracker == 1){
						am_pm_tracker = 0 ;
						letter_write(5,76,0);
    1578:	85 e0       	ldi	r24, 0x05	; 5
    157a:	6c e4       	ldi	r22, 0x4C	; 76
    157c:	40 e0       	ldi	r20, 0x00	; 0
    157e:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
    1582:	00 e0       	ldi	r16, 0x00	; 0
					}
				}

			}while(which_button != 5);
    1584:	15 30       	cpi	r17, 0x05	; 5
    1586:	49 f7       	brne	.-46     	; 0x155a <time_menu+0x452>

			clock_input.am_pm = am_pm_tracker  ;


			//for clearing underline
			setColumnAddress(76,90);
    1588:	8c e4       	ldi	r24, 0x4C	; 76
    158a:	6a e5       	ldi	r22, 0x5A	; 90
    158c:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <setColumnAddress>
			setPageAddress(3,7);
    1590:	83 e0       	ldi	r24, 0x03	; 3
    1592:	67 e0       	ldi	r22, 0x07	; 7
    1594:	0e 94 3f 1b 	call	0x367e	; 0x367e <setPageAddress>
			I2C_Start(oled_write_address);
    1598:	8a e7       	ldi	r24, 0x7A	; 122
    159a:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
			I2C_Write(CONTROL_DATA);
    159e:	80 e4       	ldi	r24, 0x40	; 64
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
    15a6:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8 i = 0 ; i < 14 ; i++){
				I2C_Write(0x00);
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
			//for clearing underline
			setColumnAddress(76,90);
			setPageAddress(3,7);
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 14 ; i++){
    15b0:	1f 5f       	subi	r17, 0xFF	; 255
    15b2:	1e 30       	cpi	r17, 0x0E	; 14
    15b4:	c9 f7       	brne	.-14     	; 0x15a8 <time_menu+0x4a0>
				I2C_Write(0x00);
			}
			I2C_Stop();
    15b6:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>
    15ba:	90 2e       	mov	r9, r16
    15bc:	e5 c1       	rjmp	.+970    	; 0x1988 <time_menu+0x880>


		}else if(num_of_inputs == 3){/********************************************************/
    15be:	e3 e0       	ldi	r30, 0x03	; 3
    15c0:	de 16       	cp	r13, r30
    15c2:	09 f0       	breq	.+2      	; 0x15c6 <time_menu+0x4be>
    15c4:	7e c0       	rjmp	.+252    	; 0x16c2 <time_menu+0x5ba>
			//now we are adjusting the year

			//for the underline
			setColumnAddress(62,90);
    15c6:	8e e3       	ldi	r24, 0x3E	; 62
    15c8:	6a e5       	ldi	r22, 0x5A	; 90
    15ca:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <setColumnAddress>
			setPageAddress(0,7);
    15ce:	80 e0       	ldi	r24, 0x00	; 0
    15d0:	67 e0       	ldi	r22, 0x07	; 7
    15d2:	0e 94 3f 1b 	call	0x367e	; 0x367e <setPageAddress>
			I2C_Start(oled_write_address);
    15d6:	8a e7       	ldi	r24, 0x7A	; 122
    15d8:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
			I2C_Write(CONTROL_DATA);
    15dc:	80 e4       	ldi	r24, 0x40	; 64
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
    15e4:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8 i = 0 ; i < 28 ; i++){
				I2C_Write(0xC0);
    15e6:	80 ec       	ldi	r24, 0xC0	; 192
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
			//for the underline
			setColumnAddress(62,90);
			setPageAddress(0,7);
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 28 ; i++){
    15ee:	1f 5f       	subi	r17, 0xFF	; 255
    15f0:	1c 31       	cpi	r17, 0x1C	; 28
    15f2:	c9 f7       	brne	.-14     	; 0x15e6 <time_menu+0x4de>
				I2C_Write(0xC0);
			}
			I2C_Stop();
    15f4:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>
    15f8:	07 ee       	ldi	r16, 0xE7	; 231
    15fa:	17 e0       	ldi	r17, 0x07	; 7

			uint16 year_tracker = 2023 ;
			uint8 which_button = 0 ;
			do{
				which_button = 0 ;
				which_button = button_check();
    15fc:	0e 94 18 05 	call	0xa30	; 0xa30 <button_check>

				if(which_button == 3){
    1600:	83 30       	cpi	r24, 0x03	; 3
    1602:	81 f4       	brne	.+32     	; 0x1624 <time_menu+0x51c>
					//this means that we pressed left
					//check if we stopping at letter a
					if(year_tracker == 2023){
    1604:	f7 e0       	ldi	r31, 0x07	; 7
    1606:	07 3e       	cpi	r16, 0xE7	; 231
    1608:	1f 07       	cpc	r17, r31
    160a:	49 f4       	brne	.+18     	; 0x161e <time_menu+0x516>
						year_tracker = 2100 ;
						triple_digit_write(2,69,year_tracker);
    160c:	82 e0       	ldi	r24, 0x02	; 2
    160e:	65 e4       	ldi	r22, 0x45	; 69
    1610:	44 e3       	ldi	r20, 0x34	; 52
    1612:	58 e0       	ldi	r21, 0x08	; 8
    1614:	0e 94 be 04 	call	0x97c	; 0x97c <triple_digit_write>
    1618:	04 e3       	ldi	r16, 0x34	; 52
    161a:	18 e0       	ldi	r17, 0x08	; 8
    161c:	ef cf       	rjmp	.-34     	; 0x15fc <time_menu+0x4f4>
					}else{
						year_tracker-- ;
    161e:	01 50       	subi	r16, 0x01	; 1
    1620:	10 40       	sbci	r17, 0x00	; 0
    1622:	0f c0       	rjmp	.+30     	; 0x1642 <time_menu+0x53a>
						triple_digit_write(2,69,year_tracker);
					}

				}else if(which_button == 4){
    1624:	84 30       	cpi	r24, 0x04	; 4
    1626:	99 f4       	brne	.+38     	; 0x164e <time_menu+0x546>
					//this means that we pressed right
					//check if we stopping at letter z
					if(year_tracker == 2100){
    1628:	88 e0       	ldi	r24, 0x08	; 8
    162a:	04 33       	cpi	r16, 0x34	; 52
    162c:	18 07       	cpc	r17, r24
    162e:	39 f4       	brne	.+14     	; 0x163e <time_menu+0x536>
						year_tracker = 2023 ;
						triple_digit_write(2,69,year_tracker);
    1630:	82 e0       	ldi	r24, 0x02	; 2
    1632:	65 e4       	ldi	r22, 0x45	; 69
    1634:	47 ee       	ldi	r20, 0xE7	; 231
    1636:	57 e0       	ldi	r21, 0x07	; 7
    1638:	0e 94 be 04 	call	0x97c	; 0x97c <triple_digit_write>
    163c:	dd cf       	rjmp	.-70     	; 0x15f8 <time_menu+0x4f0>
					}else{
						year_tracker++ ;
    163e:	0f 5f       	subi	r16, 0xFF	; 255
    1640:	1f 4f       	sbci	r17, 0xFF	; 255
						triple_digit_write(2,69,year_tracker);
    1642:	82 e0       	ldi	r24, 0x02	; 2
    1644:	65 e4       	ldi	r22, 0x45	; 69
    1646:	a8 01       	movw	r20, r16
    1648:	0e 94 be 04 	call	0x97c	; 0x97c <triple_digit_write>
    164c:	d7 cf       	rjmp	.-82     	; 0x15fc <time_menu+0x4f4>
					}
				}

			}while(which_button != 5);
    164e:	85 30       	cpi	r24, 0x05	; 5
    1650:	a9 f6       	brne	.-86     	; 0x15fc <time_menu+0x4f4>
			year_tracker /= 10 ;
			last_two_digit = ((year_tracker % 10) * 10 ) + last_two_digit ;
			date_input.year = dec_to_bcd(last_two_digit) ;

			//for clearing/deleting the underline
			setColumnAddress(62,90);
    1652:	8e e3       	ldi	r24, 0x3E	; 62
    1654:	6a e5       	ldi	r22, 0x5A	; 90
    1656:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <setColumnAddress>
			setPageAddress(0,7);
    165a:	80 e0       	ldi	r24, 0x00	; 0
    165c:	67 e0       	ldi	r22, 0x07	; 7
    165e:	0e 94 3f 1b 	call	0x367e	; 0x367e <setPageAddress>
			I2C_Start(oled_write_address);
    1662:	8a e7       	ldi	r24, 0x7A	; 122
    1664:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
			I2C_Write(CONTROL_DATA);
    1668:	80 e4       	ldi	r24, 0x40	; 64
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
    1670:	ff 24       	eor	r15, r15
			for(uint8 i = 0 ; i < 28 ; i++){
				I2C_Write(0x00);
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
			//for clearing/deleting the underline
			setColumnAddress(62,90);
			setPageAddress(0,7);
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 28 ; i++){
    167a:	f3 94       	inc	r15
    167c:	ec e1       	ldi	r30, 0x1C	; 28
    167e:	fe 16       	cp	r15, r30
    1680:	c1 f7       	brne	.-16     	; 0x1672 <time_menu+0x56a>
						triple_digit_write(2,69,year_tracker);
					}
				}

			}while(which_button != 5);
			uint8 last_two_digit = year_tracker % 10 ;
    1682:	c8 01       	movw	r24, r16
    1684:	6a e0       	ldi	r22, 0x0A	; 10
    1686:	70 e0       	ldi	r23, 0x00	; 0
    1688:	0e 94 76 24 	call	0x48ec	; 0x48ec <__udivmodhi4>
    168c:	48 2f       	mov	r20, r24
			year_tracker /= 10 ;
			last_two_digit = ((year_tracker % 10) * 10 ) + last_two_digit ;
			date_input.year = dec_to_bcd(last_two_digit) ;
    168e:	c8 01       	movw	r24, r16
    1690:	6a e0       	ldi	r22, 0x0A	; 10
    1692:	70 e0       	ldi	r23, 0x00	; 0
    1694:	0e 94 76 24 	call	0x48ec	; 0x48ec <__udivmodhi4>
    1698:	cb 01       	movw	r24, r22
    169a:	6a e0       	ldi	r22, 0x0A	; 10
    169c:	70 e0       	ldi	r23, 0x00	; 0
    169e:	0e 94 76 24 	call	0x48ec	; 0x48ec <__udivmodhi4>
    16a2:	9c 01       	movw	r18, r24
    16a4:	63 e0       	ldi	r22, 0x03	; 3
    16a6:	88 0f       	add	r24, r24
    16a8:	99 1f       	adc	r25, r25
    16aa:	6a 95       	dec	r22
    16ac:	e1 f7       	brne	.-8      	; 0x16a6 <time_menu+0x59e>
    16ae:	22 0f       	add	r18, r18
    16b0:	33 1f       	adc	r19, r19
    16b2:	82 0f       	add	r24, r18
    16b4:	93 1f       	adc	r25, r19
    16b6:	84 0f       	add	r24, r20
    16b8:	0e 94 a4 00 	call	0x148	; 0x148 <dec_to_bcd>
    16bc:	f8 2e       	mov	r15, r24
    16be:	88 24       	eor	r8, r8
    16c0:	2b cf       	rjmp	.-426    	; 0x1518 <time_menu+0x410>
			for(uint8 i = 0 ; i < 28 ; i++){
				I2C_Write(0x00);
			}
			I2C_Stop();

		}else if(num_of_inputs == 4){/********************************************************/
    16c2:	f4 e0       	ldi	r31, 0x04	; 4
    16c4:	df 16       	cp	r13, r31
    16c6:	09 f0       	breq	.+2      	; 0x16ca <time_menu+0x5c2>
    16c8:	58 c0       	rjmp	.+176    	; 0x177a <time_menu+0x672>
			//this means that we are choosing the current month.

			//for the underline
			setColumnAddress(41,55);
    16ca:	89 e2       	ldi	r24, 0x29	; 41
    16cc:	67 e3       	ldi	r22, 0x37	; 55
    16ce:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <setColumnAddress>
			setPageAddress(0,7);
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	67 e0       	ldi	r22, 0x07	; 7
    16d6:	0e 94 3f 1b 	call	0x367e	; 0x367e <setPageAddress>
			I2C_Start(oled_write_address);
    16da:	8a e7       	ldi	r24, 0x7A	; 122
    16dc:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
			I2C_Write(CONTROL_DATA);
    16e0:	80 e4       	ldi	r24, 0x40	; 64
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
    16e8:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8 i = 0 ; i < 14 ; i++){
				I2C_Write(0xC0);
    16ea:	80 ec       	ldi	r24, 0xC0	; 192
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
			//for the underline
			setColumnAddress(41,55);
			setPageAddress(0,7);
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 14 ; i++){
    16f2:	1f 5f       	subi	r17, 0xFF	; 255
    16f4:	1e 30       	cpi	r17, 0x0E	; 14
    16f6:	c9 f7       	brne	.-14     	; 0x16ea <time_menu+0x5e2>
				I2C_Write(0xC0);
			}
			I2C_Stop();
    16f8:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>
    16fc:	0c e0       	ldi	r16, 0x0C	; 12

			uint8 month_tracker = 12 ;
			uint8 which_button = 0 ;
			do{
				which_button = 0 ;
				which_button = button_check();
    16fe:	0e 94 18 05 	call	0xa30	; 0xa30 <button_check>

				if(which_button == 3){
    1702:	83 30       	cpi	r24, 0x03	; 3
    1704:	51 f4       	brne	.+20     	; 0x171a <time_menu+0x612>
					//this means that we pressed left
					//check if we stopping at letter a
					if(month_tracker == 1){
    1706:	01 30       	cpi	r16, 0x01	; 1
    1708:	31 f4       	brne	.+12     	; 0x1716 <time_menu+0x60e>
						month_tracker = 12 ;
						double_digit_write(2,41,month_tracker);
    170a:	82 e0       	ldi	r24, 0x02	; 2
    170c:	69 e2       	ldi	r22, 0x29	; 41
    170e:	4c e0       	ldi	r20, 0x0C	; 12
    1710:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
    1714:	f3 cf       	rjmp	.-26     	; 0x16fc <time_menu+0x5f4>
					}else{
						month_tracker-- ;
    1716:	01 50       	subi	r16, 0x01	; 1
    1718:	0c c0       	rjmp	.+24     	; 0x1732 <time_menu+0x62a>
						double_digit_write(2,41,month_tracker);
					}

				}else if(which_button == 4){
    171a:	84 30       	cpi	r24, 0x04	; 4
    171c:	81 f4       	brne	.+32     	; 0x173e <time_menu+0x636>
					//this means that we pressed right
					//check if we stopping at letter z
					if(month_tracker == 12){
    171e:	0c 30       	cpi	r16, 0x0C	; 12
    1720:	39 f4       	brne	.+14     	; 0x1730 <time_menu+0x628>
						month_tracker = 1 ;
						double_digit_write(2,41,month_tracker);
    1722:	82 e0       	ldi	r24, 0x02	; 2
    1724:	69 e2       	ldi	r22, 0x29	; 41
    1726:	41 e0       	ldi	r20, 0x01	; 1
    1728:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
    172c:	01 e0       	ldi	r16, 0x01	; 1
    172e:	e7 cf       	rjmp	.-50     	; 0x16fe <time_menu+0x5f6>
					}else{
						month_tracker++ ;
    1730:	0f 5f       	subi	r16, 0xFF	; 255
						double_digit_write(2,41,month_tracker);
    1732:	82 e0       	ldi	r24, 0x02	; 2
    1734:	69 e2       	ldi	r22, 0x29	; 41
    1736:	40 2f       	mov	r20, r16
    1738:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
    173c:	e0 cf       	rjmp	.-64     	; 0x16fe <time_menu+0x5f6>
					}
				}

			}while(which_button != 5);
    173e:	85 30       	cpi	r24, 0x05	; 5
    1740:	f1 f6       	brne	.-68     	; 0x16fe <time_menu+0x5f6>
			date_input.month = dec_to_bcd(month_tracker) ;

			//for clearing the underline
			setColumnAddress(41,55);
    1742:	89 e2       	ldi	r24, 0x29	; 41
    1744:	67 e3       	ldi	r22, 0x37	; 55
    1746:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <setColumnAddress>
			setPageAddress(0,7);
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	67 e0       	ldi	r22, 0x07	; 7
    174e:	0e 94 3f 1b 	call	0x367e	; 0x367e <setPageAddress>
			I2C_Start(oled_write_address);
    1752:	8a e7       	ldi	r24, 0x7A	; 122
    1754:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
			I2C_Write(CONTROL_DATA);
    1758:	80 e4       	ldi	r24, 0x40	; 64
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
    1760:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8 i = 0 ; i < 14 ; i++){
				I2C_Write(0x00);
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
			//for clearing the underline
			setColumnAddress(41,55);
			setPageAddress(0,7);
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 14 ; i++){
    176a:	1f 5f       	subi	r17, 0xFF	; 255
    176c:	1e 30       	cpi	r17, 0x0E	; 14
    176e:	c9 f7       	brne	.-14     	; 0x1762 <time_menu+0x65a>
						double_digit_write(2,41,month_tracker);
					}
				}

			}while(which_button != 5);
			date_input.month = dec_to_bcd(month_tracker) ;
    1770:	80 2f       	mov	r24, r16
    1772:	0e 94 a4 00 	call	0x148	; 0x148 <dec_to_bcd>
    1776:	e8 2e       	mov	r14, r24
    1778:	cf ce       	rjmp	.-610    	; 0x1518 <time_menu+0x410>
				I2C_Write(0x00);
			}
			I2C_Stop();


		}else if(num_of_inputs == 5){/********************************************************/
    177a:	85 e0       	ldi	r24, 0x05	; 5
    177c:	d8 16       	cp	r13, r24
    177e:	09 f0       	breq	.+2      	; 0x1782 <time_menu+0x67a>
    1780:	9c c0       	rjmp	.+312    	; 0x18ba <time_menu+0x7b2>

			//now we are choosing the day
			//for the underline
			setColumnAddress(20,34);
    1782:	84 e1       	ldi	r24, 0x14	; 20
    1784:	62 e2       	ldi	r22, 0x22	; 34
    1786:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <setColumnAddress>
			setPageAddress(0,7);
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	67 e0       	ldi	r22, 0x07	; 7
    178e:	0e 94 3f 1b 	call	0x367e	; 0x367e <setPageAddress>
			I2C_Start(oled_write_address);
    1792:	8a e7       	ldi	r24, 0x7A	; 122
    1794:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
			I2C_Write(CONTROL_DATA);
    1798:	80 e4       	ldi	r24, 0x40	; 64
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
    17a0:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8 i = 0 ; i < 14 ; i++){
				I2C_Write(0xC0);
    17a2:	80 ec       	ldi	r24, 0xC0	; 192
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
			//for the underline
			setColumnAddress(20,34);
			setPageAddress(0,7);
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 14 ; i++){
    17aa:	1f 5f       	subi	r17, 0xFF	; 255
    17ac:	1e 30       	cpi	r17, 0x0E	; 14
    17ae:	c9 f7       	brne	.-14     	; 0x17a2 <time_menu+0x69a>
				I2C_Write(0xC0);
			}
			I2C_Stop();
    17b0:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>
    17b4:	1c e1       	ldi	r17, 0x1C	; 28
			uint8 which_button = 0 ;


			do{
				which_button = 0 ;
				which_button = button_check();
    17b6:	0e 94 18 05 	call	0xa30	; 0xa30 <button_check>

				if(which_button == 3){
    17ba:	83 30       	cpi	r24, 0x03	; 3
    17bc:	a1 f5       	brne	.+104    	; 0x1826 <time_menu+0x71e>
					//we have a the following cases:
					//1.we are 1,3,5,7,8,10,12 ----> 31 day
					//2.we are 4,6,9,11 ---->30 days
					//3.February 28 days if it is not leap year , 29 days if it is leap year.{
					if(day_tracker == 1){
    17be:	11 30       	cpi	r17, 0x01	; 1
    17c0:	81 f5       	brne	.+96     	; 0x1822 <time_menu+0x71a>
						if( (date_input.month == 2) && (is_it_leap_year(date_input.year)) ){
    17c2:	e2 e0       	ldi	r30, 0x02	; 2
    17c4:	ee 16       	cp	r14, r30
    17c6:	99 f4       	brne	.+38     	; 0x17ee <time_menu+0x6e6>
    17c8:	8f 2d       	mov	r24, r15
    17ca:	98 2d       	mov	r25, r8
    17cc:	0e 94 80 00 	call	0x100	; 0x100 <is_it_leap_year>
    17d0:	88 23       	and	r24, r24
    17d2:	39 f0       	breq	.+14     	; 0x17e2 <time_menu+0x6da>
							day_tracker = 29 ;
							double_digit_write(2,20,day_tracker);
    17d4:	82 e0       	ldi	r24, 0x02	; 2
    17d6:	64 e1       	ldi	r22, 0x14	; 20
    17d8:	4d e1       	ldi	r20, 0x1D	; 29
    17da:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
    17de:	1d e1       	ldi	r17, 0x1D	; 29
    17e0:	ea cf       	rjmp	.-44     	; 0x17b6 <time_menu+0x6ae>
						}else if( (date_input.month == 2) && !(is_it_leap_year(date_input.year)) ){
							day_tracker = 28 ;
							double_digit_write(2,20,day_tracker);
    17e2:	82 e0       	ldi	r24, 0x02	; 2
    17e4:	64 e1       	ldi	r22, 0x14	; 20
    17e6:	4c e1       	ldi	r20, 0x1C	; 28
    17e8:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
    17ec:	e3 cf       	rjmp	.-58     	; 0x17b4 <time_menu+0x6ac>
						}else if(date_input.month == 4||date_input.month == 6||date_input.month == 9||date_input.month == 11){
    17ee:	f4 e0       	ldi	r31, 0x04	; 4
    17f0:	ef 16       	cp	r14, r31
    17f2:	49 f0       	breq	.+18     	; 0x1806 <time_menu+0x6fe>
    17f4:	86 e0       	ldi	r24, 0x06	; 6
    17f6:	e8 16       	cp	r14, r24
    17f8:	31 f0       	breq	.+12     	; 0x1806 <time_menu+0x6fe>
    17fa:	e9 e0       	ldi	r30, 0x09	; 9
    17fc:	ee 16       	cp	r14, r30
    17fe:	19 f0       	breq	.+6      	; 0x1806 <time_menu+0x6fe>
    1800:	fb e0       	ldi	r31, 0x0B	; 11
    1802:	ef 16       	cp	r14, r31
    1804:	39 f4       	brne	.+14     	; 0x1814 <time_menu+0x70c>
							day_tracker = 30 ;
							double_digit_write(2,20,day_tracker);
    1806:	82 e0       	ldi	r24, 0x02	; 2
    1808:	64 e1       	ldi	r22, 0x14	; 20
    180a:	4e e1       	ldi	r20, 0x1E	; 30
    180c:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
    1810:	1e e1       	ldi	r17, 0x1E	; 30
    1812:	d1 cf       	rjmp	.-94     	; 0x17b6 <time_menu+0x6ae>
						}else{
							day_tracker = 31 ;
							double_digit_write(2,20,day_tracker);
    1814:	82 e0       	ldi	r24, 0x02	; 2
    1816:	64 e1       	ldi	r22, 0x14	; 20
    1818:	4f e1       	ldi	r20, 0x1F	; 31
    181a:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
    181e:	1f e1       	ldi	r17, 0x1F	; 31
    1820:	ca cf       	rjmp	.-108    	; 0x17b6 <time_menu+0x6ae>
						}
					}else{
						day_tracker-- ;
    1822:	11 50       	subi	r17, 0x01	; 1
    1824:	25 c0       	rjmp	.+74     	; 0x1870 <time_menu+0x768>
						double_digit_write(2,20,day_tracker);
					}

				}else if(which_button == 4){
    1826:	84 30       	cpi	r24, 0x04	; 4
    1828:	49 f5       	brne	.+82     	; 0x187c <time_menu+0x774>
					//this means that we pressed right
					//check if we stopping at letter z
					if( (date_input.month == 2) && (is_it_leap_year(date_input.year)) ){
    182a:	82 e0       	ldi	r24, 0x02	; 2
    182c:	e8 16       	cp	r14, r24
    182e:	61 f4       	brne	.+24     	; 0x1848 <time_menu+0x740>
    1830:	8f 2d       	mov	r24, r15
    1832:	98 2d       	mov	r25, r8
    1834:	0e 94 80 00 	call	0x100	; 0x100 <is_it_leap_year>
    1838:	88 23       	and	r24, r24
    183a:	19 f0       	breq	.+6      	; 0x1842 <time_menu+0x73a>
						if(day_tracker != 29){
    183c:	1d 31       	cpi	r17, 0x1D	; 29
    183e:	b9 f4       	brne	.+46     	; 0x186e <time_menu+0x766>
    1840:	14 c0       	rjmp	.+40     	; 0x186a <time_menu+0x762>
							day_tracker = 1 ;
						}
						double_digit_write(2,20,day_tracker);

					}else if( (date_input.month == 2) && !(is_it_leap_year(date_input.year)) ){
						if(day_tracker != 28){
    1842:	1c 31       	cpi	r17, 0x1C	; 28
    1844:	a1 f4       	brne	.+40     	; 0x186e <time_menu+0x766>
    1846:	11 c0       	rjmp	.+34     	; 0x186a <time_menu+0x762>
						}else{
							day_tracker = 1 ;
						}
						double_digit_write(2,20,day_tracker);

					}else if(date_input.month == 4||date_input.month == 6||date_input.month == 9||date_input.month == 11){
    1848:	e4 e0       	ldi	r30, 0x04	; 4
    184a:	ee 16       	cp	r14, r30
    184c:	49 f0       	breq	.+18     	; 0x1860 <time_menu+0x758>
    184e:	f6 e0       	ldi	r31, 0x06	; 6
    1850:	ef 16       	cp	r14, r31
    1852:	31 f0       	breq	.+12     	; 0x1860 <time_menu+0x758>
    1854:	89 e0       	ldi	r24, 0x09	; 9
    1856:	e8 16       	cp	r14, r24
    1858:	19 f0       	breq	.+6      	; 0x1860 <time_menu+0x758>
    185a:	eb e0       	ldi	r30, 0x0B	; 11
    185c:	ee 16       	cp	r14, r30
    185e:	19 f4       	brne	.+6      	; 0x1866 <time_menu+0x75e>
						if(day_tracker != 30){
    1860:	1e 31       	cpi	r17, 0x1E	; 30
    1862:	29 f4       	brne	.+10     	; 0x186e <time_menu+0x766>
    1864:	02 c0       	rjmp	.+4      	; 0x186a <time_menu+0x762>
							day_tracker = 1 ;
						}
						double_digit_write(2,20,day_tracker);

					}else{
						if(day_tracker != 31){
    1866:	1f 31       	cpi	r17, 0x1F	; 31
    1868:	11 f4       	brne	.+4      	; 0x186e <time_menu+0x766>
    186a:	11 e0       	ldi	r17, 0x01	; 1
    186c:	01 c0       	rjmp	.+2      	; 0x1870 <time_menu+0x768>
							day_tracker++;
    186e:	1f 5f       	subi	r17, 0xFF	; 255
						}else{
							day_tracker = 1 ;
						}
						double_digit_write(2,20,day_tracker);
    1870:	82 e0       	ldi	r24, 0x02	; 2
    1872:	64 e1       	ldi	r22, 0x14	; 20
    1874:	41 2f       	mov	r20, r17
    1876:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
    187a:	9d cf       	rjmp	.-198    	; 0x17b6 <time_menu+0x6ae>
					}
				}

			}while(which_button != 5);
    187c:	85 30       	cpi	r24, 0x05	; 5
    187e:	09 f0       	breq	.+2      	; 0x1882 <time_menu+0x77a>
    1880:	9a cf       	rjmp	.-204    	; 0x17b6 <time_menu+0x6ae>
			date_input.date = dec_to_bcd(day_tracker) ;

			//for the underline
			setColumnAddress(20,34);
    1882:	84 e1       	ldi	r24, 0x14	; 20
    1884:	62 e2       	ldi	r22, 0x22	; 34
    1886:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <setColumnAddress>
			setPageAddress(0,7);
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	67 e0       	ldi	r22, 0x07	; 7
    188e:	0e 94 3f 1b 	call	0x367e	; 0x367e <setPageAddress>
			I2C_Start(oled_write_address);
    1892:	8a e7       	ldi	r24, 0x7A	; 122
    1894:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
			I2C_Write(CONTROL_DATA);
    1898:	80 e4       	ldi	r24, 0x40	; 64
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
    18a0:	00 e0       	ldi	r16, 0x00	; 0
			for(uint8 i = 0 ; i < 14 ; i++){
				I2C_Write(0x00);
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
			//for the underline
			setColumnAddress(20,34);
			setPageAddress(0,7);
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 14 ; i++){
    18aa:	0f 5f       	subi	r16, 0xFF	; 255
    18ac:	0e 30       	cpi	r16, 0x0E	; 14
    18ae:	c9 f7       	brne	.-14     	; 0x18a2 <time_menu+0x79a>
						double_digit_write(2,20,day_tracker);
					}
				}

			}while(which_button != 5);
			date_input.date = dec_to_bcd(day_tracker) ;
    18b0:	81 2f       	mov	r24, r17
    18b2:	0e 94 a4 00 	call	0x148	; 0x148 <dec_to_bcd>
    18b6:	c8 2e       	mov	r12, r24
    18b8:	2f ce       	rjmp	.-930    	; 0x1518 <time_menu+0x410>
			I2C_Stop();
		}else if(num_of_inputs == 6){/********************************************************/
			//now we are choosing the day name.

			//for the underline
			setColumnAddress(97,118);
    18ba:	81 e6       	ldi	r24, 0x61	; 97
    18bc:	66 e7       	ldi	r22, 0x76	; 118
    18be:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <setColumnAddress>
			setPageAddress(0,7);
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	67 e0       	ldi	r22, 0x07	; 7
    18c6:	0e 94 3f 1b 	call	0x367e	; 0x367e <setPageAddress>
			I2C_Start(oled_write_address);
    18ca:	8a e7       	ldi	r24, 0x7A	; 122
    18cc:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
			I2C_Write(CONTROL_DATA);
    18d0:	80 e4       	ldi	r24, 0x40	; 64
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
    18d8:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8 i = 0 ; i < 21 ; i++){
				I2C_Write(0xC0);
    18da:	80 ec       	ldi	r24, 0xC0	; 192
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
			//for the underline
			setColumnAddress(97,118);
			setPageAddress(0,7);
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 21 ; i++){
    18e2:	1f 5f       	subi	r17, 0xFF	; 255
    18e4:	15 31       	cpi	r17, 0x15	; 21
    18e6:	c9 f7       	brne	.-14     	; 0x18da <time_menu+0x7d2>
				I2C_Write(0xC0);
			}
			I2C_Stop();
    18e8:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>
    18ec:	06 e0       	ldi	r16, 0x06	; 6
			//starting from 1 to 7 , but in index form we will send "day_name_tracker - 1".
			uint8 day_name_tracker = 6 ;
			uint8 which_button = 0 ;
			do{
				which_button = 0 ;
				which_button = button_check();
    18ee:	0e 94 18 05 	call	0xa30	; 0xa30 <button_check>

				if(which_button == 3){
    18f2:	83 30       	cpi	r24, 0x03	; 3
    18f4:	71 f4       	brne	.+28     	; 0x1912 <time_menu+0x80a>
					//this means that we pressed left
					//check if we stopping at letter a
					if(day_name_tracker == 1){
    18f6:	01 30       	cpi	r16, 0x01	; 1
    18f8:	39 f4       	brne	.+14     	; 0x1908 <time_menu+0x800>
						day_name_tracker = 7 ;
						day_name_print(day_name_tracker - 1 , days);
    18fa:	86 e0       	ldi	r24, 0x06	; 6
    18fc:	6b e6       	ldi	r22, 0x6B	; 107
    18fe:	70 e0       	ldi	r23, 0x00	; 0
    1900:	0e 94 71 03 	call	0x6e2	; 0x6e2 <day_name_print>
    1904:	07 e0       	ldi	r16, 0x07	; 7
    1906:	f3 cf       	rjmp	.-26     	; 0x18ee <time_menu+0x7e6>
					}else{
						day_name_tracker-- ;
    1908:	10 2f       	mov	r17, r16
    190a:	11 50       	subi	r17, 0x01	; 1
						day_name_print(day_name_tracker - 1 , days);
    190c:	81 2f       	mov	r24, r17
    190e:	81 50       	subi	r24, 0x01	; 1
    1910:	0e c0       	rjmp	.+28     	; 0x192e <time_menu+0x826>
					}

				}else if(which_button == 4){
    1912:	84 30       	cpi	r24, 0x04	; 4
    1914:	91 f4       	brne	.+36     	; 0x193a <time_menu+0x832>
					//this means that we pressed right
					//check if we stopping at letter z
					if(day_name_tracker == 7){
    1916:	07 30       	cpi	r16, 0x07	; 7
    1918:	39 f4       	brne	.+14     	; 0x1928 <time_menu+0x820>
						day_name_tracker = 1 ;
						day_name_print(day_name_tracker - 1 , days);
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	6b e6       	ldi	r22, 0x6B	; 107
    191e:	70 e0       	ldi	r23, 0x00	; 0
    1920:	0e 94 71 03 	call	0x6e2	; 0x6e2 <day_name_print>
    1924:	01 e0       	ldi	r16, 0x01	; 1
    1926:	e3 cf       	rjmp	.-58     	; 0x18ee <time_menu+0x7e6>
					}else{
						day_name_tracker++ ;
    1928:	10 2f       	mov	r17, r16
    192a:	1f 5f       	subi	r17, 0xFF	; 255
						day_name_print(day_name_tracker - 1 , days);
    192c:	80 2f       	mov	r24, r16
    192e:	6b e6       	ldi	r22, 0x6B	; 107
    1930:	70 e0       	ldi	r23, 0x00	; 0
    1932:	0e 94 71 03 	call	0x6e2	; 0x6e2 <day_name_print>
	//For storing runtime input
	CLOCK_DATA clock_input ;
	DATE_DATA date_input ;


	for(uint8 num_of_inputs = 0 ; num_of_inputs < 7 ; num_of_inputs++){
    1936:	01 2f       	mov	r16, r17
    1938:	da cf       	rjmp	.-76     	; 0x18ee <time_menu+0x7e6>
					}else{
						day_name_tracker++ ;
						day_name_print(day_name_tracker - 1 , days);
					}
				}
			}while(which_button != 5);
    193a:	85 30       	cpi	r24, 0x05	; 5
    193c:	c1 f6       	brne	.-80     	; 0x18ee <time_menu+0x7e6>
			date_input.day = day_name_tracker ;

			//for clearing underline
			setColumnAddress(97,118);
    193e:	81 e6       	ldi	r24, 0x61	; 97
    1940:	66 e7       	ldi	r22, 0x76	; 118
    1942:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <setColumnAddress>
			setPageAddress(0,7);
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	67 e0       	ldi	r22, 0x07	; 7
    194a:	0e 94 3f 1b 	call	0x367e	; 0x367e <setPageAddress>
			I2C_Start(oled_write_address);
    194e:	8a e7       	ldi	r24, 0x7A	; 122
    1950:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
			I2C_Write(CONTROL_DATA);
    1954:	80 e4       	ldi	r24, 0x40	; 64
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
    195c:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8 i = 0 ; i < 21 ; i++){
				I2C_Write(0x00);
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
			//for clearing underline
			setColumnAddress(97,118);
			setPageAddress(0,7);
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 21 ; i++){
    1966:	1f 5f       	subi	r17, 0xFF	; 255
    1968:	15 31       	cpi	r17, 0x15	; 21
    196a:	c9 f7       	brne	.-14     	; 0x195e <time_menu+0x856>
				I2C_Write(0x00);
			}
			I2C_Stop();
    196c:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>
			//after taking all inputs now we will set the time\date and send data to the rtc.
			RTC_CLOCK_Write(clock_input.hours,clock_input.minutes,clock_input.seconds,clock_input.am_pm);
    1970:	8b 2d       	mov	r24, r11
    1972:	6a 2d       	mov	r22, r10
    1974:	40 e0       	ldi	r20, 0x00	; 0
    1976:	29 2d       	mov	r18, r9
    1978:	0e 94 79 14 	call	0x28f2	; 0x28f2 <RTC_CLOCK_Write>
			RTC_DATE_Write(date_input.day,date_input.date,date_input.month,date_input.year);
    197c:	80 2f       	mov	r24, r16
    197e:	6c 2d       	mov	r22, r12
    1980:	4e 2d       	mov	r20, r14
    1982:	2f 2d       	mov	r18, r15
    1984:	0e 94 51 14 	call	0x28a2	; 0x28a2 <RTC_DATE_Write>
	//For storing runtime input
	CLOCK_DATA clock_input ;
	DATE_DATA date_input ;


	for(uint8 num_of_inputs = 0 ; num_of_inputs < 7 ; num_of_inputs++){
    1988:	d3 94       	inc	r13
    198a:	f7 e0       	ldi	r31, 0x07	; 7
    198c:	df 16       	cp	r13, r31
    198e:	09 f0       	breq	.+2      	; 0x1992 <time_menu+0x88a>
    1990:	0d cd       	rjmp	.-1510   	; 0x13ac <time_menu+0x2a4>
			RTC_DATE_Write(date_input.day,date_input.date,date_input.month,date_input.year);
		}

	}
	return 1 ;
}
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	69 96       	adiw	r28, 0x19	; 25
    1996:	0f b6       	in	r0, 0x3f	; 63
    1998:	f8 94       	cli
    199a:	de bf       	out	0x3e, r29	; 62
    199c:	0f be       	out	0x3f, r0	; 63
    199e:	cd bf       	out	0x3d, r28	; 61
    19a0:	cf 91       	pop	r28
    19a2:	df 91       	pop	r29
    19a4:	1f 91       	pop	r17
    19a6:	0f 91       	pop	r16
    19a8:	ff 90       	pop	r15
    19aa:	ef 90       	pop	r14
    19ac:	df 90       	pop	r13
    19ae:	cf 90       	pop	r12
    19b0:	bf 90       	pop	r11
    19b2:	af 90       	pop	r10
    19b4:	9f 90       	pop	r9
    19b6:	8f 90       	pop	r8
    19b8:	08 95       	ret

000019ba <name_menu>:
			return which_button ;
	}
	return which_button ;
}
/*****************************************************************************/
uint8 name_menu(void){
    19ba:	ef 92       	push	r14
    19bc:	ff 92       	push	r15
    19be:	0f 93       	push	r16
    19c0:	1f 93       	push	r17
    19c2:	df 93       	push	r29
    19c4:	cf 93       	push	r28
    19c6:	cd b7       	in	r28, 0x3d	; 61
    19c8:	de b7       	in	r29, 0x3e	; 62
    19ca:	2d 97       	sbiw	r28, 0x0d	; 13
    19cc:	0f b6       	in	r0, 0x3f	; 63
    19ce:	f8 94       	cli
    19d0:	de bf       	out	0x3e, r29	; 62
    19d2:	0f be       	out	0x3f, r0	; 63
    19d4:	cd bf       	out	0x3d, r28	; 61

	//First we will print "enter your name" on the top of the screen.
	/*enter_name_arr is an array that hold the indexes of the letters in "enter your name" sentence.*/

	black_entire_screen();
    19d6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <black_entire_screen>

	uint8 enter_name_arr[13] = {4,13,19,4,17,24,14,20,17,13,0,12,4};
    19da:	de 01       	movw	r26, r28
    19dc:	11 96       	adiw	r26, 0x01	; 1
    19de:	ea ec       	ldi	r30, 0xCA	; 202
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	8d e0       	ldi	r24, 0x0D	; 13
    19e4:	01 90       	ld	r0, Z+
    19e6:	0d 92       	st	X+, r0
    19e8:	81 50       	subi	r24, 0x01	; 1
    19ea:	e1 f7       	brne	.-8      	; 0x19e4 <name_menu+0x2a>
    19ec:	7e 01       	movw	r14, r28
    19ee:	08 94       	sec
    19f0:	e1 1c       	adc	r14, r1
    19f2:	f1 1c       	adc	r15, r1
    19f4:	10 e0       	ldi	r17, 0x00	; 0
    19f6:	00 e0       	ldi	r16, 0x00	; 0
	/*now we will print them on the screen*/
	uint8 starting_col = 0 ;
	for(uint8 letter_index = 0 ; letter_index < 13 ; letter_index++){


		if(letter_index == 5 || letter_index == 9){
    19f8:	15 30       	cpi	r17, 0x05	; 5
    19fa:	11 f0       	breq	.+4      	; 0x1a00 <name_menu+0x46>
    19fc:	19 30       	cpi	r17, 0x09	; 9
    19fe:	11 f4       	brne	.+4      	; 0x1a04 <name_menu+0x4a>
			starting_col += 14;
    1a00:	02 5f       	subi	r16, 0xF2	; 242
    1a02:	01 c0       	rjmp	.+2      	; 0x1a06 <name_menu+0x4c>
		}else{
			starting_col += 7;
    1a04:	09 5f       	subi	r16, 0xF9	; 249
		}

		letter_write(7,starting_col,enter_name_arr[letter_index]);
    1a06:	87 e0       	ldi	r24, 0x07	; 7
    1a08:	60 2f       	mov	r22, r16
    1a0a:	f7 01       	movw	r30, r14
    1a0c:	41 91       	ld	r20, Z+
    1a0e:	7f 01       	movw	r14, r30
    1a10:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	black_entire_screen();

	uint8 enter_name_arr[13] = {4,13,19,4,17,24,14,20,17,13,0,12,4};
	/*now we will print them on the screen*/
	uint8 starting_col = 0 ;
	for(uint8 letter_index = 0 ; letter_index < 13 ; letter_index++){
    1a14:	1f 5f       	subi	r17, 0xFF	; 255
    1a16:	1d 30       	cpi	r17, 0x0D	; 13
    1a18:	79 f7       	brne	.-34     	; 0x19f8 <name_menu+0x3e>
    1a1a:	18 ed       	ldi	r17, 0xD8	; 216
    1a1c:	e1 2e       	mov	r14, r17
    1a1e:	10 e0       	ldi	r17, 0x00	; 0
    1a20:	f1 2e       	mov	r15, r17
    1a22:	00 e0       	ldi	r16, 0x00	; 0
	for(uint8 letter_in = 0 ; letter_in < 5 ; letter_in++){
		//we want to have a variable to keep track of what letter to show on screen.
		uint8 letter_count = 0 ;

		//now we print letter 'a' and underline it.
		letter_write(3,(letter_in * 7),0);
    1a24:	83 e0       	ldi	r24, 0x03	; 3
    1a26:	60 2f       	mov	r22, r16
    1a28:	40 e0       	ldi	r20, 0x00	; 0
    1a2a:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>

		//for the underline
		setColumnAddress((letter_in * 7),8);
    1a2e:	80 2f       	mov	r24, r16
    1a30:	68 e0       	ldi	r22, 0x08	; 8
    1a32:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <setColumnAddress>
		setPageAddress(1,7);
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	67 e0       	ldi	r22, 0x07	; 7
    1a3a:	0e 94 3f 1b 	call	0x367e	; 0x367e <setPageAddress>
		I2C_Start(oled_write_address);
    1a3e:	8a e7       	ldi	r24, 0x7A	; 122
    1a40:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
		I2C_Write(CONTROL_DATA);
    1a44:	80 e4       	ldi	r24, 0x40	; 64
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
    1a4c:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8 i = 0 ; i < 7 ; i++){
			I2C_Write(0x03);
    1a4e:	83 e0       	ldi	r24, 0x03	; 3
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
		//for the underline
		setColumnAddress((letter_in * 7),8);
		setPageAddress(1,7);
		I2C_Start(oled_write_address);
		I2C_Write(CONTROL_DATA);
		for(uint8 i = 0 ; i < 7 ; i++){
    1a56:	1f 5f       	subi	r17, 0xFF	; 255
    1a58:	17 30       	cpi	r17, 0x07	; 7
    1a5a:	c9 f7       	brne	.-14     	; 0x1a4e <name_menu+0x94>
			I2C_Write(0x03);
		}
		I2C_Stop();
    1a5c:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>
    1a60:	10 e0       	ldi	r17, 0x00	; 0
		//now we want to enter a do while loop in order to check for the buttons.
		//design a function that returns with the value of the button pressed.
		uint8 which_button = 0 ;
		do{
			which_button = 0 ;
			which_button = button_check();
    1a62:	0e 94 18 05 	call	0xa30	; 0xa30 <button_check>

			if(which_button == 3){
    1a66:	83 30       	cpi	r24, 0x03	; 3
    1a68:	51 f4       	brne	.+20     	; 0x1a7e <name_menu+0xc4>
				//this means that we pressed left
				//check if we stopping at letter a
				if(letter_count == 0){
    1a6a:	11 23       	and	r17, r17
    1a6c:	31 f4       	brne	.+12     	; 0x1a7a <name_menu+0xc0>
					letter_count = 25 ;
					letter_write(3,(letter_in * 7),letter_count);
    1a6e:	60 2f       	mov	r22, r16
    1a70:	49 e1       	ldi	r20, 0x19	; 25
    1a72:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
    1a76:	19 e1       	ldi	r17, 0x19	; 25
    1a78:	f4 cf       	rjmp	.-24     	; 0x1a62 <name_menu+0xa8>
				}else{
					letter_count-- ;
    1a7a:	11 50       	subi	r17, 0x01	; 1
    1a7c:	0b c0       	rjmp	.+22     	; 0x1a94 <name_menu+0xda>
					letter_write(3,(letter_in * 7),letter_count);
				}

			}else if(which_button == 4){
    1a7e:	84 30       	cpi	r24, 0x04	; 4
    1a80:	79 f4       	brne	.+30     	; 0x1aa0 <name_menu+0xe6>
				//this means that we pressed right
				//check if we stopping at letter z
				if(letter_count == 25){
    1a82:	19 31       	cpi	r17, 0x19	; 25
    1a84:	31 f4       	brne	.+12     	; 0x1a92 <name_menu+0xd8>
					letter_count = 0 ;
					letter_write(3,(letter_in * 7),letter_count);
    1a86:	83 e0       	ldi	r24, 0x03	; 3
    1a88:	60 2f       	mov	r22, r16
    1a8a:	40 e0       	ldi	r20, 0x00	; 0
    1a8c:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
    1a90:	e7 cf       	rjmp	.-50     	; 0x1a60 <name_menu+0xa6>
				}else{
					letter_count++ ;
    1a92:	1f 5f       	subi	r17, 0xFF	; 255
					letter_write(3,(letter_in * 7),letter_count);
    1a94:	83 e0       	ldi	r24, 0x03	; 3
    1a96:	60 2f       	mov	r22, r16
    1a98:	41 2f       	mov	r20, r17
    1a9a:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
    1a9e:	e1 cf       	rjmp	.-62     	; 0x1a62 <name_menu+0xa8>
				}
			}


		}while(which_button != 5);
    1aa0:	85 30       	cpi	r24, 0x05	; 5
    1aa2:	f9 f6       	brne	.-66     	; 0x1a62 <name_menu+0xa8>

		//now we need to store the letter the user have chosen.
		username[letter_in] = letter_count ;
    1aa4:	f7 01       	movw	r30, r14
    1aa6:	10 83       	st	Z, r17

		//now we need to clear the underline
		setColumnAddress((letter_in * 7),8);
    1aa8:	80 2f       	mov	r24, r16
    1aaa:	68 e0       	ldi	r22, 0x08	; 8
    1aac:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <setColumnAddress>
		setPageAddress(1,7);
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	67 e0       	ldi	r22, 0x07	; 7
    1ab4:	0e 94 3f 1b 	call	0x367e	; 0x367e <setPageAddress>
		I2C_Start(oled_write_address);
    1ab8:	8a e7       	ldi	r24, 0x7A	; 122
    1aba:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
		I2C_Write(CONTROL_DATA);
    1abe:	80 e4       	ldi	r24, 0x40	; 64
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
    1ac6:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8 i = 0 ; i < 7 ; i++){
			I2C_Write(0x00);
    1ac8:	80 e0       	ldi	r24, 0x00	; 0
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
		//now we need to clear the underline
		setColumnAddress((letter_in * 7),8);
		setPageAddress(1,7);
		I2C_Start(oled_write_address);
		I2C_Write(CONTROL_DATA);
		for(uint8 i = 0 ; i < 7 ; i++){
    1ad0:	1f 5f       	subi	r17, 0xFF	; 255
    1ad2:	17 30       	cpi	r17, 0x07	; 7
    1ad4:	c9 f7       	brne	.-14     	; 0x1ac8 <name_menu+0x10e>
			I2C_Write(0x00);
		}
		I2C_Stop();
    1ad6:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>
    1ada:	09 5f       	subi	r16, 0xF9	; 249
    1adc:	08 94       	sec
    1ade:	e1 1c       	adc	r14, r1
    1ae0:	f1 1c       	adc	r15, r1


	//also we want an array of 5 bytes to store the name of the user.
	//uint8 username[5] = {0} ;

	for(uint8 letter_in = 0 ; letter_in < 5 ; letter_in++){
    1ae2:	03 32       	cpi	r16, 0x23	; 35
    1ae4:	09 f0       	breq	.+2      	; 0x1ae8 <name_menu+0x12e>
    1ae6:	9e cf       	rjmp	.-196    	; 0x1a24 <name_menu+0x6a>
		}
		I2C_Stop();

	}
	//now save the name inside eeprom starting from 0x1F9
	I2C_Start(0b10101010);
    1ae8:	8a ea       	ldi	r24, 0xAA	; 170
    1aea:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
	//For the address of the boot check byte = 0x1F8
	I2C_Write(0xF9);
    1aee:	89 ef       	ldi	r24, 0xF9	; 249
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
	for(uint8 i = 0 ; i < 5 ; i++){
		I2C_Write(username[i]);
    1af6:	80 91 d8 00 	lds	r24, 0x00D8
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
    1b00:	80 91 d9 00 	lds	r24, 0x00D9
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
    1b0a:	80 91 da 00 	lds	r24, 0x00DA
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
    1b14:	80 91 db 00 	lds	r24, 0x00DB
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
    1b1e:	80 91 dc 00 	lds	r24, 0x00DC
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
	}
	I2C_Stop();
    1b28:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>

	return 1 ; //adding name to eeprom done successfully.
}
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	2d 96       	adiw	r28, 0x0d	; 13
    1b30:	0f b6       	in	r0, 0x3f	; 63
    1b32:	f8 94       	cli
    1b34:	de bf       	out	0x3e, r29	; 62
    1b36:	0f be       	out	0x3f, r0	; 63
    1b38:	cd bf       	out	0x3d, r28	; 61
    1b3a:	cf 91       	pop	r28
    1b3c:	df 91       	pop	r29
    1b3e:	1f 91       	pop	r17
    1b40:	0f 91       	pop	r16
    1b42:	ff 90       	pop	r15
    1b44:	ef 90       	pop	r14
    1b46:	08 95       	ret

00001b48 <button_init>:
	I2C_Stop();
}
/****************************************************************************/
void button_init(void){
	//For Pin2 PortC
	DIO_SetPinDirection(DIO_PORTC,DIO_PIN2,DIO_PIN_DIR_INPUT);
    1b48:	82 e0       	ldi	r24, 0x02	; 2
    1b4a:	62 e0       	ldi	r22, 0x02	; 2
    1b4c:	40 e0       	ldi	r20, 0x00	; 0
    1b4e:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <DIO_SetPinDirection>
	DIO_SetPullUpRes(DIO_PORTC, DIO_PIN2);
    1b52:	82 e0       	ldi	r24, 0x02	; 2
    1b54:	62 e0       	ldi	r22, 0x02	; 2
    1b56:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <DIO_SetPullUpRes>


	//For the 3 buttons
	DIO_SetPinDirection(DIO_PORTC, DIO_PIN3, DIO_PIN_DIR_OUTPUT);
    1b5a:	82 e0       	ldi	r24, 0x02	; 2
    1b5c:	63 e0       	ldi	r22, 0x03	; 3
    1b5e:	41 e0       	ldi	r20, 0x01	; 1
    1b60:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTC, DIO_PIN4, DIO_PIN_DIR_OUTPUT);
    1b64:	82 e0       	ldi	r24, 0x02	; 2
    1b66:	64 e0       	ldi	r22, 0x04	; 4
    1b68:	41 e0       	ldi	r20, 0x01	; 1
    1b6a:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTC, DIO_PIN5, DIO_PIN_DIR_OUTPUT);
    1b6e:	82 e0       	ldi	r24, 0x02	; 2
    1b70:	65 e0       	ldi	r22, 0x05	; 5
    1b72:	41 e0       	ldi	r20, 0x01	; 1
    1b74:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <DIO_SetPinDirection>

	//Set the values to HIGH
	DIO_SetPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_VAL_HIGH);
    1b78:	82 e0       	ldi	r24, 0x02	; 2
    1b7a:	63 e0       	ldi	r22, 0x03	; 3
    1b7c:	41 e0       	ldi	r20, 0x01	; 1
    1b7e:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTC,DIO_PIN4,DIO_PIN_VAL_HIGH);
    1b82:	82 e0       	ldi	r24, 0x02	; 2
    1b84:	64 e0       	ldi	r22, 0x04	; 4
    1b86:	41 e0       	ldi	r20, 0x01	; 1
    1b88:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTC,DIO_PIN5,DIO_PIN_VAL_HIGH);
    1b8c:	82 e0       	ldi	r24, 0x02	; 2
    1b8e:	65 e0       	ldi	r22, 0x05	; 5
    1b90:	41 e0       	ldi	r20, 0x01	; 1
    1b92:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <DIO_SetPinValue>
}
    1b96:	08 95       	ret

00001b98 <DIO_SetPortDirection>:

#include "DIO.h"

void DIO_SetPortDirection(uint8 Port, uint8 Direction){

	switch(Port){
    1b98:	81 30       	cpi	r24, 0x01	; 1
    1b9a:	79 f0       	breq	.+30     	; 0x1bba <DIO_SetPortDirection+0x22>
    1b9c:	81 30       	cpi	r24, 0x01	; 1
    1b9e:	28 f0       	brcs	.+10     	; 0x1baa <DIO_SetPortDirection+0x12>
    1ba0:	82 30       	cpi	r24, 0x02	; 2
    1ba2:	99 f0       	breq	.+38     	; 0x1bca <DIO_SetPortDirection+0x32>
    1ba4:	83 30       	cpi	r24, 0x03	; 3
    1ba6:	01 f5       	brne	.+64     	; 0x1be8 <DIO_SetPortDirection+0x50>
    1ba8:	18 c0       	rjmp	.+48     	; 0x1bda <DIO_SetPortDirection+0x42>
	case(DIO_PORTA):
						if(Direction == DIO_PORT_DIR_INPUT)
    1baa:	66 23       	and	r22, r22
    1bac:	11 f4       	brne	.+4      	; 0x1bb2 <DIO_SetPortDirection+0x1a>
							DDRA = DIO_PORT_DIR_INPUT ;
    1bae:	1a ba       	out	0x1a, r1	; 26
    1bb0:	08 95       	ret
						else if(Direction == DIO_PORT_DIR_OUTPUT)
    1bb2:	6f 3f       	cpi	r22, 0xFF	; 255
    1bb4:	c9 f4       	brne	.+50     	; 0x1be8 <DIO_SetPortDirection+0x50>
							DDRA = DIO_PORT_DIR_OUTPUT ;
    1bb6:	6a bb       	out	0x1a, r22	; 26
    1bb8:	08 95       	ret
	break ;

	case(DIO_PORTB):
						if(Direction == DIO_PORT_DIR_INPUT)
    1bba:	66 23       	and	r22, r22
    1bbc:	11 f4       	brne	.+4      	; 0x1bc2 <DIO_SetPortDirection+0x2a>
							DDRB = DIO_PORT_DIR_INPUT ;
    1bbe:	17 ba       	out	0x17, r1	; 23
    1bc0:	08 95       	ret
						else if(Direction == DIO_PORT_DIR_OUTPUT)
    1bc2:	6f 3f       	cpi	r22, 0xFF	; 255
    1bc4:	89 f4       	brne	.+34     	; 0x1be8 <DIO_SetPortDirection+0x50>
							DDRB = DIO_PORT_DIR_OUTPUT ;
    1bc6:	67 bb       	out	0x17, r22	; 23
    1bc8:	08 95       	ret
	break ;


	case(DIO_PORTC):
						if(Direction == DIO_PORT_DIR_INPUT)
    1bca:	66 23       	and	r22, r22
    1bcc:	11 f4       	brne	.+4      	; 0x1bd2 <DIO_SetPortDirection+0x3a>
							DDRC = DIO_PORT_DIR_INPUT ;
    1bce:	14 ba       	out	0x14, r1	; 20
    1bd0:	08 95       	ret
						else if(Direction == DIO_PORT_DIR_OUTPUT)
    1bd2:	6f 3f       	cpi	r22, 0xFF	; 255
    1bd4:	49 f4       	brne	.+18     	; 0x1be8 <DIO_SetPortDirection+0x50>
							DDRC = DIO_PORT_DIR_OUTPUT ;
    1bd6:	64 bb       	out	0x14, r22	; 20
    1bd8:	08 95       	ret
	break ;


	case(DIO_PORTD):
						if(Direction == DIO_PORT_DIR_INPUT)
    1bda:	66 23       	and	r22, r22
    1bdc:	11 f4       	brne	.+4      	; 0x1be2 <DIO_SetPortDirection+0x4a>
							DDRD = DIO_PORT_DIR_INPUT ;
    1bde:	11 ba       	out	0x11, r1	; 17
    1be0:	08 95       	ret
						else if(Direction == DIO_PORT_DIR_OUTPUT)
    1be2:	6f 3f       	cpi	r22, 0xFF	; 255
    1be4:	09 f4       	brne	.+2      	; 0x1be8 <DIO_SetPortDirection+0x50>
							DDRD = DIO_PORT_DIR_OUTPUT ;
    1be6:	61 bb       	out	0x11, r22	; 17
    1be8:	08 95       	ret

00001bea <DIO_SetPinDirection>:
	}

}

void DIO_SetPinDirection(uint8 Port, uint8 Pin, uint8 Direction){
	switch(Port){
    1bea:	81 30       	cpi	r24, 0x01	; 1
    1bec:	29 f1       	breq	.+74     	; 0x1c38 <DIO_SetPinDirection+0x4e>
    1bee:	81 30       	cpi	r24, 0x01	; 1
    1bf0:	38 f0       	brcs	.+14     	; 0x1c00 <DIO_SetPinDirection+0x16>
    1bf2:	82 30       	cpi	r24, 0x02	; 2
    1bf4:	09 f4       	brne	.+2      	; 0x1bf8 <DIO_SetPinDirection+0xe>
    1bf6:	3c c0       	rjmp	.+120    	; 0x1c70 <DIO_SetPinDirection+0x86>
    1bf8:	83 30       	cpi	r24, 0x03	; 3
    1bfa:	09 f0       	breq	.+2      	; 0x1bfe <DIO_SetPinDirection+0x14>
    1bfc:	6e c0       	rjmp	.+220    	; 0x1cda <DIO_SetPinDirection+0xf0>
    1bfe:	53 c0       	rjmp	.+166    	; 0x1ca6 <DIO_SetPinDirection+0xbc>

	case(DIO_PORTA):
			if(Direction == DIO_PIN_DIR_INPUT)
    1c00:	44 23       	and	r20, r20
    1c02:	61 f4       	brne	.+24     	; 0x1c1c <DIO_SetPinDirection+0x32>
				CLR_BIT(DDRA,Pin);
    1c04:	2a b3       	in	r18, 0x1a	; 26
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	02 c0       	rjmp	.+4      	; 0x1c10 <DIO_SetPinDirection+0x26>
    1c0c:	88 0f       	add	r24, r24
    1c0e:	99 1f       	adc	r25, r25
    1c10:	6a 95       	dec	r22
    1c12:	e2 f7       	brpl	.-8      	; 0x1c0c <DIO_SetPinDirection+0x22>
    1c14:	80 95       	com	r24
    1c16:	82 23       	and	r24, r18
    1c18:	8a bb       	out	0x1a, r24	; 26
    1c1a:	08 95       	ret
			else if(Direction == DIO_PIN_DIR_OUTPUT)
    1c1c:	41 30       	cpi	r20, 0x01	; 1
    1c1e:	09 f0       	breq	.+2      	; 0x1c22 <DIO_SetPinDirection+0x38>
    1c20:	5c c0       	rjmp	.+184    	; 0x1cda <DIO_SetPinDirection+0xf0>
				SET_BIT(DDRA,Pin);
    1c22:	2a b3       	in	r18, 0x1a	; 26
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	02 c0       	rjmp	.+4      	; 0x1c2e <DIO_SetPinDirection+0x44>
    1c2a:	88 0f       	add	r24, r24
    1c2c:	99 1f       	adc	r25, r25
    1c2e:	6a 95       	dec	r22
    1c30:	e2 f7       	brpl	.-8      	; 0x1c2a <DIO_SetPinDirection+0x40>
    1c32:	28 2b       	or	r18, r24
    1c34:	2a bb       	out	0x1a, r18	; 26
    1c36:	08 95       	ret
	break;

	case(DIO_PORTB):
			if(Direction == DIO_PIN_DIR_INPUT)
    1c38:	44 23       	and	r20, r20
    1c3a:	61 f4       	brne	.+24     	; 0x1c54 <DIO_SetPinDirection+0x6a>
				CLR_BIT(DDRB,Pin);
    1c3c:	27 b3       	in	r18, 0x17	; 23
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	02 c0       	rjmp	.+4      	; 0x1c48 <DIO_SetPinDirection+0x5e>
    1c44:	88 0f       	add	r24, r24
    1c46:	99 1f       	adc	r25, r25
    1c48:	6a 95       	dec	r22
    1c4a:	e2 f7       	brpl	.-8      	; 0x1c44 <DIO_SetPinDirection+0x5a>
    1c4c:	80 95       	com	r24
    1c4e:	82 23       	and	r24, r18
    1c50:	87 bb       	out	0x17, r24	; 23
    1c52:	08 95       	ret
			else if(Direction == DIO_PIN_DIR_OUTPUT)
    1c54:	41 30       	cpi	r20, 0x01	; 1
    1c56:	09 f0       	breq	.+2      	; 0x1c5a <DIO_SetPinDirection+0x70>
    1c58:	40 c0       	rjmp	.+128    	; 0x1cda <DIO_SetPinDirection+0xf0>
				SET_BIT(DDRB,Pin);
    1c5a:	27 b3       	in	r18, 0x17	; 23
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	02 c0       	rjmp	.+4      	; 0x1c66 <DIO_SetPinDirection+0x7c>
    1c62:	88 0f       	add	r24, r24
    1c64:	99 1f       	adc	r25, r25
    1c66:	6a 95       	dec	r22
    1c68:	e2 f7       	brpl	.-8      	; 0x1c62 <DIO_SetPinDirection+0x78>
    1c6a:	28 2b       	or	r18, r24
    1c6c:	27 bb       	out	0x17, r18	; 23
    1c6e:	08 95       	ret
	break;

	case(DIO_PORTC):
			if(Direction == DIO_PIN_DIR_INPUT)
    1c70:	44 23       	and	r20, r20
    1c72:	61 f4       	brne	.+24     	; 0x1c8c <DIO_SetPinDirection+0xa2>
				CLR_BIT(DDRC,Pin);
    1c74:	24 b3       	in	r18, 0x14	; 20
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	02 c0       	rjmp	.+4      	; 0x1c80 <DIO_SetPinDirection+0x96>
    1c7c:	88 0f       	add	r24, r24
    1c7e:	99 1f       	adc	r25, r25
    1c80:	6a 95       	dec	r22
    1c82:	e2 f7       	brpl	.-8      	; 0x1c7c <DIO_SetPinDirection+0x92>
    1c84:	80 95       	com	r24
    1c86:	82 23       	and	r24, r18
    1c88:	84 bb       	out	0x14, r24	; 20
    1c8a:	08 95       	ret
			else if(Direction == DIO_PIN_DIR_OUTPUT)
    1c8c:	41 30       	cpi	r20, 0x01	; 1
    1c8e:	29 f5       	brne	.+74     	; 0x1cda <DIO_SetPinDirection+0xf0>
				SET_BIT(DDRC,Pin);
    1c90:	24 b3       	in	r18, 0x14	; 20
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	02 c0       	rjmp	.+4      	; 0x1c9c <DIO_SetPinDirection+0xb2>
    1c98:	88 0f       	add	r24, r24
    1c9a:	99 1f       	adc	r25, r25
    1c9c:	6a 95       	dec	r22
    1c9e:	e2 f7       	brpl	.-8      	; 0x1c98 <DIO_SetPinDirection+0xae>
    1ca0:	28 2b       	or	r18, r24
    1ca2:	24 bb       	out	0x14, r18	; 20
    1ca4:	08 95       	ret
		break;

	case(DIO_PORTD):
			if(Direction == DIO_PIN_DIR_INPUT)
    1ca6:	44 23       	and	r20, r20
    1ca8:	61 f4       	brne	.+24     	; 0x1cc2 <DIO_SetPinDirection+0xd8>
				CLR_BIT(DDRD,Pin);
    1caa:	21 b3       	in	r18, 0x11	; 17
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	02 c0       	rjmp	.+4      	; 0x1cb6 <DIO_SetPinDirection+0xcc>
    1cb2:	88 0f       	add	r24, r24
    1cb4:	99 1f       	adc	r25, r25
    1cb6:	6a 95       	dec	r22
    1cb8:	e2 f7       	brpl	.-8      	; 0x1cb2 <DIO_SetPinDirection+0xc8>
    1cba:	80 95       	com	r24
    1cbc:	82 23       	and	r24, r18
    1cbe:	81 bb       	out	0x11, r24	; 17
    1cc0:	08 95       	ret
			else if(Direction == DIO_PIN_DIR_OUTPUT)
    1cc2:	41 30       	cpi	r20, 0x01	; 1
    1cc4:	51 f4       	brne	.+20     	; 0x1cda <DIO_SetPinDirection+0xf0>
				SET_BIT(DDRD,Pin);
    1cc6:	21 b3       	in	r18, 0x11	; 17
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	02 c0       	rjmp	.+4      	; 0x1cd2 <DIO_SetPinDirection+0xe8>
    1cce:	88 0f       	add	r24, r24
    1cd0:	99 1f       	adc	r25, r25
    1cd2:	6a 95       	dec	r22
    1cd4:	e2 f7       	brpl	.-8      	; 0x1cce <DIO_SetPinDirection+0xe4>
    1cd6:	28 2b       	or	r18, r24
    1cd8:	21 bb       	out	0x11, r18	; 17
    1cda:	08 95       	ret

00001cdc <DIO_SetPortValue>:
	}

}

void DIO_SetPortValue(uint8 Port, uint8 Value){
	switch(Value){
    1cdc:	66 23       	and	r22, r22
    1cde:	61 f0       	breq	.+24     	; 0x1cf8 <DIO_SetPortValue+0x1c>
    1ce0:	6f 3f       	cpi	r22, 0xFF	; 255
    1ce2:	d9 f4       	brne	.+54     	; 0x1d1a <DIO_SetPortValue+0x3e>

	case(DIO_PORT_VAL_HIGH):
			switch(Port){
    1ce4:	81 30       	cpi	r24, 0x01	; 1
    1ce6:	21 f1       	breq	.+72     	; 0x1d30 <DIO_SetPortValue+0x54>
    1ce8:	81 30       	cpi	r24, 0x01	; 1
    1cea:	00 f1       	brcs	.+64     	; 0x1d2c <DIO_SetPortValue+0x50>
    1cec:	82 30       	cpi	r24, 0x02	; 2
    1cee:	11 f1       	breq	.+68     	; 0x1d34 <DIO_SetPortValue+0x58>
    1cf0:	83 30       	cpi	r24, 0x03	; 3
    1cf2:	19 f5       	brne	.+70     	; 0x1d3a <DIO_SetPortValue+0x5e>
					break;
			case(DIO_PORTC):
					PORTC = DIO_PORT_VAL_HIGH ;
					break;
			case(DIO_PORTD):
					PORTD = DIO_PORT_VAL_HIGH ;
    1cf4:	62 bb       	out	0x12, r22	; 18
    1cf6:	08 95       	ret
				break;
			}
		break;

		case(DIO_PORT_VAL_LOW):
			switch(Port){
    1cf8:	81 30       	cpi	r24, 0x01	; 1
    1cfa:	49 f0       	breq	.+18     	; 0x1d0e <DIO_SetPortValue+0x32>
    1cfc:	81 30       	cpi	r24, 0x01	; 1
    1cfe:	28 f0       	brcs	.+10     	; 0x1d0a <DIO_SetPortValue+0x2e>
    1d00:	82 30       	cpi	r24, 0x02	; 2
    1d02:	39 f0       	breq	.+14     	; 0x1d12 <DIO_SetPortValue+0x36>
    1d04:	83 30       	cpi	r24, 0x03	; 3
    1d06:	c9 f4       	brne	.+50     	; 0x1d3a <DIO_SetPortValue+0x5e>
    1d08:	06 c0       	rjmp	.+12     	; 0x1d16 <DIO_SetPortValue+0x3a>
			case(DIO_PORTA):
					PORTA = DIO_PORT_VAL_LOW ;
    1d0a:	1b ba       	out	0x1b, r1	; 27
    1d0c:	08 95       	ret
					break;
			case(DIO_PORTB):
					PORTB = DIO_PORT_VAL_LOW ;
    1d0e:	18 ba       	out	0x18, r1	; 24
    1d10:	08 95       	ret
					break;
			case(DIO_PORTC):
					PORTC = DIO_PORT_VAL_LOW ;
    1d12:	15 ba       	out	0x15, r1	; 21
    1d14:	08 95       	ret
					break;
			case(DIO_PORTD):
					PORTD = DIO_PORT_VAL_LOW ;
    1d16:	12 ba       	out	0x12, r1	; 18
    1d18:	08 95       	ret
				break;
			}
			break;

			default:
				switch(Port){
    1d1a:	81 30       	cpi	r24, 0x01	; 1
    1d1c:	49 f0       	breq	.+18     	; 0x1d30 <DIO_SetPortValue+0x54>
    1d1e:	81 30       	cpi	r24, 0x01	; 1
    1d20:	28 f0       	brcs	.+10     	; 0x1d2c <DIO_SetPortValue+0x50>
    1d22:	82 30       	cpi	r24, 0x02	; 2
    1d24:	39 f0       	breq	.+14     	; 0x1d34 <DIO_SetPortValue+0x58>
    1d26:	83 30       	cpi	r24, 0x03	; 3
    1d28:	41 f4       	brne	.+16     	; 0x1d3a <DIO_SetPortValue+0x5e>
    1d2a:	06 c0       	rjmp	.+12     	; 0x1d38 <DIO_SetPortValue+0x5c>
				case(DIO_PORTA):
						PORTA = Value ;
    1d2c:	6b bb       	out	0x1b, r22	; 27
    1d2e:	08 95       	ret
						break;
				case(DIO_PORTB):
						PORTB = Value ;
    1d30:	68 bb       	out	0x18, r22	; 24
    1d32:	08 95       	ret
						break;
				case(DIO_PORTC):
						PORTC = Value ;
    1d34:	65 bb       	out	0x15, r22	; 21
    1d36:	08 95       	ret
						break;
				case(DIO_PORTD):
						PORTD = Value ;
    1d38:	62 bb       	out	0x12, r22	; 18
    1d3a:	08 95       	ret

00001d3c <DIO_SetPinValue>:
	}

}

void DIO_SetPinValue(uint8 Port, uint8 Pin, uint8 Value){
	switch(Value){
    1d3c:	44 23       	and	r20, r20
    1d3e:	c9 f1       	breq	.+114    	; 0x1db2 <DIO_SetPinValue+0x76>
    1d40:	41 30       	cpi	r20, 0x01	; 1
    1d42:	09 f0       	breq	.+2      	; 0x1d46 <DIO_SetPinValue+0xa>
    1d44:	6e c0       	rjmp	.+220    	; 0x1e22 <DIO_SetPinValue+0xe6>

	case(DIO_PIN_VAL_HIGH):
			switch(Port){
    1d46:	81 30       	cpi	r24, 0x01	; 1
    1d48:	99 f0       	breq	.+38     	; 0x1d70 <DIO_SetPinValue+0x34>
    1d4a:	81 30       	cpi	r24, 0x01	; 1
    1d4c:	30 f0       	brcs	.+12     	; 0x1d5a <DIO_SetPinValue+0x1e>
    1d4e:	82 30       	cpi	r24, 0x02	; 2
    1d50:	d1 f0       	breq	.+52     	; 0x1d86 <DIO_SetPinValue+0x4a>
    1d52:	83 30       	cpi	r24, 0x03	; 3
    1d54:	09 f0       	breq	.+2      	; 0x1d58 <DIO_SetPinValue+0x1c>
    1d56:	65 c0       	rjmp	.+202    	; 0x1e22 <DIO_SetPinValue+0xe6>
    1d58:	21 c0       	rjmp	.+66     	; 0x1d9c <DIO_SetPinValue+0x60>
			case(DIO_PORTA):
					SET_BIT(PORTA,Pin) ;
    1d5a:	2b b3       	in	r18, 0x1b	; 27
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	02 c0       	rjmp	.+4      	; 0x1d66 <DIO_SetPinValue+0x2a>
    1d62:	88 0f       	add	r24, r24
    1d64:	99 1f       	adc	r25, r25
    1d66:	6a 95       	dec	r22
    1d68:	e2 f7       	brpl	.-8      	; 0x1d62 <DIO_SetPinValue+0x26>
    1d6a:	28 2b       	or	r18, r24
    1d6c:	2b bb       	out	0x1b, r18	; 27
    1d6e:	08 95       	ret
					break;
			case(DIO_PORTB):
					SET_BIT(PORTB,Pin) ;
    1d70:	28 b3       	in	r18, 0x18	; 24
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	02 c0       	rjmp	.+4      	; 0x1d7c <DIO_SetPinValue+0x40>
    1d78:	88 0f       	add	r24, r24
    1d7a:	99 1f       	adc	r25, r25
    1d7c:	6a 95       	dec	r22
    1d7e:	e2 f7       	brpl	.-8      	; 0x1d78 <DIO_SetPinValue+0x3c>
    1d80:	28 2b       	or	r18, r24
    1d82:	28 bb       	out	0x18, r18	; 24
    1d84:	08 95       	ret
					break;
			case(DIO_PORTC):
					SET_BIT(PORTC,Pin) ;
    1d86:	25 b3       	in	r18, 0x15	; 21
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	02 c0       	rjmp	.+4      	; 0x1d92 <DIO_SetPinValue+0x56>
    1d8e:	88 0f       	add	r24, r24
    1d90:	99 1f       	adc	r25, r25
    1d92:	6a 95       	dec	r22
    1d94:	e2 f7       	brpl	.-8      	; 0x1d8e <DIO_SetPinValue+0x52>
    1d96:	28 2b       	or	r18, r24
    1d98:	25 bb       	out	0x15, r18	; 21
    1d9a:	08 95       	ret
					break;
			case(DIO_PORTD):
					SET_BIT(PORTD,Pin) ;
    1d9c:	22 b3       	in	r18, 0x12	; 18
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	02 c0       	rjmp	.+4      	; 0x1da8 <DIO_SetPinValue+0x6c>
    1da4:	88 0f       	add	r24, r24
    1da6:	99 1f       	adc	r25, r25
    1da8:	6a 95       	dec	r22
    1daa:	e2 f7       	brpl	.-8      	; 0x1da4 <DIO_SetPinValue+0x68>
    1dac:	28 2b       	or	r18, r24
    1dae:	22 bb       	out	0x12, r18	; 18
    1db0:	08 95       	ret
				break;
			}
	break;

	case(DIO_PIN_VAL_LOW):
			switch(Port){
    1db2:	81 30       	cpi	r24, 0x01	; 1
    1db4:	99 f0       	breq	.+38     	; 0x1ddc <DIO_SetPinValue+0xa0>
    1db6:	81 30       	cpi	r24, 0x01	; 1
    1db8:	28 f0       	brcs	.+10     	; 0x1dc4 <DIO_SetPinValue+0x88>
    1dba:	82 30       	cpi	r24, 0x02	; 2
    1dbc:	d9 f0       	breq	.+54     	; 0x1df4 <DIO_SetPinValue+0xb8>
    1dbe:	83 30       	cpi	r24, 0x03	; 3
    1dc0:	81 f5       	brne	.+96     	; 0x1e22 <DIO_SetPinValue+0xe6>
    1dc2:	24 c0       	rjmp	.+72     	; 0x1e0c <DIO_SetPinValue+0xd0>
			case(DIO_PORTA):
					CLR_BIT(PORTA,Pin) ;
    1dc4:	2b b3       	in	r18, 0x1b	; 27
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	02 c0       	rjmp	.+4      	; 0x1dd0 <DIO_SetPinValue+0x94>
    1dcc:	88 0f       	add	r24, r24
    1dce:	99 1f       	adc	r25, r25
    1dd0:	6a 95       	dec	r22
    1dd2:	e2 f7       	brpl	.-8      	; 0x1dcc <DIO_SetPinValue+0x90>
    1dd4:	80 95       	com	r24
    1dd6:	82 23       	and	r24, r18
    1dd8:	8b bb       	out	0x1b, r24	; 27
    1dda:	08 95       	ret
					break;
			case(DIO_PORTB):
					CLR_BIT(PORTB,Pin) ;
    1ddc:	28 b3       	in	r18, 0x18	; 24
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	02 c0       	rjmp	.+4      	; 0x1de8 <DIO_SetPinValue+0xac>
    1de4:	88 0f       	add	r24, r24
    1de6:	99 1f       	adc	r25, r25
    1de8:	6a 95       	dec	r22
    1dea:	e2 f7       	brpl	.-8      	; 0x1de4 <DIO_SetPinValue+0xa8>
    1dec:	80 95       	com	r24
    1dee:	82 23       	and	r24, r18
    1df0:	88 bb       	out	0x18, r24	; 24
    1df2:	08 95       	ret
					break;
			case(DIO_PORTC):
					CLR_BIT(PORTC,Pin) ;
    1df4:	25 b3       	in	r18, 0x15	; 21
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	02 c0       	rjmp	.+4      	; 0x1e00 <DIO_SetPinValue+0xc4>
    1dfc:	88 0f       	add	r24, r24
    1dfe:	99 1f       	adc	r25, r25
    1e00:	6a 95       	dec	r22
    1e02:	e2 f7       	brpl	.-8      	; 0x1dfc <DIO_SetPinValue+0xc0>
    1e04:	80 95       	com	r24
    1e06:	82 23       	and	r24, r18
    1e08:	85 bb       	out	0x15, r24	; 21
    1e0a:	08 95       	ret
					break;
			case(DIO_PORTD):
					CLR_BIT(PORTD,Pin) ;
    1e0c:	22 b3       	in	r18, 0x12	; 18
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	02 c0       	rjmp	.+4      	; 0x1e18 <DIO_SetPinValue+0xdc>
    1e14:	88 0f       	add	r24, r24
    1e16:	99 1f       	adc	r25, r25
    1e18:	6a 95       	dec	r22
    1e1a:	e2 f7       	brpl	.-8      	; 0x1e14 <DIO_SetPinValue+0xd8>
    1e1c:	80 95       	com	r24
    1e1e:	82 23       	and	r24, r18
    1e20:	82 bb       	out	0x12, r24	; 18
    1e22:	08 95       	ret

00001e24 <DIO_GetPortValue>:

}



void DIO_GetPortValue(uint8 Port, uint8 *Value){
    1e24:	fb 01       	movw	r30, r22

	switch(Port){
    1e26:	81 30       	cpi	r24, 0x01	; 1
    1e28:	49 f0       	breq	.+18     	; 0x1e3c <DIO_GetPortValue+0x18>
    1e2a:	81 30       	cpi	r24, 0x01	; 1
    1e2c:	28 f0       	brcs	.+10     	; 0x1e38 <DIO_GetPortValue+0x14>
    1e2e:	82 30       	cpi	r24, 0x02	; 2
    1e30:	39 f0       	breq	.+14     	; 0x1e40 <DIO_GetPortValue+0x1c>
    1e32:	83 30       	cpi	r24, 0x03	; 3
    1e34:	51 f4       	brne	.+20     	; 0x1e4a <DIO_GetPortValue+0x26>
    1e36:	07 c0       	rjmp	.+14     	; 0x1e46 <DIO_GetPortValue+0x22>
	case DIO_PORTA :
		*Value = PINA ;
    1e38:	89 b3       	in	r24, 0x19	; 25
    1e3a:	03 c0       	rjmp	.+6      	; 0x1e42 <DIO_GetPortValue+0x1e>
		break;

	case DIO_PORTB :
		*Value = PINB ;
    1e3c:	86 b3       	in	r24, 0x16	; 22
    1e3e:	01 c0       	rjmp	.+2      	; 0x1e42 <DIO_GetPortValue+0x1e>
		break;

	case DIO_PORTC :
		*Value = PINC ;
    1e40:	83 b3       	in	r24, 0x13	; 19
    1e42:	80 83       	st	Z, r24
    1e44:	08 95       	ret
		break;

	case DIO_PORTD :
		*Value = PIND ;
    1e46:	80 b3       	in	r24, 0x10	; 16
    1e48:	80 83       	st	Z, r24
    1e4a:	08 95       	ret

00001e4c <DIO_GetPinValue>:
		break;
	}

}

void DIO_GetPinValue(uint8 Port, uint8 Pin, uint8 *Value){
    1e4c:	fa 01       	movw	r30, r20

	switch(Port){
    1e4e:	81 30       	cpi	r24, 0x01	; 1
    1e50:	49 f0       	breq	.+18     	; 0x1e64 <DIO_GetPinValue+0x18>
    1e52:	81 30       	cpi	r24, 0x01	; 1
    1e54:	28 f0       	brcs	.+10     	; 0x1e60 <DIO_GetPinValue+0x14>
    1e56:	82 30       	cpi	r24, 0x02	; 2
    1e58:	39 f0       	breq	.+14     	; 0x1e68 <DIO_GetPinValue+0x1c>
    1e5a:	83 30       	cpi	r24, 0x03	; 3
    1e5c:	c1 f4       	brne	.+48     	; 0x1e8e <DIO_GetPinValue+0x42>
    1e5e:	0e c0       	rjmp	.+28     	; 0x1e7c <DIO_GetPinValue+0x30>
	case DIO_PORTA :
		*Value = GET_BIT(PINA,Pin) ;
    1e60:	89 b3       	in	r24, 0x19	; 25
    1e62:	03 c0       	rjmp	.+6      	; 0x1e6a <DIO_GetPinValue+0x1e>
		break;

	case DIO_PORTB :
		*Value = GET_BIT(PINB,Pin) ;
    1e64:	86 b3       	in	r24, 0x16	; 22
    1e66:	01 c0       	rjmp	.+2      	; 0x1e6a <DIO_GetPinValue+0x1e>
		break;

	case DIO_PORTC :
		*Value = GET_BIT(PINC,Pin) ;
    1e68:	83 b3       	in	r24, 0x13	; 19
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	02 c0       	rjmp	.+4      	; 0x1e72 <DIO_GetPinValue+0x26>
    1e6e:	95 95       	asr	r25
    1e70:	87 95       	ror	r24
    1e72:	6a 95       	dec	r22
    1e74:	e2 f7       	brpl	.-8      	; 0x1e6e <DIO_GetPinValue+0x22>
    1e76:	81 70       	andi	r24, 0x01	; 1
    1e78:	80 83       	st	Z, r24
    1e7a:	08 95       	ret
		break;

	case DIO_PORTD :
		*Value = GET_BIT(PIND,Pin) ;
    1e7c:	80 b3       	in	r24, 0x10	; 16
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	02 c0       	rjmp	.+4      	; 0x1e86 <DIO_GetPinValue+0x3a>
    1e82:	95 95       	asr	r25
    1e84:	87 95       	ror	r24
    1e86:	6a 95       	dec	r22
    1e88:	e2 f7       	brpl	.-8      	; 0x1e82 <DIO_GetPinValue+0x36>
    1e8a:	81 70       	andi	r24, 0x01	; 1
    1e8c:	80 83       	st	Z, r24
    1e8e:	08 95       	ret

00001e90 <DIO_TogglePin>:
	}

}

void DIO_TogglePin(uint8 Port, uint8 Pin){
	switch(Port){
    1e90:	81 30       	cpi	r24, 0x01	; 1
    1e92:	91 f0       	breq	.+36     	; 0x1eb8 <DIO_TogglePin+0x28>
    1e94:	81 30       	cpi	r24, 0x01	; 1
    1e96:	28 f0       	brcs	.+10     	; 0x1ea2 <DIO_TogglePin+0x12>
    1e98:	82 30       	cpi	r24, 0x02	; 2
    1e9a:	c9 f0       	breq	.+50     	; 0x1ece <DIO_TogglePin+0x3e>
    1e9c:	83 30       	cpi	r24, 0x03	; 3
    1e9e:	61 f5       	brne	.+88     	; 0x1ef8 <DIO_TogglePin+0x68>
    1ea0:	21 c0       	rjmp	.+66     	; 0x1ee4 <DIO_TogglePin+0x54>
	case DIO_PORTA :
		Toggle_BIT(PORTA,Pin);
    1ea2:	2b b3       	in	r18, 0x1b	; 27
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	02 c0       	rjmp	.+4      	; 0x1eae <DIO_TogglePin+0x1e>
    1eaa:	88 0f       	add	r24, r24
    1eac:	99 1f       	adc	r25, r25
    1eae:	6a 95       	dec	r22
    1eb0:	e2 f7       	brpl	.-8      	; 0x1eaa <DIO_TogglePin+0x1a>
    1eb2:	28 27       	eor	r18, r24
    1eb4:	2b bb       	out	0x1b, r18	; 27
    1eb6:	08 95       	ret
		break;

	case DIO_PORTB :
		Toggle_BIT(PORTB,Pin);
    1eb8:	28 b3       	in	r18, 0x18	; 24
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	02 c0       	rjmp	.+4      	; 0x1ec4 <DIO_TogglePin+0x34>
    1ec0:	88 0f       	add	r24, r24
    1ec2:	99 1f       	adc	r25, r25
    1ec4:	6a 95       	dec	r22
    1ec6:	e2 f7       	brpl	.-8      	; 0x1ec0 <DIO_TogglePin+0x30>
    1ec8:	28 27       	eor	r18, r24
    1eca:	28 bb       	out	0x18, r18	; 24
    1ecc:	08 95       	ret
		break;

	case DIO_PORTC :
		Toggle_BIT(PORTC,Pin);
    1ece:	25 b3       	in	r18, 0x15	; 21
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	02 c0       	rjmp	.+4      	; 0x1eda <DIO_TogglePin+0x4a>
    1ed6:	88 0f       	add	r24, r24
    1ed8:	99 1f       	adc	r25, r25
    1eda:	6a 95       	dec	r22
    1edc:	e2 f7       	brpl	.-8      	; 0x1ed6 <DIO_TogglePin+0x46>
    1ede:	28 27       	eor	r18, r24
    1ee0:	25 bb       	out	0x15, r18	; 21
    1ee2:	08 95       	ret
		break;

	case DIO_PORTD :
		Toggle_BIT(PORTD,Pin);
    1ee4:	22 b3       	in	r18, 0x12	; 18
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	02 c0       	rjmp	.+4      	; 0x1ef0 <DIO_TogglePin+0x60>
    1eec:	88 0f       	add	r24, r24
    1eee:	99 1f       	adc	r25, r25
    1ef0:	6a 95       	dec	r22
    1ef2:	e2 f7       	brpl	.-8      	; 0x1eec <DIO_TogglePin+0x5c>
    1ef4:	28 27       	eor	r18, r24
    1ef6:	22 bb       	out	0x12, r18	; 18
    1ef8:	08 95       	ret

00001efa <DIO_SetPullUpRes>:

}


void DIO_SetPullUpRes(uint8 Port, uint8 Pin){
	switch(Port){
    1efa:	81 30       	cpi	r24, 0x01	; 1
    1efc:	91 f0       	breq	.+36     	; 0x1f22 <DIO_SetPullUpRes+0x28>
    1efe:	81 30       	cpi	r24, 0x01	; 1
    1f00:	28 f0       	brcs	.+10     	; 0x1f0c <DIO_SetPullUpRes+0x12>
    1f02:	82 30       	cpi	r24, 0x02	; 2
    1f04:	c9 f0       	breq	.+50     	; 0x1f38 <DIO_SetPullUpRes+0x3e>
    1f06:	83 30       	cpi	r24, 0x03	; 3
    1f08:	61 f5       	brne	.+88     	; 0x1f62 <DIO_SetPullUpRes+0x68>
    1f0a:	21 c0       	rjmp	.+66     	; 0x1f4e <DIO_SetPullUpRes+0x54>
	case DIO_PORTA :
		SET_BIT(PORTA,Pin);
    1f0c:	2b b3       	in	r18, 0x1b	; 27
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	02 c0       	rjmp	.+4      	; 0x1f18 <DIO_SetPullUpRes+0x1e>
    1f14:	88 0f       	add	r24, r24
    1f16:	99 1f       	adc	r25, r25
    1f18:	6a 95       	dec	r22
    1f1a:	e2 f7       	brpl	.-8      	; 0x1f14 <DIO_SetPullUpRes+0x1a>
    1f1c:	28 2b       	or	r18, r24
    1f1e:	2b bb       	out	0x1b, r18	; 27
    1f20:	08 95       	ret
		break;

	case DIO_PORTB :
		SET_BIT(PORTB,Pin);
    1f22:	28 b3       	in	r18, 0x18	; 24
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	02 c0       	rjmp	.+4      	; 0x1f2e <DIO_SetPullUpRes+0x34>
    1f2a:	88 0f       	add	r24, r24
    1f2c:	99 1f       	adc	r25, r25
    1f2e:	6a 95       	dec	r22
    1f30:	e2 f7       	brpl	.-8      	; 0x1f2a <DIO_SetPullUpRes+0x30>
    1f32:	28 2b       	or	r18, r24
    1f34:	28 bb       	out	0x18, r18	; 24
    1f36:	08 95       	ret
		break;

	case DIO_PORTC :
		SET_BIT(PORTC,Pin);
    1f38:	25 b3       	in	r18, 0x15	; 21
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	02 c0       	rjmp	.+4      	; 0x1f44 <DIO_SetPullUpRes+0x4a>
    1f40:	88 0f       	add	r24, r24
    1f42:	99 1f       	adc	r25, r25
    1f44:	6a 95       	dec	r22
    1f46:	e2 f7       	brpl	.-8      	; 0x1f40 <DIO_SetPullUpRes+0x46>
    1f48:	28 2b       	or	r18, r24
    1f4a:	25 bb       	out	0x15, r18	; 21
    1f4c:	08 95       	ret
		break;

	case DIO_PORTD :
		SET_BIT(PORTD,Pin);
    1f4e:	22 b3       	in	r18, 0x12	; 18
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	02 c0       	rjmp	.+4      	; 0x1f5a <DIO_SetPullUpRes+0x60>
    1f56:	88 0f       	add	r24, r24
    1f58:	99 1f       	adc	r25, r25
    1f5a:	6a 95       	dec	r22
    1f5c:	e2 f7       	brpl	.-8      	; 0x1f56 <DIO_SetPullUpRes+0x5c>
    1f5e:	28 2b       	or	r18, r24
    1f60:	22 bb       	out	0x12, r18	; 18
    1f62:	08 95       	ret

00001f64 <TASK_CREATE>:

Task arr[NUM_TASKS] = {} ;


void TASK_CREATE(uint8 priority, uint8 period, void(*Func_ptr)(void)){
	arr[priority].Period = period ;
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	fc 01       	movw	r30, r24
    1f68:	ee 0f       	add	r30, r30
    1f6a:	ff 1f       	adc	r31, r31
    1f6c:	e8 0f       	add	r30, r24
    1f6e:	f9 1f       	adc	r31, r25
    1f70:	e2 52       	subi	r30, 0x22	; 34
    1f72:	ff 4f       	sbci	r31, 0xFF	; 255
    1f74:	60 83       	st	Z, r22
	arr[priority].Func_ptr = Func_ptr ;
    1f76:	52 83       	std	Z+2, r21	; 0x02
    1f78:	41 83       	std	Z+1, r20	; 0x01
}
    1f7a:	08 95       	ret

00001f7c <Scheduler>:
		LCD_WriteString(name);
	}

}

void Scheduler(uint8 ticks){
    1f7c:	1f 93       	push	r17
    1f7e:	cf 93       	push	r28
    1f80:	df 93       	push	r29
    1f82:	18 2f       	mov	r17, r24
    1f84:	ce ed       	ldi	r28, 0xDE	; 222
    1f86:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i = 0 ; i < NUM_TASKS ; i++){
		if(ticks % arr[i].Period == 0){
    1f88:	68 81       	ld	r22, Y
    1f8a:	81 2f       	mov	r24, r17
    1f8c:	0e 94 6a 24 	call	0x48d4	; 0x48d4 <__udivmodqi4>
    1f90:	99 23       	and	r25, r25
    1f92:	19 f4       	brne	.+6      	; 0x1f9a <Scheduler+0x1e>
			arr[i].Func_ptr();
    1f94:	e9 81       	ldd	r30, Y+1	; 0x01
    1f96:	fa 81       	ldd	r31, Y+2	; 0x02
    1f98:	09 95       	icall
    1f9a:	23 96       	adiw	r28, 0x03	; 3
	}

}

void Scheduler(uint8 ticks){
	for(int i = 0 ; i < NUM_TASKS ; i++){
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	cd 3e       	cpi	r28, 0xED	; 237
    1fa0:	d8 07       	cpc	r29, r24
    1fa2:	91 f7       	brne	.-28     	; 0x1f88 <Scheduler+0xc>
		if(ticks % arr[i].Period == 0){
			arr[i].Func_ptr();
		}
	}
}
    1fa4:	df 91       	pop	r29
    1fa6:	cf 91       	pop	r28
    1fa8:	1f 91       	pop	r17
    1faa:	08 95       	ret

00001fac <LCD>:
		flip *= -1;
	}
}

void LCD(void){
	LCD_Init();
    1fac:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <LCD_Init>

	static uint8 index = 0 ;
	static sint8 dir = 1 ;

	char *name = "Ahmed" ;
	if(index == 11 && dir == 1){
    1fb0:	60 91 ed 00 	lds	r22, 0x00ED
    1fb4:	6b 30       	cpi	r22, 0x0B	; 11
    1fb6:	69 f4       	brne	.+26     	; 0x1fd2 <LCD+0x26>
    1fb8:	80 91 a0 00 	lds	r24, 0x00A0
    1fbc:	81 30       	cpi	r24, 0x01	; 1
    1fbe:	69 f5       	brne	.+90     	; 0x201a <LCD+0x6e>
		dir *= -1 ;
    1fc0:	8f ef       	ldi	r24, 0xFF	; 255
    1fc2:	80 93 a0 00 	sts	0x00A0, r24
		index += dir ;
    1fc6:	8a e0       	ldi	r24, 0x0A	; 10
    1fc8:	80 93 ed 00 	sts	0x00ED, r24
		LCD_GoTo(0,index);
    1fcc:	80 e0       	ldi	r24, 0x00	; 0
    1fce:	6a e0       	ldi	r22, 0x0A	; 10
    1fd0:	0d c0       	rjmp	.+26     	; 0x1fec <LCD+0x40>
		LCD_WriteString(name);
	}else if(index == 0 && dir == -1){
    1fd2:	66 23       	and	r22, r22
    1fd4:	91 f4       	brne	.+36     	; 0x1ffa <LCD+0x4e>
    1fd6:	80 91 a0 00 	lds	r24, 0x00A0
    1fda:	8f 3f       	cpi	r24, 0xFF	; 255
    1fdc:	81 f4       	brne	.+32     	; 0x1ffe <LCD+0x52>
		dir *= -1 ;
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	80 93 a0 00 	sts	0x00A0, r24
		index += dir ;
    1fe4:	80 93 ed 00 	sts	0x00ED, r24
		LCD_GoTo(0,index);
    1fe8:	80 e0       	ldi	r24, 0x00	; 0
    1fea:	61 e0       	ldi	r22, 0x01	; 1
    1fec:	0e 94 c5 12 	call	0x258a	; 0x258a <LCD_GoTo>
		LCD_WriteString(name);
    1ff0:	80 e6       	ldi	r24, 0x60	; 96
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	0e 94 6e 12 	call	0x24dc	; 0x24dc <LCD_WriteString>
    1ff8:	08 95       	ret
	}else if(index >= 0 && index < 11){
    1ffa:	6b 30       	cpi	r22, 0x0B	; 11
    1ffc:	70 f4       	brcc	.+28     	; 0x201a <LCD+0x6e>
		LCD_GoTo(0,index);
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	0e 94 c5 12 	call	0x258a	; 0x258a <LCD_GoTo>
		index += dir ;
    2004:	80 91 ed 00 	lds	r24, 0x00ED
    2008:	90 91 a0 00 	lds	r25, 0x00A0
    200c:	89 0f       	add	r24, r25
    200e:	80 93 ed 00 	sts	0x00ED, r24
		LCD_WriteString(name);
    2012:	80 e6       	ldi	r24, 0x60	; 96
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	0e 94 6e 12 	call	0x24dc	; 0x24dc <LCD_WriteString>
    201a:	08 95       	ret

0000201c <MOTOR>:
}

void MOTOR(void){
	static sint8 flip = 1 ;

	DIO_SetPinDirection(DIO_PORTD, DIO_PIN3, DIO_PIN_DIR_OUTPUT);
    201c:	83 e0       	ldi	r24, 0x03	; 3
    201e:	63 e0       	ldi	r22, 0x03	; 3
    2020:	41 e0       	ldi	r20, 0x01	; 1
    2022:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTD, DIO_PIN4, DIO_PIN_DIR_OUTPUT);
    2026:	83 e0       	ldi	r24, 0x03	; 3
    2028:	64 e0       	ldi	r22, 0x04	; 4
    202a:	41 e0       	ldi	r20, 0x01	; 1
    202c:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <DIO_SetPinDirection>

	if(flip == 1){
    2030:	80 91 a1 00 	lds	r24, 0x00A1
    2034:	81 30       	cpi	r24, 0x01	; 1
    2036:	81 f4       	brne	.+32     	; 0x2058 <MOTOR+0x3c>
		DIO_SetPinValue(DIO_PORTD,DIO_PIN3,DIO_PIN_VAL_HIGH);
    2038:	83 e0       	ldi	r24, 0x03	; 3
    203a:	63 e0       	ldi	r22, 0x03	; 3
    203c:	41 e0       	ldi	r20, 0x01	; 1
    203e:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <DIO_SetPinValue>
		DIO_SetPinValue(DIO_PORTD,DIO_PIN4,DIO_PIN_VAL_LOW);
    2042:	83 e0       	ldi	r24, 0x03	; 3
    2044:	64 e0       	ldi	r22, 0x04	; 4
    2046:	40 e0       	ldi	r20, 0x00	; 0
    2048:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <DIO_SetPinValue>
		flip *= -1 ;
    204c:	80 91 a1 00 	lds	r24, 0x00A1
    2050:	81 95       	neg	r24
    2052:	80 93 a1 00 	sts	0x00A1, r24
    2056:	08 95       	ret
	}else if(flip == -1){
    2058:	8f 3f       	cpi	r24, 0xFF	; 255
    205a:	79 f4       	brne	.+30     	; 0x207a <MOTOR+0x5e>
		DIO_SetPinValue(DIO_PORTD,DIO_PIN3,DIO_PIN_VAL_LOW);
    205c:	83 e0       	ldi	r24, 0x03	; 3
    205e:	63 e0       	ldi	r22, 0x03	; 3
    2060:	40 e0       	ldi	r20, 0x00	; 0
    2062:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <DIO_SetPinValue>
		DIO_SetPinValue(DIO_PORTD,DIO_PIN4,DIO_PIN_VAL_HIGH);
    2066:	83 e0       	ldi	r24, 0x03	; 3
    2068:	64 e0       	ldi	r22, 0x04	; 4
    206a:	41 e0       	ldi	r20, 0x01	; 1
    206c:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <DIO_SetPinValue>
		flip *= -1;
    2070:	80 91 a1 00 	lds	r24, 0x00A1
    2074:	81 95       	neg	r24
    2076:	80 93 a1 00 	sts	0x00A1, r24
    207a:	08 95       	ret

0000207c <GRE_BLINK>:
	DIO_SetPinDirection(DIO_PORTD, DIO_PIN1, DIO_PIN_DIR_OUTPUT);
	DIO_TogglePin(DIO_PORTD, DIO_PIN1);
}

void GRE_BLINK(void){
	DIO_SetPinDirection(DIO_PORTD, DIO_PIN2, DIO_PIN_DIR_OUTPUT);
    207c:	83 e0       	ldi	r24, 0x03	; 3
    207e:	62 e0       	ldi	r22, 0x02	; 2
    2080:	41 e0       	ldi	r20, 0x01	; 1
    2082:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <DIO_SetPinDirection>
	DIO_TogglePin(DIO_PORTD, DIO_PIN2);
    2086:	83 e0       	ldi	r24, 0x03	; 3
    2088:	62 e0       	ldi	r22, 0x02	; 2
    208a:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <DIO_TogglePin>
}
    208e:	08 95       	ret

00002090 <YEL_BLINK>:
	DIO_SetPinDirection(DIO_PORTD, DIO_PIN0, DIO_PIN_DIR_OUTPUT);
	DIO_TogglePin(DIO_PORTD, DIO_PIN0);
}

void YEL_BLINK(void){
	DIO_SetPinDirection(DIO_PORTD, DIO_PIN1, DIO_PIN_DIR_OUTPUT);
    2090:	83 e0       	ldi	r24, 0x03	; 3
    2092:	61 e0       	ldi	r22, 0x01	; 1
    2094:	41 e0       	ldi	r20, 0x01	; 1
    2096:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <DIO_SetPinDirection>
	DIO_TogglePin(DIO_PORTD, DIO_PIN1);
    209a:	83 e0       	ldi	r24, 0x03	; 3
    209c:	61 e0       	ldi	r22, 0x01	; 1
    209e:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <DIO_TogglePin>
}
    20a2:	08 95       	ret

000020a4 <RED_BLINK>:
	arr[priority].Period = period ;
	arr[priority].Func_ptr = Func_ptr ;
}

void RED_BLINK(void){
	DIO_SetPinDirection(DIO_PORTD, DIO_PIN0, DIO_PIN_DIR_OUTPUT);
    20a4:	83 e0       	ldi	r24, 0x03	; 3
    20a6:	60 e0       	ldi	r22, 0x00	; 0
    20a8:	41 e0       	ldi	r20, 0x01	; 1
    20aa:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <DIO_SetPinDirection>
	DIO_TogglePin(DIO_PORTD, DIO_PIN0);
    20ae:	83 e0       	ldi	r24, 0x03	; 3
    20b0:	60 e0       	ldi	r22, 0x00	; 0
    20b2:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <DIO_TogglePin>
}
    20b6:	08 95       	ret

000020b8 <I2C_Init>:

#include "I2C.h"

void I2C_Init(void){
	//for 100 KHz communication speed
	TWBR = 32 ;
    20b8:	80 e2       	ldi	r24, 0x20	; 32
    20ba:	80 b9       	out	0x00, r24	; 0
	//TWBR = 72 ;
}
    20bc:	08 95       	ret

000020be <I2C_Start>:

uint8 I2C_Start(uint8 Slave_Address_W){
    20be:	98 2f       	mov	r25, r24
	uint8 status = 0x00 ;

	//0b10100100 -- Make TWINT bit = 0 , Generate Start bit , I2C Enable
	TWCR = 0b10100100 ;
    20c0:	84 ea       	ldi	r24, 0xA4	; 164
    20c2:	86 bf       	out	0x36, r24	; 54

	//wait until TWI finished generating start bit by checking TWI interrupt bit
	while(GET_BIT(TWCR,7) == 0);
    20c4:	06 b6       	in	r0, 0x36	; 54
    20c6:	07 fe       	sbrs	r0, 7
    20c8:	fd cf       	rjmp	.-6      	; 0x20c4 <I2C_Start+0x6>

	//get value inside status ( DON'T forget to mask Prescalar bits ) ( you need 5 MSB bits only )
	status = TWSR & 0xF8 ;
    20ca:	81 b1       	in	r24, 0x01	; 1

	if(status != 0x08)
    20cc:	88 7f       	andi	r24, 0xF8	; 248
    20ce:	88 30       	cpi	r24, 0x08	; 8
    20d0:	11 f0       	breq	.+4      	; 0x20d6 <I2C_Start+0x18>
    20d2:	80 e0       	ldi	r24, 0x00	; 0
    20d4:	08 95       	ret
		return 0 ; //signal tells us that START bit failed

	//load Slave_Address to write to in TWDR - Data register
	TWDR = Slave_Address_W ;
    20d6:	93 b9       	out	0x03, r25	; 3

	//Make TWINT bit = 0 , I2C Enable
	TWCR = 0b10000100 ;
    20d8:	84 e8       	ldi	r24, 0x84	; 132
    20da:	86 bf       	out	0x36, r24	; 54

	//wait until making sure address has been sent
	while(GET_BIT(TWCR,7) == 0);
    20dc:	06 b6       	in	r0, 0x36	; 54
    20de:	07 fe       	sbrs	r0, 7
    20e0:	fd cf       	rjmp	.-6      	; 0x20dc <I2C_Start+0x1e>

	status = TWSR & 0xF8 ;
    20e2:	81 b1       	in	r24, 0x01	; 1
    20e4:	88 7f       	andi	r24, 0xF8	; 248

	if(status == 0x18)
    20e6:	88 31       	cpi	r24, 0x18	; 24
    20e8:	11 f4       	brne	.+4      	; 0x20ee <I2C_Start+0x30>
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	08 95       	ret
		return 1 ; //slave address + Write bit has been transmitted + ACK

	if(status == 0x20)
    20ee:	80 32       	cpi	r24, 0x20	; 32
    20f0:	11 f0       	breq	.+4      	; 0x20f6 <I2C_Start+0x38>
    20f2:	83 e0       	ldi	r24, 0x03	; 3
    20f4:	08 95       	ret
    20f6:	82 e0       	ldi	r24, 0x02	; 2
	else
		return 3 ; //slave address + Write bit failed



}
    20f8:	08 95       	ret

000020fa <I2C_Repeated_Start>:

uint8 I2C_Repeated_Start(uint8 Slave_Address_R){
    20fa:	98 2f       	mov	r25, r24
	uint8 status = 0x00 ;

	//0b10100100 -- Make TWINT bit = 0 , Generate Start bit , I2C Enable
	TWCR = 0b10100100 ;
    20fc:	84 ea       	ldi	r24, 0xA4	; 164
    20fe:	86 bf       	out	0x36, r24	; 54

	//wait until TWI finished generating start bit by checking TWI interrupt bit
	while(GET_BIT(TWCR,7) == 0);
    2100:	06 b6       	in	r0, 0x36	; 54
    2102:	07 fe       	sbrs	r0, 7
    2104:	fd cf       	rjmp	.-6      	; 0x2100 <I2C_Repeated_Start+0x6>

	//get value inside status ( DON'T forget to mask prescaler bits ) ( you need 5 MSB bits only )
	status = TWSR & 0xF8 ;
    2106:	81 b1       	in	r24, 0x01	; 1

	//repeated start not transmitted
	if(status != 0x10)
    2108:	88 7f       	andi	r24, 0xF8	; 248
    210a:	80 31       	cpi	r24, 0x10	; 16
    210c:	11 f0       	breq	.+4      	; 0x2112 <I2C_Repeated_Start+0x18>
    210e:	80 e0       	ldi	r24, 0x00	; 0
    2110:	08 95       	ret
		return 0 ;

	//load Slave_Address to write to in TWDR - Data register
	TWDR = Slave_Address_R ;
    2112:	93 b9       	out	0x03, r25	; 3

	//Make TWINT bit = 0 , I2C Enable
	TWCR = 0b10000100 ;
    2114:	84 e8       	ldi	r24, 0x84	; 132
    2116:	86 bf       	out	0x36, r24	; 54

	//wait until making sure address has been sent
	while(GET_BIT(TWCR,7) == 0);
    2118:	06 b6       	in	r0, 0x36	; 54
    211a:	07 fe       	sbrs	r0, 7
    211c:	fd cf       	rjmp	.-6      	; 0x2118 <I2C_Repeated_Start+0x1e>

	status = TWSR & 0xF8 ;
    211e:	81 b1       	in	r24, 0x01	; 1
    2120:	88 7f       	andi	r24, 0xF8	; 248

	if(status == 0x40)
    2122:	80 34       	cpi	r24, 0x40	; 64
    2124:	11 f4       	brne	.+4      	; 0x212a <I2C_Repeated_Start+0x30>
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	08 95       	ret
		return 1 ; //SLA+R transmitted and ACK received
	if(status == 0x48)
    212a:	88 34       	cpi	r24, 0x48	; 72
    212c:	11 f0       	breq	.+4      	; 0x2132 <I2C_Repeated_Start+0x38>
    212e:	83 e0       	ldi	r24, 0x03	; 3
    2130:	08 95       	ret
    2132:	82 e0       	ldi	r24, 0x02	; 2
		return 2 ; //SLA+R transmitted and NACK received
	else
		return 3 ; //SLA+R transmission failed


}
    2134:	08 95       	ret

00002136 <I2C_Write>:

uint8 I2C_Write(uint16 Data){
	uint8 status = 0x00 ;

	//Load data or address in TWDR
	TWDR = Data ;
    2136:	83 b9       	out	0x03, r24	; 3

	//Make TWINT bit = 0 , I2C Enable
	TWCR = 0b10000100 ;
    2138:	84 e8       	ldi	r24, 0x84	; 132
    213a:	86 bf       	out	0x36, r24	; 54

	//wait until making sure data or address has been sent
	while(GET_BIT(TWCR,7) == 0);
    213c:	06 b6       	in	r0, 0x36	; 54
    213e:	07 fe       	sbrs	r0, 7
    2140:	fd cf       	rjmp	.-6      	; 0x213c <I2C_Write+0x6>

	status = TWSR & 0xF8 ;
    2142:	81 b1       	in	r24, 0x01	; 1
    2144:	88 7f       	andi	r24, 0xF8	; 248

	if(status == 0x28)
    2146:	88 32       	cpi	r24, 0x28	; 40
    2148:	11 f4       	brne	.+4      	; 0x214e <I2C_Write+0x18>
    214a:	80 e0       	ldi	r24, 0x00	; 0
    214c:	08 95       	ret
		return 0 ; // data has been sent and ACK received
	if(status == 0x30)
    214e:	80 33       	cpi	r24, 0x30	; 48
    2150:	11 f0       	breq	.+4      	; 0x2156 <I2C_Write+0x20>
    2152:	82 e0       	ldi	r24, 0x02	; 2
    2154:	08 95       	ret
    2156:	81 e0       	ldi	r24, 0x01	; 1
		return 1 ; // data has been sent and NACK received
	else
		return 2 ; // data transmission failed

}
    2158:	08 95       	ret

0000215a <I2C_Read_ACK>:

uint8 I2C_Read_ACK(void){

	//Send Acknowledgment , Set TWINT bit to zero , enable I2C
	TWCR = 0b11000100 ;
    215a:	84 ec       	ldi	r24, 0xC4	; 196
    215c:	86 bf       	out	0x36, r24	; 54

	while(GET_BIT(TWCR,7) == 0);
    215e:	06 b6       	in	r0, 0x36	; 54
    2160:	07 fe       	sbrs	r0, 7
    2162:	fd cf       	rjmp	.-6      	; 0x215e <I2C_Read_ACK+0x4>

	return TWDR ;
    2164:	83 b1       	in	r24, 0x03	; 3
}
    2166:	08 95       	ret

00002168 <I2C_Read_NACK>:

uint8 I2C_Read_NACK(void){
	//Send NOT Acknowledgment , Set TWINT bit to zero , enable I2C
	TWCR = 0b10000100 ;
    2168:	84 e8       	ldi	r24, 0x84	; 132
    216a:	86 bf       	out	0x36, r24	; 54

	while(GET_BIT(TWCR,7) == 0);
    216c:	06 b6       	in	r0, 0x36	; 54
    216e:	07 fe       	sbrs	r0, 7
    2170:	fd cf       	rjmp	.-6      	; 0x216c <I2C_Read_NACK+0x4>

	return TWDR ;
    2172:	83 b1       	in	r24, 0x03	; 3
}
    2174:	08 95       	ret

00002176 <I2C_Stop>:

void  I2C_Stop(void){
	TWCR = 0b10010100 ;
    2176:	84 e9       	ldi	r24, 0x94	; 148
    2178:	86 bf       	out	0x36, r24	; 54

	while(GET_BIT(TWCR,4) == 1);
    217a:	06 b6       	in	r0, 0x36	; 54
    217c:	04 fc       	sbrc	r0, 4
    217e:	fd cf       	rjmp	.-6      	; 0x217a <I2C_Stop+0x4>
}
    2180:	08 95       	ret

00002182 <eeprom_address>:
 */
#include "Internal_EEPROM.h"


void eeprom_address(uint16 address){
	EEARL = 0x00 | address ;
    2182:	8e bb       	out	0x1e, r24	; 30
	EEARH = (address>>8);
    2184:	9f bb       	out	0x1f, r25	; 31
}
    2186:	08 95       	ret

00002188 <eeprom_write>:


void eeprom_write(uint16 address , uint8 data){

	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
    2188:	e1 99       	sbic	0x1c, 1	; 28
    218a:	fe cf       	rjmp	.-4      	; 0x2188 <eeprom_write>
	/* Set up address and data registers */
	EEAR = address;
    218c:	9f bb       	out	0x1f, r25	; 31
    218e:	8e bb       	out	0x1e, r24	; 30
	EEDR = data;
    2190:	6d bb       	out	0x1d, r22	; 29

	/* Start eeprom write by setting EEWE */
	SET_BIT(EECR,2);
    2192:	e2 9a       	sbi	0x1c, 2	; 28
	SET_BIT(EECR,1);
    2194:	e1 9a       	sbi	0x1c, 1	; 28
	/* Write logical one to EEMWE */
	//EECR |= (1<<EEMWE);

}
    2196:	08 95       	ret

00002198 <eeprom_read>:


uint8 eeprom_read(uint16 address){
	//wait for the completion of the previous write operation
	while(EECR & (1<<1));
    2198:	e1 99       	sbic	0x1c, 1	; 28
    219a:	fe cf       	rjmp	.-4      	; 0x2198 <eeprom_read>

	//set up address register
	EEAR = address ;
    219c:	9f bb       	out	0x1f, r25	; 31
    219e:	8e bb       	out	0x1e, r24	; 30

	//start read operation by setting EERE bit in Control Register
	EECR |= (1<<0);
    21a0:	e0 9a       	sbi	0x1c, 0	; 28

	//now return data from data register
	return EEDR ;
    21a2:	8d b3       	in	r24, 0x1d	; 29

}
    21a4:	08 95       	ret

000021a6 <Interrupt_Init>:


void Interrupt_Init(void){

#if   GLOBAL_INTERRUPT_STATUS == GENERAL_INTERRUPT_ENABLE
	SET_BIT(SREG,7);
    21a6:	8f b7       	in	r24, 0x3f	; 63
    21a8:	80 68       	ori	r24, 0x80	; 128
    21aa:	8f bf       	out	0x3f, r24	; 63
#elif GLOBAL_INTERRUPT_STATUS == GENERAL_INTERRUPT_DISABLE
	CLR_BIT(SREG,7);
#endif

}
    21ac:	08 95       	ret

000021ae <Interrupt0_Init>:


void Interrupt_Init(void){

#if   GLOBAL_INTERRUPT_STATUS == GENERAL_INTERRUPT_ENABLE
	SET_BIT(SREG,7);
    21ae:	8f b7       	in	r24, 0x3f	; 63
    21b0:	80 68       	ori	r24, 0x80	; 128
    21b2:	8f bf       	out	0x3f, r24	; 63

void Interrupt0_Init(void){
	Interrupt_Init();

	//Enabling External Interrupt Request 0
	SET_BIT(GICR,6);
    21b4:	8b b7       	in	r24, 0x3b	; 59
    21b6:	80 64       	ori	r24, 0x40	; 64
    21b8:	8b bf       	out	0x3b, r24	; 59
	CLR_BIT(MCUCR,1);
#elif INTERRUPT0_TRIGGER == INTERRUPT_TRIGGER_RISING_EDGE
	SET_BIT(MCUCR,0);
	SET_BIT(MCUCR,1);
#elif INTERRUPT0_TRIGGER == INTERRUPT_TRIGGER_FALLING_EDGE
	CLR_BIT(MCUCR,0);
    21ba:	85 b7       	in	r24, 0x35	; 53
    21bc:	8e 7f       	andi	r24, 0xFE	; 254
    21be:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR,1);
    21c0:	85 b7       	in	r24, 0x35	; 53
    21c2:	82 60       	ori	r24, 0x02	; 2
    21c4:	85 bf       	out	0x35, r24	; 53
#endif

}
    21c6:	08 95       	ret

000021c8 <Interrupt1_Init>:


void Interrupt_Init(void){

#if   GLOBAL_INTERRUPT_STATUS == GENERAL_INTERRUPT_ENABLE
	SET_BIT(SREG,7);
    21c8:	8f b7       	in	r24, 0x3f	; 63
    21ca:	80 68       	ori	r24, 0x80	; 128
    21cc:	8f bf       	out	0x3f, r24	; 63
void Interrupt1_Init(void){

	Interrupt_Init();

	//Enabling External Interrupt Request 1
	SET_BIT(GICR,7);
    21ce:	8b b7       	in	r24, 0x3b	; 59
    21d0:	80 68       	ori	r24, 0x80	; 128
    21d2:	8b bf       	out	0x3b, r24	; 59
	CLR_BIT(MCUCR,3);
#elif INTERRUPT1_TRIGGER == INTERRUPT_TRIGGER_ANY_LOGICAL_CHANGE
	SET_BIT(MCUCR,2);
	CLR_BIT(MCUCR,3);
#elif INTERRUPT1_TRIGGER == INTERRUPT_TRIGGER_RISING_EDGE
	SET_BIT(MCUCR,2);
    21d4:	85 b7       	in	r24, 0x35	; 53
    21d6:	84 60       	ori	r24, 0x04	; 4
    21d8:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR,3);
    21da:	85 b7       	in	r24, 0x35	; 53
    21dc:	88 60       	ori	r24, 0x08	; 8
    21de:	85 bf       	out	0x35, r24	; 53
#elif INTERRUPT1_TRIGGER == INTERRUPT_TRIGGER_FALLING_EDGE
	CLR_BIT(MCUCR,2);
	SET_BIT(MCUCR,3);
#endif

}
    21e0:	08 95       	ret

000021e2 <Interrupt2_Init>:


void Interrupt_Init(void){

#if   GLOBAL_INTERRUPT_STATUS == GENERAL_INTERRUPT_ENABLE
	SET_BIT(SREG,7);
    21e2:	8f b7       	in	r24, 0x3f	; 63
    21e4:	80 68       	ori	r24, 0x80	; 128
    21e6:	8f bf       	out	0x3f, r24	; 63
void Interrupt2_Init(void){

	Interrupt_Init();

	//Enabling External Interrupt Request 2
	SET_BIT(GICR,5);
    21e8:	8b b7       	in	r24, 0x3b	; 59
    21ea:	80 62       	ori	r24, 0x20	; 32
    21ec:	8b bf       	out	0x3b, r24	; 59

//IF BIT.6 IN MCUCSR REGISTER IS LOW(0-BIT CLEARED) THEN INT2 ARE TRIGGERED IN FALLING EDGE MODE
//IF BIT.6 IN MCUCSR REGISTER IS HIGH(1-BIT SET) THEN INT2 ARE TRIGGERED IN RISING EDGE MODE
//PAGE.65 in DATASHEET
#if INTERRUPT2_TRIGGER == INTERRUPT_TRIGGER_FALLING_EDGE
	CLR_BIT(MCUCSR,6);
    21ee:	84 b7       	in	r24, 0x34	; 52
    21f0:	8f 7b       	andi	r24, 0xBF	; 191
    21f2:	84 bf       	out	0x34, r24	; 52
#elif INTERRUPT2_TRIGGER == INTERRUPT_TRIGGER_RISING_EDGE
	SET_BIT(MCUCSR,6);

#endif

}
    21f4:	08 95       	ret

000021f6 <Keypad_Val>:

}



uint8 Keypad_Val(void){
    21f6:	9f 92       	push	r9
    21f8:	af 92       	push	r10
    21fa:	bf 92       	push	r11
    21fc:	cf 92       	push	r12
    21fe:	df 92       	push	r13
    2200:	ef 92       	push	r14
    2202:	ff 92       	push	r15
    2204:	0f 93       	push	r16
    2206:	1f 93       	push	r17
    2208:	df 93       	push	r29
    220a:	cf 93       	push	r28
    220c:	0f 92       	push	r0
    220e:	cd b7       	in	r28, 0x3d	; 61
    2210:	de b7       	in	r29, 0x3e	; 62
	//Here in this function we want to loop through the columns pins first
	uint8 COL_PIN = 0 ;
	uint8 ROW_PIN = 0 ;

	uint8 BUTTON = 1 ;
    2212:	81 e0       	ldi	r24, 0x01	; 1
    2214:	89 83       	std	Y+1, r24	; 0x01
    2216:	ee 24       	eor	r14, r14
    2218:	ff 24       	eor	r15, r15

		DIO_SetPinValue(KEYPAD_PORT,COL_PIN,DIO_PIN_VAL_LOW);

		for(ROW_PIN = ROW_INIT_PIN ;ROW_PIN <= ROW_FINAL_PIN; ROW_PIN++){

			DIO_GetPinValue(KEYPAD_PORT, ROW_PIN, &BUTTON);
    221a:	5e 01       	movw	r10, r28
    221c:	08 94       	sec
    221e:	a1 1c       	adc	r10, r1
    2220:	b1 1c       	adc	r11, r1

				while(BUTTON == BUTTON_PRESSED)
					DIO_GetPinValue(KEYPAD_PORT, ROW_PIN, &BUTTON);

			}else if(BUTTON == BUTTON_NOT_PRESSED){
				VAL = 99 ;
    2222:	93 e6       	ldi	r25, 0x63	; 99
    2224:	99 2e       	mov	r9, r25
uint8 Keypad_Val(void){
	//Here in this function we want to loop through the columns pins first
	uint8 COL_PIN = 0 ;
	uint8 ROW_PIN = 0 ;

	uint8 BUTTON = 1 ;
    2226:	84 e0       	ldi	r24, 0x04	; 4
    2228:	c8 2e       	mov	r12, r24
    222a:	ce 0c       	add	r12, r14
	static uint8 VAL = 0 ;

	for(COL_PIN = COL_INIT_PIN ;COL_PIN <= COL_FINAL_PIN; COL_PIN++){

		DIO_SetPinValue(KEYPAD_PORT,COL_PIN,DIO_PIN_VAL_LOW);
    222c:	82 e0       	ldi	r24, 0x02	; 2
    222e:	6c 2d       	mov	r22, r12
    2230:	40 e0       	ldi	r20, 0x00	; 0
    2232:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <DIO_SetPinValue>
    2236:	87 01       	movw	r16, r14
    2238:	0e 55       	subi	r16, 0x5E	; 94
    223a:	1f 4f       	sbci	r17, 0xFF	; 255
    223c:	dd 24       	eor	r13, r13

		for(ROW_PIN = ROW_INIT_PIN ;ROW_PIN <= ROW_FINAL_PIN; ROW_PIN++){

			DIO_GetPinValue(KEYPAD_PORT, ROW_PIN, &BUTTON);
    223e:	82 e0       	ldi	r24, 0x02	; 2
    2240:	6d 2d       	mov	r22, r13
    2242:	a5 01       	movw	r20, r10
    2244:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <DIO_GetPinValue>

			if(BUTTON == BUTTON_PRESSED){
    2248:	89 81       	ldd	r24, Y+1	; 0x01
    224a:	88 23       	and	r24, r24
    224c:	71 f4       	brne	.+28     	; 0x226a <Keypad_Val+0x74>
				VAL = KEYPAD_ARR[ROW_PIN][COL_PIN-COL_INIT_PIN];
    224e:	f8 01       	movw	r30, r16
    2250:	80 81       	ld	r24, Z
    2252:	80 93 ee 00 	sts	0x00EE, r24
    2256:	05 c0       	rjmp	.+10     	; 0x2262 <Keypad_Val+0x6c>

				while(BUTTON == BUTTON_PRESSED)
					DIO_GetPinValue(KEYPAD_PORT, ROW_PIN, &BUTTON);
    2258:	82 e0       	ldi	r24, 0x02	; 2
    225a:	6d 2d       	mov	r22, r13
    225c:	a5 01       	movw	r20, r10
    225e:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <DIO_GetPinValue>
			DIO_GetPinValue(KEYPAD_PORT, ROW_PIN, &BUTTON);

			if(BUTTON == BUTTON_PRESSED){
				VAL = KEYPAD_ARR[ROW_PIN][COL_PIN-COL_INIT_PIN];

				while(BUTTON == BUTTON_PRESSED)
    2262:	89 81       	ldd	r24, Y+1	; 0x01
    2264:	88 23       	and	r24, r24
    2266:	c1 f3       	breq	.-16     	; 0x2258 <Keypad_Val+0x62>
    2268:	04 c0       	rjmp	.+8      	; 0x2272 <Keypad_Val+0x7c>
					DIO_GetPinValue(KEYPAD_PORT, ROW_PIN, &BUTTON);

			}else if(BUTTON == BUTTON_NOT_PRESSED){
    226a:	81 30       	cpi	r24, 0x01	; 1
    226c:	11 f4       	brne	.+4      	; 0x2272 <Keypad_Val+0x7c>
				VAL = 99 ;
    226e:	90 92 ee 00 	sts	0x00EE, r9

	for(COL_PIN = COL_INIT_PIN ;COL_PIN <= COL_FINAL_PIN; COL_PIN++){

		DIO_SetPinValue(KEYPAD_PORT,COL_PIN,DIO_PIN_VAL_LOW);

		for(ROW_PIN = ROW_INIT_PIN ;ROW_PIN <= ROW_FINAL_PIN; ROW_PIN++){
    2272:	d3 94       	inc	r13
    2274:	0c 5f       	subi	r16, 0xFC	; 252
    2276:	1f 4f       	sbci	r17, 0xFF	; 255
    2278:	f4 e0       	ldi	r31, 0x04	; 4
    227a:	df 16       	cp	r13, r31
    227c:	01 f7       	brne	.-64     	; 0x223e <Keypad_Val+0x48>
			}else if(BUTTON == BUTTON_NOT_PRESSED){
				VAL = 99 ;
			}
		}

		DIO_SetPinValue(KEYPAD_PORT,COL_PIN,DIO_PIN_VAL_HIGH);
    227e:	82 e0       	ldi	r24, 0x02	; 2
    2280:	6c 2d       	mov	r22, r12
    2282:	41 e0       	ldi	r20, 0x01	; 1
    2284:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <DIO_SetPinValue>
    2288:	08 94       	sec
    228a:	e1 1c       	adc	r14, r1
    228c:	f1 1c       	adc	r15, r1
	uint8 ROW_PIN = 0 ;

	uint8 BUTTON = 1 ;
	static uint8 VAL = 0 ;

	for(COL_PIN = COL_INIT_PIN ;COL_PIN <= COL_FINAL_PIN; COL_PIN++){
    228e:	84 e0       	ldi	r24, 0x04	; 4
    2290:	e8 16       	cp	r14, r24
    2292:	f1 04       	cpc	r15, r1
    2294:	41 f6       	brne	.-112    	; 0x2226 <Keypad_Val+0x30>

		DIO_SetPinValue(KEYPAD_PORT,COL_PIN,DIO_PIN_VAL_HIGH);
	}

	return VAL ;
}
    2296:	80 91 ee 00 	lds	r24, 0x00EE
    229a:	0f 90       	pop	r0
    229c:	cf 91       	pop	r28
    229e:	df 91       	pop	r29
    22a0:	1f 91       	pop	r17
    22a2:	0f 91       	pop	r16
    22a4:	ff 90       	pop	r15
    22a6:	ef 90       	pop	r14
    22a8:	df 90       	pop	r13
    22aa:	cf 90       	pop	r12
    22ac:	bf 90       	pop	r11
    22ae:	af 90       	pop	r10
    22b0:	9f 90       	pop	r9
    22b2:	08 95       	ret

000022b4 <Keypad_Init>:
};

void Keypad_Init(void){

	//Make ROW Pins as an input
	DIO_SetPinDirection(KEYPAD_PORT,DIO_PIN0,DIO_PIN_DIR_INPUT);
    22b4:	82 e0       	ldi	r24, 0x02	; 2
    22b6:	60 e0       	ldi	r22, 0x00	; 0
    22b8:	40 e0       	ldi	r20, 0x00	; 0
    22ba:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,DIO_PIN1,DIO_PIN_DIR_INPUT);
    22be:	82 e0       	ldi	r24, 0x02	; 2
    22c0:	61 e0       	ldi	r22, 0x01	; 1
    22c2:	40 e0       	ldi	r20, 0x00	; 0
    22c4:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,DIO_PIN2,DIO_PIN_DIR_INPUT);
    22c8:	82 e0       	ldi	r24, 0x02	; 2
    22ca:	62 e0       	ldi	r22, 0x02	; 2
    22cc:	40 e0       	ldi	r20, 0x00	; 0
    22ce:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,DIO_PIN3,DIO_PIN_DIR_INPUT);
    22d2:	82 e0       	ldi	r24, 0x02	; 2
    22d4:	63 e0       	ldi	r22, 0x03	; 3
    22d6:	40 e0       	ldi	r20, 0x00	; 0
    22d8:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <DIO_SetPinDirection>

	//Activate Pull Up Resistors on the input pins
	DIO_SetPullUpRes(KEYPAD_PORT, DIO_PIN0);
    22dc:	82 e0       	ldi	r24, 0x02	; 2
    22de:	60 e0       	ldi	r22, 0x00	; 0
    22e0:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <DIO_SetPullUpRes>
	DIO_SetPullUpRes(KEYPAD_PORT, DIO_PIN1);
    22e4:	82 e0       	ldi	r24, 0x02	; 2
    22e6:	61 e0       	ldi	r22, 0x01	; 1
    22e8:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <DIO_SetPullUpRes>
	DIO_SetPullUpRes(KEYPAD_PORT, DIO_PIN2);
    22ec:	82 e0       	ldi	r24, 0x02	; 2
    22ee:	62 e0       	ldi	r22, 0x02	; 2
    22f0:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <DIO_SetPullUpRes>
	DIO_SetPullUpRes(KEYPAD_PORT, DIO_PIN3);
    22f4:	82 e0       	ldi	r24, 0x02	; 2
    22f6:	63 e0       	ldi	r22, 0x03	; 3
    22f8:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <DIO_SetPullUpRes>

	//Make COL Pins as an output
	DIO_SetPinDirection(KEYPAD_PORT,DIO_PIN4,DIO_PIN_DIR_OUTPUT);
    22fc:	82 e0       	ldi	r24, 0x02	; 2
    22fe:	64 e0       	ldi	r22, 0x04	; 4
    2300:	41 e0       	ldi	r20, 0x01	; 1
    2302:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,DIO_PIN5,DIO_PIN_DIR_OUTPUT);
    2306:	82 e0       	ldi	r24, 0x02	; 2
    2308:	65 e0       	ldi	r22, 0x05	; 5
    230a:	41 e0       	ldi	r20, 0x01	; 1
    230c:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,DIO_PIN6,DIO_PIN_DIR_OUTPUT);
    2310:	82 e0       	ldi	r24, 0x02	; 2
    2312:	66 e0       	ldi	r22, 0x06	; 6
    2314:	41 e0       	ldi	r20, 0x01	; 1
    2316:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,DIO_PIN7,DIO_PIN_DIR_OUTPUT);
    231a:	82 e0       	ldi	r24, 0x02	; 2
    231c:	67 e0       	ldi	r22, 0x07	; 7
    231e:	41 e0       	ldi	r20, 0x01	; 1
    2320:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <DIO_SetPinDirection>

	//Make COL Pins output high value
	DIO_SetPinValue(KEYPAD_PORT, DIO_PIN4, DIO_PIN_VAL_HIGH);
    2324:	82 e0       	ldi	r24, 0x02	; 2
    2326:	64 e0       	ldi	r22, 0x04	; 4
    2328:	41 e0       	ldi	r20, 0x01	; 1
    232a:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <DIO_SetPinValue>
	DIO_SetPinValue(KEYPAD_PORT, DIO_PIN5, DIO_PIN_VAL_HIGH);
    232e:	82 e0       	ldi	r24, 0x02	; 2
    2330:	65 e0       	ldi	r22, 0x05	; 5
    2332:	41 e0       	ldi	r20, 0x01	; 1
    2334:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <DIO_SetPinValue>
	DIO_SetPinValue(KEYPAD_PORT, DIO_PIN6, DIO_PIN_VAL_HIGH);
    2338:	82 e0       	ldi	r24, 0x02	; 2
    233a:	66 e0       	ldi	r22, 0x06	; 6
    233c:	41 e0       	ldi	r20, 0x01	; 1
    233e:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <DIO_SetPinValue>
	DIO_SetPinValue(KEYPAD_PORT, DIO_PIN7, DIO_PIN_VAL_HIGH);
    2342:	82 e0       	ldi	r24, 0x02	; 2
    2344:	67 e0       	ldi	r22, 0x07	; 7
    2346:	41 e0       	ldi	r20, 0x01	; 1
    2348:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <DIO_SetPinValue>


}
    234c:	08 95       	ret

0000234e <LCD_WriteChar>:
#endif

}


void LCD_WriteChar(uint8 ch){
    234e:	ff 92       	push	r15
    2350:	0f 93       	push	r16
    2352:	1f 93       	push	r17
    2354:	f8 2e       	mov	r15, r24
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_E_PIN,DIO_PIN_VAL_LOW);
	_delay_ms(1);

#elif LCD_MODE == 4

	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_RS_PIN,DIO_PIN_VAL_HIGH);
    2356:	83 e0       	ldi	r24, 0x03	; 3
    2358:	61 e0       	ldi	r22, 0x01	; 1
    235a:	41 e0       	ldi	r20, 0x01	; 1
    235c:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <DIO_SetPinValue>
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_RW_PIN,DIO_PIN_VAL_LOW);
    2360:	83 e0       	ldi	r24, 0x03	; 3
    2362:	62 e0       	ldi	r22, 0x02	; 2
    2364:	40 e0       	ldi	r20, 0x00	; 0
    2366:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <DIO_SetPinValue>
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_E_PIN,DIO_PIN_VAL_LOW);
    236a:	83 e0       	ldi	r24, 0x03	; 3
    236c:	63 e0       	ldi	r22, 0x03	; 3
    236e:	40 e0       	ldi	r20, 0x00	; 0
    2370:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <DIO_SetPinValue>

	//Send Highest nibble first
	LCD_4BIT_DATA_PORT = (LCD_4BIT_DATA_PORT & 0x0f)|(ch & 0xf0) ;
    2374:	8b b3       	in	r24, 0x1b	; 27
    2376:	9f 2d       	mov	r25, r15
    2378:	90 7f       	andi	r25, 0xF0	; 240
    237a:	8f 70       	andi	r24, 0x0F	; 15
    237c:	98 2b       	or	r25, r24
    237e:	9b bb       	out	0x1b, r25	; 27
	//Latch the highest nibble
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_E_PIN,DIO_PIN_VAL_HIGH);
    2380:	83 e0       	ldi	r24, 0x03	; 3
    2382:	63 e0       	ldi	r22, 0x03	; 3
    2384:	41 e0       	ldi	r20, 0x01	; 1
    2386:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <DIO_SetPinValue>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    238a:	00 ed       	ldi	r16, 0xD0	; 208
    238c:	17 e0       	ldi	r17, 0x07	; 7
    238e:	c8 01       	movw	r24, r16
    2390:	01 97       	sbiw	r24, 0x01	; 1
    2392:	f1 f7       	brne	.-4      	; 0x2390 <LCD_WriteChar+0x42>
	_delay_ms(1);
	//Stop Latch to send lowest nibble
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_E_PIN,DIO_PIN_VAL_LOW);
    2394:	83 e0       	ldi	r24, 0x03	; 3
    2396:	63 e0       	ldi	r22, 0x03	; 3
    2398:	40 e0       	ldi	r20, 0x00	; 0
    239a:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <DIO_SetPinValue>
    239e:	c8 01       	movw	r24, r16
    23a0:	01 97       	sbiw	r24, 0x01	; 1
    23a2:	f1 f7       	brne	.-4      	; 0x23a0 <LCD_WriteChar+0x52>
	_delay_ms(1);

	//Send Highest nibble first
	LCD_4BIT_DATA_PORT = (LCD_4BIT_DATA_PORT & 0x0f)|(ch<<4) ;
    23a4:	8b b3       	in	r24, 0x1b	; 27
    23a6:	f2 94       	swap	r15
    23a8:	90 ef       	ldi	r25, 0xF0	; 240
    23aa:	f9 22       	and	r15, r25
    23ac:	8f 70       	andi	r24, 0x0F	; 15
    23ae:	8f 29       	or	r24, r15
    23b0:	8b bb       	out	0x1b, r24	; 27
	//Latch the highest nibble
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_E_PIN,DIO_PIN_VAL_HIGH);
    23b2:	83 e0       	ldi	r24, 0x03	; 3
    23b4:	63 e0       	ldi	r22, 0x03	; 3
    23b6:	41 e0       	ldi	r20, 0x01	; 1
    23b8:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <DIO_SetPinValue>
    23bc:	c8 01       	movw	r24, r16
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	f1 f7       	brne	.-4      	; 0x23be <LCD_WriteChar+0x70>
	_delay_ms(1);
	//Stop Latch to send lowest nibble
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_E_PIN,DIO_PIN_VAL_LOW);
    23c2:	83 e0       	ldi	r24, 0x03	; 3
    23c4:	63 e0       	ldi	r22, 0x03	; 3
    23c6:	40 e0       	ldi	r20, 0x00	; 0
    23c8:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <DIO_SetPinValue>
    23cc:	c8 01       	movw	r24, r16
    23ce:	01 97       	sbiw	r24, 0x01	; 1
    23d0:	f1 f7       	brne	.-4      	; 0x23ce <LCD_WriteChar+0x80>
	_delay_ms(1);

#endif

}
    23d2:	1f 91       	pop	r17
    23d4:	0f 91       	pop	r16
    23d6:	ff 90       	pop	r15
    23d8:	08 95       	ret

000023da <LCD_WriteInteger>:
		LCD_WriteCommand(cmd);
	}
}


void LCD_WriteInteger(sint32 num){
    23da:	9f 92       	push	r9
    23dc:	af 92       	push	r10
    23de:	bf 92       	push	r11
    23e0:	cf 92       	push	r12
    23e2:	df 92       	push	r13
    23e4:	ef 92       	push	r14
    23e6:	ff 92       	push	r15
    23e8:	0f 93       	push	r16
    23ea:	1f 93       	push	r17
    23ec:	7b 01       	movw	r14, r22
    23ee:	8c 01       	movw	r16, r24
	uint32 reversed = 0 ;
	uint8 num_length = 0 ;

	if(num == 0){
    23f0:	61 15       	cp	r22, r1
    23f2:	71 05       	cpc	r23, r1
    23f4:	81 05       	cpc	r24, r1
    23f6:	91 05       	cpc	r25, r1
    23f8:	11 f4       	brne	.+4      	; 0x23fe <LCD_WriteInteger+0x24>
		LCD_WriteChar('0');
    23fa:	80 e3       	ldi	r24, 0x30	; 48
    23fc:	0b c0       	rjmp	.+22     	; 0x2414 <LCD_WriteInteger+0x3a>
	}

	if(num < 0){
    23fe:	97 ff       	sbrs	r25, 7
    2400:	0b c0       	rjmp	.+22     	; 0x2418 <LCD_WriteInteger+0x3e>
		num *= -1 ;
    2402:	10 95       	com	r17
    2404:	00 95       	com	r16
    2406:	f0 94       	com	r15
    2408:	e0 94       	com	r14
    240a:	e1 1c       	adc	r14, r1
    240c:	f1 1c       	adc	r15, r1
    240e:	01 1d       	adc	r16, r1
    2410:	11 1d       	adc	r17, r1
		LCD_WriteChar('-');
    2412:	8d e2       	ldi	r24, 0x2D	; 45
    2414:	0e 94 a7 11 	call	0x234e	; 0x234e <LCD_WriteChar>
    2418:	aa 24       	eor	r10, r10
    241a:	bb 24       	eor	r11, r11
    241c:	65 01       	movw	r12, r10
    241e:	99 24       	eor	r9, r9
    2420:	28 c0       	rjmp	.+80     	; 0x2472 <LCD_WriteInteger+0x98>
	}

	while(num != 0){
		reversed = reversed + num%10;
    2422:	c8 01       	movw	r24, r16
    2424:	b7 01       	movw	r22, r14
    2426:	2a e0       	ldi	r18, 0x0A	; 10
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	40 e0       	ldi	r20, 0x00	; 0
    242c:	50 e0       	ldi	r21, 0x00	; 0
    242e:	0e 94 ac 24 	call	0x4958	; 0x4958 <__divmodsi4>
    2432:	a6 0e       	add	r10, r22
    2434:	b7 1e       	adc	r11, r23
    2436:	c8 1e       	adc	r12, r24
    2438:	d9 1e       	adc	r13, r25
		num_length++ ;

		num = num / 10 ;
    243a:	c8 01       	movw	r24, r16
    243c:	b7 01       	movw	r22, r14
    243e:	2a e0       	ldi	r18, 0x0A	; 10
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	40 e0       	ldi	r20, 0x00	; 0
    2444:	50 e0       	ldi	r21, 0x00	; 0
    2446:	0e 94 ac 24 	call	0x4958	; 0x4958 <__divmodsi4>
    244a:	c9 01       	movw	r24, r18
    244c:	da 01       	movw	r26, r20
    244e:	7c 01       	movw	r14, r24
    2450:	8d 01       	movw	r16, r26
		if(num != 0)
    2452:	e1 14       	cp	r14, r1
    2454:	f1 04       	cpc	r15, r1
    2456:	01 05       	cpc	r16, r1
    2458:	11 05       	cpc	r17, r1
    245a:	51 f0       	breq	.+20     	; 0x2470 <LCD_WriteInteger+0x96>
			reversed = reversed * 10 ;
    245c:	c6 01       	movw	r24, r12
    245e:	b5 01       	movw	r22, r10
    2460:	2a e0       	ldi	r18, 0x0A	; 10
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	40 e0       	ldi	r20, 0x00	; 0
    2466:	50 e0       	ldi	r21, 0x00	; 0
    2468:	0e 94 4b 24 	call	0x4896	; 0x4896 <__mulsi3>
    246c:	5b 01       	movw	r10, r22
    246e:	6c 01       	movw	r12, r24
		LCD_WriteChar('-');
	}

	while(num != 0){
		reversed = reversed + num%10;
		num_length++ ;
    2470:	93 94       	inc	r9
	if(num < 0){
		num *= -1 ;
		LCD_WriteChar('-');
	}

	while(num != 0){
    2472:	e1 14       	cp	r14, r1
    2474:	f1 04       	cpc	r15, r1
    2476:	01 05       	cpc	r16, r1
    2478:	11 05       	cpc	r17, r1
    247a:	99 f6       	brne	.-90     	; 0x2422 <LCD_WriteInteger+0x48>
    247c:	19 c0       	rjmp	.+50     	; 0x24b0 <LCD_WriteInteger+0xd6>



	while(reversed != 0){
		uint8 digit = reversed %10 ;
		LCD_WriteChar(digit + '0');
    247e:	c6 01       	movw	r24, r12
    2480:	b5 01       	movw	r22, r10
    2482:	2a e0       	ldi	r18, 0x0A	; 10
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	40 e0       	ldi	r20, 0x00	; 0
    2488:	50 e0       	ldi	r21, 0x00	; 0
    248a:	0e 94 8a 24 	call	0x4914	; 0x4914 <__udivmodsi4>
    248e:	86 2f       	mov	r24, r22
    2490:	80 5d       	subi	r24, 0xD0	; 208
    2492:	0e 94 a7 11 	call	0x234e	; 0x234e <LCD_WriteChar>
		reversed = reversed / 10 ;
    2496:	c6 01       	movw	r24, r12
    2498:	b5 01       	movw	r22, r10
    249a:	2a e0       	ldi	r18, 0x0A	; 10
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	40 e0       	ldi	r20, 0x00	; 0
    24a0:	50 e0       	ldi	r21, 0x00	; 0
    24a2:	0e 94 8a 24 	call	0x4914	; 0x4914 <__udivmodsi4>
    24a6:	c9 01       	movw	r24, r18
    24a8:	da 01       	movw	r26, r20
    24aa:	5c 01       	movw	r10, r24
    24ac:	6d 01       	movw	r12, r26
		num_length--;
    24ae:	9a 94       	dec	r9
			reversed = reversed * 10 ;
	}



	while(reversed != 0){
    24b0:	a1 14       	cp	r10, r1
    24b2:	b1 04       	cpc	r11, r1
    24b4:	c1 04       	cpc	r12, r1
    24b6:	d1 04       	cpc	r13, r1
    24b8:	11 f7       	brne	.-60     	; 0x247e <LCD_WriteInteger+0xa4>
    24ba:	04 c0       	rjmp	.+8      	; 0x24c4 <LCD_WriteInteger+0xea>
		reversed = reversed / 10 ;
		num_length--;
	}

	while(num_length !=0){
		LCD_WriteChar('0');
    24bc:	80 e3       	ldi	r24, 0x30	; 48
    24be:	0e 94 a7 11 	call	0x234e	; 0x234e <LCD_WriteChar>
		num_length--;
    24c2:	9a 94       	dec	r9
		LCD_WriteChar(digit + '0');
		reversed = reversed / 10 ;
		num_length--;
	}

	while(num_length !=0){
    24c4:	99 20       	and	r9, r9
    24c6:	d1 f7       	brne	.-12     	; 0x24bc <LCD_WriteInteger+0xe2>
		LCD_WriteChar('0');
		num_length--;
	}

}
    24c8:	1f 91       	pop	r17
    24ca:	0f 91       	pop	r16
    24cc:	ff 90       	pop	r15
    24ce:	ef 90       	pop	r14
    24d0:	df 90       	pop	r13
    24d2:	cf 90       	pop	r12
    24d4:	bf 90       	pop	r11
    24d6:	af 90       	pop	r10
    24d8:	9f 90       	pop	r9
    24da:	08 95       	ret

000024dc <LCD_WriteString>:

#endif

}

void LCD_WriteString(uint8 *str){
    24dc:	cf 93       	push	r28
    24de:	df 93       	push	r29
    24e0:	ec 01       	movw	r28, r24
    24e2:	03 c0       	rjmp	.+6      	; 0x24ea <LCD_WriteString+0xe>
	while(*str != '\0'){
		LCD_WriteChar(*str);
    24e4:	0e 94 a7 11 	call	0x234e	; 0x234e <LCD_WriteChar>
		str++ ;
    24e8:	21 96       	adiw	r28, 0x01	; 1
#endif

}

void LCD_WriteString(uint8 *str){
	while(*str != '\0'){
    24ea:	88 81       	ld	r24, Y
    24ec:	88 23       	and	r24, r24
    24ee:	d1 f7       	brne	.-12     	; 0x24e4 <LCD_WriteString+0x8>
		LCD_WriteChar(*str);
		str++ ;
	}
}
    24f0:	df 91       	pop	r29
    24f2:	cf 91       	pop	r28
    24f4:	08 95       	ret

000024f6 <LCD_WriteCommand>:

#endif
}


void LCD_WriteCommand(uint8 cmd){
    24f6:	ff 92       	push	r15
    24f8:	0f 93       	push	r16
    24fa:	1f 93       	push	r17
    24fc:	f8 2e       	mov	r15, r24
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_E_PIN,DIO_PIN_VAL_LOW);
	_delay_ms(1);


#elif LCD_MODE == 4
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_RS_PIN,DIO_PIN_VAL_LOW);
    24fe:	83 e0       	ldi	r24, 0x03	; 3
    2500:	61 e0       	ldi	r22, 0x01	; 1
    2502:	40 e0       	ldi	r20, 0x00	; 0
    2504:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <DIO_SetPinValue>
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_RW_PIN,DIO_PIN_VAL_LOW);
    2508:	83 e0       	ldi	r24, 0x03	; 3
    250a:	62 e0       	ldi	r22, 0x02	; 2
    250c:	40 e0       	ldi	r20, 0x00	; 0
    250e:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <DIO_SetPinValue>
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_E_PIN,DIO_PIN_VAL_LOW);
    2512:	83 e0       	ldi	r24, 0x03	; 3
    2514:	63 e0       	ldi	r22, 0x03	; 3
    2516:	40 e0       	ldi	r20, 0x00	; 0
    2518:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <DIO_SetPinValue>

	//Send Highest nibble first
	LCD_4BIT_DATA_PORT = (LCD_4BIT_DATA_PORT & 0x0f)|(cmd & 0xf0) ;
    251c:	8b b3       	in	r24, 0x1b	; 27
    251e:	9f 2d       	mov	r25, r15
    2520:	90 7f       	andi	r25, 0xF0	; 240
    2522:	8f 70       	andi	r24, 0x0F	; 15
    2524:	98 2b       	or	r25, r24
    2526:	9b bb       	out	0x1b, r25	; 27
	//Latch the highest nibble
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_E_PIN,DIO_PIN_VAL_HIGH);
    2528:	83 e0       	ldi	r24, 0x03	; 3
    252a:	63 e0       	ldi	r22, 0x03	; 3
    252c:	41 e0       	ldi	r20, 0x01	; 1
    252e:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <DIO_SetPinValue>
    2532:	00 ed       	ldi	r16, 0xD0	; 208
    2534:	17 e0       	ldi	r17, 0x07	; 7
    2536:	c8 01       	movw	r24, r16
    2538:	01 97       	sbiw	r24, 0x01	; 1
    253a:	f1 f7       	brne	.-4      	; 0x2538 <LCD_WriteCommand+0x42>
	_delay_ms(1);
	//Stop Latch to send lowest nibble
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_E_PIN,DIO_PIN_VAL_LOW);
    253c:	83 e0       	ldi	r24, 0x03	; 3
    253e:	63 e0       	ldi	r22, 0x03	; 3
    2540:	40 e0       	ldi	r20, 0x00	; 0
    2542:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <DIO_SetPinValue>
    2546:	c8 01       	movw	r24, r16
    2548:	01 97       	sbiw	r24, 0x01	; 1
    254a:	f1 f7       	brne	.-4      	; 0x2548 <LCD_WriteCommand+0x52>
	_delay_ms(1);

	//Send Highest nibble first
	LCD_4BIT_DATA_PORT = (LCD_4BIT_DATA_PORT & 0x0f)|(cmd<<4) ;
    254c:	8b b3       	in	r24, 0x1b	; 27
    254e:	f2 94       	swap	r15
    2550:	20 ef       	ldi	r18, 0xF0	; 240
    2552:	f2 22       	and	r15, r18
    2554:	8f 70       	andi	r24, 0x0F	; 15
    2556:	8f 29       	or	r24, r15
    2558:	8b bb       	out	0x1b, r24	; 27
	//Latch the highest nibble
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_E_PIN,DIO_PIN_VAL_HIGH);
    255a:	83 e0       	ldi	r24, 0x03	; 3
    255c:	63 e0       	ldi	r22, 0x03	; 3
    255e:	41 e0       	ldi	r20, 0x01	; 1
    2560:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <DIO_SetPinValue>
    2564:	c8 01       	movw	r24, r16
    2566:	01 97       	sbiw	r24, 0x01	; 1
    2568:	f1 f7       	brne	.-4      	; 0x2566 <LCD_WriteCommand+0x70>
	_delay_ms(1);
	//Stop Latch to send lowest nibble
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_E_PIN,DIO_PIN_VAL_LOW);
    256a:	83 e0       	ldi	r24, 0x03	; 3
    256c:	63 e0       	ldi	r22, 0x03	; 3
    256e:	40 e0       	ldi	r20, 0x00	; 0
    2570:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <DIO_SetPinValue>
    2574:	c8 01       	movw	r24, r16
    2576:	01 97       	sbiw	r24, 0x01	; 1
    2578:	f1 f7       	brne	.-4      	; 0x2576 <LCD_WriteCommand+0x80>
	_delay_ms(1);

#endif

}
    257a:	1f 91       	pop	r17
    257c:	0f 91       	pop	r16
    257e:	ff 90       	pop	r15
    2580:	08 95       	ret

00002582 <LCD_Clear>:

}


void LCD_Clear(void){
	LCD_WriteCommand(0x01);
    2582:	81 e0       	ldi	r24, 0x01	; 1
    2584:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <LCD_WriteCommand>
}
    2588:	08 95       	ret

0000258a <LCD_GoTo>:
	}
}


void LCD_GoTo(uint8 row,uint8 col){
	if(row == 0){
    258a:	88 23       	and	r24, r24
    258c:	29 f4       	brne	.+10     	; 0x2598 <LCD_GoTo+0xe>
		uint8 cmd = 0x80 + col ;
		LCD_WriteCommand(cmd);
    258e:	86 2f       	mov	r24, r22
    2590:	80 58       	subi	r24, 0x80	; 128
    2592:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <LCD_WriteCommand>
    2596:	08 95       	ret
	}else if(row == 1){
    2598:	81 30       	cpi	r24, 0x01	; 1
    259a:	21 f4       	brne	.+8      	; 0x25a4 <LCD_GoTo+0x1a>
		uint8 cmd = 0xC0 + col ;
		LCD_WriteCommand(cmd);
    259c:	86 2f       	mov	r24, r22
    259e:	80 54       	subi	r24, 0x40	; 64
    25a0:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <LCD_WriteCommand>
    25a4:	08 95       	ret

000025a6 <LCD_Init>:
	LCD_WriteCommand(0x0C); //Display ON , Cursor OFF
	LCD_WriteCommand(0x01); //Clear LCD screen
	LCD_WriteCommand(0x02); //Return Cursor to HOME

#elif LCD_MODE == 4
	DIO_SetPinDirection(LCD_8BIT_DATA_PORT,LCD_D4_PIN,DIO_PIN_DIR_OUTPUT);
    25a6:	80 e0       	ldi	r24, 0x00	; 0
    25a8:	64 e0       	ldi	r22, 0x04	; 4
    25aa:	41 e0       	ldi	r20, 0x01	; 1
    25ac:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_8BIT_DATA_PORT,LCD_D5_PIN,DIO_PIN_DIR_OUTPUT);
    25b0:	80 e0       	ldi	r24, 0x00	; 0
    25b2:	65 e0       	ldi	r22, 0x05	; 5
    25b4:	41 e0       	ldi	r20, 0x01	; 1
    25b6:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_8BIT_DATA_PORT,LCD_D6_PIN,DIO_PIN_DIR_OUTPUT);
    25ba:	80 e0       	ldi	r24, 0x00	; 0
    25bc:	66 e0       	ldi	r22, 0x06	; 6
    25be:	41 e0       	ldi	r20, 0x01	; 1
    25c0:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_8BIT_DATA_PORT,LCD_D7_PIN,DIO_PIN_DIR_OUTPUT);
    25c4:	80 e0       	ldi	r24, 0x00	; 0
    25c6:	67 e0       	ldi	r22, 0x07	; 7
    25c8:	41 e0       	ldi	r20, 0x01	; 1
    25ca:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <DIO_SetPinDirection>

	DIO_SetPinDirection(LCD_8BIT_CONTROL_PORT,LCD_RS_PIN,DIO_PIN_DIR_OUTPUT);
    25ce:	83 e0       	ldi	r24, 0x03	; 3
    25d0:	61 e0       	ldi	r22, 0x01	; 1
    25d2:	41 e0       	ldi	r20, 0x01	; 1
    25d4:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_8BIT_CONTROL_PORT,LCD_RW_PIN,DIO_PIN_DIR_OUTPUT);
    25d8:	83 e0       	ldi	r24, 0x03	; 3
    25da:	62 e0       	ldi	r22, 0x02	; 2
    25dc:	41 e0       	ldi	r20, 0x01	; 1
    25de:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_8BIT_CONTROL_PORT,LCD_E_PIN,DIO_PIN_DIR_OUTPUT);
    25e2:	83 e0       	ldi	r24, 0x03	; 3
    25e4:	63 e0       	ldi	r22, 0x03	; 3
    25e6:	41 e0       	ldi	r20, 0x01	; 1
    25e8:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <DIO_SetPinDirection>

	LCD_WriteCommand(0x33); //For 4bit mode
    25ec:	83 e3       	ldi	r24, 0x33	; 51
    25ee:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <LCD_WriteCommand>
	LCD_WriteCommand(0x32);
    25f2:	82 e3       	ldi	r24, 0x32	; 50
    25f4:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <LCD_WriteCommand>
	LCD_WriteCommand(0x28);
    25f8:	88 e2       	ldi	r24, 0x28	; 40
    25fa:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <LCD_WriteCommand>

	LCD_WriteCommand(0x0C); //Display ON , Cursor OFF
    25fe:	8c e0       	ldi	r24, 0x0C	; 12
    2600:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <LCD_WriteCommand>
	LCD_WriteCommand(0x01); //Clear LCD screen
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <LCD_WriteCommand>
	LCD_WriteCommand(0x02); //Return Cursor to HOME
    260a:	82 e0       	ldi	r24, 0x02	; 2
    260c:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <LCD_WriteCommand>

#endif
}
    2610:	08 95       	ret

00002612 <SPI_Data_Transmit>:
void  SPI_Transmit_Term(void){
	DIO_SetPinValue(DIO_PORTB,DIO_PIN4,DIO_PIN_VAL_HIGH);
}

uint8 SPI_Data_Transmit(uint8 data){
	SPDR = data ;
    2612:	8f b9       	out	0x0f, r24	; 15

	while(GET_BIT(SPSR,7) == 0);
    2614:	77 9b       	sbis	0x0e, 7	; 14
    2616:	fe cf       	rjmp	.-4      	; 0x2614 <SPI_Data_Transmit+0x2>

	uint8 received_data = 0 ;
	received_data = SPDR ;
    2618:	8f b1       	in	r24, 0x0f	; 15

	return received_data ;

}
    261a:	08 95       	ret

0000261c <SPI_Transmit_Term>:
void  SPI_Transmit_Start(void){
	DIO_SetPinValue(DIO_PORTB,DIO_PIN4,DIO_PIN_VAL_LOW);
}

void  SPI_Transmit_Term(void){
	DIO_SetPinValue(DIO_PORTB,DIO_PIN4,DIO_PIN_VAL_HIGH);
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	64 e0       	ldi	r22, 0x04	; 4
    2620:	41 e0       	ldi	r20, 0x01	; 1
    2622:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <DIO_SetPinValue>
}
    2626:	08 95       	ret

00002628 <SPI_Transmit_Start>:


}

void  SPI_Transmit_Start(void){
	DIO_SetPinValue(DIO_PORTB,DIO_PIN4,DIO_PIN_VAL_LOW);
    2628:	81 e0       	ldi	r24, 0x01	; 1
    262a:	64 e0       	ldi	r22, 0x04	; 4
    262c:	40 e0       	ldi	r20, 0x00	; 0
    262e:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <DIO_SetPinValue>
}
    2632:	08 95       	ret

00002634 <SPI_Slave_Init>:

	SPCR =  0x53;

}
void  SPI_Slave_Init(void){
	DIO_SetPinDirection(DIO_PORTB, DIO_PIN4, DIO_PIN_DIR_INPUT);
    2634:	81 e0       	ldi	r24, 0x01	; 1
    2636:	64 e0       	ldi	r22, 0x04	; 4
    2638:	40 e0       	ldi	r20, 0x00	; 0
    263a:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTB, DIO_PIN5, DIO_PIN_DIR_INPUT);
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	65 e0       	ldi	r22, 0x05	; 5
    2642:	40 e0       	ldi	r20, 0x00	; 0
    2644:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTB, DIO_PIN6, DIO_PIN_DIR_OUTPUT);
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	66 e0       	ldi	r22, 0x06	; 6
    264c:	41 e0       	ldi	r20, 0x01	; 1
    264e:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTB, DIO_PIN7, DIO_PIN_DIR_INPUT);
    2652:	81 e0       	ldi	r24, 0x01	; 1
    2654:	67 e0       	ldi	r22, 0x07	; 7
    2656:	40 e0       	ldi	r20, 0x00	; 0
    2658:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <DIO_SetPinDirection>
	//SET_BIT(SPCR,5);

	//Slave Select
	//CLR_BIT(SPCR,4);

	SPCR = 0x40 ;
    265c:	80 e4       	ldi	r24, 0x40	; 64
    265e:	8d b9       	out	0x0d, r24	; 13


}
    2660:	08 95       	ret

00002662 <SPI_Master_Init>:


#include "SPI.h"

void  SPI_Master_Init(void){
	DIO_SetPinDirection(DIO_PORTB, DIO_PIN4, DIO_PIN_DIR_OUTPUT);
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	64 e0       	ldi	r22, 0x04	; 4
    2666:	41 e0       	ldi	r20, 0x01	; 1
    2668:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTB, DIO_PIN5, DIO_PIN_DIR_OUTPUT);
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	65 e0       	ldi	r22, 0x05	; 5
    2670:	41 e0       	ldi	r20, 0x01	; 1
    2672:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTB, DIO_PIN6, DIO_PIN_DIR_INPUT);
    2676:	81 e0       	ldi	r24, 0x01	; 1
    2678:	66 e0       	ldi	r22, 0x06	; 6
    267a:	40 e0       	ldi	r20, 0x00	; 0
    267c:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTB, DIO_PIN7, DIO_PIN_DIR_OUTPUT);
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	67 e0       	ldi	r22, 0x07	; 7
    2684:	41 e0       	ldi	r20, 0x01	; 1
    2686:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <DIO_SetPinDirection>

	//CLK/128
	//SET_BIT(SPCR,0);
	//SET_BIT(SPCR,1);

	SPCR =  0x53;
    268a:	83 e5       	ldi	r24, 0x53	; 83
    268c:	8d b9       	out	0x0d, r24	; 13

}
    268e:	08 95       	ret

00002690 <Timer0_Init>:

void Timer0_Init(void){
#if Timer0_MODE == Timer0_NORMAL_MODE

	//Choosing normal mode
	CLR_BIT(TCCR0,3);
    2690:	83 b7       	in	r24, 0x33	; 51
    2692:	87 7f       	andi	r24, 0xF7	; 247
    2694:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,6);
    2696:	83 b7       	in	r24, 0x33	; 51
    2698:	8f 7b       	andi	r24, 0xBF	; 191
    269a:	83 bf       	out	0x33, r24	; 51
	//Enable Global Interrupt
	//SET_BIT(SREG,7);

	//Enable overflow Interrupt
	//Timer/Counter0 Overflow Interrupt Enable
	SET_BIT(TIMSK,0);
    269c:	89 b7       	in	r24, 0x39	; 57
    269e:	81 60       	ori	r24, 0x01	; 1
    26a0:	89 bf       	out	0x39, r24	; 57
	CLR_BIT(TIMSK,1);
    26a2:	89 b7       	in	r24, 0x39	; 57
    26a4:	8d 7f       	andi	r24, 0xFD	; 253
    26a6:	89 bf       	out	0x39, r24	; 57
	SET_BIT(TCCR0,5);



#endif
}
    26a8:	08 95       	ret

000026aa <Timer0_Start>:

void Timer0_Start(void){

	SET_BIT(TCCR0,0);
    26aa:	83 b7       	in	r24, 0x33	; 51
    26ac:	81 60       	ori	r24, 0x01	; 1
    26ae:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,1);
    26b0:	83 b7       	in	r24, 0x33	; 51
    26b2:	8d 7f       	andi	r24, 0xFD	; 253
    26b4:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,2);
    26b6:	83 b7       	in	r24, 0x33	; 51
    26b8:	84 60       	ori	r24, 0x04	; 4
    26ba:	83 bf       	out	0x33, r24	; 51
}
    26bc:	08 95       	ret

000026be <Timer0_Stop>:

void Timer0_Stop(void){
	CLR_BIT(TCCR0,0);
    26be:	83 b7       	in	r24, 0x33	; 51
    26c0:	8e 7f       	andi	r24, 0xFE	; 254
    26c2:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,1);
    26c4:	83 b7       	in	r24, 0x33	; 51
    26c6:	8d 7f       	andi	r24, 0xFD	; 253
    26c8:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,2);
    26ca:	83 b7       	in	r24, 0x33	; 51
    26cc:	8b 7f       	andi	r24, 0xFB	; 251
    26ce:	83 bf       	out	0x33, r24	; 51
}
    26d0:	08 95       	ret

000026d2 <Timer0_delay_ms>:

void Timer0_delay_ms(uint32 delay_ms){
	uint8 Tick_Time = 1024/8 ; //this time is in micro seconds
	uint32 Total_Ticks = (delay_ms*1000) / Tick_Time ;
    26d2:	28 ee       	ldi	r18, 0xE8	; 232
    26d4:	33 e0       	ldi	r19, 0x03	; 3
    26d6:	40 e0       	ldi	r20, 0x00	; 0
    26d8:	50 e0       	ldi	r21, 0x00	; 0
    26da:	0e 94 4b 24 	call	0x4896	; 0x4896 <__mulsi3>
    26de:	37 e0       	ldi	r19, 0x07	; 7
    26e0:	96 95       	lsr	r25
    26e2:	87 95       	ror	r24
    26e4:	77 95       	ror	r23
    26e6:	67 95       	ror	r22
    26e8:	3a 95       	dec	r19
    26ea:	d1 f7       	brne	.-12     	; 0x26e0 <Timer0_delay_ms+0xe>
	NUM_OVF = Total_Ticks / 256 ;
    26ec:	27 2f       	mov	r18, r23
    26ee:	38 2f       	mov	r19, r24
    26f0:	49 2f       	mov	r20, r25
    26f2:	55 27       	eor	r21, r21
    26f4:	20 93 ef 00 	sts	0x00EF, r18
    26f8:	30 93 f0 00 	sts	0x00F0, r19
    26fc:	40 93 f1 00 	sts	0x00F1, r20
    2700:	50 93 f2 00 	sts	0x00F2, r21

#if Timer0_MODE == Timer0_NORMAL_MODE

	INIT_VAL = 256 - (Total_Ticks % 256) ;
    2704:	20 e0       	ldi	r18, 0x00	; 0
    2706:	31 e0       	ldi	r19, 0x01	; 1
    2708:	40 e0       	ldi	r20, 0x00	; 0
    270a:	50 e0       	ldi	r21, 0x00	; 0
    270c:	26 1b       	sub	r18, r22
    270e:	31 09       	sbc	r19, r1
    2710:	41 09       	sbc	r20, r1
    2712:	51 09       	sbc	r21, r1
    2714:	20 93 f3 00 	sts	0x00F3, r18
    2718:	30 93 f4 00 	sts	0x00F4, r19
    271c:	40 93 f5 00 	sts	0x00F5, r20
    2720:	50 93 f6 00 	sts	0x00F6, r21
	TCNT0 = INIT_VAL ;
    2724:	22 bf       	out	0x32, r18	; 50
#elif Timer0_MODE == Timer0_CTC_MODE

	INIT_VAL = Total_Ticks % 256 ;
	OCR0 = INIT_VAL ;
#endif
}
    2726:	08 95       	ret

00002728 <minute_delay>:


void minute_delay(void){
	Timer0_Init();
    2728:	0e 94 48 13 	call	0x2690	; 0x2690 <Timer0_Init>
	Timer0_Start();
    272c:	0e 94 55 13 	call	0x26aa	; 0x26aa <Timer0_Start>
    2730:	26 e2       	ldi	r18, 0x26	; 38
    2732:	37 e0       	ldi	r19, 0x07	; 7


	//we will set number of overflows
	sint16 ovf_for_min = 1830 ;
	while(ovf_for_min > 0){
		if(GET_BIT(TIFR,0) == 1){
    2734:	08 b6       	in	r0, 0x38	; 56
    2736:	00 fe       	sbrs	r0, 0
    2738:	fd cf       	rjmp	.-6      	; 0x2734 <minute_delay+0xc>
			ovf_for_min-- ;
    273a:	21 50       	subi	r18, 0x01	; 1
    273c:	30 40       	sbci	r19, 0x00	; 0
			SET_BIT(TIFR,0) ;
    273e:	88 b7       	in	r24, 0x38	; 56
    2740:	81 60       	ori	r24, 0x01	; 1
    2742:	88 bf       	out	0x38, r24	; 56
	Timer0_Start();


	//we will set number of overflows
	sint16 ovf_for_min = 1830 ;
	while(ovf_for_min > 0){
    2744:	12 16       	cp	r1, r18
    2746:	13 06       	cpc	r1, r19
    2748:	ac f3       	brlt	.-22     	; 0x2734 <minute_delay+0xc>
			ovf_for_min-- ;
			SET_BIT(TIFR,0) ;
		}
	}

	Timer0_Stop();
    274a:	0e 94 5f 13 	call	0x26be	; 0x26be <Timer0_Stop>
}
    274e:	08 95       	ret

00002750 <Fast_PWM_Motor>:



void Fast_PWM_Motor(uint8 OCR){
	OCR0 = OCR ;
    2750:	8c bf       	out	0x3c, r24	; 60
}
    2752:	08 95       	ret

00002754 <Timer1_Init>:
#include "Timer1.h"

void Timer1_Init(void){

	//make pin5 on portd output
	SET_BIT(DDRD,5);
    2754:	8d 9a       	sbi	0x11, 5	; 17

	//fast pwm , TOP -->ICR1 , COMPARE-->OCR1A
	CLR_BIT(TCCR1A,0);
    2756:	8f b5       	in	r24, 0x2f	; 47
    2758:	8e 7f       	andi	r24, 0xFE	; 254
    275a:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A,1);
    275c:	8f b5       	in	r24, 0x2f	; 47
    275e:	82 60       	ori	r24, 0x02	; 2
    2760:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1B,3);
    2762:	8e b5       	in	r24, 0x2e	; 46
    2764:	88 60       	ori	r24, 0x08	; 8
    2766:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,4);
    2768:	8e b5       	in	r24, 0x2e	; 46
    276a:	80 61       	ori	r24, 0x10	; 16
    276c:	8e bd       	out	0x2e, r24	; 46

	//Non inverted fast pwm
	CLR_BIT(TCCR1A,6);
    276e:	8f b5       	in	r24, 0x2f	; 47
    2770:	8f 7b       	andi	r24, 0xBF	; 191
    2772:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A,7);
    2774:	8f b5       	in	r24, 0x2f	; 47
    2776:	80 68       	ori	r24, 0x80	; 128
    2778:	8f bd       	out	0x2f, r24	; 47

}
    277a:	08 95       	ret

0000277c <Timer1_Start>:


void Timer1_Start(void){
	CLR_BIT(TCCR1B,0);
    277c:	8e b5       	in	r24, 0x2e	; 46
    277e:	8e 7f       	andi	r24, 0xFE	; 254
    2780:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,1);
    2782:	8e b5       	in	r24, 0x2e	; 46
    2784:	8d 7f       	andi	r24, 0xFD	; 253
    2786:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,2);
    2788:	8e b5       	in	r24, 0x2e	; 46
    278a:	84 60       	ori	r24, 0x04	; 4
    278c:	8e bd       	out	0x2e, r24	; 46
}
    278e:	08 95       	ret

00002790 <Timer1_Stop>:
void Timer1_Stop(void){
	CLR_BIT(TCCR1B,0);
    2790:	8e b5       	in	r24, 0x2e	; 46
    2792:	8e 7f       	andi	r24, 0xFE	; 254
    2794:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,1);
    2796:	8e b5       	in	r24, 0x2e	; 46
    2798:	8d 7f       	andi	r24, 0xFD	; 253
    279a:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,2);
    279c:	8e b5       	in	r24, 0x2e	; 46
    279e:	8b 7f       	andi	r24, 0xFB	; 251
    27a0:	8e bd       	out	0x2e, r24	; 46
}
    27a2:	08 95       	ret

000027a4 <Timer1_Generate>:


void Timer1_Generate(uint16 Duty , uint16 Top){
	OCR1A = Duty ;
    27a4:	9b bd       	out	0x2b, r25	; 43
    27a6:	8a bd       	out	0x2a, r24	; 42
	ICR1 = Top ;
    27a8:	77 bd       	out	0x27, r23	; 39
    27aa:	66 bd       	out	0x26, r22	; 38
}
    27ac:	08 95       	ret

000027ae <UART_Tx>:
}


void UART_Tx(uint8 data){
	//put data we want to send in UDR register after that it will be shifted to output
	UDR = data;
    27ae:	8c b9       	out	0x0c, r24	; 12

	//keep looping until data buffer register is empty
	while(GET_BIT(UCSRA,5) != 1);
    27b0:	5d 9b       	sbis	0x0b, 5	; 11
    27b2:	fe cf       	rjmp	.-4      	; 0x27b0 <UART_Tx+0x2>
}
    27b4:	08 95       	ret

000027b6 <UART_Tx_String>:

void UART_Tx_String(uint8 *data){
    27b6:	20 e0       	ldi	r18, 0x00	; 0
    27b8:	04 c0       	rjmp	.+8      	; 0x27c2 <UART_Tx_String+0xc>
}


void UART_Tx(uint8 data){
	//put data we want to send in UDR register after that it will be shifted to output
	UDR = data;
    27ba:	ec b9       	out	0x0c, r30	; 12

	//keep looping until data buffer register is empty
	while(GET_BIT(UCSRA,5) != 1);
    27bc:	5d 9b       	sbis	0x0b, 5	; 11
    27be:	fe cf       	rjmp	.-4      	; 0x27bc <UART_Tx_String+0x6>
void UART_Tx_String(uint8 *data){
	uint8 counter = 0 ;

	while(data[counter] != '\0'){
		UART_Tx(data[counter]);
		counter++ ;
    27c0:	2f 5f       	subi	r18, 0xFF	; 255
}

void UART_Tx_String(uint8 *data){
	uint8 counter = 0 ;

	while(data[counter] != '\0'){
    27c2:	fc 01       	movw	r30, r24
    27c4:	e2 0f       	add	r30, r18
    27c6:	f1 1d       	adc	r31, r1
    27c8:	e0 81       	ld	r30, Z
    27ca:	ee 23       	and	r30, r30
    27cc:	b1 f7       	brne	.-20     	; 0x27ba <UART_Tx_String+0x4>
		UART_Tx(data[counter]);
		counter++ ;
	}
}
    27ce:	08 95       	ret

000027d0 <UART_Rx>:

uint8 UART_Rx(void){
	while(GET_BIT(UCSRA,7) != 1) ;
    27d0:	5f 9b       	sbis	0x0b, 7	; 11
    27d2:	fe cf       	rjmp	.-4      	; 0x27d0 <UART_Rx>

	return UDR ;
    27d4:	8c b1       	in	r24, 0x0c	; 12
}
    27d6:	08 95       	ret

000027d8 <UART_Init>:


void UART_Init(){

	//Set Tx pin output direction
	DIO_SetPinDirection(DIO_PORTD,DIO_PIN1,DIO_PIN_DIR_OUTPUT);
    27d8:	83 e0       	ldi	r24, 0x03	; 3
    27da:	61 e0       	ldi	r22, 0x01	; 1
    27dc:	41 e0       	ldi	r20, 0x01	; 1
    27de:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <DIO_SetPinDirection>
	//Set Rx pin input direction
	DIO_SetPinDirection(DIO_PORTD, DIO_PIN0, DIO_PIN_DIR_INPUT);
    27e2:	83 e0       	ldi	r24, 0x03	; 3
    27e4:	60 e0       	ldi	r22, 0x00	; 0
    27e6:	40 e0       	ldi	r20, 0x00	; 0
    27e8:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <DIO_SetPinDirection>

	//BaudRate calculation --> value to be input to down counter prescalar
	UBRRL = ((Freq)/(16*Desired_Baud_Rate)) - 1;
    27ec:	83 e3       	ldi	r24, 0x33	; 51
    27ee:	89 b9       	out	0x09, r24	; 9

	//Enable Transmitter and Receiver
	SET_BIT(UCSRB,3);
    27f0:	53 9a       	sbi	0x0a, 3	; 10
	SET_BIT(UCSRB,4);
    27f2:	54 9a       	sbi	0x0a, 4	; 10

	//Asynchronous Operation
	//Stop Bits -->1 bit
	//Disable Parity
	//8 data bits
	UCSRC = 0x86 ; //0b1000 0110
    27f4:	86 e8       	ldi	r24, 0x86	; 134
    27f6:	80 bd       	out	0x20, r24	; 32

}
    27f8:	08 95       	ret

000027fa <RTC_DATE_Read>:

	I2C_Stop();

}

void RTC_DATE_Read(uint8 starting_read_address , DATE_DATA *Data_Holder){
    27fa:	ff 92       	push	r15
    27fc:	0f 93       	push	r16
    27fe:	1f 93       	push	r17
    2800:	f8 2e       	mov	r15, r24
    2802:	8b 01       	movw	r16, r22
	//first we want to Initialize clock rate of I2C & Generate start and send SLA+W address
	I2C_Init();
    2804:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <I2C_Init>
	I2C_Start(RTC_SLA_W);
    2808:	80 ed       	ldi	r24, 0xD0	; 208
    280a:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
	//now we will set the pointer to the address we want to read from
	I2C_Write(starting_read_address);
    280e:	8f 2d       	mov	r24, r15
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>

	//now we will generate a repeated start but in reading mode this time
	I2C_Repeated_Start(RTC_SLA_R);
    2816:	81 ed       	ldi	r24, 0xD1	; 209
    2818:	0e 94 7d 10 	call	0x20fa	; 0x20fa <I2C_Repeated_Start>
	Data_Holder->day = I2C_Read_ACK();
    281c:	0e 94 ad 10 	call	0x215a	; 0x215a <I2C_Read_ACK>
    2820:	f8 01       	movw	r30, r16
    2822:	80 83       	st	Z, r24
	Data_Holder->date = I2C_Read_ACK();
    2824:	0e 94 ad 10 	call	0x215a	; 0x215a <I2C_Read_ACK>
    2828:	f8 01       	movw	r30, r16
    282a:	81 83       	std	Z+1, r24	; 0x01
	Data_Holder->month = I2C_Read_ACK();
    282c:	0e 94 ad 10 	call	0x215a	; 0x215a <I2C_Read_ACK>
    2830:	f8 01       	movw	r30, r16
    2832:	82 83       	std	Z+2, r24	; 0x02
	Data_Holder->year = I2C_Read_NACK();
    2834:	0e 94 b4 10 	call	0x2168	; 0x2168 <I2C_Read_NACK>
    2838:	f8 01       	movw	r30, r16
    283a:	83 83       	std	Z+3, r24	; 0x03
    283c:	14 82       	std	Z+4, r1	; 0x04

	I2C_Stop();
    283e:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>

}
    2842:	1f 91       	pop	r17
    2844:	0f 91       	pop	r16
    2846:	ff 90       	pop	r15
    2848:	08 95       	ret

0000284a <RTC_CLOCK_Read>:
	I2C_Write(year);
	I2C_Stop();
}


void RTC_CLOCK_Read(uint8 starting_read_address , CLOCK_DATA *Data_Holder){
    284a:	ff 92       	push	r15
    284c:	0f 93       	push	r16
    284e:	1f 93       	push	r17
    2850:	f8 2e       	mov	r15, r24
    2852:	8b 01       	movw	r16, r22
	//first we want to Initialize clock rate of I2C & Generate start and send SLA+W address
	I2C_Init();
    2854:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <I2C_Init>
	I2C_Start(RTC_SLA_W);
    2858:	80 ed       	ldi	r24, 0xD0	; 208
    285a:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
	//now we will set the pointer to the address we want to read from
	I2C_Write(starting_read_address);
    285e:	8f 2d       	mov	r24, r15
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>

	//now we will generate a repeated start but in reading mode this time
	I2C_Repeated_Start(RTC_SLA_R);
    2866:	81 ed       	ldi	r24, 0xD1	; 209
    2868:	0e 94 7d 10 	call	0x20fa	; 0x20fa <I2C_Repeated_Start>
	Data_Holder->seconds = I2C_Read_ACK();
    286c:	0e 94 ad 10 	call	0x215a	; 0x215a <I2C_Read_ACK>
    2870:	f8 01       	movw	r30, r16
    2872:	80 83       	st	Z, r24
	Data_Holder->minutes = I2C_Read_ACK();
    2874:	0e 94 ad 10 	call	0x215a	; 0x215a <I2C_Read_ACK>
    2878:	f8 01       	movw	r30, r16
    287a:	81 83       	std	Z+1, r24	; 0x01
	Data_Holder->hours = I2C_Read_NACK() ;
    287c:	0e 94 b4 10 	call	0x2168	; 0x2168 <I2C_Read_NACK>
    2880:	f8 01       	movw	r30, r16
    2882:	82 83       	std	Z+2, r24	; 0x02
	Data_Holder->am_pm = ( ( Data_Holder->hours & 0b00100000 ) >> 5 ) ;
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	80 72       	andi	r24, 0x20	; 32
    2888:	90 70       	andi	r25, 0x00	; 0
    288a:	25 e0       	ldi	r18, 0x05	; 5
    288c:	95 95       	asr	r25
    288e:	87 95       	ror	r24
    2890:	2a 95       	dec	r18
    2892:	e1 f7       	brne	.-8      	; 0x288c <RTC_CLOCK_Read+0x42>
    2894:	83 83       	std	Z+3, r24	; 0x03

	I2C_Stop();
    2896:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>

}
    289a:	1f 91       	pop	r17
    289c:	0f 91       	pop	r16
    289e:	ff 90       	pop	r15
    28a0:	08 95       	ret

000028a2 <RTC_DATE_Write>:
	//stop communication
	I2C_Stop();

}

void RTC_DATE_Write(uint8 day , uint8 date , uint8 month , uint8 year){
    28a2:	ef 92       	push	r14
    28a4:	ff 92       	push	r15
    28a6:	0f 93       	push	r16
    28a8:	1f 93       	push	r17
    28aa:	18 2f       	mov	r17, r24
    28ac:	06 2f       	mov	r16, r22
    28ae:	f4 2e       	mov	r15, r20
    28b0:	e2 2e       	mov	r14, r18
	//first we want to Initialize clock rate of I2C & Generate start and send SLA+W address
	I2C_Init();
    28b2:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <I2C_Init>
	I2C_Start(RTC_SLA_W);
    28b6:	80 ed       	ldi	r24, 0xD0	; 208
    28b8:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>

	//now we want to write the starting writing register address
	I2C_Write(0x03); //Starting from seconds register address (0x03)
    28bc:	83 e0       	ldi	r24, 0x03	; 3
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
	//now you pass the values : day , date , month , year
	I2C_Write(day);
    28c4:	81 2f       	mov	r24, r17
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
	I2C_Write(date);
    28cc:	80 2f       	mov	r24, r16
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
	I2C_Write(month);
    28d4:	8f 2d       	mov	r24, r15
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
	I2C_Write(year);
    28dc:	8e 2d       	mov	r24, r14
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
	I2C_Stop();
    28e4:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>
}
    28e8:	1f 91       	pop	r17
    28ea:	0f 91       	pop	r16
    28ec:	ff 90       	pop	r15
    28ee:	ef 90       	pop	r14
    28f0:	08 95       	ret

000028f2 <RTC_CLOCK_Write>:


#include "ds3231.h"


void RTC_CLOCK_Write(uint8 hour , uint8 min , uint8 sec , uint8 AM_PM){
    28f2:	ef 92       	push	r14
    28f4:	ff 92       	push	r15
    28f6:	0f 93       	push	r16
    28f8:	1f 93       	push	r17
    28fa:	08 2f       	mov	r16, r24
    28fc:	e6 2e       	mov	r14, r22
    28fe:	f4 2e       	mov	r15, r20
    2900:	12 2f       	mov	r17, r18
	//first we want to Initialize clock rate of I2C & Generate start and send SLA+W address
	I2C_Init();
    2902:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <I2C_Init>
	I2C_Start(RTC_SLA_W);
    2906:	80 ed       	ldi	r24, 0xD0	; 208
    2908:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>

	//now we want to write the starting writing register address
	I2C_Write(0x00); //Starting from seconds register address (0x00)
    290c:	80 e0       	ldi	r24, 0x00	; 0
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
	//now you pass the values : sec , min , hours ;
	I2C_Write(sec);
    2914:	8f 2d       	mov	r24, r15
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
	I2C_Write(min);
    291c:	8e 2d       	mov	r24, r14
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>

	//0b01000000 means 12 hours mode
	hour = hour | (AM_PM<<5) | 0b01000000;
    2924:	00 64       	ori	r16, 0x40	; 64
    2926:	12 95       	swap	r17
    2928:	11 0f       	add	r17, r17
    292a:	10 7e       	andi	r17, 0xE0	; 224
	I2C_Write(hour);
    292c:	81 2f       	mov	r24, r17
    292e:	80 2b       	or	r24, r16
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>

	//stop communication
	I2C_Stop();
    2936:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>

}
    293a:	1f 91       	pop	r17
    293c:	0f 91       	pop	r16
    293e:	ff 90       	pop	r15
    2940:	ef 90       	pop	r14
    2942:	08 95       	ret

00002944 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return xFreeBytesRemaining;
}
    2944:	80 91 f9 00 	lds	r24, 0x00F9
    2948:	90 91 fa 00 	lds	r25, 0x00FA
    294c:	08 95       	ret

0000294e <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
	return xMinimumEverFreeBytesRemaining;
}
    294e:	80 91 f7 00 	lds	r24, 0x00F7
    2952:	90 91 f8 00 	lds	r25, 0x00F8
    2956:	08 95       	ret

00002958 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
	/* This just exists to keep the linker quiet. */
}
    2958:	08 95       	ret

0000295a <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
    295a:	cf 93       	push	r28
    295c:	df 93       	push	r29
    295e:	fc 01       	movw	r30, r24
    2960:	c7 ee       	ldi	r28, 0xE7	; 231
    2962:	d4 e0       	ldi	r29, 0x04	; 4
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    2964:	88 81       	ld	r24, Y
    2966:	99 81       	ldd	r25, Y+1	; 0x01
    2968:	8e 17       	cp	r24, r30
    296a:	9f 07       	cpc	r25, r31
    296c:	10 f4       	brcc	.+4      	; 0x2972 <prvInsertBlockIntoFreeList+0x18>
    296e:	ec 01       	movw	r28, r24
    2970:	f9 cf       	rjmp	.-14     	; 0x2964 <prvInsertBlockIntoFreeList+0xa>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    2972:	2a 81       	ldd	r18, Y+2	; 0x02
    2974:	3b 81       	ldd	r19, Y+3	; 0x03
    2976:	ce 01       	movw	r24, r28
    2978:	82 0f       	add	r24, r18
    297a:	93 1f       	adc	r25, r19
    297c:	e8 17       	cp	r30, r24
    297e:	f9 07       	cpc	r31, r25
    2980:	39 f4       	brne	.+14     	; 0x2990 <prvInsertBlockIntoFreeList+0x36>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    2982:	82 81       	ldd	r24, Z+2	; 0x02
    2984:	93 81       	ldd	r25, Z+3	; 0x03
    2986:	82 0f       	add	r24, r18
    2988:	93 1f       	adc	r25, r19
    298a:	9b 83       	std	Y+3, r25	; 0x03
    298c:	8a 83       	std	Y+2, r24	; 0x02
    298e:	fe 01       	movw	r30, r28
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    2990:	22 81       	ldd	r18, Z+2	; 0x02
    2992:	33 81       	ldd	r19, Z+3	; 0x03
    2994:	a8 81       	ld	r26, Y
    2996:	b9 81       	ldd	r27, Y+1	; 0x01
    2998:	cf 01       	movw	r24, r30
    299a:	82 0f       	add	r24, r18
    299c:	93 1f       	adc	r25, r19
    299e:	a8 17       	cp	r26, r24
    29a0:	b9 07       	cpc	r27, r25
    29a2:	a1 f4       	brne	.+40     	; 0x29cc <prvInsertBlockIntoFreeList+0x72>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    29a4:	80 91 fd 00 	lds	r24, 0x00FD
    29a8:	90 91 fe 00 	lds	r25, 0x00FE
    29ac:	a8 17       	cp	r26, r24
    29ae:	b9 07       	cpc	r27, r25
    29b0:	69 f0       	breq	.+26     	; 0x29cc <prvInsertBlockIntoFreeList+0x72>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    29b2:	12 96       	adiw	r26, 0x02	; 2
    29b4:	8d 91       	ld	r24, X+
    29b6:	9c 91       	ld	r25, X
    29b8:	13 97       	sbiw	r26, 0x03	; 3
    29ba:	82 0f       	add	r24, r18
    29bc:	93 1f       	adc	r25, r19
    29be:	93 83       	std	Z+3, r25	; 0x03
    29c0:	82 83       	std	Z+2, r24	; 0x02
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    29c2:	8d 91       	ld	r24, X+
    29c4:	9c 91       	ld	r25, X
    29c6:	91 83       	std	Z+1, r25	; 0x01
    29c8:	80 83       	st	Z, r24
    29ca:	02 c0       	rjmp	.+4      	; 0x29d0 <prvInsertBlockIntoFreeList+0x76>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    29cc:	b1 83       	std	Z+1, r27	; 0x01
    29ce:	a0 83       	st	Z, r26

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    29d0:	ce 17       	cp	r28, r30
    29d2:	df 07       	cpc	r29, r31
    29d4:	11 f0       	breq	.+4      	; 0x29da <prvInsertBlockIntoFreeList+0x80>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    29d6:	f9 83       	std	Y+1, r31	; 0x01
    29d8:	e8 83       	st	Y, r30
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    29da:	df 91       	pop	r29
    29dc:	cf 91       	pop	r28
    29de:	08 95       	ret

000029e0 <vPortFree>:
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    29e0:	cf 93       	push	r28
    29e2:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
    29e4:	00 97       	sbiw	r24, 0x00	; 0
    29e6:	51 f1       	breq	.+84     	; 0x2a3c <vPortFree+0x5c>
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    29e8:	ec 01       	movw	r28, r24
    29ea:	24 97       	sbiw	r28, 0x04	; 4

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    29ec:	4a 81       	ldd	r20, Y+2	; 0x02
    29ee:	5b 81       	ldd	r21, Y+3	; 0x03
    29f0:	20 91 fb 00 	lds	r18, 0x00FB
    29f4:	30 91 fc 00 	lds	r19, 0x00FC
    29f8:	c9 01       	movw	r24, r18
    29fa:	84 23       	and	r24, r20
    29fc:	95 23       	and	r25, r21
    29fe:	89 2b       	or	r24, r25
    2a00:	e9 f0       	breq	.+58     	; 0x2a3c <vPortFree+0x5c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
    2a02:	88 81       	ld	r24, Y
    2a04:	99 81       	ldd	r25, Y+1	; 0x01
    2a06:	89 2b       	or	r24, r25
    2a08:	c9 f4       	brne	.+50     	; 0x2a3c <vPortFree+0x5c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    2a0a:	20 95       	com	r18
    2a0c:	30 95       	com	r19
    2a0e:	24 23       	and	r18, r20
    2a10:	35 23       	and	r19, r21
    2a12:	3b 83       	std	Y+3, r19	; 0x03
    2a14:	2a 83       	std	Y+2, r18	; 0x02

				vTaskSuspendAll();
    2a16:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
    2a1a:	80 91 f9 00 	lds	r24, 0x00F9
    2a1e:	90 91 fa 00 	lds	r25, 0x00FA
    2a22:	2a 81       	ldd	r18, Y+2	; 0x02
    2a24:	3b 81       	ldd	r19, Y+3	; 0x03
    2a26:	82 0f       	add	r24, r18
    2a28:	93 1f       	adc	r25, r19
    2a2a:	90 93 fa 00 	sts	0x00FA, r25
    2a2e:	80 93 f9 00 	sts	0x00F9, r24
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    2a32:	ce 01       	movw	r24, r28
    2a34:	0e 94 ad 14 	call	0x295a	; 0x295a <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
    2a38:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    2a3c:	df 91       	pop	r29
    2a3e:	cf 91       	pop	r28
    2a40:	08 95       	ret

00002a42 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    2a42:	cf 92       	push	r12
    2a44:	df 92       	push	r13
    2a46:	ef 92       	push	r14
    2a48:	ff 92       	push	r15
    2a4a:	0f 93       	push	r16
    2a4c:	1f 93       	push	r17
    2a4e:	cf 93       	push	r28
    2a50:	df 93       	push	r29
    2a52:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
    2a54:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
    2a58:	80 91 fd 00 	lds	r24, 0x00FD
    2a5c:	90 91 fe 00 	lds	r25, 0x00FE
    2a60:	89 2b       	or	r24, r25
    2a62:	81 f5       	brne	.+96     	; 0x2ac4 <pvPortMalloc+0x82>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    2a64:	8f ef       	ldi	r24, 0xFF	; 255
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	90 93 e8 04 	sts	0x04E8, r25
    2a6c:	80 93 e7 04 	sts	0x04E7, r24
	xStart.xBlockSize = ( size_t ) 0;
    2a70:	10 92 ea 04 	sts	0x04EA, r1
    2a74:	10 92 e9 04 	sts	0x04E9, r1
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
    2a78:	23 ee       	ldi	r18, 0xE3	; 227
    2a7a:	34 e0       	ldi	r19, 0x04	; 4
    2a7c:	30 93 fe 00 	sts	0x00FE, r19
    2a80:	20 93 fd 00 	sts	0x00FD, r18
	pxEnd->xBlockSize = 0;
    2a84:	10 92 e6 04 	sts	0x04E6, r1
    2a88:	10 92 e5 04 	sts	0x04E5, r1
	pxEnd->pxNextFreeBlock = NULL;
    2a8c:	10 92 e4 04 	sts	0x04E4, r1
    2a90:	10 92 e3 04 	sts	0x04E3, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    2a94:	84 ee       	ldi	r24, 0xE4	; 228
    2a96:	93 e0       	ldi	r25, 0x03	; 3
    2a98:	90 93 02 01 	sts	0x0102, r25
    2a9c:	80 93 01 01 	sts	0x0101, r24
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    2aa0:	30 93 00 01 	sts	0x0100, r19
    2aa4:	20 93 ff 00 	sts	0x00FF, r18

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    2aa8:	90 93 f8 00 	sts	0x00F8, r25
    2aac:	80 93 f7 00 	sts	0x00F7, r24
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    2ab0:	90 93 fa 00 	sts	0x00FA, r25
    2ab4:	80 93 f9 00 	sts	0x00F9, r24

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    2ab8:	80 e0       	ldi	r24, 0x00	; 0
    2aba:	90 e8       	ldi	r25, 0x80	; 128
    2abc:	90 93 fc 00 	sts	0x00FC, r25
    2ac0:	80 93 fb 00 	sts	0x00FB, r24

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    2ac4:	c0 90 fb 00 	lds	r12, 0x00FB
    2ac8:	d0 90 fc 00 	lds	r13, 0x00FC
    2acc:	ce 01       	movw	r24, r28
    2ace:	8c 21       	and	r24, r12
    2ad0:	9d 21       	and	r25, r13
    2ad2:	89 2b       	or	r24, r25
    2ad4:	09 f0       	breq	.+2      	; 0x2ad8 <pvPortMalloc+0x96>
    2ad6:	5e c0       	rjmp	.+188    	; 0x2b94 <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
    2ad8:	20 97       	sbiw	r28, 0x00	; 0
    2ada:	09 f4       	brne	.+2      	; 0x2ade <pvPortMalloc+0x9c>
    2adc:	5b c0       	rjmp	.+182    	; 0x2b94 <pvPortMalloc+0x152>
			{
				xWantedSize += xHeapStructSize;
    2ade:	ae 01       	movw	r20, r28
    2ae0:	4c 5f       	subi	r20, 0xFC	; 252
    2ae2:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    2ae4:	09 f4       	brne	.+2      	; 0x2ae8 <pvPortMalloc+0xa6>
    2ae6:	56 c0       	rjmp	.+172    	; 0x2b94 <pvPortMalloc+0x152>
    2ae8:	e0 90 f9 00 	lds	r14, 0x00F9
    2aec:	f0 90 fa 00 	lds	r15, 0x00FA
    2af0:	e4 16       	cp	r14, r20
    2af2:	f5 06       	cpc	r15, r21
    2af4:	08 f4       	brcc	.+2      	; 0x2af8 <pvPortMalloc+0xb6>
    2af6:	4e c0       	rjmp	.+156    	; 0x2b94 <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
    2af8:	c0 91 e7 04 	lds	r28, 0x04E7
    2afc:	d0 91 e8 04 	lds	r29, 0x04E8
    2b00:	e7 ee       	ldi	r30, 0xE7	; 231
    2b02:	f4 e0       	ldi	r31, 0x04	; 4
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    2b04:	8a 81       	ldd	r24, Y+2	; 0x02
    2b06:	9b 81       	ldd	r25, Y+3	; 0x03
    2b08:	84 17       	cp	r24, r20
    2b0a:	95 07       	cpc	r25, r21
    2b0c:	40 f4       	brcc	.+16     	; 0x2b1e <pvPortMalloc+0xdc>
    2b0e:	88 81       	ld	r24, Y
    2b10:	99 81       	ldd	r25, Y+1	; 0x01
    2b12:	9e 01       	movw	r18, r28
    2b14:	00 97       	sbiw	r24, 0x00	; 0
    2b16:	19 f0       	breq	.+6      	; 0x2b1e <pvPortMalloc+0xdc>
    2b18:	ec 01       	movw	r28, r24
    2b1a:	f9 01       	movw	r30, r18
    2b1c:	f3 cf       	rjmp	.-26     	; 0x2b04 <pvPortMalloc+0xc2>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
    2b1e:	80 91 fd 00 	lds	r24, 0x00FD
    2b22:	90 91 fe 00 	lds	r25, 0x00FE
    2b26:	c8 17       	cp	r28, r24
    2b28:	d9 07       	cpc	r29, r25
    2b2a:	a1 f1       	breq	.+104    	; 0x2b94 <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    2b2c:	00 81       	ld	r16, Z
    2b2e:	11 81       	ldd	r17, Z+1	; 0x01

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    2b30:	88 81       	ld	r24, Y
    2b32:	99 81       	ldd	r25, Y+1	; 0x01
    2b34:	91 83       	std	Z+1, r25	; 0x01
    2b36:	80 83       	st	Z, r24

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    2b38:	8a 81       	ldd	r24, Y+2	; 0x02
    2b3a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b3c:	84 1b       	sub	r24, r20
    2b3e:	95 0b       	sbc	r25, r21
    2b40:	89 30       	cpi	r24, 0x09	; 9
    2b42:	91 05       	cpc	r25, r1
    2b44:	50 f0       	brcs	.+20     	; 0x2b5a <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    2b46:	fe 01       	movw	r30, r28
    2b48:	e4 0f       	add	r30, r20
    2b4a:	f5 1f       	adc	r31, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    2b4c:	93 83       	std	Z+3, r25	; 0x03
    2b4e:	82 83       	std	Z+2, r24	; 0x02
						pxBlock->xBlockSize = xWantedSize;
    2b50:	5b 83       	std	Y+3, r21	; 0x03
    2b52:	4a 83       	std	Y+2, r20	; 0x02

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
    2b54:	cf 01       	movw	r24, r30
    2b56:	0e 94 ad 14 	call	0x295a	; 0x295a <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
    2b5a:	4a 81       	ldd	r20, Y+2	; 0x02
    2b5c:	5b 81       	ldd	r21, Y+3	; 0x03
    2b5e:	97 01       	movw	r18, r14
    2b60:	24 1b       	sub	r18, r20
    2b62:	35 0b       	sbc	r19, r21
    2b64:	30 93 fa 00 	sts	0x00FA, r19
    2b68:	20 93 f9 00 	sts	0x00F9, r18

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    2b6c:	80 91 f7 00 	lds	r24, 0x00F7
    2b70:	90 91 f8 00 	lds	r25, 0x00F8
    2b74:	28 17       	cp	r18, r24
    2b76:	39 07       	cpc	r19, r25
    2b78:	20 f4       	brcc	.+8      	; 0x2b82 <pvPortMalloc+0x140>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    2b7a:	30 93 f8 00 	sts	0x00F8, r19
    2b7e:	20 93 f7 00 	sts	0x00F7, r18
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    2b82:	0c 5f       	subi	r16, 0xFC	; 252
    2b84:	1f 4f       	sbci	r17, 0xFF	; 255
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    2b86:	4c 29       	or	r20, r12
    2b88:	5d 29       	or	r21, r13
    2b8a:	5b 83       	std	Y+3, r21	; 0x03
    2b8c:	4a 83       	std	Y+2, r20	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
    2b8e:	19 82       	std	Y+1, r1	; 0x01
    2b90:	18 82       	st	Y, r1
    2b92:	02 c0       	rjmp	.+4      	; 0x2b98 <pvPortMalloc+0x156>
    2b94:	00 e0       	ldi	r16, 0x00	; 0
    2b96:	10 e0       	ldi	r17, 0x00	; 0
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    2b98:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <xTaskResumeAll>
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
    2b9c:	c8 01       	movw	r24, r16
    2b9e:	df 91       	pop	r29
    2ba0:	cf 91       	pop	r28
    2ba2:	1f 91       	pop	r17
    2ba4:	0f 91       	pop	r16
    2ba6:	ff 90       	pop	r15
    2ba8:	ef 90       	pop	r14
    2baa:	df 90       	pop	r13
    2bac:	cf 90       	pop	r12
    2bae:	08 95       	ret

00002bb0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    2bb0:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2bb2:	9c 01       	movw	r18, r24
    2bb4:	2d 5f       	subi	r18, 0xFD	; 253
    2bb6:	3f 4f       	sbci	r19, 0xFF	; 255
    2bb8:	32 83       	std	Z+2, r19	; 0x02
    2bba:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    2bbc:	8f ef       	ldi	r24, 0xFF	; 255
    2bbe:	9f ef       	ldi	r25, 0xFF	; 255
    2bc0:	94 83       	std	Z+4, r25	; 0x04
    2bc2:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2bc4:	36 83       	std	Z+6, r19	; 0x06
    2bc6:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2bc8:	30 87       	std	Z+8, r19	; 0x08
    2bca:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    2bcc:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    2bce:	08 95       	ret

00002bd0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    2bd0:	fc 01       	movw	r30, r24
    2bd2:	11 86       	std	Z+9, r1	; 0x09
    2bd4:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    2bd6:	08 95       	ret

00002bd8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    2bd8:	ac 01       	movw	r20, r24
ListItem_t * const pxIndex = pxList->pxIndex;
    2bda:	fc 01       	movw	r30, r24
    2bdc:	a1 81       	ldd	r26, Z+1	; 0x01
    2bde:	b2 81       	ldd	r27, Z+2	; 0x02
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    2be0:	fb 01       	movw	r30, r22
    2be2:	b3 83       	std	Z+3, r27	; 0x03
    2be4:	a2 83       	std	Z+2, r26	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    2be6:	14 96       	adiw	r26, 0x04	; 4
    2be8:	8d 91       	ld	r24, X+
    2bea:	9c 91       	ld	r25, X
    2bec:	15 97       	sbiw	r26, 0x05	; 5
    2bee:	95 83       	std	Z+5, r25	; 0x05
    2bf0:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    2bf2:	14 96       	adiw	r26, 0x04	; 4
    2bf4:	ed 91       	ld	r30, X+
    2bf6:	fc 91       	ld	r31, X
    2bf8:	15 97       	sbiw	r26, 0x05	; 5
    2bfa:	73 83       	std	Z+3, r23	; 0x03
    2bfc:	62 83       	std	Z+2, r22	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
    2bfe:	15 96       	adiw	r26, 0x05	; 5
    2c00:	7c 93       	st	X, r23
    2c02:	6e 93       	st	-X, r22
    2c04:	14 97       	sbiw	r26, 0x04	; 4

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2c06:	fb 01       	movw	r30, r22
    2c08:	51 87       	std	Z+9, r21	; 0x09
    2c0a:	40 87       	std	Z+8, r20	; 0x08

	( pxList->uxNumberOfItems )++;
    2c0c:	fa 01       	movw	r30, r20
    2c0e:	80 81       	ld	r24, Z
    2c10:	8f 5f       	subi	r24, 0xFF	; 255
    2c12:	80 83       	st	Z, r24
}
    2c14:	08 95       	ret

00002c16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    2c16:	cf 93       	push	r28
    2c18:	df 93       	push	r29
    2c1a:	9c 01       	movw	r18, r24
    2c1c:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    2c1e:	48 81       	ld	r20, Y
    2c20:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    2c22:	8f ef       	ldi	r24, 0xFF	; 255
    2c24:	4f 3f       	cpi	r20, 0xFF	; 255
    2c26:	58 07       	cpc	r21, r24
    2c28:	21 f4       	brne	.+8      	; 0x2c32 <vListInsert+0x1c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    2c2a:	f9 01       	movw	r30, r18
    2c2c:	a7 81       	ldd	r26, Z+7	; 0x07
    2c2e:	b0 85       	ldd	r27, Z+8	; 0x08
    2c30:	0d c0       	rjmp	.+26     	; 0x2c4c <vListInsert+0x36>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2c32:	d9 01       	movw	r26, r18
    2c34:	13 96       	adiw	r26, 0x03	; 3
    2c36:	12 96       	adiw	r26, 0x02	; 2
    2c38:	ed 91       	ld	r30, X+
    2c3a:	fc 91       	ld	r31, X
    2c3c:	13 97       	sbiw	r26, 0x03	; 3
    2c3e:	80 81       	ld	r24, Z
    2c40:	91 81       	ldd	r25, Z+1	; 0x01
    2c42:	48 17       	cp	r20, r24
    2c44:	59 07       	cpc	r21, r25
    2c46:	10 f0       	brcs	.+4      	; 0x2c4c <vListInsert+0x36>
    2c48:	df 01       	movw	r26, r30
    2c4a:	f5 cf       	rjmp	.-22     	; 0x2c36 <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    2c4c:	12 96       	adiw	r26, 0x02	; 2
    2c4e:	ed 91       	ld	r30, X+
    2c50:	fc 91       	ld	r31, X
    2c52:	13 97       	sbiw	r26, 0x03	; 3
    2c54:	fb 83       	std	Y+3, r31	; 0x03
    2c56:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    2c58:	d5 83       	std	Z+5, r29	; 0x05
    2c5a:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    2c5c:	bd 83       	std	Y+5, r27	; 0x05
    2c5e:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
    2c60:	13 96       	adiw	r26, 0x03	; 3
    2c62:	dc 93       	st	X, r29
    2c64:	ce 93       	st	-X, r28
    2c66:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2c68:	39 87       	std	Y+9, r19	; 0x09
    2c6a:	28 87       	std	Y+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    2c6c:	f9 01       	movw	r30, r18
    2c6e:	80 81       	ld	r24, Z
    2c70:	8f 5f       	subi	r24, 0xFF	; 255
    2c72:	80 83       	st	Z, r24
}
    2c74:	df 91       	pop	r29
    2c76:	cf 91       	pop	r28
    2c78:	08 95       	ret

00002c7a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    2c7a:	cf 93       	push	r28
    2c7c:	df 93       	push	r29
    2c7e:	dc 01       	movw	r26, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    2c80:	18 96       	adiw	r26, 0x08	; 8
    2c82:	cd 91       	ld	r28, X+
    2c84:	dc 91       	ld	r29, X
    2c86:	19 97       	sbiw	r26, 0x09	; 9

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2c88:	12 96       	adiw	r26, 0x02	; 2
    2c8a:	4d 91       	ld	r20, X+
    2c8c:	5c 91       	ld	r21, X
    2c8e:	13 97       	sbiw	r26, 0x03	; 3
    2c90:	14 96       	adiw	r26, 0x04	; 4
    2c92:	8d 91       	ld	r24, X+
    2c94:	9c 91       	ld	r25, X
    2c96:	15 97       	sbiw	r26, 0x05	; 5
    2c98:	fa 01       	movw	r30, r20
    2c9a:	95 83       	std	Z+5, r25	; 0x05
    2c9c:	84 83       	std	Z+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2c9e:	14 96       	adiw	r26, 0x04	; 4
    2ca0:	2d 91       	ld	r18, X+
    2ca2:	3c 91       	ld	r19, X
    2ca4:	15 97       	sbiw	r26, 0x05	; 5
    2ca6:	f9 01       	movw	r30, r18
    2ca8:	53 83       	std	Z+3, r21	; 0x03
    2caa:	42 83       	std	Z+2, r20	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2cac:	89 81       	ldd	r24, Y+1	; 0x01
    2cae:	9a 81       	ldd	r25, Y+2	; 0x02
    2cb0:	8a 17       	cp	r24, r26
    2cb2:	9b 07       	cpc	r25, r27
    2cb4:	11 f4       	brne	.+4      	; 0x2cba <uxListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2cb6:	3a 83       	std	Y+2, r19	; 0x02
    2cb8:	29 83       	std	Y+1, r18	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    2cba:	19 96       	adiw	r26, 0x09	; 9
    2cbc:	1c 92       	st	X, r1
    2cbe:	1e 92       	st	-X, r1
    2cc0:	18 97       	sbiw	r26, 0x08	; 8
	( pxList->uxNumberOfItems )--;
    2cc2:	88 81       	ld	r24, Y
    2cc4:	81 50       	subi	r24, 0x01	; 1
    2cc6:	88 83       	st	Y, r24

	return pxList->uxNumberOfItems;
}
    2cc8:	df 91       	pop	r29
    2cca:	cf 91       	pop	r28
    2ccc:	08 95       	ret

00002cce <main>:
#include "Application_Header.h"
#include "Timer0.h"


int main(){
	I2C_Init();
    2cce:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <I2C_Init>
	Initialize();
    2cd2:	0e 94 1c 1c 	call	0x3838	; 0x3838 <Initialize>
	button_init();
    2cd6:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <button_init>
	DIO_SetPinDirection(DIO_PORTC,DIO_PIN7,DIO_PIN_DIR_OUTPUT);
    2cda:	82 e0       	ldi	r24, 0x02	; 2
    2cdc:	67 e0       	ldi	r22, 0x07	; 7
    2cde:	41 e0       	ldi	r20, 0x01	; 1
    2ce0:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <DIO_SetPinDirection>


	uint8 setup_done_correctly = 0;
	if(boot_check() == 0xFF){
    2ce4:	0e 94 70 02 	call	0x4e0	; 0x4e0 <boot_check>
    2ce8:	8f 3f       	cpi	r24, 0xFF	; 255
    2cea:	39 f4       	brne	.+14     	; 0x2cfa <main+0x2c>
		//first time booting up
		name_menu();
    2cec:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <name_menu>
		setup_done_correctly = time_menu();
    2cf0:	0e 94 84 08 	call	0x1108	; 0x1108 <time_menu>
		while(1){
		main_menu();
		}
	}

	if(setup_done_correctly){
    2cf4:	88 23       	and	r24, r24
    2cf6:	41 f4       	brne	.+16     	; 0x2d08 <main+0x3a>
    2cf8:	0c c0       	rjmp	.+24     	; 0x2d12 <main+0x44>
	uint8 setup_done_correctly = 0;
	if(boot_check() == 0xFF){
		//first time booting up
		name_menu();
		setup_done_correctly = time_menu();
	}else if(boot_check() == 0x01){
    2cfa:	0e 94 70 02 	call	0x4e0	; 0x4e0 <boot_check>
    2cfe:	81 30       	cpi	r24, 0x01	; 1
    2d00:	41 f4       	brne	.+16     	; 0x2d12 <main+0x44>
		while(1){
		main_menu();
    2d02:	0e 94 45 08 	call	0x108a	; 0x108a <main_menu>
    2d06:	fd cf       	rjmp	.-6      	; 0x2d02 <main+0x34>
		}
	}

	if(setup_done_correctly){
		system_set();
    2d08:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <system_set>
		while(1){
			main_menu();
    2d0c:	0e 94 45 08 	call	0x108a	; 0x108a <main_menu>
    2d10:	fd cf       	rjmp	.-6      	; 0x2d0c <main+0x3e>
    2d12:	ff cf       	rjmp	.-2      	; 0x2d12 <main+0x44>

00002d14 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    2d14:	fc 01       	movw	r30, r24
uint16_t usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    2d16:	91 e1       	ldi	r25, 0x11	; 17
    2d18:	90 83       	st	Z, r25
	pxTopOfStack--;
	*pxTopOfStack = 0x22;
    2d1a:	22 e2       	ldi	r18, 0x22	; 34
    2d1c:	22 93       	st	-Z, r18
	pxTopOfStack--;
	*pxTopOfStack = 0x33;
    2d1e:	83 e3       	ldi	r24, 0x33	; 51
    2d20:	82 93       	st	-Z, r24
	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( uint16_t ) pxCode;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    2d22:	62 93       	st	-Z, r22
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    2d24:	72 93       	st	-Z, r23

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R0 */
    2d26:	12 92       	st	-Z, r1
	pxTopOfStack--;
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    2d28:	80 e8       	ldi	r24, 0x80	; 128
    2d2a:	82 93       	st	-Z, r24
	pxTopOfStack--;


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R1 */
    2d2c:	12 92       	st	-Z, r1
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x02;	/* R2 */
    2d2e:	82 e0       	ldi	r24, 0x02	; 2
    2d30:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x03;	/* R3 */
    2d32:	83 e0       	ldi	r24, 0x03	; 3
    2d34:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x04;	/* R4 */
    2d36:	84 e0       	ldi	r24, 0x04	; 4
    2d38:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x05;	/* R5 */
    2d3a:	85 e0       	ldi	r24, 0x05	; 5
    2d3c:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x06;	/* R6 */
    2d3e:	86 e0       	ldi	r24, 0x06	; 6
    2d40:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x07;	/* R7 */
    2d42:	87 e0       	ldi	r24, 0x07	; 7
    2d44:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x08;	/* R8 */
    2d46:	88 e0       	ldi	r24, 0x08	; 8
    2d48:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x09;	/* R9 */
    2d4a:	89 e0       	ldi	r24, 0x09	; 9
    2d4c:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x10;	/* R10 */
    2d4e:	80 e1       	ldi	r24, 0x10	; 16
    2d50:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x11;	/* R11 */
    2d52:	92 93       	st	-Z, r25
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x12;	/* R12 */
    2d54:	82 e1       	ldi	r24, 0x12	; 18
    2d56:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x13;	/* R13 */
    2d58:	83 e1       	ldi	r24, 0x13	; 19
    2d5a:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x14;	/* R14 */
    2d5c:	84 e1       	ldi	r24, 0x14	; 20
    2d5e:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x15;	/* R15 */
    2d60:	85 e1       	ldi	r24, 0x15	; 21
    2d62:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x16;	/* R16 */
    2d64:	86 e1       	ldi	r24, 0x16	; 22
    2d66:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x17;	/* R17 */
    2d68:	87 e1       	ldi	r24, 0x17	; 23
    2d6a:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x18;	/* R18 */
    2d6c:	88 e1       	ldi	r24, 0x18	; 24
    2d6e:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x19;	/* R19 */
    2d70:	89 e1       	ldi	r24, 0x19	; 25
    2d72:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x20;	/* R20 */
    2d74:	80 e2       	ldi	r24, 0x20	; 32
    2d76:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x21;	/* R21 */
    2d78:	81 e2       	ldi	r24, 0x21	; 33
    2d7a:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x22;	/* R22 */
    2d7c:	22 93       	st	-Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x23;	/* R23 */
    2d7e:	83 e2       	ldi	r24, 0x23	; 35
    2d80:	82 93       	st	-Z, r24
	pxTopOfStack--;

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( uint16_t ) pvParameters;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    2d82:	42 93       	st	-Z, r20
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    2d84:	52 93       	st	-Z, r21
	pxTopOfStack--;

	*pxTopOfStack = ( StackType_t ) 0x26;	/* R26 X */
    2d86:	86 e2       	ldi	r24, 0x26	; 38
    2d88:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x27;	/* R27 */
    2d8a:	87 e2       	ldi	r24, 0x27	; 39
    2d8c:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x28;	/* R28 Y */
    2d8e:	88 e2       	ldi	r24, 0x28	; 40
    2d90:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x29;	/* R29 */
    2d92:	89 e2       	ldi	r24, 0x29	; 41
    2d94:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x30;	/* R30 Z */
    2d96:	80 e3       	ldi	r24, 0x30	; 48
    2d98:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x031;	/* R31 */
    2d9a:	81 e3       	ldi	r24, 0x31	; 49
    2d9c:	82 93       	st	-Z, r24
    2d9e:	31 97       	sbiw	r30, 0x01	; 1
	pxTopOfStack--;

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
}
    2da0:	cf 01       	movw	r24, r30
    2da2:	08 95       	ret

00002da4 <xPortStartScheduler>:
	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
	ulCompareMatch >>= 8;
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
	OCR1AH = ucHighByte;
    2da4:	1b bc       	out	0x2b, r1	; 43
	OCR1AL = ucLowByte;
    2da6:	8c e7       	ldi	r24, 0x7C	; 124
    2da8:	8a bd       	out	0x2a, r24	; 42

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
	TCCR1B = ucLowByte;
    2daa:	8b e0       	ldi	r24, 0x0B	; 11
    2dac:	8e bd       	out	0x2e, r24	; 46

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    2dae:	89 b7       	in	r24, 0x39	; 57
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    2db0:	80 61       	ori	r24, 0x10	; 16
	TIMSK = ucLowByte;
    2db2:	89 bf       	out	0x39, r24	; 57
{
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    2db4:	a0 91 eb 04 	lds	r26, 0x04EB
    2db8:	b0 91 ec 04 	lds	r27, 0x04EC
    2dbc:	cd 91       	ld	r28, X+
    2dbe:	cd bf       	out	0x3d, r28	; 61
    2dc0:	dd 91       	ld	r29, X+
    2dc2:	de bf       	out	0x3e, r29	; 62
    2dc4:	ff 91       	pop	r31
    2dc6:	ef 91       	pop	r30
    2dc8:	df 91       	pop	r29
    2dca:	cf 91       	pop	r28
    2dcc:	bf 91       	pop	r27
    2dce:	af 91       	pop	r26
    2dd0:	9f 91       	pop	r25
    2dd2:	8f 91       	pop	r24
    2dd4:	7f 91       	pop	r23
    2dd6:	6f 91       	pop	r22
    2dd8:	5f 91       	pop	r21
    2dda:	4f 91       	pop	r20
    2ddc:	3f 91       	pop	r19
    2dde:	2f 91       	pop	r18
    2de0:	1f 91       	pop	r17
    2de2:	0f 91       	pop	r16
    2de4:	ff 90       	pop	r15
    2de6:	ef 90       	pop	r14
    2de8:	df 90       	pop	r13
    2dea:	cf 90       	pop	r12
    2dec:	bf 90       	pop	r11
    2dee:	af 90       	pop	r10
    2df0:	9f 90       	pop	r9
    2df2:	8f 90       	pop	r8
    2df4:	7f 90       	pop	r7
    2df6:	6f 90       	pop	r6
    2df8:	5f 90       	pop	r5
    2dfa:	4f 90       	pop	r4
    2dfc:	3f 90       	pop	r3
    2dfe:	2f 90       	pop	r2
    2e00:	1f 90       	pop	r1
    2e02:	0f 90       	pop	r0
    2e04:	0f be       	out	0x3f, r0	; 63
    2e06:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    2e08:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
}
    2e0a:	81 e0       	ldi	r24, 0x01	; 1
    2e0c:	08 95       	ret

00002e0e <vPortEndScheduler>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    2e0e:	08 95       	ret

00002e10 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    2e10:	0f 92       	push	r0
    2e12:	0f b6       	in	r0, 0x3f	; 63
    2e14:	f8 94       	cli
    2e16:	0f 92       	push	r0
    2e18:	1f 92       	push	r1
    2e1a:	11 24       	eor	r1, r1
    2e1c:	2f 92       	push	r2
    2e1e:	3f 92       	push	r3
    2e20:	4f 92       	push	r4
    2e22:	5f 92       	push	r5
    2e24:	6f 92       	push	r6
    2e26:	7f 92       	push	r7
    2e28:	8f 92       	push	r8
    2e2a:	9f 92       	push	r9
    2e2c:	af 92       	push	r10
    2e2e:	bf 92       	push	r11
    2e30:	cf 92       	push	r12
    2e32:	df 92       	push	r13
    2e34:	ef 92       	push	r14
    2e36:	ff 92       	push	r15
    2e38:	0f 93       	push	r16
    2e3a:	1f 93       	push	r17
    2e3c:	2f 93       	push	r18
    2e3e:	3f 93       	push	r19
    2e40:	4f 93       	push	r20
    2e42:	5f 93       	push	r21
    2e44:	6f 93       	push	r22
    2e46:	7f 93       	push	r23
    2e48:	8f 93       	push	r24
    2e4a:	9f 93       	push	r25
    2e4c:	af 93       	push	r26
    2e4e:	bf 93       	push	r27
    2e50:	cf 93       	push	r28
    2e52:	df 93       	push	r29
    2e54:	ef 93       	push	r30
    2e56:	ff 93       	push	r31
    2e58:	a0 91 eb 04 	lds	r26, 0x04EB
    2e5c:	b0 91 ec 04 	lds	r27, 0x04EC
    2e60:	0d b6       	in	r0, 0x3d	; 61
    2e62:	0d 92       	st	X+, r0
    2e64:	0e b6       	in	r0, 0x3e	; 62
    2e66:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    2e68:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <xTaskIncrementTick>
    2e6c:	88 23       	and	r24, r24
    2e6e:	11 f0       	breq	.+4      	; 0x2e74 <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    2e70:	0e 94 93 1c 	call	0x3926	; 0x3926 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    2e74:	a0 91 eb 04 	lds	r26, 0x04EB
    2e78:	b0 91 ec 04 	lds	r27, 0x04EC
    2e7c:	cd 91       	ld	r28, X+
    2e7e:	cd bf       	out	0x3d, r28	; 61
    2e80:	dd 91       	ld	r29, X+
    2e82:	de bf       	out	0x3e, r29	; 62
    2e84:	ff 91       	pop	r31
    2e86:	ef 91       	pop	r30
    2e88:	df 91       	pop	r29
    2e8a:	cf 91       	pop	r28
    2e8c:	bf 91       	pop	r27
    2e8e:	af 91       	pop	r26
    2e90:	9f 91       	pop	r25
    2e92:	8f 91       	pop	r24
    2e94:	7f 91       	pop	r23
    2e96:	6f 91       	pop	r22
    2e98:	5f 91       	pop	r21
    2e9a:	4f 91       	pop	r20
    2e9c:	3f 91       	pop	r19
    2e9e:	2f 91       	pop	r18
    2ea0:	1f 91       	pop	r17
    2ea2:	0f 91       	pop	r16
    2ea4:	ff 90       	pop	r15
    2ea6:	ef 90       	pop	r14
    2ea8:	df 90       	pop	r13
    2eaa:	cf 90       	pop	r12
    2eac:	bf 90       	pop	r11
    2eae:	af 90       	pop	r10
    2eb0:	9f 90       	pop	r9
    2eb2:	8f 90       	pop	r8
    2eb4:	7f 90       	pop	r7
    2eb6:	6f 90       	pop	r6
    2eb8:	5f 90       	pop	r5
    2eba:	4f 90       	pop	r4
    2ebc:	3f 90       	pop	r3
    2ebe:	2f 90       	pop	r2
    2ec0:	1f 90       	pop	r1
    2ec2:	0f 90       	pop	r0
    2ec4:	0f be       	out	0x3f, r0	; 63
    2ec6:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2ec8:	08 95       	ret

00002eca <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
    2eca:	0e 94 08 17 	call	0x2e10	; 0x2e10 <vPortYieldFromTick>
		asm volatile ( "reti" );
    2ece:	18 95       	reti

00002ed0 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    2ed0:	0f 92       	push	r0
    2ed2:	0f b6       	in	r0, 0x3f	; 63
    2ed4:	f8 94       	cli
    2ed6:	0f 92       	push	r0
    2ed8:	1f 92       	push	r1
    2eda:	11 24       	eor	r1, r1
    2edc:	2f 92       	push	r2
    2ede:	3f 92       	push	r3
    2ee0:	4f 92       	push	r4
    2ee2:	5f 92       	push	r5
    2ee4:	6f 92       	push	r6
    2ee6:	7f 92       	push	r7
    2ee8:	8f 92       	push	r8
    2eea:	9f 92       	push	r9
    2eec:	af 92       	push	r10
    2eee:	bf 92       	push	r11
    2ef0:	cf 92       	push	r12
    2ef2:	df 92       	push	r13
    2ef4:	ef 92       	push	r14
    2ef6:	ff 92       	push	r15
    2ef8:	0f 93       	push	r16
    2efa:	1f 93       	push	r17
    2efc:	2f 93       	push	r18
    2efe:	3f 93       	push	r19
    2f00:	4f 93       	push	r20
    2f02:	5f 93       	push	r21
    2f04:	6f 93       	push	r22
    2f06:	7f 93       	push	r23
    2f08:	8f 93       	push	r24
    2f0a:	9f 93       	push	r25
    2f0c:	af 93       	push	r26
    2f0e:	bf 93       	push	r27
    2f10:	cf 93       	push	r28
    2f12:	df 93       	push	r29
    2f14:	ef 93       	push	r30
    2f16:	ff 93       	push	r31
    2f18:	a0 91 eb 04 	lds	r26, 0x04EB
    2f1c:	b0 91 ec 04 	lds	r27, 0x04EC
    2f20:	0d b6       	in	r0, 0x3d	; 61
    2f22:	0d 92       	st	X+, r0
    2f24:	0e b6       	in	r0, 0x3e	; 62
    2f26:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    2f28:	0e 94 93 1c 	call	0x3926	; 0x3926 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2f2c:	a0 91 eb 04 	lds	r26, 0x04EB
    2f30:	b0 91 ec 04 	lds	r27, 0x04EC
    2f34:	cd 91       	ld	r28, X+
    2f36:	cd bf       	out	0x3d, r28	; 61
    2f38:	dd 91       	ld	r29, X+
    2f3a:	de bf       	out	0x3e, r29	; 62
    2f3c:	ff 91       	pop	r31
    2f3e:	ef 91       	pop	r30
    2f40:	df 91       	pop	r29
    2f42:	cf 91       	pop	r28
    2f44:	bf 91       	pop	r27
    2f46:	af 91       	pop	r26
    2f48:	9f 91       	pop	r25
    2f4a:	8f 91       	pop	r24
    2f4c:	7f 91       	pop	r23
    2f4e:	6f 91       	pop	r22
    2f50:	5f 91       	pop	r21
    2f52:	4f 91       	pop	r20
    2f54:	3f 91       	pop	r19
    2f56:	2f 91       	pop	r18
    2f58:	1f 91       	pop	r17
    2f5a:	0f 91       	pop	r16
    2f5c:	ff 90       	pop	r15
    2f5e:	ef 90       	pop	r14
    2f60:	df 90       	pop	r13
    2f62:	cf 90       	pop	r12
    2f64:	bf 90       	pop	r11
    2f66:	af 90       	pop	r10
    2f68:	9f 90       	pop	r9
    2f6a:	8f 90       	pop	r8
    2f6c:	7f 90       	pop	r7
    2f6e:	6f 90       	pop	r6
    2f70:	5f 90       	pop	r5
    2f72:	4f 90       	pop	r4
    2f74:	3f 90       	pop	r3
    2f76:	2f 90       	pop	r2
    2f78:	1f 90       	pop	r1
    2f7a:	0f 90       	pop	r0
    2f7c:	0f be       	out	0x3f, r0	; 63
    2f7e:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2f80:	08 95       	ret

00002f82 <uxQueueMessagesWaiting>:
{
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
    2f82:	0f b6       	in	r0, 0x3f	; 63
    2f84:	f8 94       	cli
    2f86:	0f 92       	push	r0
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    2f88:	fc 01       	movw	r30, r24
    2f8a:	82 8d       	ldd	r24, Z+26	; 0x1a
	}
	taskEXIT_CRITICAL();
    2f8c:	0f 90       	pop	r0
    2f8e:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    2f90:	08 95       	ret

00002f92 <uxQueueSpacesAvailable>:
UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
    2f92:	fc 01       	movw	r30, r24
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    2f94:	0f b6       	in	r0, 0x3f	; 63
    2f96:	f8 94       	cli
    2f98:	0f 92       	push	r0
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
    2f9a:	92 8d       	ldd	r25, Z+26	; 0x1a
	}
	taskEXIT_CRITICAL();
    2f9c:	0f 90       	pop	r0
    2f9e:	0f be       	out	0x3f, r0	; 63
    2fa0:	83 8d       	ldd	r24, Z+27	; 0x1b

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    2fa2:	89 1b       	sub	r24, r25
    2fa4:	08 95       	ret

00002fa6 <uxQueueMessagesWaitingFromISR>:
{
UBaseType_t uxReturn;

	configASSERT( xQueue );

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    2fa6:	fc 01       	movw	r30, r24
    2fa8:	82 8d       	ldd	r24, Z+26	; 0x1a

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    2faa:	08 95       	ret

00002fac <xQueueIsQueueEmptyFromISR>:
BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
    2fac:	fc 01       	movw	r30, r24
    2fae:	82 8d       	ldd	r24, Z+26	; 0x1a
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	88 23       	and	r24, r24
    2fb4:	09 f4       	brne	.+2      	; 0x2fb8 <xQueueIsQueueEmptyFromISR+0xc>
    2fb6:	91 e0       	ldi	r25, 0x01	; 1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    2fb8:	89 2f       	mov	r24, r25
    2fba:	08 95       	ret

00002fbc <xQueueIsQueueFullFromISR>:
BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
    2fbc:	fc 01       	movw	r30, r24
    2fbe:	92 8d       	ldd	r25, Z+26	; 0x1a
    2fc0:	20 e0       	ldi	r18, 0x00	; 0
    2fc2:	83 8d       	ldd	r24, Z+27	; 0x1b
    2fc4:	98 17       	cp	r25, r24
    2fc6:	09 f4       	brne	.+2      	; 0x2fca <xQueueIsQueueFullFromISR+0xe>
    2fc8:	21 e0       	ldi	r18, 0x01	; 1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    2fca:	82 2f       	mov	r24, r18
    2fcc:	08 95       	ret

00002fce <vQueueDelete>:
	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
	}
	#endif
	vPortFree( pxQueue );
    2fce:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <vPortFree>
}
    2fd2:	08 95       	ret

00002fd4 <prvCopyDataFromQueue>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    2fd4:	fc 01       	movw	r30, r24
    2fd6:	56 2f       	mov	r21, r22
    2fd8:	a7 2f       	mov	r26, r23
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    2fda:	24 8d       	ldd	r18, Z+28	; 0x1c
    2fdc:	22 23       	and	r18, r18
    2fde:	b9 f0       	breq	.+46     	; 0x300e <prvCopyDataFromQueue+0x3a>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    2fe0:	86 81       	ldd	r24, Z+6	; 0x06
    2fe2:	97 81       	ldd	r25, Z+7	; 0x07
    2fe4:	82 0f       	add	r24, r18
    2fe6:	91 1d       	adc	r25, r1
    2fe8:	97 83       	std	Z+7, r25	; 0x07
    2fea:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    2fec:	22 81       	ldd	r18, Z+2	; 0x02
    2fee:	33 81       	ldd	r19, Z+3	; 0x03
    2ff0:	82 17       	cp	r24, r18
    2ff2:	93 07       	cpc	r25, r19
    2ff4:	20 f0       	brcs	.+8      	; 0x2ffe <prvCopyDataFromQueue+0x2a>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    2ff6:	80 81       	ld	r24, Z
    2ff8:	91 81       	ldd	r25, Z+1	; 0x01
    2ffa:	97 83       	std	Z+7, r25	; 0x07
    2ffc:	86 83       	std	Z+6, r24	; 0x06
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    2ffe:	44 8d       	ldd	r20, Z+28	; 0x1c
    3000:	66 81       	ldd	r22, Z+6	; 0x06
    3002:	77 81       	ldd	r23, Z+7	; 0x07
    3004:	85 2f       	mov	r24, r21
    3006:	9a 2f       	mov	r25, r26
    3008:	50 e0       	ldi	r21, 0x00	; 0
    300a:	0e 94 c7 24 	call	0x498e	; 0x498e <memcpy>
    300e:	08 95       	ret

00003010 <xQueuePeekFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
    3010:	0f 93       	push	r16
    3012:	1f 93       	push	r17
    3014:	cf 93       	push	r28
    3016:	df 93       	push	r29
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    3018:	ec 01       	movw	r28, r24
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    301a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    301c:	88 23       	and	r24, r24
    301e:	41 f0       	breq	.+16     	; 0x3030 <xQueuePeekFromISR+0x20>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    3020:	0e 81       	ldd	r16, Y+6	; 0x06
    3022:	1f 81       	ldd	r17, Y+7	; 0x07
			prvCopyDataFromQueue( pxQueue, pvBuffer );
    3024:	ce 01       	movw	r24, r28
    3026:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    302a:	1f 83       	std	Y+7, r17	; 0x07
    302c:	0e 83       	std	Y+6, r16	; 0x06
    302e:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    3030:	df 91       	pop	r29
    3032:	cf 91       	pop	r28
    3034:	1f 91       	pop	r17
    3036:	0f 91       	pop	r16
    3038:	08 95       	ret

0000303a <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    303a:	1f 93       	push	r17
    303c:	cf 93       	push	r28
    303e:	df 93       	push	r29
    3040:	ec 01       	movw	r28, r24
    3042:	14 2f       	mov	r17, r20
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    3044:	4c 8d       	ldd	r20, Y+28	; 0x1c
    3046:	44 23       	and	r20, r20
    3048:	e1 f1       	breq	.+120    	; 0x30c2 <prvCopyDataToQueue+0x88>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    304a:	11 23       	and	r17, r17
    304c:	b1 f4       	brne	.+44     	; 0x307a <prvCopyDataToQueue+0x40>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    304e:	8c 81       	ldd	r24, Y+4	; 0x04
    3050:	9d 81       	ldd	r25, Y+5	; 0x05
    3052:	50 e0       	ldi	r21, 0x00	; 0
    3054:	0e 94 c7 24 	call	0x498e	; 0x498e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    3058:	8c 8d       	ldd	r24, Y+28	; 0x1c
    305a:	2c 81       	ldd	r18, Y+4	; 0x04
    305c:	3d 81       	ldd	r19, Y+5	; 0x05
    305e:	28 0f       	add	r18, r24
    3060:	31 1d       	adc	r19, r1
    3062:	3d 83       	std	Y+5, r19	; 0x05
    3064:	2c 83       	std	Y+4, r18	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    3066:	8a 81       	ldd	r24, Y+2	; 0x02
    3068:	9b 81       	ldd	r25, Y+3	; 0x03
    306a:	28 17       	cp	r18, r24
    306c:	39 07       	cpc	r19, r25
    306e:	48 f1       	brcs	.+82     	; 0x30c2 <prvCopyDataToQueue+0x88>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    3070:	88 81       	ld	r24, Y
    3072:	99 81       	ldd	r25, Y+1	; 0x01
    3074:	9d 83       	std	Y+5, r25	; 0x05
    3076:	8c 83       	std	Y+4, r24	; 0x04
    3078:	24 c0       	rjmp	.+72     	; 0x30c2 <prvCopyDataToQueue+0x88>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    307a:	8e 81       	ldd	r24, Y+6	; 0x06
    307c:	9f 81       	ldd	r25, Y+7	; 0x07
    307e:	50 e0       	ldi	r21, 0x00	; 0
    3080:	0e 94 c7 24 	call	0x498e	; 0x498e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    3084:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	44 27       	eor	r20, r20
    308a:	55 27       	eor	r21, r21
    308c:	48 1b       	sub	r20, r24
    308e:	59 0b       	sbc	r21, r25
    3090:	8e 81       	ldd	r24, Y+6	; 0x06
    3092:	9f 81       	ldd	r25, Y+7	; 0x07
    3094:	84 0f       	add	r24, r20
    3096:	95 1f       	adc	r25, r21
    3098:	9f 83       	std	Y+7, r25	; 0x07
    309a:	8e 83       	std	Y+6, r24	; 0x06
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    309c:	28 81       	ld	r18, Y
    309e:	39 81       	ldd	r19, Y+1	; 0x01
    30a0:	82 17       	cp	r24, r18
    30a2:	93 07       	cpc	r25, r19
    30a4:	30 f4       	brcc	.+12     	; 0x30b2 <prvCopyDataToQueue+0x78>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    30a6:	8a 81       	ldd	r24, Y+2	; 0x02
    30a8:	9b 81       	ldd	r25, Y+3	; 0x03
    30aa:	84 0f       	add	r24, r20
    30ac:	95 1f       	adc	r25, r21
    30ae:	9f 83       	std	Y+7, r25	; 0x07
    30b0:	8e 83       	std	Y+6, r24	; 0x06
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    30b2:	12 30       	cpi	r17, 0x02	; 2
    30b4:	31 f4       	brne	.+12     	; 0x30c2 <prvCopyDataToQueue+0x88>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    30b6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    30b8:	88 23       	and	r24, r24
    30ba:	19 f0       	breq	.+6      	; 0x30c2 <prvCopyDataToQueue+0x88>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
    30bc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    30be:	81 50       	subi	r24, 0x01	; 1
    30c0:	8a 8f       	std	Y+26, r24	; 0x1a
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
    30c2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    30c4:	8f 5f       	subi	r24, 0xFF	; 255
    30c6:	8a 8f       	std	Y+26, r24	; 0x1a

	return xReturn;
}
    30c8:	80 e0       	ldi	r24, 0x00	; 0
    30ca:	df 91       	pop	r29
    30cc:	cf 91       	pop	r28
    30ce:	1f 91       	pop	r17
    30d0:	08 95       	ret

000030d2 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
    30d2:	0f 93       	push	r16
    30d4:	1f 93       	push	r17
    30d6:	cf 93       	push	r28
    30d8:	df 93       	push	r29
    30da:	8a 01       	movw	r16, r20
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    30dc:	ec 01       	movw	r28, r24
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    30de:	8a 8d       	ldd	r24, Y+26	; 0x1a
    30e0:	88 23       	and	r24, r24
    30e2:	e9 f0       	breq	.+58     	; 0x311e <xQueueReceiveFromISR+0x4c>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    30e4:	ce 01       	movw	r24, r28
    30e6:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    30ea:	8a 8d       	ldd	r24, Y+26	; 0x1a
    30ec:	81 50       	subi	r24, 0x01	; 1
    30ee:	8a 8f       	std	Y+26, r24	; 0x1a

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    30f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30f2:	8f 3f       	cpi	r24, 0xFF	; 255
    30f4:	81 f4       	brne	.+32     	; 0x3116 <xQueueReceiveFromISR+0x44>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    30f6:	88 85       	ldd	r24, Y+8	; 0x08
    30f8:	88 23       	and	r24, r24
    30fa:	81 f0       	breq	.+32     	; 0x311c <xQueueReceiveFromISR+0x4a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    30fc:	ce 01       	movw	r24, r28
    30fe:	08 96       	adiw	r24, 0x08	; 8
    3100:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <xTaskRemoveFromEventList>
    3104:	88 23       	and	r24, r24
    3106:	51 f0       	breq	.+20     	; 0x311c <xQueueReceiveFromISR+0x4a>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    3108:	01 15       	cp	r16, r1
    310a:	11 05       	cpc	r17, r1
    310c:	39 f0       	breq	.+14     	; 0x311c <xQueueReceiveFromISR+0x4a>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    310e:	81 e0       	ldi	r24, 0x01	; 1
    3110:	f8 01       	movw	r30, r16
    3112:	80 83       	st	Z, r24
    3114:	04 c0       	rjmp	.+8      	; 0x311e <xQueueReceiveFromISR+0x4c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    3116:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3118:	8f 5f       	subi	r24, 0xFF	; 255
    311a:	8d 8f       	std	Y+29, r24	; 0x1d
    311c:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    311e:	df 91       	pop	r29
    3120:	cf 91       	pop	r28
    3122:	1f 91       	pop	r17
    3124:	0f 91       	pop	r16
    3126:	08 95       	ret

00003128 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    3128:	cf 93       	push	r28
    312a:	df 93       	push	r29
    312c:	eb 01       	movw	r28, r22
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    312e:	fc 01       	movw	r30, r24
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    3130:	92 8d       	ldd	r25, Z+26	; 0x1a
    3132:	83 8d       	ldd	r24, Z+27	; 0x1b
    3134:	98 17       	cp	r25, r24
    3136:	10 f0       	brcs	.+4      	; 0x313c <xQueueGiveFromISR+0x14>
    3138:	80 e0       	ldi	r24, 0x00	; 0
    313a:	18 c0       	rjmp	.+48     	; 0x316c <xQueueGiveFromISR+0x44>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			++( pxQueue->uxMessagesWaiting );
    313c:	82 8d       	ldd	r24, Z+26	; 0x1a
    313e:	8f 5f       	subi	r24, 0xFF	; 255
    3140:	82 8f       	std	Z+26, r24	; 0x1a

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    3142:	86 8d       	ldd	r24, Z+30	; 0x1e
    3144:	8f 3f       	cpi	r24, 0xFF	; 255
    3146:	71 f4       	brne	.+28     	; 0x3164 <xQueueGiveFromISR+0x3c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3148:	81 89       	ldd	r24, Z+17	; 0x11
    314a:	88 23       	and	r24, r24
    314c:	71 f0       	breq	.+28     	; 0x316a <xQueueGiveFromISR+0x42>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    314e:	cf 01       	movw	r24, r30
    3150:	41 96       	adiw	r24, 0x11	; 17
    3152:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <xTaskRemoveFromEventList>
    3156:	88 23       	and	r24, r24
    3158:	41 f0       	breq	.+16     	; 0x316a <xQueueGiveFromISR+0x42>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    315a:	20 97       	sbiw	r28, 0x00	; 0
    315c:	31 f0       	breq	.+12     	; 0x316a <xQueueGiveFromISR+0x42>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    315e:	81 e0       	ldi	r24, 0x01	; 1
    3160:	88 83       	st	Y, r24
    3162:	04 c0       	rjmp	.+8      	; 0x316c <xQueueGiveFromISR+0x44>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    3164:	86 8d       	ldd	r24, Z+30	; 0x1e
    3166:	8f 5f       	subi	r24, 0xFF	; 255
    3168:	86 8f       	std	Z+30, r24	; 0x1e
    316a:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    316c:	df 91       	pop	r29
    316e:	cf 91       	pop	r28
    3170:	08 95       	ret

00003172 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    3172:	0f 93       	push	r16
    3174:	1f 93       	push	r17
    3176:	cf 93       	push	r28
    3178:	df 93       	push	r29
    317a:	8a 01       	movw	r16, r20
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    317c:	ec 01       	movw	r28, r24
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    317e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3180:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3182:	98 17       	cp	r25, r24
    3184:	20 f0       	brcs	.+8      	; 0x318e <xQueueGenericSendFromISR+0x1c>
    3186:	22 30       	cpi	r18, 0x02	; 2
    3188:	11 f0       	breq	.+4      	; 0x318e <xQueueGenericSendFromISR+0x1c>
    318a:	80 e0       	ldi	r24, 0x00	; 0
    318c:	1b c0       	rjmp	.+54     	; 0x31c4 <xQueueGenericSendFromISR+0x52>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    318e:	ce 01       	movw	r24, r28
    3190:	42 2f       	mov	r20, r18
    3192:	0e 94 1d 18 	call	0x303a	; 0x303a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    3196:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3198:	8f 3f       	cpi	r24, 0xFF	; 255
    319a:	81 f4       	brne	.+32     	; 0x31bc <xQueueGenericSendFromISR+0x4a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    319c:	89 89       	ldd	r24, Y+17	; 0x11
    319e:	88 23       	and	r24, r24
    31a0:	81 f0       	breq	.+32     	; 0x31c2 <xQueueGenericSendFromISR+0x50>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    31a2:	ce 01       	movw	r24, r28
    31a4:	41 96       	adiw	r24, 0x11	; 17
    31a6:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <xTaskRemoveFromEventList>
    31aa:	88 23       	and	r24, r24
    31ac:	51 f0       	breq	.+20     	; 0x31c2 <xQueueGenericSendFromISR+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    31ae:	01 15       	cp	r16, r1
    31b0:	11 05       	cpc	r17, r1
    31b2:	39 f0       	breq	.+14     	; 0x31c2 <xQueueGenericSendFromISR+0x50>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    31b4:	81 e0       	ldi	r24, 0x01	; 1
    31b6:	f8 01       	movw	r30, r16
    31b8:	80 83       	st	Z, r24
    31ba:	04 c0       	rjmp	.+8      	; 0x31c4 <xQueueGenericSendFromISR+0x52>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    31bc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31be:	8f 5f       	subi	r24, 0xFF	; 255
    31c0:	8e 8f       	std	Y+30, r24	; 0x1e
    31c2:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    31c4:	df 91       	pop	r29
    31c6:	cf 91       	pop	r28
    31c8:	1f 91       	pop	r17
    31ca:	0f 91       	pop	r16
    31cc:	08 95       	ret

000031ce <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    31ce:	0f 93       	push	r16
    31d0:	1f 93       	push	r17
    31d2:	cf 93       	push	r28
    31d4:	df 93       	push	r29
    31d6:	ec 01       	movw	r28, r24

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    31d8:	0f b6       	in	r0, 0x3f	; 63
    31da:	f8 94       	cli
    31dc:	0f 92       	push	r0
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    31de:	8c 01       	movw	r16, r24
    31e0:	0f 5e       	subi	r16, 0xEF	; 239
    31e2:	1f 4f       	sbci	r17, 0xFF	; 255
    31e4:	0d c0       	rjmp	.+26     	; 0x3200 <prvUnlockQueue+0x32>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    31e6:	89 89       	ldd	r24, Y+17	; 0x11
    31e8:	88 23       	and	r24, r24
    31ea:	69 f0       	breq	.+26     	; 0x3206 <prvUnlockQueue+0x38>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    31ec:	c8 01       	movw	r24, r16
    31ee:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <xTaskRemoveFromEventList>
    31f2:	88 23       	and	r24, r24
    31f4:	11 f0       	breq	.+4      	; 0x31fa <prvUnlockQueue+0x2c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
    31f6:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    31fa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31fc:	81 50       	subi	r24, 0x01	; 1
    31fe:	8e 8f       	std	Y+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3200:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3202:	18 16       	cp	r1, r24
    3204:	84 f3       	brlt	.-32     	; 0x31e6 <prvUnlockQueue+0x18>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    3206:	8f ef       	ldi	r24, 0xFF	; 255
    3208:	8e 8f       	std	Y+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    320a:	0f 90       	pop	r0
    320c:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    320e:	0f b6       	in	r0, 0x3f	; 63
    3210:	f8 94       	cli
    3212:	0f 92       	push	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3214:	8e 01       	movw	r16, r28
    3216:	08 5f       	subi	r16, 0xF8	; 248
    3218:	1f 4f       	sbci	r17, 0xFF	; 255
    321a:	0d c0       	rjmp	.+26     	; 0x3236 <prvUnlockQueue+0x68>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    321c:	88 85       	ldd	r24, Y+8	; 0x08
    321e:	88 23       	and	r24, r24
    3220:	69 f0       	breq	.+26     	; 0x323c <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3222:	c8 01       	movw	r24, r16
    3224:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <xTaskRemoveFromEventList>
    3228:	88 23       	and	r24, r24
    322a:	11 f0       	breq	.+4      	; 0x3230 <prvUnlockQueue+0x62>
				{
					vTaskMissedYield();
    322c:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    3230:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3232:	81 50       	subi	r24, 0x01	; 1
    3234:	8d 8f       	std	Y+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3236:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3238:	18 16       	cp	r1, r24
    323a:	84 f3       	brlt	.-32     	; 0x321c <prvUnlockQueue+0x4e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    323c:	8f ef       	ldi	r24, 0xFF	; 255
    323e:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    3240:	0f 90       	pop	r0
    3242:	0f be       	out	0x3f, r0	; 63
}
    3244:	df 91       	pop	r29
    3246:	cf 91       	pop	r28
    3248:	1f 91       	pop	r17
    324a:	0f 91       	pop	r16
    324c:	08 95       	ret

0000324e <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    324e:	7f 92       	push	r7
    3250:	8f 92       	push	r8
    3252:	9f 92       	push	r9
    3254:	af 92       	push	r10
    3256:	bf 92       	push	r11
    3258:	cf 92       	push	r12
    325a:	df 92       	push	r13
    325c:	ef 92       	push	r14
    325e:	ff 92       	push	r15
    3260:	0f 93       	push	r16
    3262:	1f 93       	push	r17
    3264:	df 93       	push	r29
    3266:	cf 93       	push	r28
    3268:	00 d0       	rcall	.+0      	; 0x326a <xQueueGenericReceive+0x1c>
    326a:	00 d0       	rcall	.+0      	; 0x326c <xQueueGenericReceive+0x1e>
    326c:	0f 92       	push	r0
    326e:	cd b7       	in	r28, 0x3d	; 61
    3270:	de b7       	in	r29, 0x3e	; 62
    3272:	5b 01       	movw	r10, r22
    3274:	5d 83       	std	Y+5, r21	; 0x05
    3276:	4c 83       	std	Y+4, r20	; 0x04
    3278:	72 2e       	mov	r7, r18
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    327a:	8c 01       	movw	r16, r24
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    327c:	91 e1       	ldi	r25, 0x11	; 17
    327e:	c9 2e       	mov	r12, r25
    3280:	d1 2c       	mov	r13, r1
    3282:	c0 0e       	add	r12, r16
    3284:	d1 1e       	adc	r13, r17
    3286:	20 e0       	ldi	r18, 0x00	; 0
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    3288:	7e 01       	movw	r14, r28
    328a:	08 94       	sec
    328c:	e1 1c       	adc	r14, r1
    328e:	f1 1c       	adc	r15, r1

		vTaskSuspendAll();
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3290:	84 e0       	ldi	r24, 0x04	; 4
    3292:	88 2e       	mov	r8, r24
    3294:	91 2c       	mov	r9, r1
    3296:	8c 0e       	add	r8, r28
    3298:	9d 1e       	adc	r9, r29
    329a:	01 c0       	rjmp	.+2      	; 0x329e <xQueueGenericReceive+0x50>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    329c:	21 e0       	ldi	r18, 0x01	; 1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    329e:	0f b6       	in	r0, 0x3f	; 63
    32a0:	f8 94       	cli
    32a2:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    32a4:	f8 01       	movw	r30, r16
    32a6:	82 8d       	ldd	r24, Z+26	; 0x1a
    32a8:	88 23       	and	r24, r24
    32aa:	39 f1       	breq	.+78     	; 0x32fa <xQueueGenericReceive+0xac>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    32ac:	e6 80       	ldd	r14, Z+6	; 0x06
    32ae:	f7 80       	ldd	r15, Z+7	; 0x07

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    32b0:	c8 01       	movw	r24, r16
    32b2:	b5 01       	movw	r22, r10
    32b4:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    32b8:	77 20       	and	r7, r7
    32ba:	71 f4       	brne	.+28     	; 0x32d8 <xQueueGenericReceive+0x8a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
    32bc:	f8 01       	movw	r30, r16
    32be:	82 8d       	ldd	r24, Z+26	; 0x1a
    32c0:	81 50       	subi	r24, 0x01	; 1
    32c2:	82 8f       	std	Z+26, r24	; 0x1a
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    32c4:	80 85       	ldd	r24, Z+8	; 0x08
    32c6:	88 23       	and	r24, r24
    32c8:	a1 f0       	breq	.+40     	; 0x32f2 <xQueueGenericReceive+0xa4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    32ca:	c8 01       	movw	r24, r16
    32cc:	08 96       	adiw	r24, 0x08	; 8
    32ce:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <xTaskRemoveFromEventList>
    32d2:	81 30       	cpi	r24, 0x01	; 1
    32d4:	71 f4       	brne	.+28     	; 0x32f2 <xQueueGenericReceive+0xa4>
    32d6:	0b c0       	rjmp	.+22     	; 0x32ee <xQueueGenericReceive+0xa0>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    32d8:	f8 01       	movw	r30, r16
    32da:	f7 82       	std	Z+7, r15	; 0x07
    32dc:	e6 82       	std	Z+6, r14	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    32de:	81 89       	ldd	r24, Z+17	; 0x11
    32e0:	88 23       	and	r24, r24
    32e2:	39 f0       	breq	.+14     	; 0x32f2 <xQueueGenericReceive+0xa4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    32e4:	c6 01       	movw	r24, r12
    32e6:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <xTaskRemoveFromEventList>
    32ea:	88 23       	and	r24, r24
    32ec:	11 f0       	breq	.+4      	; 0x32f2 <xQueueGenericReceive+0xa4>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    32ee:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    32f2:	0f 90       	pop	r0
    32f4:	0f be       	out	0x3f, r0	; 63
    32f6:	81 e0       	ldi	r24, 0x01	; 1
    32f8:	4a c0       	rjmp	.+148    	; 0x338e <xQueueGenericReceive+0x140>
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    32fa:	8c 81       	ldd	r24, Y+4	; 0x04
    32fc:	9d 81       	ldd	r25, Y+5	; 0x05
    32fe:	89 2b       	or	r24, r25
    3300:	19 f4       	brne	.+6      	; 0x3308 <xQueueGenericReceive+0xba>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    3302:	0f 90       	pop	r0
    3304:	0f be       	out	0x3f, r0	; 63
    3306:	42 c0       	rjmp	.+132    	; 0x338c <xQueueGenericReceive+0x13e>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
				}
				else if( xEntryTimeSet == pdFALSE )
    3308:	22 23       	and	r18, r18
    330a:	19 f4       	brne	.+6      	; 0x3312 <xQueueGenericReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    330c:	c7 01       	movw	r24, r14
    330e:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    3312:	0f 90       	pop	r0
    3314:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    3316:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    331a:	0f b6       	in	r0, 0x3f	; 63
    331c:	f8 94       	cli
    331e:	0f 92       	push	r0
    3320:	f8 01       	movw	r30, r16
    3322:	85 8d       	ldd	r24, Z+29	; 0x1d
    3324:	8f 3f       	cpi	r24, 0xFF	; 255
    3326:	09 f4       	brne	.+2      	; 0x332a <xQueueGenericReceive+0xdc>
    3328:	15 8e       	std	Z+29, r1	; 0x1d
    332a:	f8 01       	movw	r30, r16
    332c:	86 8d       	ldd	r24, Z+30	; 0x1e
    332e:	8f 3f       	cpi	r24, 0xFF	; 255
    3330:	09 f4       	brne	.+2      	; 0x3334 <xQueueGenericReceive+0xe6>
    3332:	16 8e       	std	Z+30, r1	; 0x1e
    3334:	0f 90       	pop	r0
    3336:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3338:	c7 01       	movw	r24, r14
    333a:	b4 01       	movw	r22, r8
    333c:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <xTaskCheckForTimeOut>
    3340:	88 23       	and	r24, r24
    3342:	f9 f4       	brne	.+62     	; 0x3382 <xQueueGenericReceive+0x134>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    3344:	0f b6       	in	r0, 0x3f	; 63
    3346:	f8 94       	cli
    3348:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    334a:	f8 01       	movw	r30, r16
    334c:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    334e:	0f 90       	pop	r0
    3350:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    3352:	88 23       	and	r24, r24
    3354:	81 f4       	brne	.+32     	; 0x3376 <xQueueGenericReceive+0x128>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    3356:	6c 81       	ldd	r22, Y+4	; 0x04
    3358:	7d 81       	ldd	r23, Y+5	; 0x05
    335a:	c6 01       	movw	r24, r12
    335c:	0e 94 be 22 	call	0x457c	; 0x457c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    3360:	c8 01       	movw	r24, r16
    3362:	0e 94 e7 18 	call	0x31ce	; 0x31ce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    3366:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <xTaskResumeAll>
    336a:	88 23       	and	r24, r24
    336c:	09 f0       	breq	.+2      	; 0x3370 <xQueueGenericReceive+0x122>
    336e:	96 cf       	rjmp	.-212    	; 0x329c <xQueueGenericReceive+0x4e>
				{
					portYIELD_WITHIN_API();
    3370:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <vPortYield>
    3374:	93 cf       	rjmp	.-218    	; 0x329c <xQueueGenericReceive+0x4e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    3376:	c8 01       	movw	r24, r16
    3378:	0e 94 e7 18 	call	0x31ce	; 0x31ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
    337c:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <xTaskResumeAll>
    3380:	8d cf       	rjmp	.-230    	; 0x329c <xQueueGenericReceive+0x4e>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    3382:	c8 01       	movw	r24, r16
    3384:	0e 94 e7 18 	call	0x31ce	; 0x31ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
    3388:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <xTaskResumeAll>
    338c:	80 e0       	ldi	r24, 0x00	; 0
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
}
    338e:	0f 90       	pop	r0
    3390:	0f 90       	pop	r0
    3392:	0f 90       	pop	r0
    3394:	0f 90       	pop	r0
    3396:	0f 90       	pop	r0
    3398:	cf 91       	pop	r28
    339a:	df 91       	pop	r29
    339c:	1f 91       	pop	r17
    339e:	0f 91       	pop	r16
    33a0:	ff 90       	pop	r15
    33a2:	ef 90       	pop	r14
    33a4:	df 90       	pop	r13
    33a6:	cf 90       	pop	r12
    33a8:	bf 90       	pop	r11
    33aa:	af 90       	pop	r10
    33ac:	9f 90       	pop	r9
    33ae:	8f 90       	pop	r8
    33b0:	7f 90       	pop	r7
    33b2:	08 95       	ret

000033b4 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    33b4:	6f 92       	push	r6
    33b6:	7f 92       	push	r7
    33b8:	9f 92       	push	r9
    33ba:	af 92       	push	r10
    33bc:	bf 92       	push	r11
    33be:	cf 92       	push	r12
    33c0:	df 92       	push	r13
    33c2:	ef 92       	push	r14
    33c4:	ff 92       	push	r15
    33c6:	0f 93       	push	r16
    33c8:	1f 93       	push	r17
    33ca:	df 93       	push	r29
    33cc:	cf 93       	push	r28
    33ce:	00 d0       	rcall	.+0      	; 0x33d0 <xQueueGenericSend+0x1c>
    33d0:	00 d0       	rcall	.+0      	; 0x33d2 <xQueueGenericSend+0x1e>
    33d2:	0f 92       	push	r0
    33d4:	cd b7       	in	r28, 0x3d	; 61
    33d6:	de b7       	in	r29, 0x3e	; 62
    33d8:	6b 01       	movw	r12, r22
    33da:	5d 83       	std	Y+5, r21	; 0x05
    33dc:	4c 83       	std	Y+4, r20	; 0x04
    33de:	92 2e       	mov	r9, r18
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    33e0:	8c 01       	movw	r16, r24
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    33e2:	48 e0       	ldi	r20, 0x08	; 8
    33e4:	e4 2e       	mov	r14, r20
    33e6:	f1 2c       	mov	r15, r1
    33e8:	e8 0e       	add	r14, r24
    33ea:	f9 1e       	adc	r15, r25
    33ec:	20 e0       	ldi	r18, 0x00	; 0
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    33ee:	5e 01       	movw	r10, r28
    33f0:	08 94       	sec
    33f2:	a1 1c       	adc	r10, r1
    33f4:	b1 1c       	adc	r11, r1

		vTaskSuspendAll();
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    33f6:	34 e0       	ldi	r19, 0x04	; 4
    33f8:	63 2e       	mov	r6, r19
    33fa:	71 2c       	mov	r7, r1
    33fc:	6c 0e       	add	r6, r28
    33fe:	7d 1e       	adc	r7, r29
    3400:	01 c0       	rjmp	.+2      	; 0x3404 <xQueueGenericSend+0x50>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    3402:	21 e0       	ldi	r18, 0x01	; 1
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    3404:	0f b6       	in	r0, 0x3f	; 63
    3406:	f8 94       	cli
    3408:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    340a:	f8 01       	movw	r30, r16
    340c:	92 8d       	ldd	r25, Z+26	; 0x1a
    340e:	83 8d       	ldd	r24, Z+27	; 0x1b
    3410:	98 17       	cp	r25, r24
    3412:	18 f0       	brcs	.+6      	; 0x341a <xQueueGenericSend+0x66>
    3414:	f2 e0       	ldi	r31, 0x02	; 2
    3416:	9f 16       	cp	r9, r31
    3418:	c9 f4       	brne	.+50     	; 0x344c <xQueueGenericSend+0x98>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    341a:	c8 01       	movw	r24, r16
    341c:	b6 01       	movw	r22, r12
    341e:	49 2d       	mov	r20, r9
    3420:	0e 94 1d 18 	call	0x303a	; 0x303a <prvCopyDataToQueue>
    3424:	98 2f       	mov	r25, r24
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3426:	f8 01       	movw	r30, r16
    3428:	81 89       	ldd	r24, Z+17	; 0x11
    342a:	88 23       	and	r24, r24
    342c:	39 f0       	breq	.+14     	; 0x343c <xQueueGenericSend+0x88>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    342e:	c8 01       	movw	r24, r16
    3430:	41 96       	adiw	r24, 0x11	; 17
    3432:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <xTaskRemoveFromEventList>
    3436:	81 30       	cpi	r24, 0x01	; 1
    3438:	29 f4       	brne	.+10     	; 0x3444 <xQueueGenericSend+0x90>
    343a:	02 c0       	rjmp	.+4      	; 0x3440 <xQueueGenericSend+0x8c>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    343c:	99 23       	and	r25, r25
    343e:	11 f0       	breq	.+4      	; 0x3444 <xQueueGenericSend+0x90>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    3440:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    3444:	0f 90       	pop	r0
    3446:	0f be       	out	0x3f, r0	; 63
    3448:	81 e0       	ldi	r24, 0x01	; 1
    344a:	4c c0       	rjmp	.+152    	; 0x34e4 <xQueueGenericSend+0x130>
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    344c:	8c 81       	ldd	r24, Y+4	; 0x04
    344e:	9d 81       	ldd	r25, Y+5	; 0x05
    3450:	89 2b       	or	r24, r25
    3452:	19 f4       	brne	.+6      	; 0x345a <xQueueGenericSend+0xa6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    3454:	0f 90       	pop	r0
    3456:	0f be       	out	0x3f, r0	; 63
    3458:	44 c0       	rjmp	.+136    	; 0x34e2 <xQueueGenericSend+0x12e>
					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
				}
				else if( xEntryTimeSet == pdFALSE )
    345a:	22 23       	and	r18, r18
    345c:	19 f4       	brne	.+6      	; 0x3464 <xQueueGenericSend+0xb0>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    345e:	c5 01       	movw	r24, r10
    3460:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    3464:	0f 90       	pop	r0
    3466:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    3468:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    346c:	0f b6       	in	r0, 0x3f	; 63
    346e:	f8 94       	cli
    3470:	0f 92       	push	r0
    3472:	f8 01       	movw	r30, r16
    3474:	85 8d       	ldd	r24, Z+29	; 0x1d
    3476:	8f 3f       	cpi	r24, 0xFF	; 255
    3478:	09 f4       	brne	.+2      	; 0x347c <xQueueGenericSend+0xc8>
    347a:	15 8e       	std	Z+29, r1	; 0x1d
    347c:	f8 01       	movw	r30, r16
    347e:	86 8d       	ldd	r24, Z+30	; 0x1e
    3480:	8f 3f       	cpi	r24, 0xFF	; 255
    3482:	09 f4       	brne	.+2      	; 0x3486 <xQueueGenericSend+0xd2>
    3484:	16 8e       	std	Z+30, r1	; 0x1e
    3486:	0f 90       	pop	r0
    3488:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    348a:	c5 01       	movw	r24, r10
    348c:	b3 01       	movw	r22, r6
    348e:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <xTaskCheckForTimeOut>
    3492:	88 23       	and	r24, r24
    3494:	09 f5       	brne	.+66     	; 0x34d8 <xQueueGenericSend+0x124>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    3496:	0f b6       	in	r0, 0x3f	; 63
    3498:	f8 94       	cli
    349a:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    349c:	f8 01       	movw	r30, r16
    349e:	92 8d       	ldd	r25, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    34a0:	0f 90       	pop	r0
    34a2:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    34a4:	f8 01       	movw	r30, r16
    34a6:	83 8d       	ldd	r24, Z+27	; 0x1b
    34a8:	98 17       	cp	r25, r24
    34aa:	81 f4       	brne	.+32     	; 0x34cc <xQueueGenericSend+0x118>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    34ac:	6c 81       	ldd	r22, Y+4	; 0x04
    34ae:	7d 81       	ldd	r23, Y+5	; 0x05
    34b0:	c7 01       	movw	r24, r14
    34b2:	0e 94 be 22 	call	0x457c	; 0x457c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    34b6:	c8 01       	movw	r24, r16
    34b8:	0e 94 e7 18 	call	0x31ce	; 0x31ce <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    34bc:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <xTaskResumeAll>
    34c0:	88 23       	and	r24, r24
    34c2:	09 f0       	breq	.+2      	; 0x34c6 <xQueueGenericSend+0x112>
    34c4:	9e cf       	rjmp	.-196    	; 0x3402 <xQueueGenericSend+0x4e>
				{
					portYIELD_WITHIN_API();
    34c6:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <vPortYield>
    34ca:	9b cf       	rjmp	.-202    	; 0x3402 <xQueueGenericSend+0x4e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    34cc:	c8 01       	movw	r24, r16
    34ce:	0e 94 e7 18 	call	0x31ce	; 0x31ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
    34d2:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <xTaskResumeAll>
    34d6:	95 cf       	rjmp	.-214    	; 0x3402 <xQueueGenericSend+0x4e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    34d8:	c8 01       	movw	r24, r16
    34da:	0e 94 e7 18 	call	0x31ce	; 0x31ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
    34de:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <xTaskResumeAll>
    34e2:	80 e0       	ldi	r24, 0x00	; 0
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
}
    34e4:	0f 90       	pop	r0
    34e6:	0f 90       	pop	r0
    34e8:	0f 90       	pop	r0
    34ea:	0f 90       	pop	r0
    34ec:	0f 90       	pop	r0
    34ee:	cf 91       	pop	r28
    34f0:	df 91       	pop	r29
    34f2:	1f 91       	pop	r17
    34f4:	0f 91       	pop	r16
    34f6:	ff 90       	pop	r15
    34f8:	ef 90       	pop	r14
    34fa:	df 90       	pop	r13
    34fc:	cf 90       	pop	r12
    34fe:	bf 90       	pop	r11
    3500:	af 90       	pop	r10
    3502:	9f 90       	pop	r9
    3504:	7f 90       	pop	r7
    3506:	6f 90       	pop	r6
    3508:	08 95       	ret

0000350a <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    350a:	cf 93       	push	r28
    350c:	df 93       	push	r29
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    350e:	ec 01       	movw	r28, r24

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    3510:	0f b6       	in	r0, 0x3f	; 63
    3512:	f8 94       	cli
    3514:	0f 92       	push	r0
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    3516:	ec 8d       	ldd	r30, Y+28	; 0x1c
    3518:	2b 8d       	ldd	r18, Y+27	; 0x1b
    351a:	e2 9f       	mul	r30, r18
    351c:	c0 01       	movw	r24, r0
    351e:	11 24       	eor	r1, r1
    3520:	48 81       	ld	r20, Y
    3522:	59 81       	ldd	r21, Y+1	; 0x01
    3524:	84 0f       	add	r24, r20
    3526:	95 1f       	adc	r25, r21
    3528:	9b 83       	std	Y+3, r25	; 0x03
    352a:	8a 83       	std	Y+2, r24	; 0x02
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    352c:	1a 8e       	std	Y+26, r1	; 0x1a
		pxQueue->pcWriteTo = pxQueue->pcHead;
    352e:	5d 83       	std	Y+5, r21	; 0x05
    3530:	4c 83       	std	Y+4, r20	; 0x04
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    3532:	30 e0       	ldi	r19, 0x00	; 0
    3534:	21 50       	subi	r18, 0x01	; 1
    3536:	30 40       	sbci	r19, 0x00	; 0
    3538:	f0 e0       	ldi	r31, 0x00	; 0
    353a:	2e 9f       	mul	r18, r30
    353c:	c0 01       	movw	r24, r0
    353e:	2f 9f       	mul	r18, r31
    3540:	90 0d       	add	r25, r0
    3542:	3e 9f       	mul	r19, r30
    3544:	90 0d       	add	r25, r0
    3546:	11 24       	eor	r1, r1
    3548:	48 0f       	add	r20, r24
    354a:	59 1f       	adc	r21, r25
    354c:	5f 83       	std	Y+7, r21	; 0x07
    354e:	4e 83       	std	Y+6, r20	; 0x06
		pxQueue->xRxLock = queueUNLOCKED;
    3550:	8f ef       	ldi	r24, 0xFF	; 255
    3552:	8d 8f       	std	Y+29, r24	; 0x1d
		pxQueue->xTxLock = queueUNLOCKED;
    3554:	8e 8f       	std	Y+30, r24	; 0x1e

		if( xNewQueue == pdFALSE )
    3556:	66 23       	and	r22, r22
    3558:	61 f4       	brne	.+24     	; 0x3572 <xQueueGenericReset+0x68>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    355a:	88 85       	ldd	r24, Y+8	; 0x08
    355c:	88 23       	and	r24, r24
    355e:	89 f0       	breq	.+34     	; 0x3582 <xQueueGenericReset+0x78>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    3560:	ce 01       	movw	r24, r28
    3562:	08 96       	adiw	r24, 0x08	; 8
    3564:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <xTaskRemoveFromEventList>
    3568:	81 30       	cpi	r24, 0x01	; 1
    356a:	59 f4       	brne	.+22     	; 0x3582 <xQueueGenericReset+0x78>
				{
					queueYIELD_IF_USING_PREEMPTION();
    356c:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <vPortYield>
    3570:	08 c0       	rjmp	.+16     	; 0x3582 <xQueueGenericReset+0x78>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    3572:	ce 01       	movw	r24, r28
    3574:	08 96       	adiw	r24, 0x08	; 8
    3576:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    357a:	ce 01       	movw	r24, r28
    357c:	41 96       	adiw	r24, 0x11	; 17
    357e:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    3582:	0f 90       	pop	r0
    3584:	0f be       	out	0x3f, r0	; 63

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
    3586:	81 e0       	ldi	r24, 0x01	; 1
    3588:	df 91       	pop	r29
    358a:	cf 91       	pop	r28
    358c:	08 95       	ret

0000358e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
    358e:	0f 93       	push	r16
    3590:	1f 93       	push	r17
    3592:	cf 93       	push	r28
    3594:	df 93       	push	r29
    3596:	08 2f       	mov	r16, r24
    3598:	16 2f       	mov	r17, r22
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

	if( uxItemSize == ( UBaseType_t ) 0 )
    359a:	66 23       	and	r22, r22
    359c:	19 f4       	brne	.+6      	; 0x35a4 <xQueueGenericCreate+0x16>
    359e:	80 e0       	ldi	r24, 0x00	; 0
    35a0:	90 e0       	ldi	r25, 0x00	; 0
    35a2:	04 c0       	rjmp	.+8      	; 0x35ac <xQueueGenericCreate+0x1e>
	}
	else
	{
		/* The queue is one byte longer than asked for to make wrap checking
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    35a4:	68 9f       	mul	r22, r24
    35a6:	c0 01       	movw	r24, r0
    35a8:	11 24       	eor	r1, r1
    35aa:	01 96       	adiw	r24, 0x01	; 1
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    35ac:	4f 96       	adiw	r24, 0x1f	; 31
    35ae:	0e 94 21 15 	call	0x2a42	; 0x2a42 <pvPortMalloc>
    35b2:	ec 01       	movw	r28, r24

	if( pxNewQueue != NULL )
    35b4:	00 97       	sbiw	r24, 0x00	; 0
    35b6:	19 f4       	brne	.+6      	; 0x35be <xQueueGenericCreate+0x30>
    35b8:	20 e0       	ldi	r18, 0x00	; 0
    35ba:	30 e0       	ldi	r19, 0x00	; 0
    35bc:	0f c0       	rjmp	.+30     	; 0x35dc <xQueueGenericCreate+0x4e>
	{
		if( uxItemSize == ( UBaseType_t ) 0 )
    35be:	11 23       	and	r17, r17
    35c0:	19 f4       	brne	.+6      	; 0x35c8 <xQueueGenericCreate+0x3a>
		{
			/* No RAM was allocated for the queue storage area, but PC head
			cannot be set to NULL because NULL is used as a key to say the queue
			is used as a mutex.  Therefore just set pcHead to point to the queue
			as a benign value that is known to be within the memory map. */
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    35c2:	99 83       	std	Y+1, r25	; 0x01
    35c4:	88 83       	st	Y, r24
    35c6:	03 c0       	rjmp	.+6      	; 0x35ce <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
    35c8:	4f 96       	adiw	r24, 0x1f	; 31
    35ca:	99 83       	std	Y+1, r25	; 0x01
    35cc:	88 83       	st	Y, r24
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
    35ce:	0b 8f       	std	Y+27, r16	; 0x1b
		pxNewQueue->uxItemSize = uxItemSize;
    35d0:	1c 8f       	std	Y+28, r17	; 0x1c
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    35d2:	ce 01       	movw	r24, r28
    35d4:	61 e0       	ldi	r22, 0x01	; 1
    35d6:	0e 94 85 1a 	call	0x350a	; 0x350a <xQueueGenericReset>
			pxNewQueue->pxQueueSetContainer = NULL;
		}
		#endif /* configUSE_QUEUE_SETS */

		traceQUEUE_CREATE( pxNewQueue );
		xReturn = pxNewQueue;
    35da:	9e 01       	movw	r18, r28
	}

	configASSERT( xReturn );

	return xReturn;
}
    35dc:	c9 01       	movw	r24, r18
    35de:	df 91       	pop	r29
    35e0:	cf 91       	pop	r28
    35e2:	1f 91       	pop	r17
    35e4:	0f 91       	pop	r16
    35e6:	08 95       	ret

000035e8 <sendBuffer>:

void setPageStart(uint8 address){
	sendCommand(COMMAND_SET_PAGE_START_ADDRESS | (address & 0x07));
}

void sendBuffer(const uint8 *buffer , unsigned long length ){
    35e8:	af 92       	push	r10
    35ea:	bf 92       	push	r11
    35ec:	cf 92       	push	r12
    35ee:	df 92       	push	r13
    35f0:	ef 92       	push	r14
    35f2:	ff 92       	push	r15
    35f4:	0f 93       	push	r16
    35f6:	1f 93       	push	r17
    35f8:	cf 93       	push	r28
    35fa:	df 93       	push	r29
    35fc:	ec 01       	movw	r28, r24
    35fe:	5a 01       	movw	r10, r20
    3600:	6b 01       	movw	r12, r22
	I2C_Init();
    3602:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <I2C_Init>
	I2C_Start(oled_write_address);
    3606:	8a e7       	ldi	r24, 0x7A	; 122
    3608:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
	I2C_Write(CONTROL_DATA);
    360c:	80 e4       	ldi	r24, 0x40	; 64
    360e:	90 e0       	ldi	r25, 0x00	; 0
    3610:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
    3614:	ee 24       	eor	r14, r14
    3616:	ff 24       	eor	r15, r15
    3618:	87 01       	movw	r16, r14
    361a:	0c c0       	rjmp	.+24     	; 0x3634 <sendBuffer+0x4c>
	for(unsigned long i = 0 ; i < length ; i++){
		I2C_Write(buffer[i]);
    361c:	fe 01       	movw	r30, r28
    361e:	ee 0d       	add	r30, r14
    3620:	ff 1d       	adc	r31, r15
    3622:	80 81       	ld	r24, Z
    3624:	90 e0       	ldi	r25, 0x00	; 0
    3626:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>

void sendBuffer(const uint8 *buffer , unsigned long length ){
	I2C_Init();
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(unsigned long i = 0 ; i < length ; i++){
    362a:	08 94       	sec
    362c:	e1 1c       	adc	r14, r1
    362e:	f1 1c       	adc	r15, r1
    3630:	01 1d       	adc	r16, r1
    3632:	11 1d       	adc	r17, r1
    3634:	ea 14       	cp	r14, r10
    3636:	fb 04       	cpc	r15, r11
    3638:	0c 05       	cpc	r16, r12
    363a:	1d 05       	cpc	r17, r13
    363c:	78 f3       	brcs	.-34     	; 0x361c <sendBuffer+0x34>
		I2C_Write(buffer[i]);
	}
	I2C_Stop();
    363e:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>
}
    3642:	df 91       	pop	r29
    3644:	cf 91       	pop	r28
    3646:	1f 91       	pop	r17
    3648:	0f 91       	pop	r16
    364a:	ff 90       	pop	r15
    364c:	ef 90       	pop	r14
    364e:	df 90       	pop	r13
    3650:	cf 90       	pop	r12
    3652:	bf 90       	pop	r11
    3654:	af 90       	pop	r10
    3656:	08 95       	ret

00003658 <sendCommand>:
 */

#include "ssd1306.h"


void sendCommand(uint8 cmd){
    3658:	1f 93       	push	r17
    365a:	18 2f       	mov	r17, r24
	I2C_Init();
    365c:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <I2C_Init>
	I2C_Start(oled_write_address);
    3660:	8a e7       	ldi	r24, 0x7A	; 122
    3662:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
	I2C_Write(CONTROL_COMMAND);
    3666:	80 e0       	ldi	r24, 0x00	; 0
    3668:	90 e0       	ldi	r25, 0x00	; 0
    366a:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
	I2C_Write(cmd);
    366e:	81 2f       	mov	r24, r17
    3670:	90 e0       	ldi	r25, 0x00	; 0
    3672:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
	I2C_Stop();
    3676:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>
}
    367a:	1f 91       	pop	r17
    367c:	08 95       	ret

0000367e <setPageAddress>:
        sendCommand(COMMAND_COLUMN_ADDRESS);
        sendCommand(start);
        sendCommand(end);
}

void setPageAddress(uint8 start, uint8 end){
    367e:	0f 93       	push	r16
    3680:	1f 93       	push	r17
    3682:	18 2f       	mov	r17, r24
    3684:	06 2f       	mov	r16, r22
    sendCommand(COMMAND_SET_PAGE_ADDRESS);
    3686:	82 e2       	ldi	r24, 0x22	; 34
    3688:	0e 94 2c 1b 	call	0x3658	; 0x3658 <sendCommand>
    sendCommand(start & 0x07);
    368c:	81 2f       	mov	r24, r17
    368e:	87 70       	andi	r24, 0x07	; 7
    3690:	0e 94 2c 1b 	call	0x3658	; 0x3658 <sendCommand>
    sendCommand(end & 0x07);
    3694:	80 2f       	mov	r24, r16
    3696:	87 70       	andi	r24, 0x07	; 7
    3698:	0e 94 2c 1b 	call	0x3658	; 0x3658 <sendCommand>
}
    369c:	1f 91       	pop	r17
    369e:	0f 91       	pop	r16
    36a0:	08 95       	ret

000036a2 <setColumnAddress>:
		setPageStart(i);
		sendBuffer(page_buf,sizeof(page_buf));
	}
}

void setColumnAddress(uint8 start, uint8 end){
    36a2:	0f 93       	push	r16
    36a4:	1f 93       	push	r17
    36a6:	18 2f       	mov	r17, r24
    36a8:	06 2f       	mov	r16, r22
        sendCommand(COMMAND_COLUMN_ADDRESS);
    36aa:	81 e2       	ldi	r24, 0x21	; 33
    36ac:	0e 94 2c 1b 	call	0x3658	; 0x3658 <sendCommand>
        sendCommand(start);
    36b0:	81 2f       	mov	r24, r17
    36b2:	0e 94 2c 1b 	call	0x3658	; 0x3658 <sendCommand>
        sendCommand(end);
    36b6:	80 2f       	mov	r24, r16
    36b8:	0e 94 2c 1b 	call	0x3658	; 0x3658 <sendCommand>
}
    36bc:	1f 91       	pop	r17
    36be:	0f 91       	pop	r16
    36c0:	08 95       	ret

000036c2 <setAddressingMode>:
		I2C_Write(buffer[i]);
	}
	I2C_Stop();
}

void setAddressingMode(uint8 mode){
    36c2:	1f 93       	push	r17
    36c4:	18 2f       	mov	r17, r24
	sendCommand(COMMAND_ADDRESSING_MODE);
    36c6:	80 e0       	ldi	r24, 0x00	; 0
    36c8:	0e 94 2c 1b 	call	0x3658	; 0x3658 <sendCommand>
	sendCommand(mode);
    36cc:	81 2f       	mov	r24, r17
    36ce:	0e 94 2c 1b 	call	0x3658	; 0x3658 <sendCommand>
}
    36d2:	1f 91       	pop	r17
    36d4:	08 95       	ret

000036d6 <setPageStart>:
void resume(uint8 ignore_ram){
	sendCommand(COMMAND_DISPLAY_RESUME | ignore_ram);
}

void setPageStart(uint8 address){
	sendCommand(COMMAND_SET_PAGE_START_ADDRESS | (address & 0x07));
    36d6:	87 70       	andi	r24, 0x07	; 7
    36d8:	80 6b       	ori	r24, 0xB0	; 176
    36da:	0e 94 2c 1b 	call	0x3658	; 0x3658 <sendCommand>
}
    36de:	08 95       	ret

000036e0 <clear>:
void setAddressingMode(uint8 mode){
	sendCommand(COMMAND_ADDRESSING_MODE);
	sendCommand(mode);
}

void clear(){
    36e0:	ef 92       	push	r14
    36e2:	ff 92       	push	r15
    36e4:	0f 93       	push	r16
    36e6:	1f 93       	push	r17
    36e8:	df 93       	push	r29
    36ea:	cf 93       	push	r28
    36ec:	cd b7       	in	r28, 0x3d	; 61
    36ee:	de b7       	in	r29, 0x3e	; 62
    36f0:	c0 58       	subi	r28, 0x80	; 128
    36f2:	d0 40       	sbci	r29, 0x00	; 0
    36f4:	0f b6       	in	r0, 0x3f	; 63
    36f6:	f8 94       	cli
    36f8:	de bf       	out	0x3e, r29	; 62
    36fa:	0f be       	out	0x3f, r0	; 63
    36fc:	cd bf       	out	0x3d, r28	; 61
	//clear the display by writing a zeroed page buffer
	uint8 page_buf[128] = {0};
    36fe:	8e 01       	movw	r16, r28
    3700:	0f 5f       	subi	r16, 0xFF	; 255
    3702:	1f 4f       	sbci	r17, 0xFF	; 255
    3704:	80 e8       	ldi	r24, 0x80	; 128
    3706:	f8 01       	movw	r30, r16
    3708:	11 92       	st	Z+, r1
    370a:	8a 95       	dec	r24
    370c:	e9 f7       	brne	.-6      	; 0x3708 <clear+0x28>
	setAddressingMode(0x02);
    370e:	82 e0       	ldi	r24, 0x02	; 2
    3710:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <setAddressingMode>
    3714:	ff 24       	eor	r15, r15
	for(int i = 0 ; i < 8 ; i++){
		setPageStart(i);
		sendBuffer(page_buf,sizeof(page_buf));
    3716:	e0 2e       	mov	r14, r16
    3718:	01 2f       	mov	r16, r17
void clear(){
	//clear the display by writing a zeroed page buffer
	uint8 page_buf[128] = {0};
	setAddressingMode(0x02);
	for(int i = 0 ; i < 8 ; i++){
		setPageStart(i);
    371a:	8f 2d       	mov	r24, r15
    371c:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <setPageStart>
		sendBuffer(page_buf,sizeof(page_buf));
    3720:	8e 2d       	mov	r24, r14
    3722:	90 2f       	mov	r25, r16
    3724:	40 e8       	ldi	r20, 0x80	; 128
    3726:	50 e0       	ldi	r21, 0x00	; 0
    3728:	60 e0       	ldi	r22, 0x00	; 0
    372a:	70 e0       	ldi	r23, 0x00	; 0
    372c:	0e 94 f4 1a 	call	0x35e8	; 0x35e8 <sendBuffer>
    3730:	f3 94       	inc	r15

void clear(){
	//clear the display by writing a zeroed page buffer
	uint8 page_buf[128] = {0};
	setAddressingMode(0x02);
	for(int i = 0 ; i < 8 ; i++){
    3732:	f8 e0       	ldi	r31, 0x08	; 8
    3734:	ff 16       	cp	r15, r31
    3736:	89 f7       	brne	.-30     	; 0x371a <clear+0x3a>
		setPageStart(i);
		sendBuffer(page_buf,sizeof(page_buf));
	}
}
    3738:	c0 58       	subi	r28, 0x80	; 128
    373a:	df 4f       	sbci	r29, 0xFF	; 255
    373c:	0f b6       	in	r0, 0x3f	; 63
    373e:	f8 94       	cli
    3740:	de bf       	out	0x3e, r29	; 62
    3742:	0f be       	out	0x3f, r0	; 63
    3744:	cd bf       	out	0x3d, r28	; 61
    3746:	cf 91       	pop	r28
    3748:	df 91       	pop	r29
    374a:	1f 91       	pop	r17
    374c:	0f 91       	pop	r16
    374e:	ff 90       	pop	r15
    3750:	ef 90       	pop	r14
    3752:	08 95       	ret

00003754 <resume>:
void scroll(uint8 e){
	sendCommand(COMMAND_SCROLL_ACTIVATION | e);
}

void resume(uint8 ignore_ram){
	sendCommand(COMMAND_DISPLAY_RESUME | ignore_ram);
    3754:	84 6a       	ori	r24, 0xA4	; 164
    3756:	0e 94 2c 1b 	call	0x3658	; 0x3658 <sendCommand>
}
    375a:	08 95       	ret

0000375c <scroll>:
void Invert(uint8 invert){
	sendCommand(COMMAND_DISPLAY_INVERSE | invert);
}

void scroll(uint8 e){
	sendCommand(COMMAND_SCROLL_ACTIVATION | e);
    375c:	8e 62       	ori	r24, 0x2E	; 46
    375e:	0e 94 2c 1b 	call	0x3658	; 0x3658 <sendCommand>
}
    3762:	08 95       	ret

00003764 <Invert>:
	sendCommand(COMMAND_CHARGE_PUMP);
	sendCommand(0x10 | (enabled<<2));
}

void Invert(uint8 invert){
	sendCommand(COMMAND_DISPLAY_INVERSE | invert);
    3764:	86 6a       	ori	r24, 0xA6	; 166
    3766:	0e 94 2c 1b 	call	0x3658	; 0x3658 <sendCommand>
}
    376a:	08 95       	ret

0000376c <enableChargePump>:
void setMuliplexRatio(uint8 ratio){
	sendCommand(COMMAND_MULTIPLEX_RATIO);
	sendCommand(ratio & 0x3F);
}

void enableChargePump(uint8 enabled){
    376c:	1f 93       	push	r17
    376e:	18 2f       	mov	r17, r24
	sendCommand(COMMAND_CHARGE_PUMP);
    3770:	8d e8       	ldi	r24, 0x8D	; 141
    3772:	0e 94 2c 1b 	call	0x3658	; 0x3658 <sendCommand>
	sendCommand(0x10 | (enabled<<2));
    3776:	11 0f       	add	r17, r17
    3778:	11 0f       	add	r17, r17
    377a:	81 2f       	mov	r24, r17
    377c:	80 61       	ori	r24, 0x10	; 16
    377e:	0e 94 2c 1b 	call	0x3658	; 0x3658 <sendCommand>
}
    3782:	1f 91       	pop	r17
    3784:	08 95       	ret

00003786 <setMuliplexRatio>:
void setClockConfig(uint8 divide , uint8 freq){
	sendCommand(COMMAND_DISPLAY_CLOCK_DIVIDE);
	sendCommand( ((freq&0x0F)<<4) | (divide & 0x0F));
}

void setMuliplexRatio(uint8 ratio){
    3786:	1f 93       	push	r17
    3788:	18 2f       	mov	r17, r24
	sendCommand(COMMAND_MULTIPLEX_RATIO);
    378a:	88 ea       	ldi	r24, 0xA8	; 168
    378c:	0e 94 2c 1b 	call	0x3658	; 0x3658 <sendCommand>
	sendCommand(ratio & 0x3F);
    3790:	81 2f       	mov	r24, r17
    3792:	8f 73       	andi	r24, 0x3F	; 63
    3794:	0e 94 2c 1b 	call	0x3658	; 0x3658 <sendCommand>
}
    3798:	1f 91       	pop	r17
    379a:	08 95       	ret

0000379c <setClockConfig>:
void setContrast(uint8 value){
	sendCommand(COMMAND_CONTRAST);
	sendCommand(value);
}

void setClockConfig(uint8 divide , uint8 freq){
    379c:	0f 93       	push	r16
    379e:	1f 93       	push	r17
    37a0:	08 2f       	mov	r16, r24
    37a2:	16 2f       	mov	r17, r22
	sendCommand(COMMAND_DISPLAY_CLOCK_DIVIDE);
    37a4:	85 ed       	ldi	r24, 0xD5	; 213
    37a6:	0e 94 2c 1b 	call	0x3658	; 0x3658 <sendCommand>
	sendCommand( ((freq&0x0F)<<4) | (divide & 0x0F));
    37aa:	12 95       	swap	r17
    37ac:	10 7f       	andi	r17, 0xF0	; 240
    37ae:	0f 70       	andi	r16, 0x0F	; 15
    37b0:	81 2f       	mov	r24, r17
    37b2:	80 2b       	or	r24, r16
    37b4:	0e 94 2c 1b 	call	0x3658	; 0x3658 <sendCommand>
}
    37b8:	1f 91       	pop	r17
    37ba:	0f 91       	pop	r16
    37bc:	08 95       	ret

000037be <setContrast>:

	sendCommand(COMMAND_COM_CONFIG);
	sendCommand(config);
}

void setContrast(uint8 value){
    37be:	1f 93       	push	r17
    37c0:	18 2f       	mov	r17, r24
	sendCommand(COMMAND_CONTRAST);
    37c2:	81 e8       	ldi	r24, 0x81	; 129
    37c4:	0e 94 2c 1b 	call	0x3658	; 0x3658 <sendCommand>
	sendCommand(value);
    37c8:	81 2f       	mov	r24, r17
    37ca:	0e 94 2c 1b 	call	0x3658	; 0x3658 <sendCommand>
}
    37ce:	1f 91       	pop	r17
    37d0:	08 95       	ret

000037d2 <setComConfig>:

void setComScanReverse(uint8 r){
	sendCommand(COMMAND_COM_SCAN_DIRECTION | (r<<3));
}

void setComConfig(uint8 com_alt, uint8 left_right_remap){
    37d2:	0f 93       	push	r16
    37d4:	1f 93       	push	r17
    37d6:	18 2f       	mov	r17, r24
    37d8:	06 2f       	mov	r16, r22
	const uint8 config = (com_alt <<4) | (left_right_remap << 5) | (0x02);

	sendCommand(COMMAND_COM_CONFIG);
    37da:	8a ed       	ldi	r24, 0xDA	; 218
    37dc:	0e 94 2c 1b 	call	0x3658	; 0x3658 <sendCommand>
	sendCommand(config);
    37e0:	12 95       	swap	r17
    37e2:	10 7f       	andi	r17, 0xF0	; 240
    37e4:	12 60       	ori	r17, 0x02	; 2
    37e6:	02 95       	swap	r16
    37e8:	00 0f       	add	r16, r16
    37ea:	00 7e       	andi	r16, 0xE0	; 224
    37ec:	80 2f       	mov	r24, r16
    37ee:	81 2b       	or	r24, r17
    37f0:	0e 94 2c 1b 	call	0x3658	; 0x3658 <sendCommand>
}
    37f4:	1f 91       	pop	r17
    37f6:	0f 91       	pop	r16
    37f8:	08 95       	ret

000037fa <setComScanReverse>:
void setSegmentRemap(uint8 remap){
	sendCommand(COMMAND_SEGMENT_REMAP | remap);
}

void setComScanReverse(uint8 r){
	sendCommand(COMMAND_COM_SCAN_DIRECTION | (r<<3));
    37fa:	88 0f       	add	r24, r24
    37fc:	88 0f       	add	r24, r24
    37fe:	88 0f       	add	r24, r24
    3800:	80 6c       	ori	r24, 0xC0	; 192
    3802:	0e 94 2c 1b 	call	0x3658	; 0x3658 <sendCommand>
}
    3806:	08 95       	ret

00003808 <setSegmentRemap>:
void setDisplayStartLine(uint8 line){
	sendCommand(COMMAND_DISPLAY_START_LINE | (line & 0x3F));
}

void setSegmentRemap(uint8 remap){
	sendCommand(COMMAND_SEGMENT_REMAP | remap);
    3808:	80 6a       	ori	r24, 0xA0	; 160
    380a:	0e 94 2c 1b 	call	0x3658	; 0x3658 <sendCommand>
}
    380e:	08 95       	ret

00003810 <setDisplayStartLine>:
	sendCommand(COMMAND_DISPLAY_OFFSET);
	sendCommand(offset & 0x3F); //anded with 0x3F to choose from 0 to 63 ; 0x3F = 63d.
}

void setDisplayStartLine(uint8 line){
	sendCommand(COMMAND_DISPLAY_START_LINE | (line & 0x3F));
    3810:	8f 73       	andi	r24, 0x3F	; 63
    3812:	80 64       	ori	r24, 0x40	; 64
    3814:	0e 94 2c 1b 	call	0x3658	; 0x3658 <sendCommand>
}
    3818:	08 95       	ret

0000381a <setDisplayOffset>:

void enable(uint8 on){
	sendCommand(COMMAND_DISPLAY_ON | on) ;
}

void setDisplayOffset(uint8 offset){
    381a:	1f 93       	push	r17
    381c:	18 2f       	mov	r17, r24
	sendCommand(COMMAND_DISPLAY_OFFSET);
    381e:	83 ed       	ldi	r24, 0xD3	; 211
    3820:	0e 94 2c 1b 	call	0x3658	; 0x3658 <sendCommand>
	sendCommand(offset & 0x3F); //anded with 0x3F to choose from 0 to 63 ; 0x3F = 63d.
    3824:	81 2f       	mov	r24, r17
    3826:	8f 73       	andi	r24, 0x3F	; 63
    3828:	0e 94 2c 1b 	call	0x3658	; 0x3658 <sendCommand>
}
    382c:	1f 91       	pop	r17
    382e:	08 95       	ret

00003830 <enable>:
	I2C_Write(cmd);
	I2C_Stop();
}

void enable(uint8 on){
	sendCommand(COMMAND_DISPLAY_ON | on) ;
    3830:	8e 6a       	ori	r24, 0xAE	; 174
    3832:	0e 94 2c 1b 	call	0x3658	; 0x3658 <sendCommand>
}
    3836:	08 95       	ret

00003838 <Initialize>:

}


void Initialize(void){
	enable(0);
    3838:	80 e0       	ldi	r24, 0x00	; 0
    383a:	0e 94 18 1c 	call	0x3830	; 0x3830 <enable>
	setDisplayOffset(0);
    383e:	80 e0       	ldi	r24, 0x00	; 0
    3840:	0e 94 0d 1c 	call	0x381a	; 0x381a <setDisplayOffset>
	setDisplayStartLine(0);
    3844:	80 e0       	ldi	r24, 0x00	; 0
    3846:	0e 94 08 1c 	call	0x3810	; 0x3810 <setDisplayStartLine>
	setSegmentRemap(1);
    384a:	81 e0       	ldi	r24, 0x01	; 1
    384c:	0e 94 04 1c 	call	0x3808	; 0x3808 <setSegmentRemap>
	setComScanReverse(0);
    3850:	80 e0       	ldi	r24, 0x00	; 0
    3852:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <setComScanReverse>
	setComConfig(1, 0);
    3856:	81 e0       	ldi	r24, 0x01	; 1
    3858:	60 e0       	ldi	r22, 0x00	; 0
    385a:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <setComConfig>
	setContrast(0x7F);
    385e:	8f e7       	ldi	r24, 0x7F	; 127
    3860:	0e 94 df 1b 	call	0x37be	; 0x37be <setContrast>
	setClockConfig(0x00, 0x08);
    3864:	80 e0       	ldi	r24, 0x00	; 0
    3866:	68 e0       	ldi	r22, 0x08	; 8
    3868:	0e 94 ce 1b 	call	0x379c	; 0x379c <setClockConfig>
	setMuliplexRatio(63);
    386c:	8f e3       	ldi	r24, 0x3F	; 63
    386e:	0e 94 c3 1b 	call	0x3786	; 0x3786 <setMuliplexRatio>
	enableChargePump(1);
    3872:	81 e0       	ldi	r24, 0x01	; 1
    3874:	0e 94 b6 1b 	call	0x376c	; 0x376c <enableChargePump>
	Invert(0);
    3878:	80 e0       	ldi	r24, 0x00	; 0
    387a:	0e 94 b2 1b 	call	0x3764	; 0x3764 <Invert>
	scroll(0);
    387e:	80 e0       	ldi	r24, 0x00	; 0
    3880:	0e 94 ae 1b 	call	0x375c	; 0x375c <scroll>
	enable(1);
    3884:	81 e0       	ldi	r24, 0x01	; 1
    3886:	0e 94 18 1c 	call	0x3830	; 0x3830 <enable>
	resume(0);
    388a:	80 e0       	ldi	r24, 0x00	; 0
    388c:	0e 94 aa 1b 	call	0x3754	; 0x3754 <resume>
	clear();
    3890:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <clear>
}
    3894:	08 95       	ret

00003896 <sendBufferPage>:
    sendCommand(COMMAND_SET_PAGE_ADDRESS);
    sendCommand(start & 0x07);
    sendCommand(end & 0x07);
}

void sendBufferPage(const uint8 *buffer , uint8 page){
    3896:	0f 93       	push	r16
    3898:	1f 93       	push	r17
    389a:	cf 93       	push	r28
    389c:	df 93       	push	r29
    389e:	ec 01       	movw	r28, r24
    38a0:	16 2f       	mov	r17, r22
	//we want to make a loop for each page
	setColumnAddress(0,127);
    38a2:	80 e0       	ldi	r24, 0x00	; 0
    38a4:	6f e7       	ldi	r22, 0x7F	; 127
    38a6:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <setColumnAddress>
	setPageAddress(page,7);
    38aa:	81 2f       	mov	r24, r17
    38ac:	67 e0       	ldi	r22, 0x07	; 7
    38ae:	0e 94 3f 1b 	call	0x367e	; 0x367e <setPageAddress>

	//first initialize the communication
	I2C_Init();
    38b2:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <I2C_Init>
	I2C_Start(oled_write_address);
    38b6:	8a e7       	ldi	r24, 0x7A	; 122
    38b8:	0e 94 5f 10 	call	0x20be	; 0x20be <I2C_Start>
	I2C_Write(CONTROL_DATA);
    38bc:	80 e4       	ldi	r24, 0x40	; 64
    38be:	90 e0       	ldi	r25, 0x00	; 0
    38c0:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>

	uint8 start_byte_in_bitmap = page * 128 ;
    38c4:	17 95       	ror	r17
    38c6:	11 27       	eor	r17, r17
    38c8:	17 95       	ror	r17
	uint8 end_byte_in_bitmap = start_byte_in_bitmap + 127 ;
    38ca:	01 2f       	mov	r16, r17
    38cc:	01 58       	subi	r16, 0x81	; 129
    38ce:	08 c0       	rjmp	.+16     	; 0x38e0 <sendBufferPage+0x4a>
	for(;start_byte_in_bitmap <= end_byte_in_bitmap ; start_byte_in_bitmap++){
		I2C_Write(buffer[start_byte_in_bitmap]);
    38d0:	fe 01       	movw	r30, r28
    38d2:	e1 0f       	add	r30, r17
    38d4:	f1 1d       	adc	r31, r1
    38d6:	80 81       	ld	r24, Z
    38d8:	90 e0       	ldi	r25, 0x00	; 0
    38da:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_Write>
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);

	uint8 start_byte_in_bitmap = page * 128 ;
	uint8 end_byte_in_bitmap = start_byte_in_bitmap + 127 ;
	for(;start_byte_in_bitmap <= end_byte_in_bitmap ; start_byte_in_bitmap++){
    38de:	1f 5f       	subi	r17, 0xFF	; 255
    38e0:	01 17       	cp	r16, r17
    38e2:	b0 f7       	brcc	.-20     	; 0x38d0 <sendBufferPage+0x3a>
		I2C_Write(buffer[start_byte_in_bitmap]);
	}
	I2C_Stop();
    38e4:	0e 94 bb 10 	call	0x2176	; 0x2176 <I2C_Stop>


}
    38e8:	df 91       	pop	r29
    38ea:	cf 91       	pop	r28
    38ec:	1f 91       	pop	r17
    38ee:	0f 91       	pop	r16
    38f0:	08 95       	ret

000038f2 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    38f2:	80 91 ed 04 	lds	r24, 0x04ED
    38f6:	8f 5f       	subi	r24, 0xFF	; 255
    38f8:	80 93 ed 04 	sts	0x04ED, r24
}
    38fc:	08 95       	ret

000038fe <xTaskGetTickCount>:
TickType_t xTaskGetTickCount( void )
{
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
    38fe:	0f b6       	in	r0, 0x3f	; 63
    3900:	f8 94       	cli
    3902:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    3904:	20 91 ef 04 	lds	r18, 0x04EF
    3908:	30 91 f0 04 	lds	r19, 0x04F0
	}
	portTICK_TYPE_EXIT_CRITICAL();
    390c:	0f 90       	pop	r0
    390e:	0f be       	out	0x3f, r0	; 63

	return xTicks;
}
    3910:	c9 01       	movw	r24, r18
    3912:	08 95       	ret

00003914 <xTaskGetTickCountFromISR>:
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
	{
		xReturn = xTickCount;
    3914:	20 91 ef 04 	lds	r18, 0x04EF
    3918:	30 91 f0 04 	lds	r19, 0x04F0
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    391c:	c9 01       	movw	r24, r18
    391e:	08 95       	ret

00003920 <uxTaskGetNumberOfTasks>:

UBaseType_t uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
    3920:	80 91 f6 04 	lds	r24, 0x04F6
}
    3924:	08 95       	ret

00003926 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    3926:	80 91 ed 04 	lds	r24, 0x04ED
    392a:	88 23       	and	r24, r24
    392c:	21 f0       	breq	.+8      	; 0x3936 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    392e:	81 e0       	ldi	r24, 0x01	; 1
    3930:	80 93 f3 04 	sts	0x04F3, r24
    3934:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
    3936:	10 92 f3 04 	sts	0x04F3, r1
    393a:	05 c0       	rjmp	.+10     	; 0x3946 <vTaskSwitchContext+0x20>
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    393c:	80 91 ee 04 	lds	r24, 0x04EE
    3940:	81 50       	subi	r24, 0x01	; 1
    3942:	80 93 ee 04 	sts	0x04EE, r24
    3946:	80 91 ee 04 	lds	r24, 0x04EE
    394a:	90 e0       	ldi	r25, 0x00	; 0
    394c:	fc 01       	movw	r30, r24
    394e:	23 e0       	ldi	r18, 0x03	; 3
    3950:	ee 0f       	add	r30, r30
    3952:	ff 1f       	adc	r31, r31
    3954:	2a 95       	dec	r18
    3956:	e1 f7       	brne	.-8      	; 0x3950 <vTaskSwitchContext+0x2a>
    3958:	e8 0f       	add	r30, r24
    395a:	f9 1f       	adc	r31, r25
    395c:	e6 50       	subi	r30, 0x06	; 6
    395e:	fb 4f       	sbci	r31, 0xFB	; 251
    3960:	80 81       	ld	r24, Z
    3962:	88 23       	and	r24, r24
    3964:	59 f3       	breq	.-42     	; 0x393c <vTaskSwitchContext+0x16>
    3966:	90 91 ee 04 	lds	r25, 0x04EE
    396a:	89 e0       	ldi	r24, 0x09	; 9
    396c:	98 9f       	mul	r25, r24
    396e:	d0 01       	movw	r26, r0
    3970:	11 24       	eor	r1, r1
    3972:	a6 50       	subi	r26, 0x06	; 6
    3974:	bb 4f       	sbci	r27, 0xFB	; 251
    3976:	11 96       	adiw	r26, 0x01	; 1
    3978:	ed 91       	ld	r30, X+
    397a:	fc 91       	ld	r31, X
    397c:	12 97       	sbiw	r26, 0x02	; 2
    397e:	02 80       	ldd	r0, Z+2	; 0x02
    3980:	f3 81       	ldd	r31, Z+3	; 0x03
    3982:	e0 2d       	mov	r30, r0
    3984:	12 96       	adiw	r26, 0x02	; 2
    3986:	fc 93       	st	X, r31
    3988:	ee 93       	st	-X, r30
    398a:	11 97       	sbiw	r26, 0x01	; 1
    398c:	cd 01       	movw	r24, r26
    398e:	03 96       	adiw	r24, 0x03	; 3
    3990:	e8 17       	cp	r30, r24
    3992:	f9 07       	cpc	r31, r25
    3994:	31 f4       	brne	.+12     	; 0x39a2 <vTaskSwitchContext+0x7c>
    3996:	82 81       	ldd	r24, Z+2	; 0x02
    3998:	93 81       	ldd	r25, Z+3	; 0x03
    399a:	12 96       	adiw	r26, 0x02	; 2
    399c:	9c 93       	st	X, r25
    399e:	8e 93       	st	-X, r24
    39a0:	11 97       	sbiw	r26, 0x01	; 1
    39a2:	11 96       	adiw	r26, 0x01	; 1
    39a4:	ed 91       	ld	r30, X+
    39a6:	fc 91       	ld	r31, X
    39a8:	12 97       	sbiw	r26, 0x02	; 2
    39aa:	86 81       	ldd	r24, Z+6	; 0x06
    39ac:	97 81       	ldd	r25, Z+7	; 0x07
    39ae:	90 93 ec 04 	sts	0x04EC, r25
    39b2:	80 93 eb 04 	sts	0x04EB, r24
    39b6:	08 95       	ret

000039b8 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    39b8:	fc 01       	movw	r30, r24
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    39ba:	80 91 f4 04 	lds	r24, 0x04F4
    39be:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    39c0:	80 91 ef 04 	lds	r24, 0x04EF
    39c4:	90 91 f0 04 	lds	r25, 0x04F0
    39c8:	92 83       	std	Z+2, r25	; 0x02
    39ca:	81 83       	std	Z+1, r24	; 0x01
}
    39cc:	08 95       	ret

000039ce <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    39ce:	fc 01       	movw	r30, r24
    39d0:	db 01       	movw	r26, r22
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    39d2:	0f b6       	in	r0, 0x3f	; 63
    39d4:	f8 94       	cli
    39d6:	0f 92       	push	r0
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    39d8:	40 91 ef 04 	lds	r20, 0x04EF
    39dc:	50 91 f0 04 	lds	r21, 0x04F0
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    39e0:	90 91 f4 04 	lds	r25, 0x04F4
    39e4:	80 81       	ld	r24, Z
    39e6:	98 17       	cp	r25, r24
    39e8:	29 f0       	breq	.+10     	; 0x39f4 <xTaskCheckForTimeOut+0x26>
    39ea:	81 81       	ldd	r24, Z+1	; 0x01
    39ec:	92 81       	ldd	r25, Z+2	; 0x02
    39ee:	48 17       	cp	r20, r24
    39f0:	59 07       	cpc	r21, r25
    39f2:	e0 f4       	brcc	.+56     	; 0x3a2c <xTaskCheckForTimeOut+0x5e>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    39f4:	21 81       	ldd	r18, Z+1	; 0x01
    39f6:	32 81       	ldd	r19, Z+2	; 0x02
    39f8:	6d 91       	ld	r22, X+
    39fa:	7c 91       	ld	r23, X
    39fc:	11 97       	sbiw	r26, 0x01	; 1
    39fe:	ca 01       	movw	r24, r20
    3a00:	82 1b       	sub	r24, r18
    3a02:	93 0b       	sbc	r25, r19
    3a04:	86 17       	cp	r24, r22
    3a06:	97 07       	cpc	r25, r23
    3a08:	88 f4       	brcc	.+34     	; 0x3a2c <xTaskCheckForTimeOut+0x5e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
    3a0a:	24 1b       	sub	r18, r20
    3a0c:	35 0b       	sbc	r19, r21
    3a0e:	26 0f       	add	r18, r22
    3a10:	37 1f       	adc	r19, r23
    3a12:	2d 93       	st	X+, r18
    3a14:	3c 93       	st	X, r19
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    3a16:	80 91 f4 04 	lds	r24, 0x04F4
    3a1a:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    3a1c:	80 91 ef 04 	lds	r24, 0x04EF
    3a20:	90 91 f0 04 	lds	r25, 0x04F0
    3a24:	92 83       	std	Z+2, r25	; 0x02
    3a26:	81 83       	std	Z+1, r24	; 0x01
    3a28:	80 e0       	ldi	r24, 0x00	; 0
    3a2a:	01 c0       	rjmp	.+2      	; 0x3a2e <xTaskCheckForTimeOut+0x60>
    3a2c:	81 e0       	ldi	r24, 0x01	; 1
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
    3a2e:	0f 90       	pop	r0
    3a30:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
    3a32:	08 95       	ret

00003a34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
    3a34:	81 e0       	ldi	r24, 0x01	; 1
    3a36:	80 93 f3 04 	sts	0x04F3, r24
}
    3a3a:	08 95       	ret

00003a3c <uxTaskResetEventItemValue>:

TickType_t uxTaskResetEventItemValue( void )
{
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    3a3c:	e0 91 eb 04 	lds	r30, 0x04EB
    3a40:	f0 91 ec 04 	lds	r31, 0x04EC
    3a44:	84 85       	ldd	r24, Z+12	; 0x0c
    3a46:	95 85       	ldd	r25, Z+13	; 0x0d

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3a48:	a0 91 eb 04 	lds	r26, 0x04EB
    3a4c:	b0 91 ec 04 	lds	r27, 0x04EC
    3a50:	e0 91 eb 04 	lds	r30, 0x04EB
    3a54:	f0 91 ec 04 	lds	r31, 0x04EC
    3a58:	46 89       	ldd	r20, Z+22	; 0x16
    3a5a:	24 e0       	ldi	r18, 0x04	; 4
    3a5c:	30 e0       	ldi	r19, 0x00	; 0
    3a5e:	24 1b       	sub	r18, r20
    3a60:	31 09       	sbc	r19, r1
    3a62:	1d 96       	adiw	r26, 0x0d	; 13
    3a64:	3c 93       	st	X, r19
    3a66:	2e 93       	st	-X, r18
    3a68:	1c 97       	sbiw	r26, 0x0c	; 12

	return uxReturn;
}
    3a6a:	08 95       	ret

00003a6c <xTaskNotifyStateClear>:
	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
	TCB_t *pxTCB;
	BaseType_t xReturn;

		pxTCB = ( TCB_t * ) xTask;
    3a6c:	fc 01       	movw	r30, r24

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( pxTCB );
    3a6e:	00 97       	sbiw	r24, 0x00	; 0
    3a70:	21 f4       	brne	.+8      	; 0x3a7a <xTaskNotifyStateClear+0xe>
    3a72:	e0 91 eb 04 	lds	r30, 0x04EB
    3a76:	f0 91 ec 04 	lds	r31, 0x04EC

		taskENTER_CRITICAL();
    3a7a:	0f b6       	in	r0, 0x3f	; 63
    3a7c:	f8 94       	cli
    3a7e:	0f 92       	push	r0
		{
			if( pxTCB->eNotifyState == eNotified )
    3a80:	85 a1       	ldd	r24, Z+37	; 0x25
    3a82:	82 30       	cpi	r24, 0x02	; 2
    3a84:	11 f0       	breq	.+4      	; 0x3a8a <xTaskNotifyStateClear+0x1e>
    3a86:	80 e0       	ldi	r24, 0x00	; 0
    3a88:	02 c0       	rjmp	.+4      	; 0x3a8e <xTaskNotifyStateClear+0x22>
			{
				pxTCB->eNotifyState = eNotWaitingNotification;
    3a8a:	15 a2       	std	Z+37, r1	; 0x25
    3a8c:	81 e0       	ldi	r24, 0x01	; 1
			else
			{
				xReturn = pdFAIL;
			}
		}
		taskEXIT_CRITICAL();
    3a8e:	0f 90       	pop	r0
    3a90:	0f be       	out	0x3f, r0	; 63

		return xReturn;
	}
    3a92:	08 95       	ret

00003a94 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
    3a94:	ef 92       	push	r14
    3a96:	ff 92       	push	r15
    3a98:	0f 93       	push	r16
    3a9a:	1f 93       	push	r17
    3a9c:	cf 93       	push	r28
    3a9e:	df 93       	push	r29
    3aa0:	7b 01       	movw	r14, r22
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
    3aa2:	ec 01       	movw	r28, r24

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			eOriginalNotifyState = pxTCB->eNotifyState;
    3aa4:	2d a1       	ldd	r18, Y+37	; 0x25
			pxTCB->eNotifyState = eNotified;
    3aa6:	82 e0       	ldi	r24, 0x02	; 2
    3aa8:	8d a3       	std	Y+37, r24	; 0x25

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
    3aaa:	89 a1       	ldd	r24, Y+33	; 0x21
    3aac:	9a a1       	ldd	r25, Y+34	; 0x22
    3aae:	ab a1       	ldd	r26, Y+35	; 0x23
    3ab0:	bc a1       	ldd	r27, Y+36	; 0x24
    3ab2:	01 96       	adiw	r24, 0x01	; 1
    3ab4:	a1 1d       	adc	r26, r1
    3ab6:	b1 1d       	adc	r27, r1
    3ab8:	89 a3       	std	Y+33, r24	; 0x21
    3aba:	9a a3       	std	Y+34, r25	; 0x22
    3abc:	ab a3       	std	Y+35, r26	; 0x23
    3abe:	bc a3       	std	Y+36, r27	; 0x24

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
    3ac0:	21 30       	cpi	r18, 0x01	; 1
    3ac2:	71 f5       	brne	.+92     	; 0x3b20 <vTaskNotifyGiveFromISR+0x8c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3ac4:	80 91 ed 04 	lds	r24, 0x04ED
    3ac8:	88 23       	and	r24, r24
    3aca:	a9 f4       	brne	.+42     	; 0x3af6 <vTaskNotifyGiveFromISR+0x62>
				{
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    3acc:	8e 01       	movw	r16, r28
    3ace:	0e 5f       	subi	r16, 0xFE	; 254
    3ad0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ad2:	c8 01       	movw	r24, r16
    3ad4:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    3ad8:	9e 89       	ldd	r25, Y+22	; 0x16
    3ada:	80 91 ee 04 	lds	r24, 0x04EE
    3ade:	89 17       	cp	r24, r25
    3ae0:	10 f4       	brcc	.+4      	; 0x3ae6 <vTaskNotifyGiveFromISR+0x52>
    3ae2:	90 93 ee 04 	sts	0x04EE, r25
    3ae6:	89 e0       	ldi	r24, 0x09	; 9
    3ae8:	98 9f       	mul	r25, r24
    3aea:	c0 01       	movw	r24, r0
    3aec:	11 24       	eor	r1, r1
    3aee:	86 50       	subi	r24, 0x06	; 6
    3af0:	9b 4f       	sbci	r25, 0xFB	; 251
    3af2:	b8 01       	movw	r22, r16
    3af4:	05 c0       	rjmp	.+10     	; 0x3b00 <vTaskNotifyGiveFromISR+0x6c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    3af6:	be 01       	movw	r22, r28
    3af8:	64 5f       	subi	r22, 0xF4	; 244
    3afa:	7f 4f       	sbci	r23, 0xFF	; 255
    3afc:	84 e3       	ldi	r24, 0x34	; 52
    3afe:	95 e0       	ldi	r25, 0x05	; 5
    3b00:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    3b04:	e0 91 eb 04 	lds	r30, 0x04EB
    3b08:	f0 91 ec 04 	lds	r31, 0x04EC
    3b0c:	9e 89       	ldd	r25, Y+22	; 0x16
    3b0e:	86 89       	ldd	r24, Z+22	; 0x16
    3b10:	89 17       	cp	r24, r25
    3b12:	30 f4       	brcc	.+12     	; 0x3b20 <vTaskNotifyGiveFromISR+0x8c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    3b14:	e1 14       	cp	r14, r1
    3b16:	f1 04       	cpc	r15, r1
    3b18:	19 f0       	breq	.+6      	; 0x3b20 <vTaskNotifyGiveFromISR+0x8c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    3b1a:	81 e0       	ldi	r24, 0x01	; 1
    3b1c:	f7 01       	movw	r30, r14
    3b1e:	80 83       	st	Z, r24
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
    3b20:	df 91       	pop	r29
    3b22:	cf 91       	pop	r28
    3b24:	1f 91       	pop	r17
    3b26:	0f 91       	pop	r16
    3b28:	ff 90       	pop	r15
    3b2a:	ef 90       	pop	r14
    3b2c:	08 95       	ret

00003b2e <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
    3b2e:	ef 92       	push	r14
    3b30:	ff 92       	push	r15
    3b32:	0f 93       	push	r16
    3b34:	1f 93       	push	r17
    3b36:	cf 93       	push	r28
    3b38:	df 93       	push	r29
    3b3a:	f8 01       	movw	r30, r16
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
    3b3c:	ec 01       	movw	r28, r24

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			if( pulPreviousNotificationValue != NULL )
    3b3e:	01 15       	cp	r16, r1
    3b40:	11 05       	cpc	r17, r1
    3b42:	41 f0       	breq	.+16     	; 0x3b54 <xTaskGenericNotifyFromISR+0x26>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    3b44:	89 a1       	ldd	r24, Y+33	; 0x21
    3b46:	9a a1       	ldd	r25, Y+34	; 0x22
    3b48:	ab a1       	ldd	r26, Y+35	; 0x23
    3b4a:	bc a1       	ldd	r27, Y+36	; 0x24
    3b4c:	80 83       	st	Z, r24
    3b4e:	91 83       	std	Z+1, r25	; 0x01
    3b50:	a2 83       	std	Z+2, r26	; 0x02
    3b52:	b3 83       	std	Z+3, r27	; 0x03
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
    3b54:	3d a1       	ldd	r19, Y+37	; 0x25
			pxTCB->eNotifyState = eNotified;
    3b56:	82 e0       	ldi	r24, 0x02	; 2
    3b58:	8d a3       	std	Y+37, r24	; 0x25

			switch( eAction )
    3b5a:	22 30       	cpi	r18, 0x02	; 2
    3b5c:	99 f0       	breq	.+38     	; 0x3b84 <xTaskGenericNotifyFromISR+0x56>
    3b5e:	23 30       	cpi	r18, 0x03	; 3
    3b60:	18 f4       	brcc	.+6      	; 0x3b68 <xTaskGenericNotifyFromISR+0x3a>
    3b62:	21 30       	cpi	r18, 0x01	; 1
    3b64:	19 f5       	brne	.+70     	; 0x3bac <xTaskGenericNotifyFromISR+0x7e>
    3b66:	05 c0       	rjmp	.+10     	; 0x3b72 <xTaskGenericNotifyFromISR+0x44>
    3b68:	23 30       	cpi	r18, 0x03	; 3
    3b6a:	e1 f0       	breq	.+56     	; 0x3ba4 <xTaskGenericNotifyFromISR+0x76>
    3b6c:	24 30       	cpi	r18, 0x04	; 4
    3b6e:	f1 f4       	brne	.+60     	; 0x3bac <xTaskGenericNotifyFromISR+0x7e>
    3b70:	15 c0       	rjmp	.+42     	; 0x3b9c <xTaskGenericNotifyFromISR+0x6e>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    3b72:	89 a1       	ldd	r24, Y+33	; 0x21
    3b74:	9a a1       	ldd	r25, Y+34	; 0x22
    3b76:	ab a1       	ldd	r26, Y+35	; 0x23
    3b78:	bc a1       	ldd	r27, Y+36	; 0x24
    3b7a:	84 2b       	or	r24, r20
    3b7c:	95 2b       	or	r25, r21
    3b7e:	a6 2b       	or	r26, r22
    3b80:	b7 2b       	or	r27, r23
    3b82:	07 c0       	rjmp	.+14     	; 0x3b92 <xTaskGenericNotifyFromISR+0x64>
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    3b84:	89 a1       	ldd	r24, Y+33	; 0x21
    3b86:	9a a1       	ldd	r25, Y+34	; 0x22
    3b88:	ab a1       	ldd	r26, Y+35	; 0x23
    3b8a:	bc a1       	ldd	r27, Y+36	; 0x24
    3b8c:	01 96       	adiw	r24, 0x01	; 1
    3b8e:	a1 1d       	adc	r26, r1
    3b90:	b1 1d       	adc	r27, r1
    3b92:	89 a3       	std	Y+33, r24	; 0x21
    3b94:	9a a3       	std	Y+34, r25	; 0x22
    3b96:	ab a3       	std	Y+35, r26	; 0x23
    3b98:	bc a3       	std	Y+36, r27	; 0x24
    3b9a:	08 c0       	rjmp	.+16     	; 0x3bac <xTaskGenericNotifyFromISR+0x7e>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
    3b9c:	32 30       	cpi	r19, 0x02	; 2
    3b9e:	11 f4       	brne	.+4      	; 0x3ba4 <xTaskGenericNotifyFromISR+0x76>
    3ba0:	80 e0       	ldi	r24, 0x00	; 0
    3ba2:	36 c0       	rjmp	.+108    	; 0x3c10 <xTaskGenericNotifyFromISR+0xe2>
					{
						pxTCB->ulNotifiedValue = ulValue;
    3ba4:	49 a3       	std	Y+33, r20	; 0x21
    3ba6:	5a a3       	std	Y+34, r21	; 0x22
    3ba8:	6b a3       	std	Y+35, r22	; 0x23
    3baa:	7c a3       	std	Y+36, r23	; 0x24

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
    3bac:	31 30       	cpi	r19, 0x01	; 1
    3bae:	79 f5       	brne	.+94     	; 0x3c0e <xTaskGenericNotifyFromISR+0xe0>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3bb0:	80 91 ed 04 	lds	r24, 0x04ED
    3bb4:	88 23       	and	r24, r24
    3bb6:	a9 f4       	brne	.+42     	; 0x3be2 <xTaskGenericNotifyFromISR+0xb4>
				{
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    3bb8:	8e 01       	movw	r16, r28
    3bba:	0e 5f       	subi	r16, 0xFE	; 254
    3bbc:	1f 4f       	sbci	r17, 0xFF	; 255
    3bbe:	c8 01       	movw	r24, r16
    3bc0:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    3bc4:	9e 89       	ldd	r25, Y+22	; 0x16
    3bc6:	80 91 ee 04 	lds	r24, 0x04EE
    3bca:	89 17       	cp	r24, r25
    3bcc:	10 f4       	brcc	.+4      	; 0x3bd2 <xTaskGenericNotifyFromISR+0xa4>
    3bce:	90 93 ee 04 	sts	0x04EE, r25
    3bd2:	89 e0       	ldi	r24, 0x09	; 9
    3bd4:	98 9f       	mul	r25, r24
    3bd6:	c0 01       	movw	r24, r0
    3bd8:	11 24       	eor	r1, r1
    3bda:	86 50       	subi	r24, 0x06	; 6
    3bdc:	9b 4f       	sbci	r25, 0xFB	; 251
    3bde:	b8 01       	movw	r22, r16
    3be0:	05 c0       	rjmp	.+10     	; 0x3bec <xTaskGenericNotifyFromISR+0xbe>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    3be2:	be 01       	movw	r22, r28
    3be4:	64 5f       	subi	r22, 0xF4	; 244
    3be6:	7f 4f       	sbci	r23, 0xFF	; 255
    3be8:	84 e3       	ldi	r24, 0x34	; 52
    3bea:	95 e0       	ldi	r25, 0x05	; 5
    3bec:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    3bf0:	e0 91 eb 04 	lds	r30, 0x04EB
    3bf4:	f0 91 ec 04 	lds	r31, 0x04EC
    3bf8:	9e 89       	ldd	r25, Y+22	; 0x16
    3bfa:	86 89       	ldd	r24, Z+22	; 0x16
    3bfc:	89 17       	cp	r24, r25
    3bfe:	38 f4       	brcc	.+14     	; 0x3c0e <xTaskGenericNotifyFromISR+0xe0>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    3c00:	e1 14       	cp	r14, r1
    3c02:	f1 04       	cpc	r15, r1
    3c04:	21 f0       	breq	.+8      	; 0x3c0e <xTaskGenericNotifyFromISR+0xe0>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    3c06:	81 e0       	ldi	r24, 0x01	; 1
    3c08:	f7 01       	movw	r30, r14
    3c0a:	80 83       	st	Z, r24
    3c0c:	01 c0       	rjmp	.+2      	; 0x3c10 <xTaskGenericNotifyFromISR+0xe2>
    3c0e:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
	}
    3c10:	df 91       	pop	r29
    3c12:	cf 91       	pop	r28
    3c14:	1f 91       	pop	r17
    3c16:	0f 91       	pop	r16
    3c18:	ff 90       	pop	r15
    3c1a:	ef 90       	pop	r14
    3c1c:	08 95       	ret

00003c1e <xTaskRemoveFromUnorderedEventList>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
    3c1e:	0f 93       	push	r16
    3c20:	1f 93       	push	r17
    3c22:	cf 93       	push	r28
    3c24:	df 93       	push	r29
    3c26:	fc 01       	movw	r30, r24
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    3c28:	70 68       	ori	r23, 0x80	; 128
    3c2a:	71 83       	std	Z+1, r23	; 0x01
    3c2c:	60 83       	st	Z, r22

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
    3c2e:	c6 81       	ldd	r28, Z+6	; 0x06
    3c30:	d7 81       	ldd	r29, Z+7	; 0x07
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
    3c32:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    3c36:	8e 01       	movw	r16, r28
    3c38:	0e 5f       	subi	r16, 0xFE	; 254
    3c3a:	1f 4f       	sbci	r17, 0xFF	; 255
    3c3c:	c8 01       	movw	r24, r16
    3c3e:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
    3c42:	9e 89       	ldd	r25, Y+22	; 0x16
    3c44:	80 91 ee 04 	lds	r24, 0x04EE
    3c48:	89 17       	cp	r24, r25
    3c4a:	10 f4       	brcc	.+4      	; 0x3c50 <xTaskRemoveFromUnorderedEventList+0x32>
    3c4c:	90 93 ee 04 	sts	0x04EE, r25
    3c50:	89 e0       	ldi	r24, 0x09	; 9
    3c52:	98 9f       	mul	r25, r24
    3c54:	c0 01       	movw	r24, r0
    3c56:	11 24       	eor	r1, r1
    3c58:	86 50       	subi	r24, 0x06	; 6
    3c5a:	9b 4f       	sbci	r25, 0xFB	; 251
    3c5c:	b8 01       	movw	r22, r16
    3c5e:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    3c62:	e0 91 eb 04 	lds	r30, 0x04EB
    3c66:	f0 91 ec 04 	lds	r31, 0x04EC
    3c6a:	9e 89       	ldd	r25, Y+22	; 0x16
    3c6c:	86 89       	ldd	r24, Z+22	; 0x16
    3c6e:	89 17       	cp	r24, r25
    3c70:	10 f0       	brcs	.+4      	; 0x3c76 <xTaskRemoveFromUnorderedEventList+0x58>
    3c72:	80 e0       	ldi	r24, 0x00	; 0
    3c74:	03 c0       	rjmp	.+6      	; 0x3c7c <xTaskRemoveFromUnorderedEventList+0x5e>
		switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    3c76:	81 e0       	ldi	r24, 0x01	; 1
    3c78:	80 93 f3 04 	sts	0x04F3, r24
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    3c7c:	df 91       	pop	r29
    3c7e:	cf 91       	pop	r28
    3c80:	1f 91       	pop	r17
    3c82:	0f 91       	pop	r16
    3c84:	08 95       	ret

00003c86 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    3c86:	0f 93       	push	r16
    3c88:	1f 93       	push	r17
    3c8a:	cf 93       	push	r28
    3c8c:	df 93       	push	r29
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    3c8e:	dc 01       	movw	r26, r24
    3c90:	15 96       	adiw	r26, 0x05	; 5
    3c92:	ed 91       	ld	r30, X+
    3c94:	fc 91       	ld	r31, X
    3c96:	16 97       	sbiw	r26, 0x06	; 6
    3c98:	c6 81       	ldd	r28, Z+6	; 0x06
    3c9a:	d7 81       	ldd	r29, Z+7	; 0x07
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    3c9c:	8e 01       	movw	r16, r28
    3c9e:	04 5f       	subi	r16, 0xF4	; 244
    3ca0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ca2:	c8 01       	movw	r24, r16
    3ca4:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3ca8:	80 91 ed 04 	lds	r24, 0x04ED
    3cac:	88 23       	and	r24, r24
    3cae:	a1 f4       	brne	.+40     	; 0x3cd8 <xTaskRemoveFromEventList+0x52>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    3cb0:	8e 01       	movw	r16, r28
    3cb2:	0e 5f       	subi	r16, 0xFE	; 254
    3cb4:	1f 4f       	sbci	r17, 0xFF	; 255
    3cb6:	c8 01       	movw	r24, r16
    3cb8:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    3cbc:	9e 89       	ldd	r25, Y+22	; 0x16
    3cbe:	80 91 ee 04 	lds	r24, 0x04EE
    3cc2:	89 17       	cp	r24, r25
    3cc4:	10 f4       	brcc	.+4      	; 0x3cca <xTaskRemoveFromEventList+0x44>
    3cc6:	90 93 ee 04 	sts	0x04EE, r25
    3cca:	89 e0       	ldi	r24, 0x09	; 9
    3ccc:	98 9f       	mul	r25, r24
    3cce:	c0 01       	movw	r24, r0
    3cd0:	11 24       	eor	r1, r1
    3cd2:	86 50       	subi	r24, 0x06	; 6
    3cd4:	9b 4f       	sbci	r25, 0xFB	; 251
    3cd6:	02 c0       	rjmp	.+4      	; 0x3cdc <xTaskRemoveFromEventList+0x56>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    3cd8:	84 e3       	ldi	r24, 0x34	; 52
    3cda:	95 e0       	ldi	r25, 0x05	; 5
    3cdc:	b8 01       	movw	r22, r16
    3cde:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    3ce2:	e0 91 eb 04 	lds	r30, 0x04EB
    3ce6:	f0 91 ec 04 	lds	r31, 0x04EC
    3cea:	9e 89       	ldd	r25, Y+22	; 0x16
    3cec:	86 89       	ldd	r24, Z+22	; 0x16
    3cee:	89 17       	cp	r24, r25
    3cf0:	10 f0       	brcs	.+4      	; 0x3cf6 <xTaskRemoveFromEventList+0x70>
    3cf2:	80 e0       	ldi	r24, 0x00	; 0
    3cf4:	03 c0       	rjmp	.+6      	; 0x3cfc <xTaskRemoveFromEventList+0x76>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    3cf6:	81 e0       	ldi	r24, 0x01	; 1
    3cf8:	80 93 f3 04 	sts	0x04F3, r24
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
    3cfc:	df 91       	pop	r29
    3cfe:	cf 91       	pop	r28
    3d00:	1f 91       	pop	r17
    3d02:	0f 91       	pop	r16
    3d04:	08 95       	ret

00003d06 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    3d06:	cf 92       	push	r12
    3d08:	df 92       	push	r13
    3d0a:	ef 92       	push	r14
    3d0c:	ff 92       	push	r15
    3d0e:	0f 93       	push	r16
    3d10:	1f 93       	push	r17
    3d12:	cf 93       	push	r28
    3d14:	df 93       	push	r29

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3d16:	80 91 ed 04 	lds	r24, 0x04ED
    3d1a:	88 23       	and	r24, r24
    3d1c:	09 f0       	breq	.+2      	; 0x3d20 <xTaskIncrementTick+0x1a>
    3d1e:	a7 c0       	rjmp	.+334    	; 0x3e6e <xTaskIncrementTick+0x168>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
    3d20:	80 91 ef 04 	lds	r24, 0x04EF
    3d24:	90 91 f0 04 	lds	r25, 0x04F0
    3d28:	01 96       	adiw	r24, 0x01	; 1
    3d2a:	90 93 f0 04 	sts	0x04F0, r25
    3d2e:	80 93 ef 04 	sts	0x04EF, r24

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    3d32:	e0 90 ef 04 	lds	r14, 0x04EF
    3d36:	f0 90 f0 04 	lds	r15, 0x04F0

			if( xConstTickCount == ( TickType_t ) 0U )
    3d3a:	e1 14       	cp	r14, r1
    3d3c:	f1 04       	cpc	r15, r1
    3d3e:	79 f5       	brne	.+94     	; 0x3d9e <xTaskIncrementTick+0x98>
			{
				taskSWITCH_DELAYED_LISTS();
    3d40:	20 91 30 05 	lds	r18, 0x0530
    3d44:	30 91 31 05 	lds	r19, 0x0531
    3d48:	80 91 32 05 	lds	r24, 0x0532
    3d4c:	90 91 33 05 	lds	r25, 0x0533
    3d50:	90 93 31 05 	sts	0x0531, r25
    3d54:	80 93 30 05 	sts	0x0530, r24
    3d58:	30 93 33 05 	sts	0x0533, r19
    3d5c:	20 93 32 05 	sts	0x0532, r18
    3d60:	80 91 f4 04 	lds	r24, 0x04F4
    3d64:	8f 5f       	subi	r24, 0xFF	; 255
    3d66:	80 93 f4 04 	sts	0x04F4, r24

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3d6a:	e0 91 30 05 	lds	r30, 0x0530
    3d6e:	f0 91 31 05 	lds	r31, 0x0531
    3d72:	80 81       	ld	r24, Z
    3d74:	88 23       	and	r24, r24
    3d76:	19 f4       	brne	.+6      	; 0x3d7e <xTaskIncrementTick+0x78>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    3d78:	8f ef       	ldi	r24, 0xFF	; 255
    3d7a:	9f ef       	ldi	r25, 0xFF	; 255
    3d7c:	0c c0       	rjmp	.+24     	; 0x3d96 <xTaskIncrementTick+0x90>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    3d7e:	e0 91 30 05 	lds	r30, 0x0530
    3d82:	f0 91 31 05 	lds	r31, 0x0531
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
    3d86:	05 80       	ldd	r0, Z+5	; 0x05
    3d88:	f6 81       	ldd	r31, Z+6	; 0x06
    3d8a:	e0 2d       	mov	r30, r0
    3d8c:	06 80       	ldd	r0, Z+6	; 0x06
    3d8e:	f7 81       	ldd	r31, Z+7	; 0x07
    3d90:	e0 2d       	mov	r30, r0
    3d92:	82 81       	ldd	r24, Z+2	; 0x02
    3d94:	93 81       	ldd	r25, Z+3	; 0x03
    3d96:	90 93 f2 04 	sts	0x04F2, r25
    3d9a:	80 93 f1 04 	sts	0x04F1, r24

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
    3d9e:	80 91 f1 04 	lds	r24, 0x04F1
    3da2:	90 91 f2 04 	lds	r25, 0x04F2
    3da6:	e8 16       	cp	r14, r24
    3da8:	f9 06       	cpc	r15, r25
    3daa:	08 f4       	brcc	.+2      	; 0x3dae <xTaskIncrementTick+0xa8>
    3dac:	49 c0       	rjmp	.+146    	; 0x3e40 <xTaskIncrementTick+0x13a>
    3dae:	dd 24       	eor	r13, r13
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
    3db0:	49 e0       	ldi	r20, 0x09	; 9
    3db2:	c4 2e       	mov	r12, r20
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3db4:	e0 91 30 05 	lds	r30, 0x0530
    3db8:	f0 91 31 05 	lds	r31, 0x0531
    3dbc:	80 81       	ld	r24, Z
    3dbe:	88 23       	and	r24, r24
    3dc0:	19 f4       	brne	.+6      	; 0x3dc8 <xTaskIncrementTick+0xc2>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
    3dc2:	8f ef       	ldi	r24, 0xFF	; 255
    3dc4:	9f ef       	ldi	r25, 0xFF	; 255
    3dc6:	0e c0       	rjmp	.+28     	; 0x3de4 <xTaskIncrementTick+0xde>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    3dc8:	e0 91 30 05 	lds	r30, 0x0530
    3dcc:	f0 91 31 05 	lds	r31, 0x0531
    3dd0:	05 80       	ldd	r0, Z+5	; 0x05
    3dd2:	f6 81       	ldd	r31, Z+6	; 0x06
    3dd4:	e0 2d       	mov	r30, r0
    3dd6:	c6 81       	ldd	r28, Z+6	; 0x06
    3dd8:	d7 81       	ldd	r29, Z+7	; 0x07
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    3dda:	8a 81       	ldd	r24, Y+2	; 0x02
    3ddc:	9b 81       	ldd	r25, Y+3	; 0x03

						if( xConstTickCount < xItemValue )
    3dde:	e8 16       	cp	r14, r24
    3de0:	f9 06       	cpc	r15, r25
    3de2:	28 f4       	brcc	.+10     	; 0x3dee <xTaskIncrementTick+0xe8>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
    3de4:	90 93 f2 04 	sts	0x04F2, r25
    3de8:	80 93 f1 04 	sts	0x04F1, r24
    3dec:	2a c0       	rjmp	.+84     	; 0x3e42 <xTaskIncrementTick+0x13c>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    3dee:	8e 01       	movw	r16, r28
    3df0:	0e 5f       	subi	r16, 0xFE	; 254
    3df2:	1f 4f       	sbci	r17, 0xFF	; 255
    3df4:	c8 01       	movw	r24, r16
    3df6:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    3dfa:	8c 89       	ldd	r24, Y+20	; 0x14
    3dfc:	9d 89       	ldd	r25, Y+21	; 0x15
    3dfe:	89 2b       	or	r24, r25
    3e00:	21 f0       	breq	.+8      	; 0x3e0a <xTaskIncrementTick+0x104>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    3e02:	ce 01       	movw	r24, r28
    3e04:	0c 96       	adiw	r24, 0x0c	; 12
    3e06:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
    3e0a:	9e 89       	ldd	r25, Y+22	; 0x16
    3e0c:	80 91 ee 04 	lds	r24, 0x04EE
    3e10:	89 17       	cp	r24, r25
    3e12:	10 f4       	brcc	.+4      	; 0x3e18 <xTaskIncrementTick+0x112>
    3e14:	90 93 ee 04 	sts	0x04EE, r25
    3e18:	9c 9d       	mul	r25, r12
    3e1a:	c0 01       	movw	r24, r0
    3e1c:	11 24       	eor	r1, r1
    3e1e:	86 50       	subi	r24, 0x06	; 6
    3e20:	9b 4f       	sbci	r25, 0xFB	; 251
    3e22:	b8 01       	movw	r22, r16
    3e24:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3e28:	e0 91 eb 04 	lds	r30, 0x04EB
    3e2c:	f0 91 ec 04 	lds	r31, 0x04EC
    3e30:	9e 89       	ldd	r25, Y+22	; 0x16
    3e32:	86 89       	ldd	r24, Z+22	; 0x16
    3e34:	98 17       	cp	r25, r24
    3e36:	08 f4       	brcc	.+2      	; 0x3e3a <xTaskIncrementTick+0x134>
    3e38:	bd cf       	rjmp	.-134    	; 0x3db4 <xTaskIncrementTick+0xae>
    3e3a:	dd 24       	eor	r13, r13
    3e3c:	d3 94       	inc	r13
    3e3e:	ba cf       	rjmp	.-140    	; 0x3db4 <xTaskIncrementTick+0xae>
    3e40:	dd 24       	eor	r13, r13
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    3e42:	e0 91 eb 04 	lds	r30, 0x04EB
    3e46:	f0 91 ec 04 	lds	r31, 0x04EC
    3e4a:	86 89       	ldd	r24, Z+22	; 0x16
    3e4c:	90 e0       	ldi	r25, 0x00	; 0
    3e4e:	fc 01       	movw	r30, r24
    3e50:	33 e0       	ldi	r19, 0x03	; 3
    3e52:	ee 0f       	add	r30, r30
    3e54:	ff 1f       	adc	r31, r31
    3e56:	3a 95       	dec	r19
    3e58:	e1 f7       	brne	.-8      	; 0x3e52 <xTaskIncrementTick+0x14c>
    3e5a:	e8 0f       	add	r30, r24
    3e5c:	f9 1f       	adc	r31, r25
    3e5e:	e6 50       	subi	r30, 0x06	; 6
    3e60:	fb 4f       	sbci	r31, 0xFB	; 251
    3e62:	80 81       	ld	r24, Z
    3e64:	82 30       	cpi	r24, 0x02	; 2
    3e66:	48 f0       	brcs	.+18     	; 0x3e7a <xTaskIncrementTick+0x174>
    3e68:	dd 24       	eor	r13, r13
    3e6a:	d3 94       	inc	r13
    3e6c:	06 c0       	rjmp	.+12     	; 0x3e7a <xTaskIncrementTick+0x174>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    3e6e:	80 91 f5 04 	lds	r24, 0x04F5
    3e72:	8f 5f       	subi	r24, 0xFF	; 255
    3e74:	80 93 f5 04 	sts	0x04F5, r24
    3e78:	dd 24       	eor	r13, r13
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    3e7a:	80 91 f3 04 	lds	r24, 0x04F3
    3e7e:	88 23       	and	r24, r24
    3e80:	11 f0       	breq	.+4      	; 0x3e86 <xTaskIncrementTick+0x180>
    3e82:	dd 24       	eor	r13, r13
    3e84:	d3 94       	inc	r13
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
    3e86:	8d 2d       	mov	r24, r13
    3e88:	df 91       	pop	r29
    3e8a:	cf 91       	pop	r28
    3e8c:	1f 91       	pop	r17
    3e8e:	0f 91       	pop	r16
    3e90:	ff 90       	pop	r15
    3e92:	ef 90       	pop	r14
    3e94:	df 90       	pop	r13
    3e96:	cf 90       	pop	r12
    3e98:	08 95       	ret

00003e9a <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
    3e9a:	0f 93       	push	r16
    3e9c:	1f 93       	push	r17
    3e9e:	cf 93       	push	r28
    3ea0:	df 93       	push	r29
    3ea2:	f8 01       	movw	r30, r16
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;
    3ea4:	ec 01       	movw	r28, r24

		taskENTER_CRITICAL();
    3ea6:	0f b6       	in	r0, 0x3f	; 63
    3ea8:	f8 94       	cli
    3eaa:	0f 92       	push	r0
		{
			if( pulPreviousNotificationValue != NULL )
    3eac:	01 15       	cp	r16, r1
    3eae:	11 05       	cpc	r17, r1
    3eb0:	41 f0       	breq	.+16     	; 0x3ec2 <xTaskGenericNotify+0x28>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    3eb2:	89 a1       	ldd	r24, Y+33	; 0x21
    3eb4:	9a a1       	ldd	r25, Y+34	; 0x22
    3eb6:	ab a1       	ldd	r26, Y+35	; 0x23
    3eb8:	bc a1       	ldd	r27, Y+36	; 0x24
    3eba:	80 83       	st	Z, r24
    3ebc:	91 83       	std	Z+1, r25	; 0x01
    3ebe:	a2 83       	std	Z+2, r26	; 0x02
    3ec0:	b3 83       	std	Z+3, r27	; 0x03
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
    3ec2:	3d a1       	ldd	r19, Y+37	; 0x25

			pxTCB->eNotifyState = eNotified;
    3ec4:	82 e0       	ldi	r24, 0x02	; 2
    3ec6:	8d a3       	std	Y+37, r24	; 0x25

			switch( eAction )
    3ec8:	22 30       	cpi	r18, 0x02	; 2
    3eca:	99 f0       	breq	.+38     	; 0x3ef2 <xTaskGenericNotify+0x58>
    3ecc:	23 30       	cpi	r18, 0x03	; 3
    3ece:	18 f4       	brcc	.+6      	; 0x3ed6 <xTaskGenericNotify+0x3c>
    3ed0:	21 30       	cpi	r18, 0x01	; 1
    3ed2:	19 f5       	brne	.+70     	; 0x3f1a <xTaskGenericNotify+0x80>
    3ed4:	05 c0       	rjmp	.+10     	; 0x3ee0 <xTaskGenericNotify+0x46>
    3ed6:	23 30       	cpi	r18, 0x03	; 3
    3ed8:	e1 f0       	breq	.+56     	; 0x3f12 <xTaskGenericNotify+0x78>
    3eda:	24 30       	cpi	r18, 0x04	; 4
    3edc:	f1 f4       	brne	.+60     	; 0x3f1a <xTaskGenericNotify+0x80>
    3ede:	15 c0       	rjmp	.+42     	; 0x3f0a <xTaskGenericNotify+0x70>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    3ee0:	89 a1       	ldd	r24, Y+33	; 0x21
    3ee2:	9a a1       	ldd	r25, Y+34	; 0x22
    3ee4:	ab a1       	ldd	r26, Y+35	; 0x23
    3ee6:	bc a1       	ldd	r27, Y+36	; 0x24
    3ee8:	84 2b       	or	r24, r20
    3eea:	95 2b       	or	r25, r21
    3eec:	a6 2b       	or	r26, r22
    3eee:	b7 2b       	or	r27, r23
    3ef0:	07 c0       	rjmp	.+14     	; 0x3f00 <xTaskGenericNotify+0x66>
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    3ef2:	89 a1       	ldd	r24, Y+33	; 0x21
    3ef4:	9a a1       	ldd	r25, Y+34	; 0x22
    3ef6:	ab a1       	ldd	r26, Y+35	; 0x23
    3ef8:	bc a1       	ldd	r27, Y+36	; 0x24
    3efa:	01 96       	adiw	r24, 0x01	; 1
    3efc:	a1 1d       	adc	r26, r1
    3efe:	b1 1d       	adc	r27, r1
    3f00:	89 a3       	std	Y+33, r24	; 0x21
    3f02:	9a a3       	std	Y+34, r25	; 0x22
    3f04:	ab a3       	std	Y+35, r26	; 0x23
    3f06:	bc a3       	std	Y+36, r27	; 0x24
    3f08:	08 c0       	rjmp	.+16     	; 0x3f1a <xTaskGenericNotify+0x80>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
    3f0a:	32 30       	cpi	r19, 0x02	; 2
    3f0c:	11 f4       	brne	.+4      	; 0x3f12 <xTaskGenericNotify+0x78>
    3f0e:	80 e0       	ldi	r24, 0x00	; 0
    3f10:	27 c0       	rjmp	.+78     	; 0x3f60 <xTaskGenericNotify+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
    3f12:	49 a3       	std	Y+33, r20	; 0x21
    3f14:	5a a3       	std	Y+34, r21	; 0x22
    3f16:	6b a3       	std	Y+35, r22	; 0x23
    3f18:	7c a3       	std	Y+36, r23	; 0x24

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
    3f1a:	31 30       	cpi	r19, 0x01	; 1
    3f1c:	01 f5       	brne	.+64     	; 0x3f5e <xTaskGenericNotify+0xc4>
			{
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    3f1e:	8e 01       	movw	r16, r28
    3f20:	0e 5f       	subi	r16, 0xFE	; 254
    3f22:	1f 4f       	sbci	r17, 0xFF	; 255
    3f24:	c8 01       	movw	r24, r16
    3f26:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
    3f2a:	9e 89       	ldd	r25, Y+22	; 0x16
    3f2c:	80 91 ee 04 	lds	r24, 0x04EE
    3f30:	89 17       	cp	r24, r25
    3f32:	10 f4       	brcc	.+4      	; 0x3f38 <xTaskGenericNotify+0x9e>
    3f34:	90 93 ee 04 	sts	0x04EE, r25
    3f38:	89 e0       	ldi	r24, 0x09	; 9
    3f3a:	98 9f       	mul	r25, r24
    3f3c:	c0 01       	movw	r24, r0
    3f3e:	11 24       	eor	r1, r1
    3f40:	86 50       	subi	r24, 0x06	; 6
    3f42:	9b 4f       	sbci	r25, 0xFB	; 251
    3f44:	b8 01       	movw	r22, r16
    3f46:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    3f4a:	e0 91 eb 04 	lds	r30, 0x04EB
    3f4e:	f0 91 ec 04 	lds	r31, 0x04EC
    3f52:	9e 89       	ldd	r25, Y+22	; 0x16
    3f54:	86 89       	ldd	r24, Z+22	; 0x16
    3f56:	89 17       	cp	r24, r25
    3f58:	10 f4       	brcc	.+4      	; 0x3f5e <xTaskGenericNotify+0xc4>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
    3f5a:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <vPortYield>
    3f5e:	81 e0       	ldi	r24, 0x01	; 1
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    3f60:	0f 90       	pop	r0
    3f62:	0f be       	out	0x3f, r0	; 63

		return xReturn;
	}
    3f64:	df 91       	pop	r29
    3f66:	cf 91       	pop	r28
    3f68:	1f 91       	pop	r17
    3f6a:	0f 91       	pop	r16
    3f6c:	08 95       	ret

00003f6e <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    3f6e:	ef 92       	push	r14
    3f70:	ff 92       	push	r15
    3f72:	0f 93       	push	r16
    3f74:	1f 93       	push	r17
    3f76:	cf 93       	push	r28
    3f78:	df 93       	push	r29
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    3f7a:	0f b6       	in	r0, 0x3f	; 63
    3f7c:	f8 94       	cli
    3f7e:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    3f80:	80 91 ed 04 	lds	r24, 0x04ED
    3f84:	81 50       	subi	r24, 0x01	; 1
    3f86:	80 93 ed 04 	sts	0x04ED, r24

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3f8a:	80 91 ed 04 	lds	r24, 0x04ED
    3f8e:	88 23       	and	r24, r24
    3f90:	09 f0       	breq	.+2      	; 0x3f94 <xTaskResumeAll+0x26>
    3f92:	55 c0       	rjmp	.+170    	; 0x403e <xTaskResumeAll+0xd0>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    3f94:	80 91 f6 04 	lds	r24, 0x04F6
    3f98:	88 23       	and	r24, r24
    3f9a:	59 f5       	brne	.+86     	; 0x3ff2 <xTaskResumeAll+0x84>
    3f9c:	50 c0       	rjmp	.+160    	; 0x403e <xTaskResumeAll+0xd0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    3f9e:	e0 91 39 05 	lds	r30, 0x0539
    3fa2:	f0 91 3a 05 	lds	r31, 0x053A
    3fa6:	c6 81       	ldd	r28, Z+6	; 0x06
    3fa8:	d7 81       	ldd	r29, Z+7	; 0x07
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    3faa:	ce 01       	movw	r24, r28
    3fac:	0c 96       	adiw	r24, 0x0c	; 12
    3fae:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    3fb2:	8e 01       	movw	r16, r28
    3fb4:	0e 5f       	subi	r16, 0xFE	; 254
    3fb6:	1f 4f       	sbci	r17, 0xFF	; 255
    3fb8:	c8 01       	movw	r24, r16
    3fba:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    3fbe:	9e 89       	ldd	r25, Y+22	; 0x16
    3fc0:	80 91 ee 04 	lds	r24, 0x04EE
    3fc4:	89 17       	cp	r24, r25
    3fc6:	10 f4       	brcc	.+4      	; 0x3fcc <xTaskResumeAll+0x5e>
    3fc8:	90 93 ee 04 	sts	0x04EE, r25
    3fcc:	9e 9d       	mul	r25, r14
    3fce:	c0 01       	movw	r24, r0
    3fd0:	11 24       	eor	r1, r1
    3fd2:	86 50       	subi	r24, 0x06	; 6
    3fd4:	9b 4f       	sbci	r25, 0xFB	; 251
    3fd6:	b8 01       	movw	r22, r16
    3fd8:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3fdc:	e0 91 eb 04 	lds	r30, 0x04EB
    3fe0:	f0 91 ec 04 	lds	r31, 0x04EC
    3fe4:	9e 89       	ldd	r25, Y+22	; 0x16
    3fe6:	86 89       	ldd	r24, Z+22	; 0x16
    3fe8:	98 17       	cp	r25, r24
    3fea:	38 f0       	brcs	.+14     	; 0x3ffa <xTaskResumeAll+0x8c>
					{
						xYieldPending = pdTRUE;
    3fec:	f0 92 f3 04 	sts	0x04F3, r15
    3ff0:	04 c0       	rjmp	.+8      	; 0x3ffa <xTaskResumeAll+0x8c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
    3ff2:	59 e0       	ldi	r21, 0x09	; 9
    3ff4:	e5 2e       	mov	r14, r21

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
					{
						xYieldPending = pdTRUE;
    3ff6:	ff 24       	eor	r15, r15
    3ff8:	f3 94       	inc	r15
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    3ffa:	80 91 34 05 	lds	r24, 0x0534
    3ffe:	88 23       	and	r24, r24
    4000:	71 f6       	brne	.-100    	; 0x3f9e <xTaskResumeAll+0x30>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
    4002:	80 91 f5 04 	lds	r24, 0x04F5
    4006:	88 23       	and	r24, r24
    4008:	69 f4       	brne	.+26     	; 0x4024 <xTaskResumeAll+0xb6>
    400a:	11 c0       	rjmp	.+34     	; 0x402e <xTaskResumeAll+0xc0>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
    400c:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <xTaskIncrementTick>
    4010:	88 23       	and	r24, r24
    4012:	11 f0       	breq	.+4      	; 0x4018 <xTaskResumeAll+0xaa>
						{
							xYieldPending = pdTRUE;
    4014:	10 93 f3 04 	sts	0x04F3, r17
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
    4018:	80 91 f5 04 	lds	r24, 0x04F5
    401c:	81 50       	subi	r24, 0x01	; 1
    401e:	80 93 f5 04 	sts	0x04F5, r24
    4022:	01 c0       	rjmp	.+2      	; 0x4026 <xTaskResumeAll+0xb8>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
						{
							xYieldPending = pdTRUE;
    4024:	11 e0       	ldi	r17, 0x01	; 1
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    4026:	80 91 f5 04 	lds	r24, 0x04F5
    402a:	88 23       	and	r24, r24
    402c:	79 f7       	brne	.-34     	; 0x400c <xTaskResumeAll+0x9e>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
    402e:	80 91 f3 04 	lds	r24, 0x04F3
    4032:	81 30       	cpi	r24, 0x01	; 1
    4034:	21 f4       	brne	.+8      	; 0x403e <xTaskResumeAll+0xd0>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    4036:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <vPortYield>
    403a:	81 e0       	ldi	r24, 0x01	; 1
    403c:	01 c0       	rjmp	.+2      	; 0x4040 <xTaskResumeAll+0xd2>
    403e:	80 e0       	ldi	r24, 0x00	; 0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    4040:	0f 90       	pop	r0
    4042:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
}
    4044:	df 91       	pop	r29
    4046:	cf 91       	pop	r28
    4048:	1f 91       	pop	r17
    404a:	0f 91       	pop	r16
    404c:	ff 90       	pop	r15
    404e:	ef 90       	pop	r14
    4050:	08 95       	ret

00004052 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
    4052:	ef 92       	push	r14
    4054:	ff 92       	push	r15
    4056:	0f 93       	push	r16
    4058:	1f 93       	push	r17
    405a:	df 93       	push	r29
    405c:	cf 93       	push	r28
    405e:	0f 92       	push	r0
    4060:	cd b7       	in	r28, 0x3d	; 61
    4062:	de b7       	in	r29, 0x3e	; 62
    4064:	64 30       	cpi	r22, 0x04	; 4
    4066:	08 f0       	brcs	.+2      	; 0x406a <vTaskPrioritySet+0x18>
    4068:	63 e0       	ldi	r22, 0x03	; 3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
    406a:	0f b6       	in	r0, 0x3f	; 63
    406c:	f8 94       	cli
    406e:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
    4070:	00 97       	sbiw	r24, 0x00	; 0
    4072:	29 f4       	brne	.+10     	; 0x407e <vTaskPrioritySet+0x2c>
    4074:	e0 90 eb 04 	lds	r14, 0x04EB
    4078:	f0 90 ec 04 	lds	r15, 0x04EC
    407c:	01 c0       	rjmp	.+2      	; 0x4080 <vTaskPrioritySet+0x2e>
    407e:	7c 01       	movw	r14, r24
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
			}
			#else
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
    4080:	d7 01       	movw	r26, r14
    4082:	56 96       	adiw	r26, 0x16	; 22
    4084:	2c 91       	ld	r18, X
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
    4086:	26 17       	cp	r18, r22
    4088:	09 f4       	brne	.+2      	; 0x408c <vTaskPrioritySet+0x3a>
    408a:	5b c0       	rjmp	.+182    	; 0x4142 <vTaskPrioritySet+0xf0>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
    408c:	26 17       	cp	r18, r22
    408e:	a0 f4       	brcc	.+40     	; 0x40b8 <vTaskPrioritySet+0x66>
				{
					if( pxTCB != pxCurrentTCB )
    4090:	80 91 eb 04 	lds	r24, 0x04EB
    4094:	90 91 ec 04 	lds	r25, 0x04EC
    4098:	e8 16       	cp	r14, r24
    409a:	f9 06       	cpc	r15, r25
    409c:	11 f4       	brne	.+4      	; 0x40a2 <vTaskPrioritySet+0x50>
    409e:	19 82       	std	Y+1, r1	; 0x01
    40a0:	15 c0       	rjmp	.+42     	; 0x40cc <vTaskPrioritySet+0x7a>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
    40a2:	e0 91 eb 04 	lds	r30, 0x04EB
    40a6:	f0 91 ec 04 	lds	r31, 0x04EC
    40aa:	19 82       	std	Y+1, r1	; 0x01
    40ac:	86 89       	ldd	r24, Z+22	; 0x16
    40ae:	68 17       	cp	r22, r24
    40b0:	68 f0       	brcs	.+26     	; 0x40cc <vTaskPrioritySet+0x7a>
    40b2:	b1 e0       	ldi	r27, 0x01	; 1
    40b4:	b9 83       	std	Y+1, r27	; 0x01
    40b6:	0a c0       	rjmp	.+20     	; 0x40cc <vTaskPrioritySet+0x7a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
    40b8:	80 91 eb 04 	lds	r24, 0x04EB
    40bc:	90 91 ec 04 	lds	r25, 0x04EC
    40c0:	19 82       	std	Y+1, r1	; 0x01
    40c2:	e8 16       	cp	r14, r24
    40c4:	f9 06       	cpc	r15, r25
    40c6:	11 f4       	brne	.+4      	; 0x40cc <vTaskPrioritySet+0x7a>
    40c8:	e1 e0       	ldi	r30, 0x01	; 1
    40ca:	e9 83       	std	Y+1, r30	; 0x01
					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
				}
				#else
				{
					pxTCB->uxPriority = uxNewPriority;
    40cc:	d7 01       	movw	r26, r14
    40ce:	56 96       	adiw	r26, 0x16	; 22
    40d0:	6c 93       	st	X, r22
    40d2:	56 97       	sbiw	r26, 0x16	; 22
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    40d4:	1c 96       	adiw	r26, 0x0c	; 12
    40d6:	8d 91       	ld	r24, X+
    40d8:	9c 91       	ld	r25, X
    40da:	1d 97       	sbiw	r26, 0x0d	; 13
    40dc:	97 fd       	sbrc	r25, 7
    40de:	08 c0       	rjmp	.+16     	; 0x40f0 <vTaskPrioritySet+0x9e>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    40e0:	84 e0       	ldi	r24, 0x04	; 4
    40e2:	90 e0       	ldi	r25, 0x00	; 0
    40e4:	86 1b       	sub	r24, r22
    40e6:	91 09       	sbc	r25, r1
    40e8:	1d 96       	adiw	r26, 0x0d	; 13
    40ea:	9c 93       	st	X, r25
    40ec:	8e 93       	st	-X, r24
    40ee:	1c 97       	sbiw	r26, 0x0c	; 12

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    40f0:	89 e0       	ldi	r24, 0x09	; 9
    40f2:	28 9f       	mul	r18, r24
    40f4:	c0 01       	movw	r24, r0
    40f6:	11 24       	eor	r1, r1
    40f8:	86 50       	subi	r24, 0x06	; 6
    40fa:	9b 4f       	sbci	r25, 0xFB	; 251
    40fc:	f7 01       	movw	r30, r14
    40fe:	22 85       	ldd	r18, Z+10	; 0x0a
    4100:	33 85       	ldd	r19, Z+11	; 0x0b
    4102:	28 17       	cp	r18, r24
    4104:	39 07       	cpc	r19, r25
    4106:	c1 f4       	brne	.+48     	; 0x4138 <vTaskPrioritySet+0xe6>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    4108:	87 01       	movw	r16, r14
    410a:	0e 5f       	subi	r16, 0xFE	; 254
    410c:	1f 4f       	sbci	r17, 0xFF	; 255
    410e:	c8 01       	movw	r24, r16
    4110:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
    4114:	d7 01       	movw	r26, r14
    4116:	56 96       	adiw	r26, 0x16	; 22
    4118:	9c 91       	ld	r25, X
    411a:	80 91 ee 04 	lds	r24, 0x04EE
    411e:	89 17       	cp	r24, r25
    4120:	10 f4       	brcc	.+4      	; 0x4126 <vTaskPrioritySet+0xd4>
    4122:	90 93 ee 04 	sts	0x04EE, r25
    4126:	89 e0       	ldi	r24, 0x09	; 9
    4128:	98 9f       	mul	r25, r24
    412a:	c0 01       	movw	r24, r0
    412c:	11 24       	eor	r1, r1
    412e:	86 50       	subi	r24, 0x06	; 6
    4130:	9b 4f       	sbci	r25, 0xFB	; 251
    4132:	b8 01       	movw	r22, r16
    4134:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired == pdTRUE )
    4138:	b9 81       	ldd	r27, Y+1	; 0x01
    413a:	b1 30       	cpi	r27, 0x01	; 1
    413c:	11 f4       	brne	.+4      	; 0x4142 <vTaskPrioritySet+0xf0>
				{
					taskYIELD_IF_USING_PREEMPTION();
    413e:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <vPortYield>
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
    4142:	0f 90       	pop	r0
    4144:	0f be       	out	0x3f, r0	; 63
	}
    4146:	0f 90       	pop	r0
    4148:	cf 91       	pop	r28
    414a:	df 91       	pop	r29
    414c:	1f 91       	pop	r17
    414e:	0f 91       	pop	r16
    4150:	ff 90       	pop	r15
    4152:	ef 90       	pop	r14
    4154:	08 95       	ret

00004156 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
    4156:	0f 93       	push	r16
    4158:	1f 93       	push	r17
    415a:	cf 93       	push	r28
    415c:	df 93       	push	r29
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    415e:	0f b6       	in	r0, 0x3f	; 63
    4160:	f8 94       	cli
    4162:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    4164:	00 97       	sbiw	r24, 0x00	; 0
    4166:	29 f4       	brne	.+10     	; 0x4172 <vTaskDelete+0x1c>
    4168:	c0 91 eb 04 	lds	r28, 0x04EB
    416c:	d0 91 ec 04 	lds	r29, 0x04EC
    4170:	01 c0       	rjmp	.+2      	; 0x4174 <vTaskDelete+0x1e>
    4172:	ec 01       	movw	r28, r24

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    4174:	8e 01       	movw	r16, r28
    4176:	0e 5f       	subi	r16, 0xFE	; 254
    4178:	1f 4f       	sbci	r17, 0xFF	; 255
    417a:	c8 01       	movw	r24, r16
    417c:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    4180:	8c 89       	ldd	r24, Y+20	; 0x14
    4182:	9d 89       	ldd	r25, Y+21	; 0x15
    4184:	89 2b       	or	r24, r25
    4186:	21 f0       	breq	.+8      	; 0x4190 <vTaskDelete+0x3a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    4188:	ce 01       	movw	r24, r28
    418a:	0c 96       	adiw	r24, 0x0c	; 12
    418c:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    4190:	8d e3       	ldi	r24, 0x3D	; 61
    4192:	95 e0       	ldi	r25, 0x05	; 5
    4194:	b8 01       	movw	r22, r16
    4196:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    419a:	80 91 f8 04 	lds	r24, 0x04F8
    419e:	8f 5f       	subi	r24, 0xFF	; 255
    41a0:	80 93 f8 04 	sts	0x04F8, r24

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    41a4:	80 91 f9 04 	lds	r24, 0x04F9
    41a8:	8f 5f       	subi	r24, 0xFF	; 255
    41aa:	80 93 f9 04 	sts	0x04F9, r24

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    41ae:	0f 90       	pop	r0
    41b0:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
    41b2:	80 91 f7 04 	lds	r24, 0x04F7
    41b6:	88 23       	and	r24, r24
    41b8:	49 f1       	breq	.+82     	; 0x420c <vTaskDelete+0xb6>
		{
			if( pxTCB == pxCurrentTCB )
    41ba:	80 91 eb 04 	lds	r24, 0x04EB
    41be:	90 91 ec 04 	lds	r25, 0x04EC
    41c2:	c8 17       	cp	r28, r24
    41c4:	d9 07       	cpc	r29, r25
    41c6:	19 f4       	brne	.+6      	; 0x41ce <vTaskDelete+0x78>
				in which Windows specific clean up operations are performed,
				after which it is not possible to yield away from this task -
				hence xYieldPending is used to latch that a context switch is
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
				portYIELD_WITHIN_API();
    41c8:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <vPortYield>
    41cc:	1f c0       	rjmp	.+62     	; 0x420c <vTaskDelete+0xb6>
			}
			else
			{
				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				taskENTER_CRITICAL();
    41ce:	0f b6       	in	r0, 0x3f	; 63
    41d0:	f8 94       	cli
    41d2:	0f 92       	push	r0

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    41d4:	e0 91 30 05 	lds	r30, 0x0530
    41d8:	f0 91 31 05 	lds	r31, 0x0531
    41dc:	80 81       	ld	r24, Z
    41de:	88 23       	and	r24, r24
    41e0:	19 f4       	brne	.+6      	; 0x41e8 <vTaskDelete+0x92>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    41e2:	8f ef       	ldi	r24, 0xFF	; 255
    41e4:	9f ef       	ldi	r25, 0xFF	; 255
    41e6:	0c c0       	rjmp	.+24     	; 0x4200 <vTaskDelete+0xaa>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    41e8:	e0 91 30 05 	lds	r30, 0x0530
    41ec:	f0 91 31 05 	lds	r31, 0x0531
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
    41f0:	05 80       	ldd	r0, Z+5	; 0x05
    41f2:	f6 81       	ldd	r31, Z+6	; 0x06
    41f4:	e0 2d       	mov	r30, r0
    41f6:	06 80       	ldd	r0, Z+6	; 0x06
    41f8:	f7 81       	ldd	r31, Z+7	; 0x07
    41fa:	e0 2d       	mov	r30, r0
    41fc:	82 81       	ldd	r24, Z+2	; 0x02
    41fe:	93 81       	ldd	r25, Z+3	; 0x03
    4200:	90 93 f2 04 	sts	0x04F2, r25
    4204:	80 93 f1 04 	sts	0x04F1, r24
				the task that has just been deleted. */
				taskENTER_CRITICAL();
				{
					prvResetNextTaskUnblockTime();
				}
				taskEXIT_CRITICAL();
    4208:	0f 90       	pop	r0
    420a:	0f be       	out	0x3f, r0	; 63
			}
		}
	}
    420c:	df 91       	pop	r29
    420e:	cf 91       	pop	r28
    4210:	1f 91       	pop	r17
    4212:	0f 91       	pop	r16
    4214:	08 95       	ret

00004216 <prvAddCurrentTaskToDelayedList>:
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
    4216:	cf 93       	push	r28
    4218:	df 93       	push	r29
    421a:	ec 01       	movw	r28, r24
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    421c:	e0 91 eb 04 	lds	r30, 0x04EB
    4220:	f0 91 ec 04 	lds	r31, 0x04EC
    4224:	93 83       	std	Z+3, r25	; 0x03
    4226:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xTickCount )
    4228:	80 91 ef 04 	lds	r24, 0x04EF
    422c:	90 91 f0 04 	lds	r25, 0x04F0
    4230:	c8 17       	cp	r28, r24
    4232:	d9 07       	cpc	r29, r25
    4234:	68 f4       	brcc	.+26     	; 0x4250 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    4236:	80 91 32 05 	lds	r24, 0x0532
    423a:	90 91 33 05 	lds	r25, 0x0533
    423e:	60 91 eb 04 	lds	r22, 0x04EB
    4242:	70 91 ec 04 	lds	r23, 0x04EC
    4246:	6e 5f       	subi	r22, 0xFE	; 254
    4248:	7f 4f       	sbci	r23, 0xFF	; 255
    424a:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <vListInsert>
    424e:	17 c0       	rjmp	.+46     	; 0x427e <prvAddCurrentTaskToDelayedList+0x68>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    4250:	80 91 30 05 	lds	r24, 0x0530
    4254:	90 91 31 05 	lds	r25, 0x0531
    4258:	60 91 eb 04 	lds	r22, 0x04EB
    425c:	70 91 ec 04 	lds	r23, 0x04EC
    4260:	6e 5f       	subi	r22, 0xFE	; 254
    4262:	7f 4f       	sbci	r23, 0xFF	; 255
    4264:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    4268:	80 91 f1 04 	lds	r24, 0x04F1
    426c:	90 91 f2 04 	lds	r25, 0x04F2
    4270:	c8 17       	cp	r28, r24
    4272:	d9 07       	cpc	r29, r25
    4274:	20 f4       	brcc	.+8      	; 0x427e <prvAddCurrentTaskToDelayedList+0x68>
		{
			xNextTaskUnblockTime = xTimeToWake;
    4276:	d0 93 f2 04 	sts	0x04F2, r29
    427a:	c0 93 f1 04 	sts	0x04F1, r28
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    427e:	df 91       	pop	r29
    4280:	cf 91       	pop	r28
    4282:	08 95       	ret

00004284 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
    4284:	6f 92       	push	r6
    4286:	7f 92       	push	r7
    4288:	8f 92       	push	r8
    428a:	9f 92       	push	r9
    428c:	af 92       	push	r10
    428e:	bf 92       	push	r11
    4290:	cf 92       	push	r12
    4292:	df 92       	push	r13
    4294:	ef 92       	push	r14
    4296:	ff 92       	push	r15
    4298:	0f 93       	push	r16
    429a:	1f 93       	push	r17
    429c:	cf 93       	push	r28
    429e:	df 93       	push	r29
    42a0:	5b 01       	movw	r10, r22
    42a2:	6c 01       	movw	r12, r24
    42a4:	39 01       	movw	r6, r18
    42a6:	4a 01       	movw	r8, r20
    42a8:	e8 01       	movw	r28, r16
	TickType_t xTimeToWake;
	BaseType_t xReturn;

		taskENTER_CRITICAL();
    42aa:	0f b6       	in	r0, 0x3f	; 63
    42ac:	f8 94       	cli
    42ae:	0f 92       	push	r0
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->eNotifyState != eNotified )
    42b0:	e0 91 eb 04 	lds	r30, 0x04EB
    42b4:	f0 91 ec 04 	lds	r31, 0x04EC
    42b8:	85 a1       	ldd	r24, Z+37	; 0x25
    42ba:	82 30       	cpi	r24, 0x02	; 2
    42bc:	71 f1       	breq	.+92     	; 0x431a <xTaskNotifyWait+0x96>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    42be:	e0 91 eb 04 	lds	r30, 0x04EB
    42c2:	f0 91 ec 04 	lds	r31, 0x04EC
    42c6:	81 a1       	ldd	r24, Z+33	; 0x21
    42c8:	92 a1       	ldd	r25, Z+34	; 0x22
    42ca:	a3 a1       	ldd	r26, Z+35	; 0x23
    42cc:	b4 a1       	ldd	r27, Z+36	; 0x24
    42ce:	a0 94       	com	r10
    42d0:	b0 94       	com	r11
    42d2:	c0 94       	com	r12
    42d4:	d0 94       	com	r13
    42d6:	8a 21       	and	r24, r10
    42d8:	9b 21       	and	r25, r11
    42da:	ac 21       	and	r26, r12
    42dc:	bd 21       	and	r27, r13
    42de:	81 a3       	std	Z+33, r24	; 0x21
    42e0:	92 a3       	std	Z+34, r25	; 0x22
    42e2:	a3 a3       	std	Z+35, r26	; 0x23
    42e4:	b4 a3       	std	Z+36, r27	; 0x24

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
    42e6:	e0 91 eb 04 	lds	r30, 0x04EB
    42ea:	f0 91 ec 04 	lds	r31, 0x04EC
    42ee:	81 e0       	ldi	r24, 0x01	; 1
    42f0:	85 a3       	std	Z+37, r24	; 0x25

				if( xTicksToWait > ( TickType_t ) 0 )
    42f2:	e1 14       	cp	r14, r1
    42f4:	f1 04       	cpc	r15, r1
    42f6:	89 f0       	breq	.+34     	; 0x431a <xTaskNotifyWait+0x96>
				{
					/* The task is going to block.  First it must be removed
					from the	ready list. */
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    42f8:	80 91 eb 04 	lds	r24, 0x04EB
    42fc:	90 91 ec 04 	lds	r25, 0x04EC
    4300:	02 96       	adiw	r24, 0x02	; 2
    4302:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <uxListRemove>
					{
							/* Calculate the time at which the task should be
							woken if the event does not occur.  This may
							overflow but this doesn't matter, the scheduler will
							handle it. */
							xTimeToWake = xTickCount + xTicksToWait;
    4306:	80 91 ef 04 	lds	r24, 0x04EF
    430a:	90 91 f0 04 	lds	r25, 0x04F0
							prvAddCurrentTaskToDelayedList( xTimeToWake );
    430e:	8e 0d       	add	r24, r14
    4310:	9f 1d       	adc	r25, r15
    4312:	0e 94 0b 21 	call	0x4216	; 0x4216 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    4316:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    431a:	0f 90       	pop	r0
    431c:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    431e:	0f b6       	in	r0, 0x3f	; 63
    4320:	f8 94       	cli
    4322:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
    4324:	20 97       	sbiw	r28, 0x00	; 0
    4326:	61 f0       	breq	.+24     	; 0x4340 <xTaskNotifyWait+0xbc>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    4328:	e0 91 eb 04 	lds	r30, 0x04EB
    432c:	f0 91 ec 04 	lds	r31, 0x04EC
    4330:	81 a1       	ldd	r24, Z+33	; 0x21
    4332:	92 a1       	ldd	r25, Z+34	; 0x22
    4334:	a3 a1       	ldd	r26, Z+35	; 0x23
    4336:	b4 a1       	ldd	r27, Z+36	; 0x24
    4338:	88 83       	st	Y, r24
    433a:	99 83       	std	Y+1, r25	; 0x01
    433c:	aa 83       	std	Y+2, r26	; 0x02
    433e:	bb 83       	std	Y+3, r27	; 0x03

			/* If eNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->eNotifyState == eWaitingNotification )
    4340:	e0 91 eb 04 	lds	r30, 0x04EB
    4344:	f0 91 ec 04 	lds	r31, 0x04EC
    4348:	85 a1       	ldd	r24, Z+37	; 0x25
    434a:	81 30       	cpi	r24, 0x01	; 1
    434c:	11 f4       	brne	.+4      	; 0x4352 <xTaskNotifyWait+0xce>
    434e:	80 e0       	ldi	r24, 0x00	; 0
    4350:	15 c0       	rjmp	.+42     	; 0x437c <xTaskNotifyWait+0xf8>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    4352:	e0 91 eb 04 	lds	r30, 0x04EB
    4356:	f0 91 ec 04 	lds	r31, 0x04EC
    435a:	81 a1       	ldd	r24, Z+33	; 0x21
    435c:	92 a1       	ldd	r25, Z+34	; 0x22
    435e:	a3 a1       	ldd	r26, Z+35	; 0x23
    4360:	b4 a1       	ldd	r27, Z+36	; 0x24
    4362:	60 94       	com	r6
    4364:	70 94       	com	r7
    4366:	80 94       	com	r8
    4368:	90 94       	com	r9
    436a:	86 21       	and	r24, r6
    436c:	97 21       	and	r25, r7
    436e:	a8 21       	and	r26, r8
    4370:	b9 21       	and	r27, r9
    4372:	81 a3       	std	Z+33, r24	; 0x21
    4374:	92 a3       	std	Z+34, r25	; 0x22
    4376:	a3 a3       	std	Z+35, r26	; 0x23
    4378:	b4 a3       	std	Z+36, r27	; 0x24
    437a:	81 e0       	ldi	r24, 0x01	; 1
				xReturn = pdTRUE;
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
    437c:	e0 91 eb 04 	lds	r30, 0x04EB
    4380:	f0 91 ec 04 	lds	r31, 0x04EC
    4384:	15 a2       	std	Z+37, r1	; 0x25
		}
		taskEXIT_CRITICAL();
    4386:	0f 90       	pop	r0
    4388:	0f be       	out	0x3f, r0	; 63

		return xReturn;
	}
    438a:	df 91       	pop	r29
    438c:	cf 91       	pop	r28
    438e:	1f 91       	pop	r17
    4390:	0f 91       	pop	r16
    4392:	ff 90       	pop	r15
    4394:	ef 90       	pop	r14
    4396:	df 90       	pop	r13
    4398:	cf 90       	pop	r12
    439a:	bf 90       	pop	r11
    439c:	af 90       	pop	r10
    439e:	9f 90       	pop	r9
    43a0:	8f 90       	pop	r8
    43a2:	7f 90       	pop	r7
    43a4:	6f 90       	pop	r6
    43a6:	08 95       	ret

000043a8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
    43a8:	1f 93       	push	r17
    43aa:	cf 93       	push	r28
    43ac:	df 93       	push	r29
    43ae:	18 2f       	mov	r17, r24
    43b0:	eb 01       	movw	r28, r22
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
    43b2:	0f b6       	in	r0, 0x3f	; 63
    43b4:	f8 94       	cli
    43b6:	0f 92       	push	r0
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
    43b8:	e0 91 eb 04 	lds	r30, 0x04EB
    43bc:	f0 91 ec 04 	lds	r31, 0x04EC
    43c0:	81 a1       	ldd	r24, Z+33	; 0x21
    43c2:	92 a1       	ldd	r25, Z+34	; 0x22
    43c4:	a3 a1       	ldd	r26, Z+35	; 0x23
    43c6:	b4 a1       	ldd	r27, Z+36	; 0x24
    43c8:	00 97       	sbiw	r24, 0x00	; 0
    43ca:	a1 05       	cpc	r26, r1
    43cc:	b1 05       	cpc	r27, r1
    43ce:	d1 f4       	brne	.+52     	; 0x4404 <ulTaskNotifyTake+0x5c>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
    43d0:	e0 91 eb 04 	lds	r30, 0x04EB
    43d4:	f0 91 ec 04 	lds	r31, 0x04EC
    43d8:	81 e0       	ldi	r24, 0x01	; 1
    43da:	85 a3       	std	Z+37, r24	; 0x25

				if( xTicksToWait > ( TickType_t ) 0 )
    43dc:	61 15       	cp	r22, r1
    43de:	71 05       	cpc	r23, r1
    43e0:	89 f0       	breq	.+34     	; 0x4404 <ulTaskNotifyTake+0x5c>
				{
					/* The task is going to block.  First it must be removed
					from the ready list. */
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    43e2:	80 91 eb 04 	lds	r24, 0x04EB
    43e6:	90 91 ec 04 	lds	r25, 0x04EC
    43ea:	02 96       	adiw	r24, 0x02	; 2
    43ec:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <uxListRemove>
					{
							/* Calculate the time at which the task should be
							woken if the event does not occur.  This may
							overflow but this doesn't matter, the scheduler will
							handle it. */
							xTimeToWake = xTickCount + xTicksToWait;
    43f0:	80 91 ef 04 	lds	r24, 0x04EF
    43f4:	90 91 f0 04 	lds	r25, 0x04F0
							prvAddCurrentTaskToDelayedList( xTimeToWake );
    43f8:	8c 0f       	add	r24, r28
    43fa:	9d 1f       	adc	r25, r29
    43fc:	0e 94 0b 21 	call	0x4216	; 0x4216 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    4400:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    4404:	0f 90       	pop	r0
    4406:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    4408:	0f b6       	in	r0, 0x3f	; 63
    440a:	f8 94       	cli
    440c:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
    440e:	e0 91 eb 04 	lds	r30, 0x04EB
    4412:	f0 91 ec 04 	lds	r31, 0x04EC
    4416:	21 a1       	ldd	r18, Z+33	; 0x21
    4418:	32 a1       	ldd	r19, Z+34	; 0x22
    441a:	43 a1       	ldd	r20, Z+35	; 0x23
    441c:	54 a1       	ldd	r21, Z+36	; 0x24

			if( ulReturn != 0UL )
    441e:	21 15       	cp	r18, r1
    4420:	31 05       	cpc	r19, r1
    4422:	41 05       	cpc	r20, r1
    4424:	51 05       	cpc	r21, r1
    4426:	d1 f0       	breq	.+52     	; 0x445c <ulTaskNotifyTake+0xb4>
			{
				if( xClearCountOnExit != pdFALSE )
    4428:	11 23       	and	r17, r17
    442a:	49 f0       	breq	.+18     	; 0x443e <ulTaskNotifyTake+0x96>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
    442c:	e0 91 eb 04 	lds	r30, 0x04EB
    4430:	f0 91 ec 04 	lds	r31, 0x04EC
    4434:	11 a2       	std	Z+33, r1	; 0x21
    4436:	12 a2       	std	Z+34, r1	; 0x22
    4438:	13 a2       	std	Z+35, r1	; 0x23
    443a:	14 a2       	std	Z+36, r1	; 0x24
    443c:	0f c0       	rjmp	.+30     	; 0x445c <ulTaskNotifyTake+0xb4>
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
    443e:	e0 91 eb 04 	lds	r30, 0x04EB
    4442:	f0 91 ec 04 	lds	r31, 0x04EC
    4446:	81 a1       	ldd	r24, Z+33	; 0x21
    4448:	92 a1       	ldd	r25, Z+34	; 0x22
    444a:	a3 a1       	ldd	r26, Z+35	; 0x23
    444c:	b4 a1       	ldd	r27, Z+36	; 0x24
    444e:	01 97       	sbiw	r24, 0x01	; 1
    4450:	a1 09       	sbc	r26, r1
    4452:	b1 09       	sbc	r27, r1
    4454:	81 a3       	std	Z+33, r24	; 0x21
    4456:	92 a3       	std	Z+34, r25	; 0x22
    4458:	a3 a3       	std	Z+35, r26	; 0x23
    445a:	b4 a3       	std	Z+36, r27	; 0x24
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
    445c:	e0 91 eb 04 	lds	r30, 0x04EB
    4460:	f0 91 ec 04 	lds	r31, 0x04EC
    4464:	15 a2       	std	Z+37, r1	; 0x25
		}
		taskEXIT_CRITICAL();
    4466:	0f 90       	pop	r0
    4468:	0f be       	out	0x3f, r0	; 63

		return ulReturn;
	}
    446a:	b9 01       	movw	r22, r18
    446c:	ca 01       	movw	r24, r20
    446e:	df 91       	pop	r29
    4470:	cf 91       	pop	r28
    4472:	1f 91       	pop	r17
    4474:	08 95       	ret

00004476 <vTaskPlaceOnUnorderedEventList>:
	#endif /* INCLUDE_vTaskSuspend */
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
    4476:	0f 93       	push	r16
    4478:	1f 93       	push	r17
    447a:	8a 01       	movw	r16, r20
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    447c:	e0 91 eb 04 	lds	r30, 0x04EB
    4480:	f0 91 ec 04 	lds	r31, 0x04EC
    4484:	70 68       	ori	r23, 0x80	; 128
    4486:	75 87       	std	Z+13, r23	; 0x0d
    4488:	64 87       	std	Z+12, r22	; 0x0c
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    448a:	60 91 eb 04 	lds	r22, 0x04EB
    448e:	70 91 ec 04 	lds	r23, 0x04EC
    4492:	64 5f       	subi	r22, 0xF4	; 244
    4494:	7f 4f       	sbci	r23, 0xFF	; 255
    4496:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <vListInsertEnd>

	/* The task must be removed from the ready list before it is added to the
	blocked list.  Exclusive access can be assured to the ready list as the
	scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    449a:	80 91 eb 04 	lds	r24, 0x04EB
    449e:	90 91 ec 04 	lds	r25, 0x04EC
    44a2:	02 96       	adiw	r24, 0x02	; 2
    44a4:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter, the kernel
			will manage it correctly. */
			xTimeToWake = xTickCount + xTicksToWait;
    44a8:	80 91 ef 04 	lds	r24, 0x04EF
    44ac:	90 91 f0 04 	lds	r25, 0x04F0
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    44b0:	80 0f       	add	r24, r16
    44b2:	91 1f       	adc	r25, r17
    44b4:	0e 94 0b 21 	call	0x4216	; 0x4216 <prvAddCurrentTaskToDelayedList>
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    44b8:	1f 91       	pop	r17
    44ba:	0f 91       	pop	r16
    44bc:	08 95       	ret

000044be <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    44be:	0f 93       	push	r16
    44c0:	1f 93       	push	r17
    44c2:	cf 93       	push	r28
    44c4:	df 93       	push	r29
    44c6:	ec 01       	movw	r28, r24
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    44c8:	00 97       	sbiw	r24, 0x00	; 0
    44ca:	c9 f0       	breq	.+50     	; 0x44fe <vTaskDelay+0x40>
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    44cc:	80 91 ed 04 	lds	r24, 0x04ED
    44d0:	8f 5f       	subi	r24, 0xFF	; 255
    44d2:	80 93 ed 04 	sts	0x04ED, r24
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    44d6:	00 91 ef 04 	lds	r16, 0x04EF
    44da:	10 91 f0 04 	lds	r17, 0x04F0

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    44de:	80 91 eb 04 	lds	r24, 0x04EB
    44e2:	90 91 ec 04 	lds	r25, 0x04EC
    44e6:	02 96       	adiw	r24, 0x02	; 2
    44e8:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <uxListRemove>
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    44ec:	ce 01       	movw	r24, r28
    44ee:	80 0f       	add	r24, r16
    44f0:	91 1f       	adc	r25, r17
    44f2:	0e 94 0b 21 	call	0x4216	; 0x4216 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    44f6:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    44fa:	88 23       	and	r24, r24
    44fc:	11 f4       	brne	.+4      	; 0x4502 <vTaskDelay+0x44>
		{
			portYIELD_WITHIN_API();
    44fe:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    4502:	df 91       	pop	r29
    4504:	cf 91       	pop	r28
    4506:	1f 91       	pop	r17
    4508:	0f 91       	pop	r16
    450a:	08 95       	ret

0000450c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    450c:	cf 93       	push	r28
    450e:	df 93       	push	r29
    4510:	fc 01       	movw	r30, r24
    4512:	eb 01       	movw	r28, r22
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    4514:	80 91 ed 04 	lds	r24, 0x04ED
    4518:	8f 5f       	subi	r24, 0xFF	; 255
    451a:	80 93 ed 04 	sts	0x04ED, r24

		vTaskSuspendAll();
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    451e:	20 91 ef 04 	lds	r18, 0x04EF
    4522:	30 91 f0 04 	lds	r19, 0x04F0

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    4526:	80 81       	ld	r24, Z
    4528:	91 81       	ldd	r25, Z+1	; 0x01
    452a:	c8 0f       	add	r28, r24
    452c:	d9 1f       	adc	r29, r25

			if( xConstTickCount < *pxPreviousWakeTime )
    452e:	28 17       	cp	r18, r24
    4530:	39 07       	cpc	r19, r25
    4532:	28 f4       	brcc	.+10     	; 0x453e <vTaskDelayUntil+0x32>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    4534:	c8 17       	cp	r28, r24
    4536:	d9 07       	cpc	r29, r25
    4538:	28 f0       	brcs	.+10     	; 0x4544 <vTaskDelayUntil+0x38>
    453a:	80 e0       	ldi	r24, 0x00	; 0
    453c:	08 c0       	rjmp	.+16     	; 0x454e <vTaskDelayUntil+0x42>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    453e:	c8 17       	cp	r28, r24
    4540:	d9 07       	cpc	r29, r25
    4542:	20 f0       	brcs	.+8      	; 0x454c <vTaskDelayUntil+0x40>
    4544:	80 e0       	ldi	r24, 0x00	; 0
    4546:	2c 17       	cp	r18, r28
    4548:	3d 07       	cpc	r19, r29
    454a:	08 f4       	brcc	.+2      	; 0x454e <vTaskDelayUntil+0x42>
    454c:	81 e0       	ldi	r24, 0x01	; 1
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    454e:	d1 83       	std	Z+1, r29	; 0x01
    4550:	c0 83       	st	Z, r28

			if( xShouldDelay != pdFALSE )
    4552:	88 23       	and	r24, r24
    4554:	51 f0       	breq	.+20     	; 0x456a <vTaskDelayUntil+0x5e>
			{
				traceTASK_DELAY_UNTIL();

				/* Remove the task from the ready list before adding it to the
				blocked list as the same list item is used for both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    4556:	80 91 eb 04 	lds	r24, 0x04EB
    455a:	90 91 ec 04 	lds	r25, 0x04EC
    455e:	02 96       	adiw	r24, 0x02	; 2
    4560:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <uxListRemove>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4564:	ce 01       	movw	r24, r28
    4566:	0e 94 0b 21 	call	0x4216	; 0x4216 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    456a:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    456e:	88 23       	and	r24, r24
    4570:	11 f4       	brne	.+4      	; 0x4576 <vTaskDelayUntil+0x6a>
		{
			portYIELD_WITHIN_API();
    4572:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    4576:	df 91       	pop	r29
    4578:	cf 91       	pop	r28
    457a:	08 95       	ret

0000457c <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    457c:	0f 93       	push	r16
    457e:	1f 93       	push	r17
    4580:	8b 01       	movw	r16, r22

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    4582:	60 91 eb 04 	lds	r22, 0x04EB
    4586:	70 91 ec 04 	lds	r23, 0x04EC
    458a:	64 5f       	subi	r22, 0xF4	; 244
    458c:	7f 4f       	sbci	r23, 0xFF	; 255
    458e:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <vListInsert>

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    4592:	80 91 eb 04 	lds	r24, 0x04EB
    4596:	90 91 ec 04 	lds	r25, 0x04EC
    459a:	02 96       	adiw	r24, 0x02	; 2
    459c:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter, the scheduler
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
    45a0:	80 91 ef 04 	lds	r24, 0x04EF
    45a4:	90 91 f0 04 	lds	r25, 0x04F0
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    45a8:	80 0f       	add	r24, r16
    45aa:	91 1f       	adc	r25, r17
    45ac:	0e 94 0b 21 	call	0x4216	; 0x4216 <prvAddCurrentTaskToDelayedList>
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    45b0:	1f 91       	pop	r17
    45b2:	0f 91       	pop	r16
    45b4:	08 95       	ret

000045b6 <vTaskEndScheduler>:
void vTaskEndScheduler( void )
{
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    45b6:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    45b8:	10 92 f7 04 	sts	0x04F7, r1
	vPortEndScheduler();
    45bc:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <vPortEndScheduler>
}
    45c0:	08 95       	ret

000045c2 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    45c2:	0f 93       	push	r16
    45c4:	1f 93       	push	r17
    45c6:	2c c0       	rjmp	.+88     	; 0x4620 <prvIdleTask+0x5e>
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    45c8:	80 91 ed 04 	lds	r24, 0x04ED
    45cc:	8f 5f       	subi	r24, 0xFF	; 255
    45ce:	80 93 ed 04 	sts	0x04ED, r24
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    45d2:	10 91 3d 05 	lds	r17, 0x053D
			}
			( void ) xTaskResumeAll();
    45d6:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    45da:	11 23       	and	r17, r17
    45dc:	09 f1       	breq	.+66     	; 0x4620 <prvIdleTask+0x5e>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    45de:	0f b6       	in	r0, 0x3f	; 63
    45e0:	f8 94       	cli
    45e2:	0f 92       	push	r0
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    45e4:	e0 91 42 05 	lds	r30, 0x0542
    45e8:	f0 91 43 05 	lds	r31, 0x0543
    45ec:	06 81       	ldd	r16, Z+6	; 0x06
    45ee:	17 81       	ldd	r17, Z+7	; 0x07
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    45f0:	c8 01       	movw	r24, r16
    45f2:	02 96       	adiw	r24, 0x02	; 2
    45f4:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <uxListRemove>
					--uxCurrentNumberOfTasks;
    45f8:	80 91 f6 04 	lds	r24, 0x04F6
    45fc:	81 50       	subi	r24, 0x01	; 1
    45fe:	80 93 f6 04 	sts	0x04F6, r24
					--uxTasksDeleted;
    4602:	80 91 f8 04 	lds	r24, 0x04F8
    4606:	81 50       	subi	r24, 0x01	; 1
    4608:	80 93 f8 04 	sts	0x04F8, r24
				}
				taskEXIT_CRITICAL();
    460c:	0f 90       	pop	r0
    460e:	0f be       	out	0x3f, r0	; 63
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
    4610:	f8 01       	movw	r30, r16
    4612:	87 89       	ldd	r24, Z+23	; 0x17
    4614:	90 8d       	ldd	r25, Z+24	; 0x18
    4616:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <vPortFree>
		}
		#endif

		vPortFree( pxTCB );
    461a:	c8 01       	movw	r24, r16
    461c:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <vPortFree>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    4620:	80 91 f8 04 	lds	r24, 0x04F8
    4624:	88 23       	and	r24, r24
    4626:	81 f6       	brne	.-96     	; 0x45c8 <prvIdleTask+0x6>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    4628:	80 91 fa 04 	lds	r24, 0x04FA
    462c:	82 30       	cpi	r24, 0x02	; 2
    462e:	c0 f3       	brcs	.-16     	; 0x4620 <prvIdleTask+0x5e>
			{
				taskYIELD();
    4630:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <vPortYield>
    4634:	f5 cf       	rjmp	.-22     	; 0x4620 <prvIdleTask+0x5e>

00004636 <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    4636:	2f 92       	push	r2
    4638:	3f 92       	push	r3
    463a:	4f 92       	push	r4
    463c:	5f 92       	push	r5
    463e:	7f 92       	push	r7
    4640:	8f 92       	push	r8
    4642:	9f 92       	push	r9
    4644:	af 92       	push	r10
    4646:	bf 92       	push	r11
    4648:	cf 92       	push	r12
    464a:	df 92       	push	r13
    464c:	ef 92       	push	r14
    464e:	ff 92       	push	r15
    4650:	0f 93       	push	r16
    4652:	1f 93       	push	r17
    4654:	cf 93       	push	r28
    4656:	df 93       	push	r29
    4658:	1c 01       	movw	r2, r24
    465a:	96 2e       	mov	r9, r22
    465c:	87 2e       	mov	r8, r23
    465e:	5a 01       	movw	r10, r20
    4660:	29 01       	movw	r4, r18
    4662:	70 2e       	mov	r7, r16
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4664:	c1 14       	cp	r12, r1
    4666:	d1 04       	cpc	r13, r1
    4668:	31 f4       	brne	.+12     	; 0x4676 <xTaskGenericCreate+0x40>
    466a:	ca 01       	movw	r24, r20
    466c:	0e 94 21 15 	call	0x2a42	; 0x2a42 <pvPortMalloc>
    4670:	6c 01       	movw	r12, r24

		if( pxStack != NULL )
    4672:	00 97       	sbiw	r24, 0x00	; 0
    4674:	99 f0       	breq	.+38     	; 0x469c <xTaskGenericCreate+0x66>
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
    4676:	86 e2       	ldi	r24, 0x26	; 38
    4678:	90 e0       	ldi	r25, 0x00	; 0
    467a:	0e 94 21 15 	call	0x2a42	; 0x2a42 <pvPortMalloc>
    467e:	ec 01       	movw	r28, r24

			if( pxNewTCB != NULL )
    4680:	00 97       	sbiw	r24, 0x00	; 0
    4682:	49 f0       	breq	.+18     	; 0x4696 <xTaskGenericCreate+0x60>
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
    4684:	d8 8e       	std	Y+24, r13	; 0x18
    4686:	cf 8a       	std	Y+23, r12	; 0x17
    4688:	89 2d       	mov	r24, r9
    468a:	98 2d       	mov	r25, r8
    468c:	9c 01       	movw	r18, r24
    468e:	f9 01       	movw	r30, r18
    4690:	de 01       	movw	r26, r28
    4692:	90 e0       	ldi	r25, 0x00	; 0
    4694:	05 c0       	rjmp	.+10     	; 0x46a0 <xTaskGenericCreate+0x6a>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
    4696:	c6 01       	movw	r24, r12
    4698:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <vPortFree>
    469c:	8f ef       	ldi	r24, 0xFF	; 255
    469e:	b7 c0       	rjmp	.+366    	; 0x480e <xTaskGenericCreate+0x1d8>
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
    46a0:	80 81       	ld	r24, Z
    46a2:	59 96       	adiw	r26, 0x19	; 25
    46a4:	8c 93       	st	X, r24
    46a6:	59 97       	sbiw	r26, 0x19	; 25

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    46a8:	80 81       	ld	r24, Z
    46aa:	88 23       	and	r24, r24
    46ac:	29 f0       	breq	.+10     	; 0x46b8 <xTaskGenericCreate+0x82>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    46ae:	9f 5f       	subi	r25, 0xFF	; 255
    46b0:	31 96       	adiw	r30, 0x01	; 1
    46b2:	11 96       	adiw	r26, 0x01	; 1
    46b4:	98 30       	cpi	r25, 0x08	; 8
    46b6:	a1 f7       	brne	.-24     	; 0x46a0 <xTaskGenericCreate+0x6a>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    46b8:	18 a2       	std	Y+32, r1	; 0x20
    46ba:	07 2d       	mov	r16, r7
    46bc:	83 e0       	ldi	r24, 0x03	; 3
    46be:	87 15       	cp	r24, r7
    46c0:	08 f4       	brcc	.+2      	; 0x46c4 <xTaskGenericCreate+0x8e>
    46c2:	03 e0       	ldi	r16, 0x03	; 3
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
    46c4:	0e 8b       	std	Y+22, r16	; 0x16
		pxTCB->uxBasePriority = uxPriority;
		pxTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    46c6:	72 e0       	ldi	r23, 0x02	; 2
    46c8:	87 2e       	mov	r8, r23
    46ca:	91 2c       	mov	r9, r1
    46cc:	8c 0e       	add	r8, r28
    46ce:	9d 1e       	adc	r9, r29
    46d0:	c4 01       	movw	r24, r8
    46d2:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    46d6:	ce 01       	movw	r24, r28
    46d8:	0c 96       	adiw	r24, 0x0c	; 12
    46da:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    46de:	d9 87       	std	Y+9, r29	; 0x09
    46e0:	c8 87       	std	Y+8, r28	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    46e2:	84 e0       	ldi	r24, 0x04	; 4
    46e4:	90 e0       	ldi	r25, 0x00	; 0
    46e6:	80 1b       	sub	r24, r16
    46e8:	91 09       	sbc	r25, r1
    46ea:	9d 87       	std	Y+13, r25	; 0x0d
    46ec:	8c 87       	std	Y+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    46ee:	db 8b       	std	Y+19, r29	; 0x13
    46f0:	ca 8b       	std	Y+18, r28	; 0x12
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
    46f2:	19 a2       	std	Y+33, r1	; 0x21
    46f4:	1a a2       	std	Y+34, r1	; 0x22
    46f6:	1b a2       	std	Y+35, r1	; 0x23
    46f8:	1c a2       	std	Y+36, r1	; 0x24
		pxTCB->eNotifyState = eNotWaitingNotification;
    46fa:	1d a2       	std	Y+37, r1	; 0x25
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    46fc:	08 94       	sec
    46fe:	a1 08       	sbc	r10, r1
    4700:	b1 08       	sbc	r11, r1
    4702:	c6 01       	movw	r24, r12
    4704:	8a 0d       	add	r24, r10
    4706:	9b 1d       	adc	r25, r11
    4708:	b1 01       	movw	r22, r2
    470a:	a2 01       	movw	r20, r4
    470c:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <pxPortInitialiseStack>
    4710:	99 83       	std	Y+1, r25	; 0x01
    4712:	88 83       	st	Y, r24
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
    4714:	e1 14       	cp	r14, r1
    4716:	f1 04       	cpc	r15, r1
    4718:	19 f0       	breq	.+6      	; 0x4720 <xTaskGenericCreate+0xea>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    471a:	f7 01       	movw	r30, r14
    471c:	d1 83       	std	Z+1, r29	; 0x01
    471e:	c0 83       	st	Z, r28
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
    4720:	0f b6       	in	r0, 0x3f	; 63
    4722:	f8 94       	cli
    4724:	0f 92       	push	r0
		{
			uxCurrentNumberOfTasks++;
    4726:	80 91 f6 04 	lds	r24, 0x04F6
    472a:	8f 5f       	subi	r24, 0xFF	; 255
    472c:	80 93 f6 04 	sts	0x04F6, r24
			if( pxCurrentTCB == NULL )
    4730:	80 91 eb 04 	lds	r24, 0x04EB
    4734:	90 91 ec 04 	lds	r25, 0x04EC
    4738:	89 2b       	or	r24, r25
    473a:	a9 f5       	brne	.+106    	; 0x47a6 <xTaskGenericCreate+0x170>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    473c:	d0 93 ec 04 	sts	0x04EC, r29
    4740:	c0 93 eb 04 	sts	0x04EB, r28

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    4744:	80 91 f6 04 	lds	r24, 0x04F6
    4748:	81 30       	cpi	r24, 0x01	; 1
    474a:	e1 f5       	brne	.+120    	; 0x47c4 <xTaskGenericCreate+0x18e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    474c:	8a ef       	ldi	r24, 0xFA	; 250
    474e:	94 e0       	ldi	r25, 0x04	; 4
    4750:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <vListInitialise>
    4754:	83 e0       	ldi	r24, 0x03	; 3
    4756:	95 e0       	ldi	r25, 0x05	; 5
    4758:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <vListInitialise>
    475c:	8c e0       	ldi	r24, 0x0C	; 12
    475e:	95 e0       	ldi	r25, 0x05	; 5
    4760:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <vListInitialise>
    4764:	85 e1       	ldi	r24, 0x15	; 21
    4766:	95 e0       	ldi	r25, 0x05	; 5
    4768:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <vListInitialise>
	}

	vListInitialise( &xDelayedTaskList1 );
    476c:	6e e1       	ldi	r22, 0x1E	; 30
    476e:	e6 2e       	mov	r14, r22
    4770:	65 e0       	ldi	r22, 0x05	; 5
    4772:	f6 2e       	mov	r15, r22
    4774:	c7 01       	movw	r24, r14
    4776:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    477a:	07 e2       	ldi	r16, 0x27	; 39
    477c:	15 e0       	ldi	r17, 0x05	; 5
    477e:	c8 01       	movw	r24, r16
    4780:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
    4784:	84 e3       	ldi	r24, 0x34	; 52
    4786:	95 e0       	ldi	r25, 0x05	; 5
    4788:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    478c:	8d e3       	ldi	r24, 0x3D	; 61
    478e:	95 e0       	ldi	r25, 0x05	; 5
    4790:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    4794:	f0 92 31 05 	sts	0x0531, r15
    4798:	e0 92 30 05 	sts	0x0530, r14
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    479c:	10 93 33 05 	sts	0x0533, r17
    47a0:	00 93 32 05 	sts	0x0532, r16
    47a4:	0f c0       	rjmp	.+30     	; 0x47c4 <xTaskGenericCreate+0x18e>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    47a6:	80 91 f7 04 	lds	r24, 0x04F7
    47aa:	88 23       	and	r24, r24
    47ac:	59 f4       	brne	.+22     	; 0x47c4 <xTaskGenericCreate+0x18e>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    47ae:	e0 91 eb 04 	lds	r30, 0x04EB
    47b2:	f0 91 ec 04 	lds	r31, 0x04EC
    47b6:	86 89       	ldd	r24, Z+22	; 0x16
    47b8:	78 16       	cp	r7, r24
    47ba:	20 f0       	brcs	.+8      	; 0x47c4 <xTaskGenericCreate+0x18e>
					{
						pxCurrentTCB = pxNewTCB;
    47bc:	d0 93 ec 04 	sts	0x04EC, r29
    47c0:	c0 93 eb 04 	sts	0x04EB, r28
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
    47c4:	80 91 f9 04 	lds	r24, 0x04F9
    47c8:	8f 5f       	subi	r24, 0xFF	; 255
    47ca:	80 93 f9 04 	sts	0x04F9, r24
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
    47ce:	9e 89       	ldd	r25, Y+22	; 0x16
    47d0:	80 91 ee 04 	lds	r24, 0x04EE
    47d4:	89 17       	cp	r24, r25
    47d6:	10 f4       	brcc	.+4      	; 0x47dc <xTaskGenericCreate+0x1a6>
    47d8:	90 93 ee 04 	sts	0x04EE, r25
    47dc:	89 e0       	ldi	r24, 0x09	; 9
    47de:	98 9f       	mul	r25, r24
    47e0:	c0 01       	movw	r24, r0
    47e2:	11 24       	eor	r1, r1
    47e4:	86 50       	subi	r24, 0x06	; 6
    47e6:	9b 4f       	sbci	r25, 0xFB	; 251
    47e8:	b4 01       	movw	r22, r8
    47ea:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <vListInsertEnd>

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    47ee:	0f 90       	pop	r0
    47f0:	0f be       	out	0x3f, r0	; 63
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
    47f2:	80 91 f7 04 	lds	r24, 0x04F7
    47f6:	88 23       	and	r24, r24
    47f8:	49 f0       	breq	.+18     	; 0x480c <xTaskGenericCreate+0x1d6>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    47fa:	e0 91 eb 04 	lds	r30, 0x04EB
    47fe:	f0 91 ec 04 	lds	r31, 0x04EC
    4802:	86 89       	ldd	r24, Z+22	; 0x16
    4804:	87 15       	cp	r24, r7
    4806:	10 f4       	brcc	.+4      	; 0x480c <xTaskGenericCreate+0x1d6>
			{
				taskYIELD_IF_USING_PREEMPTION();
    4808:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <vPortYield>
    480c:	81 e0       	ldi	r24, 0x01	; 1
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
    480e:	df 91       	pop	r29
    4810:	cf 91       	pop	r28
    4812:	1f 91       	pop	r17
    4814:	0f 91       	pop	r16
    4816:	ff 90       	pop	r15
    4818:	ef 90       	pop	r14
    481a:	df 90       	pop	r13
    481c:	cf 90       	pop	r12
    481e:	bf 90       	pop	r11
    4820:	af 90       	pop	r10
    4822:	9f 90       	pop	r9
    4824:	8f 90       	pop	r8
    4826:	7f 90       	pop	r7
    4828:	5f 90       	pop	r5
    482a:	4f 90       	pop	r4
    482c:	3f 90       	pop	r3
    482e:	2f 90       	pop	r2
    4830:	08 95       	ret

00004832 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    4832:	af 92       	push	r10
    4834:	bf 92       	push	r11
    4836:	cf 92       	push	r12
    4838:	df 92       	push	r13
    483a:	ef 92       	push	r14
    483c:	ff 92       	push	r15
    483e:	0f 93       	push	r16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
    4840:	81 ee       	ldi	r24, 0xE1	; 225
    4842:	92 e2       	ldi	r25, 0x22	; 34
    4844:	66 e6       	ldi	r22, 0x66	; 102
    4846:	70 e0       	ldi	r23, 0x00	; 0
    4848:	44 e6       	ldi	r20, 0x64	; 100
    484a:	50 e0       	ldi	r21, 0x00	; 0
    484c:	20 e0       	ldi	r18, 0x00	; 0
    484e:	30 e0       	ldi	r19, 0x00	; 0
    4850:	00 e0       	ldi	r16, 0x00	; 0
    4852:	ee 24       	eor	r14, r14
    4854:	ff 24       	eor	r15, r15
    4856:	cc 24       	eor	r12, r12
    4858:	dd 24       	eor	r13, r13
    485a:	aa 24       	eor	r10, r10
    485c:	bb 24       	eor	r11, r11
    485e:	0e 94 1b 23 	call	0x4636	; 0x4636 <xTaskGenericCreate>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    4862:	81 30       	cpi	r24, 0x01	; 1
    4864:	81 f4       	brne	.+32     	; 0x4886 <vTaskStartScheduler+0x54>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    4866:	f8 94       	cli
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    4868:	8f ef       	ldi	r24, 0xFF	; 255
    486a:	9f ef       	ldi	r25, 0xFF	; 255
    486c:	90 93 f2 04 	sts	0x04F2, r25
    4870:	80 93 f1 04 	sts	0x04F1, r24
		xSchedulerRunning = pdTRUE;
    4874:	81 e0       	ldi	r24, 0x01	; 1
    4876:	80 93 f7 04 	sts	0x04F7, r24
		xTickCount = ( TickType_t ) 0U;
    487a:	10 92 f0 04 	sts	0x04F0, r1
    487e:	10 92 ef 04 	sts	0x04EF, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    4882:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <xPortStartScheduler>
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
    4886:	0f 91       	pop	r16
    4888:	ff 90       	pop	r15
    488a:	ef 90       	pop	r14
    488c:	df 90       	pop	r13
    488e:	cf 90       	pop	r12
    4890:	bf 90       	pop	r11
    4892:	af 90       	pop	r10
    4894:	08 95       	ret

00004896 <__mulsi3>:
    4896:	62 9f       	mul	r22, r18
    4898:	d0 01       	movw	r26, r0
    489a:	73 9f       	mul	r23, r19
    489c:	f0 01       	movw	r30, r0
    489e:	82 9f       	mul	r24, r18
    48a0:	e0 0d       	add	r30, r0
    48a2:	f1 1d       	adc	r31, r1
    48a4:	64 9f       	mul	r22, r20
    48a6:	e0 0d       	add	r30, r0
    48a8:	f1 1d       	adc	r31, r1
    48aa:	92 9f       	mul	r25, r18
    48ac:	f0 0d       	add	r31, r0
    48ae:	83 9f       	mul	r24, r19
    48b0:	f0 0d       	add	r31, r0
    48b2:	74 9f       	mul	r23, r20
    48b4:	f0 0d       	add	r31, r0
    48b6:	65 9f       	mul	r22, r21
    48b8:	f0 0d       	add	r31, r0
    48ba:	99 27       	eor	r25, r25
    48bc:	72 9f       	mul	r23, r18
    48be:	b0 0d       	add	r27, r0
    48c0:	e1 1d       	adc	r30, r1
    48c2:	f9 1f       	adc	r31, r25
    48c4:	63 9f       	mul	r22, r19
    48c6:	b0 0d       	add	r27, r0
    48c8:	e1 1d       	adc	r30, r1
    48ca:	f9 1f       	adc	r31, r25
    48cc:	bd 01       	movw	r22, r26
    48ce:	cf 01       	movw	r24, r30
    48d0:	11 24       	eor	r1, r1
    48d2:	08 95       	ret

000048d4 <__udivmodqi4>:
    48d4:	99 1b       	sub	r25, r25
    48d6:	79 e0       	ldi	r23, 0x09	; 9
    48d8:	04 c0       	rjmp	.+8      	; 0x48e2 <__udivmodqi4_ep>

000048da <__udivmodqi4_loop>:
    48da:	99 1f       	adc	r25, r25
    48dc:	96 17       	cp	r25, r22
    48de:	08 f0       	brcs	.+2      	; 0x48e2 <__udivmodqi4_ep>
    48e0:	96 1b       	sub	r25, r22

000048e2 <__udivmodqi4_ep>:
    48e2:	88 1f       	adc	r24, r24
    48e4:	7a 95       	dec	r23
    48e6:	c9 f7       	brne	.-14     	; 0x48da <__udivmodqi4_loop>
    48e8:	80 95       	com	r24
    48ea:	08 95       	ret

000048ec <__udivmodhi4>:
    48ec:	aa 1b       	sub	r26, r26
    48ee:	bb 1b       	sub	r27, r27
    48f0:	51 e1       	ldi	r21, 0x11	; 17
    48f2:	07 c0       	rjmp	.+14     	; 0x4902 <__udivmodhi4_ep>

000048f4 <__udivmodhi4_loop>:
    48f4:	aa 1f       	adc	r26, r26
    48f6:	bb 1f       	adc	r27, r27
    48f8:	a6 17       	cp	r26, r22
    48fa:	b7 07       	cpc	r27, r23
    48fc:	10 f0       	brcs	.+4      	; 0x4902 <__udivmodhi4_ep>
    48fe:	a6 1b       	sub	r26, r22
    4900:	b7 0b       	sbc	r27, r23

00004902 <__udivmodhi4_ep>:
    4902:	88 1f       	adc	r24, r24
    4904:	99 1f       	adc	r25, r25
    4906:	5a 95       	dec	r21
    4908:	a9 f7       	brne	.-22     	; 0x48f4 <__udivmodhi4_loop>
    490a:	80 95       	com	r24
    490c:	90 95       	com	r25
    490e:	bc 01       	movw	r22, r24
    4910:	cd 01       	movw	r24, r26
    4912:	08 95       	ret

00004914 <__udivmodsi4>:
    4914:	a1 e2       	ldi	r26, 0x21	; 33
    4916:	1a 2e       	mov	r1, r26
    4918:	aa 1b       	sub	r26, r26
    491a:	bb 1b       	sub	r27, r27
    491c:	fd 01       	movw	r30, r26
    491e:	0d c0       	rjmp	.+26     	; 0x493a <__udivmodsi4_ep>

00004920 <__udivmodsi4_loop>:
    4920:	aa 1f       	adc	r26, r26
    4922:	bb 1f       	adc	r27, r27
    4924:	ee 1f       	adc	r30, r30
    4926:	ff 1f       	adc	r31, r31
    4928:	a2 17       	cp	r26, r18
    492a:	b3 07       	cpc	r27, r19
    492c:	e4 07       	cpc	r30, r20
    492e:	f5 07       	cpc	r31, r21
    4930:	20 f0       	brcs	.+8      	; 0x493a <__udivmodsi4_ep>
    4932:	a2 1b       	sub	r26, r18
    4934:	b3 0b       	sbc	r27, r19
    4936:	e4 0b       	sbc	r30, r20
    4938:	f5 0b       	sbc	r31, r21

0000493a <__udivmodsi4_ep>:
    493a:	66 1f       	adc	r22, r22
    493c:	77 1f       	adc	r23, r23
    493e:	88 1f       	adc	r24, r24
    4940:	99 1f       	adc	r25, r25
    4942:	1a 94       	dec	r1
    4944:	69 f7       	brne	.-38     	; 0x4920 <__udivmodsi4_loop>
    4946:	60 95       	com	r22
    4948:	70 95       	com	r23
    494a:	80 95       	com	r24
    494c:	90 95       	com	r25
    494e:	9b 01       	movw	r18, r22
    4950:	ac 01       	movw	r20, r24
    4952:	bd 01       	movw	r22, r26
    4954:	cf 01       	movw	r24, r30
    4956:	08 95       	ret

00004958 <__divmodsi4>:
    4958:	97 fb       	bst	r25, 7
    495a:	09 2e       	mov	r0, r25
    495c:	05 26       	eor	r0, r21
    495e:	0e d0       	rcall	.+28     	; 0x497c <__divmodsi4_neg1>
    4960:	57 fd       	sbrc	r21, 7
    4962:	04 d0       	rcall	.+8      	; 0x496c <__divmodsi4_neg2>
    4964:	d7 df       	rcall	.-82     	; 0x4914 <__udivmodsi4>
    4966:	0a d0       	rcall	.+20     	; 0x497c <__divmodsi4_neg1>
    4968:	00 1c       	adc	r0, r0
    496a:	38 f4       	brcc	.+14     	; 0x497a <__divmodsi4_exit>

0000496c <__divmodsi4_neg2>:
    496c:	50 95       	com	r21
    496e:	40 95       	com	r20
    4970:	30 95       	com	r19
    4972:	21 95       	neg	r18
    4974:	3f 4f       	sbci	r19, 0xFF	; 255
    4976:	4f 4f       	sbci	r20, 0xFF	; 255
    4978:	5f 4f       	sbci	r21, 0xFF	; 255

0000497a <__divmodsi4_exit>:
    497a:	08 95       	ret

0000497c <__divmodsi4_neg1>:
    497c:	f6 f7       	brtc	.-4      	; 0x497a <__divmodsi4_exit>
    497e:	90 95       	com	r25
    4980:	80 95       	com	r24
    4982:	70 95       	com	r23
    4984:	61 95       	neg	r22
    4986:	7f 4f       	sbci	r23, 0xFF	; 255
    4988:	8f 4f       	sbci	r24, 0xFF	; 255
    498a:	9f 4f       	sbci	r25, 0xFF	; 255
    498c:	08 95       	ret

0000498e <memcpy>:
    498e:	fb 01       	movw	r30, r22
    4990:	dc 01       	movw	r26, r24
    4992:	02 c0       	rjmp	.+4      	; 0x4998 <memcpy+0xa>
    4994:	01 90       	ld	r0, Z+
    4996:	0d 92       	st	X+, r0
    4998:	41 50       	subi	r20, 0x01	; 1
    499a:	50 40       	sbci	r21, 0x00	; 0
    499c:	d8 f7       	brcc	.-10     	; 0x4994 <memcpy+0x6>
    499e:	08 95       	ret

000049a0 <__eerd_byte_m32>:
    49a0:	e1 99       	sbic	0x1c, 1	; 28
    49a2:	fe cf       	rjmp	.-4      	; 0x49a0 <__eerd_byte_m32>
    49a4:	9f bb       	out	0x1f, r25	; 31
    49a6:	8e bb       	out	0x1e, r24	; 30
    49a8:	e0 9a       	sbi	0x1c, 0	; 28
    49aa:	99 27       	eor	r25, r25
    49ac:	8d b3       	in	r24, 0x1d	; 29
    49ae:	08 95       	ret

000049b0 <_exit>:
    49b0:	f8 94       	cli

000049b2 <__stop_program>:
    49b2:	ff cf       	rjmp	.-2      	; 0x49b2 <__stop_program>
