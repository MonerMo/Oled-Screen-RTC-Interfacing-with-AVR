
Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003002  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000072  00800060  00003002  00003096  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001f  008000d2  008000d2  00003108  2**0
                  ALLOC
  3 .stab         00006d74  00000000  00000000  00003108  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000211d  00000000  00000000  00009e7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e0       	ldi	r30, 0x02	; 2
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3d       	cpi	r26, 0xD2	; 210
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 ed       	ldi	r26, 0xD2	; 210
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3f       	cpi	r26, 0xF1	; 241
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <main>
      8a:	0c 94 ff 17 	jmp	0x2ffe	; 0x2ffe <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_Init>:

#include "ADC.h"

void ADC_Init(uint8 ADC_NUM){

	switch(ADC_NUM){
      92:	83 30       	cpi	r24, 0x03	; 3
      94:	b9 f0       	breq	.+46     	; 0xc4 <ADC_Init+0x32>
      96:	84 30       	cpi	r24, 0x04	; 4
      98:	28 f4       	brcc	.+10     	; 0xa4 <ADC_Init+0x12>
      9a:	81 30       	cpi	r24, 0x01	; 1
      9c:	71 f0       	breq	.+28     	; 0xba <ADC_Init+0x28>
      9e:	82 30       	cpi	r24, 0x02	; 2
      a0:	78 f4       	brcc	.+30     	; 0xc0 <ADC_Init+0x2e>
      a2:	09 c0       	rjmp	.+18     	; 0xb6 <ADC_Init+0x24>
      a4:	85 30       	cpi	r24, 0x05	; 5
      a6:	a1 f0       	breq	.+40     	; 0xd0 <ADC_Init+0x3e>
      a8:	85 30       	cpi	r24, 0x05	; 5
      aa:	80 f0       	brcs	.+32     	; 0xcc <ADC_Init+0x3a>
      ac:	86 30       	cpi	r24, 0x06	; 6
      ae:	99 f0       	breq	.+38     	; 0xd6 <ADC_Init+0x44>
      b0:	87 30       	cpi	r24, 0x07	; 7
      b2:	b1 f4       	brne	.+44     	; 0xe0 <ADC_Init+0x4e>
      b4:	12 c0       	rjmp	.+36     	; 0xda <ADC_Init+0x48>
		case ADC_0:
		CLR_BIT(ADMUX,0);
      b6:	38 98       	cbi	0x07, 0	; 7
      b8:	01 c0       	rjmp	.+2      	; 0xbc <ADC_Init+0x2a>
		CLR_BIT(ADMUX,1);
		CLR_BIT(ADMUX,2);
		break;

		case ADC_1:
		SET_BIT(ADMUX,0);
      ba:	38 9a       	sbi	0x07, 0	; 7
		CLR_BIT(ADMUX,1);
      bc:	39 98       	cbi	0x07, 1	; 7
      be:	04 c0       	rjmp	.+8      	; 0xc8 <ADC_Init+0x36>
		CLR_BIT(ADMUX,2);
		break;

		case ADC_2:
		CLR_BIT(ADMUX,0);
      c0:	38 98       	cbi	0x07, 0	; 7
      c2:	01 c0       	rjmp	.+2      	; 0xc6 <ADC_Init+0x34>
		SET_BIT(ADMUX,1);
		CLR_BIT(ADMUX,2);
		break;

		case ADC_3:
		SET_BIT(ADMUX,0);
      c4:	38 9a       	sbi	0x07, 0	; 7
		SET_BIT(ADMUX,1);
      c6:	39 9a       	sbi	0x07, 1	; 7
		CLR_BIT(ADMUX,2);
      c8:	3a 98       	cbi	0x07, 2	; 7
      ca:	0a c0       	rjmp	.+20     	; 0xe0 <ADC_Init+0x4e>
		break;

		case ADC_4:
		CLR_BIT(ADMUX,0);
      cc:	38 98       	cbi	0x07, 0	; 7
      ce:	01 c0       	rjmp	.+2      	; 0xd2 <ADC_Init+0x40>
		CLR_BIT(ADMUX,1);
		SET_BIT(ADMUX,2);
		break;

		case ADC_5:
		SET_BIT(ADMUX,0);
      d0:	38 9a       	sbi	0x07, 0	; 7
		CLR_BIT(ADMUX,1);
      d2:	39 98       	cbi	0x07, 1	; 7
      d4:	04 c0       	rjmp	.+8      	; 0xde <ADC_Init+0x4c>
		SET_BIT(ADMUX,2);
		break;

		case ADC_6:
		CLR_BIT(ADMUX,0);
      d6:	38 98       	cbi	0x07, 0	; 7
      d8:	01 c0       	rjmp	.+2      	; 0xdc <ADC_Init+0x4a>
		SET_BIT(ADMUX,1);
		SET_BIT(ADMUX,2);
		break;

		case ADC_7:
		SET_BIT(ADMUX,0);
      da:	38 9a       	sbi	0x07, 0	; 7
		SET_BIT(ADMUX,1);
      dc:	39 9a       	sbi	0x07, 1	; 7
		SET_BIT(ADMUX,2);
      de:	3a 9a       	sbi	0x07, 2	; 7
	case AREF_PIN:
		CLR_BIT(ADMUX,6);
		CLR_BIT(ADMUX,7);
		break;
	case AVCC_PIN:
		SET_BIT(ADMUX,6);
      e0:	3e 9a       	sbi	0x07, 6	; 7
		CLR_BIT(ADMUX,7);
      e2:	3f 98       	cbi	0x07, 7	; 7
			CLR_BIT(ADCSRA,1);
			SET_BIT(ADCSRA,2);
			break;

	case DIVIDE_BY_64 :
			CLR_BIT(ADCSRA,0);
      e4:	30 98       	cbi	0x06, 0	; 6
			SET_BIT(ADCSRA,1);
      e6:	31 9a       	sbi	0x06, 1	; 6
			SET_BIT(ADCSRA,2);
      e8:	32 9a       	sbi	0x06, 2	; 6
		//In this mode you need to enable conversion each time
		break;

	case AUTO_TRIGGER:
		//you enable it once
		SET_BIT(ADCSRA,5);
      ea:	35 9a       	sbi	0x06, 5	; 6
	}


	switch(ADC_ADJUST_MODE){
	case ADC_RIGHT_ADJUST:
		CLR_BIT(ADMUX,5);
      ec:	3d 98       	cbi	0x07, 5	; 7
		SET_BIT(ADMUX,5);
		break;
	}

	//Enable ADC
	SET_BIT(ADCSRA,7);
      ee:	37 9a       	sbi	0x06, 7	; 6

}
      f0:	08 95       	ret

000000f2 <ADC_Read>:


uint16 ADC_Read(void){
//first start conversion and wait until ADC finishes conversion
	//1.Start conversion
	SET_BIT(ADCSRA, 6);
      f2:	36 9a       	sbi	0x06, 6	; 6
	//2.wait until Data Registers are updated
	while( GET_BIT(ADCSRA,4) == 0);
      f4:	34 9b       	sbis	0x06, 4	; 6
      f6:	fe cf       	rjmp	.-4      	; 0xf4 <ADC_Read+0x2>


	uint16 value = ADC_D_VAL ;
      f8:	24 b1       	in	r18, 0x04	; 4
      fa:	35 b1       	in	r19, 0x05	; 5


	return value ;

}
      fc:	c9 01       	movw	r24, r18
      fe:	08 95       	ret

00000100 <is_it_leap_year>:
	number /= 10 ;
	digit = number % 10 ;
	number_write(page_num,col_num,digit);
}
/*********************************************************************/
uint8 is_it_leap_year(uint16 year){
     100:	9c 01       	movw	r18, r24
	uint8 holder = year % 10 ;
     102:	6a e0       	ldi	r22, 0x0A	; 10
     104:	70 e0       	ldi	r23, 0x00	; 0
     106:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__udivmodhi4>
     10a:	e8 2f       	mov	r30, r24
     10c:	40 e0       	ldi	r20, 0x00	; 0
     10e:	c9 01       	movw	r24, r18
     110:	6a e0       	ldi	r22, 0x0A	; 10
     112:	70 e0       	ldi	r23, 0x00	; 0
     114:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__udivmodhi4>
     118:	cb 01       	movw	r24, r22
     11a:	6a e0       	ldi	r22, 0x0A	; 10
     11c:	70 e0       	ldi	r23, 0x00	; 0
     11e:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__udivmodhi4>
     122:	9c 01       	movw	r18, r24
     124:	63 e0       	ldi	r22, 0x03	; 3
     126:	88 0f       	add	r24, r24
     128:	99 1f       	adc	r25, r25
     12a:	6a 95       	dec	r22
     12c:	e1 f7       	brne	.-8      	; 0x126 <is_it_leap_year+0x26>
     12e:	22 0f       	add	r18, r18
     130:	33 1f       	adc	r19, r19
     132:	82 0f       	add	r24, r18
     134:	93 1f       	adc	r25, r19
     136:	e8 0f       	add	r30, r24
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	e3 70       	andi	r30, 0x03	; 3
     13c:	f0 70       	andi	r31, 0x00	; 0
     13e:	ef 2b       	or	r30, r31
     140:	09 f4       	brne	.+2      	; 0x144 <is_it_leap_year+0x44>
     142:	41 e0       	ldi	r20, 0x01	; 1
	if(holder % 4 == 0){
		return 1 ; //it is leap year.
	}else{
		return 0 ; //it is not a leap year.
	}
}
     144:	84 2f       	mov	r24, r20
     146:	08 95       	ret

00000148 <dec_to_bcd>:
	for(uint8 letter_index = 0 ; letter_index < 3 ; letter_index++){
		letter_write(2,((letter_index*7)+97),ptr[day_name_track][letter_index]) ;
	}
}
/*********************************************************************/
uint8 dec_to_bcd(uint8 dec){
     148:	48 2f       	mov	r20, r24
	uint8 digit = dec % 10 ;
	dec /= 10 ;
	digit = ( dec << 4 ) | digit ;
     14a:	6a e0       	ldi	r22, 0x0A	; 10
     14c:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <__udivmodqi4>
     150:	28 2f       	mov	r18, r24
     152:	30 e0       	ldi	r19, 0x00	; 0
     154:	74 e0       	ldi	r23, 0x04	; 4
     156:	22 0f       	add	r18, r18
     158:	33 1f       	adc	r19, r19
     15a:	7a 95       	dec	r23
     15c:	e1 f7       	brne	.-8      	; 0x156 <dec_to_bcd+0xe>
     15e:	84 2f       	mov	r24, r20
     160:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <__udivmodqi4>
	return digit ;
}
     164:	89 2f       	mov	r24, r25
     166:	82 2b       	or	r24, r18
     168:	08 95       	ret

0000016a <bcd_to_dec>:

	}
	return 1 ;
}
/*********************************************************************/
uint8 bcd_to_dec(uint8 bcd){
     16a:	98 2f       	mov	r25, r24
	uint8 tens = (bcd >> 4) * 10 ;
     16c:	82 95       	swap	r24
     16e:	8f 70       	andi	r24, 0x0F	; 15
     170:	2a e0       	ldi	r18, 0x0A	; 10
     172:	82 9f       	mul	r24, r18
     174:	80 2d       	mov	r24, r0
     176:	11 24       	eor	r1, r1
     178:	9f 70       	andi	r25, 0x0F	; 15
	tens = tens + (bcd & 0b00001111) ;
	return tens ;
}
     17a:	89 0f       	add	r24, r25
     17c:	08 95       	ret

0000017e <system_set>:
	I2C_Write(0xFF);
	I2C_Stop();
}
/****************************************************************************/
void system_set(void){
	I2C_Init();
     17e:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <I2C_Init>
	I2C_Start(0b10101010);
     182:	8a ea       	ldi	r24, 0xAA	; 170
     184:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
	//For the address of the boot check byte = 0x1F8
	I2C_Write(0xF8);
     188:	88 ef       	ldi	r24, 0xF8	; 248
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
	I2C_Write(0x01);
     190:	81 e0       	ldi	r24, 0x01	; 1
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
	I2C_Stop();
     198:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>
}
     19c:	08 95       	ret

0000019e <system_reset>:
	return boot_byte ;
}

/****************************************************************************/
void system_reset(void){
	I2C_Init();
     19e:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <I2C_Init>
	I2C_Start(0b10101010);
     1a2:	8a ea       	ldi	r24, 0xAA	; 170
     1a4:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
	//For the address of the boot check byte = 0x1F8
	I2C_Write(0xF8);
     1a8:	88 ef       	ldi	r24, 0xF8	; 248
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
	I2C_Write(0xFF);
     1b0:	8f ef       	ldi	r24, 0xFF	; 255
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
	I2C_Stop();
     1b8:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>
}
     1bc:	08 95       	ret

000001be <boot_check>:
	}

	I2C_Stop();
}
/*******************************************************************/
uint8 boot_check(void){
     1be:	1f 93       	push	r17
	/*Initiate the communication to eeprom*/
	I2C_Init();
     1c0:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <I2C_Init>
	I2C_Start(0b10101010);
     1c4:	8a ea       	ldi	r24, 0xAA	; 170
     1c6:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
	/*For the address of the boot check byte = 0x1F8*/
	I2C_Write(0xF8);
     1ca:	88 ef       	ldi	r24, 0xF8	; 248
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
	/*now we want to re-initiate the communication again to read mode*/
	I2C_Repeated_Start(0b10101011);
     1d2:	8b ea       	ldi	r24, 0xAB	; 171
     1d4:	0e 94 9b 11 	call	0x2336	; 0x2336 <I2C_Repeated_Start>
	/*read the boot_byte mode if 0xFF---->first time booting if 0x01---->already booted up before.*/
	uint8 boot_byte = I2C_Read_NACK();
     1d8:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <I2C_Read_NACK>
     1dc:	18 2f       	mov	r17, r24
	I2C_Stop();
     1de:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>
	return boot_byte ;
}
     1e2:	81 2f       	mov	r24, r17
     1e4:	1f 91       	pop	r17
     1e6:	08 95       	ret

000001e8 <lamp_on_off>:

/*********************************************************************/
void lamp_on_off(void){
	static uint8 status = 0 ;

	if(status == 0){
     1e8:	80 91 d7 00 	lds	r24, 0x00D7
     1ec:	88 23       	and	r24, r24
     1ee:	49 f4       	brne	.+18     	; 0x202 <lamp_on_off+0x1a>
		DIO_SetPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_VAL_HIGH);
     1f0:	82 e0       	ldi	r24, 0x02	; 2
     1f2:	67 e0       	ldi	r22, 0x07	; 7
     1f4:	41 e0       	ldi	r20, 0x01	; 1
     1f6:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <DIO_SetPinValue>
		status = 1;
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	80 93 d7 00 	sts	0x00D7, r24
     200:	08 95       	ret
	}else if(status){
		DIO_SetPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_VAL_LOW);
     202:	82 e0       	ldi	r24, 0x02	; 2
     204:	67 e0       	ldi	r22, 0x07	; 7
     206:	40 e0       	ldi	r20, 0x00	; 0
     208:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <DIO_SetPinValue>
		status = 0;
     20c:	10 92 d7 00 	sts	0x00D7, r1
     210:	08 95       	ret

00000212 <black_entire_screen>:



}
/*********************************************************************/
void black_entire_screen(void){
     212:	1f 93       	push	r17
     214:	cf 93       	push	r28
     216:	df 93       	push	r29
     218:	10 e0       	ldi	r17, 0x00	; 0
	//WE WANT TO BLACK OUT THE ENTIRE SCREEN

	for(int i = 0 ; i <= 7 ; i++){
		setColumnAddress(0,128);
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	60 e8       	ldi	r22, 0x80	; 128
     21e:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setColumnAddress>
		setPageAddress(i,7);
     222:	81 2f       	mov	r24, r17
     224:	67 e0       	ldi	r22, 0x07	; 7
     226:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <setPageAddress>
		I2C_Start(oled_write_address);
     22a:	8a e7       	ldi	r24, 0x7A	; 122
     22c:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
		I2C_Write(CONTROL_DATA);
     230:	80 e4       	ldi	r24, 0x40	; 64
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
     238:	c0 e0       	ldi	r28, 0x00	; 0
     23a:	d0 e0       	ldi	r29, 0x00	; 0
		for(int i = 0 ; i < 128 ; i++){
			I2C_Write(0x00);
     23c:	80 e0       	ldi	r24, 0x00	; 0
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
	for(int i = 0 ; i <= 7 ; i++){
		setColumnAddress(0,128);
		setPageAddress(i,7);
		I2C_Start(oled_write_address);
		I2C_Write(CONTROL_DATA);
		for(int i = 0 ; i < 128 ; i++){
     244:	21 96       	adiw	r28, 0x01	; 1
     246:	c0 38       	cpi	r28, 0x80	; 128
     248:	d1 05       	cpc	r29, r1
     24a:	c1 f7       	brne	.-16     	; 0x23c <black_entire_screen+0x2a>
			I2C_Write(0x00);
		}
		I2C_Stop();
     24c:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>
     250:	1f 5f       	subi	r17, 0xFF	; 255
}
/*********************************************************************/
void black_entire_screen(void){
	//WE WANT TO BLACK OUT THE ENTIRE SCREEN

	for(int i = 0 ; i <= 7 ; i++){
     252:	18 30       	cpi	r17, 0x08	; 8
     254:	11 f7       	brne	.-60     	; 0x21a <black_entire_screen+0x8>
		for(int i = 0 ; i < 128 ; i++){
			I2C_Write(0x00);
		}
		I2C_Stop();
	}
}
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	1f 91       	pop	r17
     25c:	08 95       	ret

0000025e <color_choice_white>:
		}
		I2C_Stop();
	}
}
/*********************************************************************/
void color_choice_white(uint8 number_of_choice){
     25e:	3f 92       	push	r3
     260:	4f 92       	push	r4
     262:	5f 92       	push	r5
     264:	6f 92       	push	r6
     266:	7f 92       	push	r7
     268:	8f 92       	push	r8
     26a:	9f 92       	push	r9
     26c:	af 92       	push	r10
     26e:	bf 92       	push	r11
     270:	cf 92       	push	r12
     272:	df 92       	push	r13
     274:	ef 92       	push	r14
     276:	ff 92       	push	r15
     278:	0f 93       	push	r16
     27a:	1f 93       	push	r17
     27c:	df 93       	push	r29
     27e:	cf 93       	push	r28
     280:	cd b7       	in	r28, 0x3d	; 61
     282:	de b7       	in	r29, 0x3e	; 62
     284:	28 97       	sbiw	r28, 0x08	; 8
     286:	0f b6       	in	r0, 0x3f	; 63
     288:	f8 94       	cli
     28a:	de bf       	out	0x3e, r29	; 62
     28c:	0f be       	out	0x3f, r0	; 63
     28e:	cd bf       	out	0x3d, r28	; 61
	//color either 0----> black , 1---->white
	//we have 3 choices , 1---->study timer , 2---->clock , 3---->lamp on/off

	sint8 starting_page = choice_page_index[number_of_choice];
     290:	e8 2f       	mov	r30, r24
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	e9 56       	subi	r30, 0x69	; 105
     296:	ff 4f       	sbci	r31, 0xFF	; 255
     298:	30 80       	ld	r3, Z
		}
		I2C_Stop();
	}
}
/*********************************************************************/
void color_choice_white(uint8 number_of_choice){
     29a:	83 2d       	mov	r24, r3
     29c:	99 27       	eor	r25, r25
     29e:	87 fd       	sbrc	r24, 7
     2a0:	90 95       	com	r25
     2a2:	a7 e0       	ldi	r26, 0x07	; 7
     2a4:	ca 2e       	mov	r12, r26
     2a6:	d1 2c       	mov	r13, r1
     2a8:	c8 1a       	sub	r12, r24
     2aa:	d9 0a       	sbc	r13, r25
     2ac:	d6 94       	lsr	r13
     2ae:	dc 2c       	mov	r13, r12
     2b0:	cc 24       	eor	r12, r12
     2b2:	d7 94       	ror	r13
     2b4:	c7 94       	ror	r12
     2b6:	46 01       	movw	r8, r12
     2b8:	aa 24       	eor	r10, r10
     2ba:	97 fc       	sbrc	r9, 7
     2bc:	a0 94       	com	r10
     2be:	ba 2c       	mov	r11, r10
     2c0:	1a 82       	std	Y+2, r1	; 0x02
     2c2:	19 82       	std	Y+1, r1	; 0x01
	sint8 starting_page = choice_page_index[number_of_choice];
	uint8 ending_page = starting_page-1;



	for(; starting_page >= ending_page ;starting_page--){
     2c4:	9c 83       	std	Y+4, r25	; 0x04
     2c6:	8b 83       	std	Y+3, r24	; 0x03
void color_choice_white(uint8 number_of_choice){
	//color either 0----> black , 1---->white
	//we have 3 choices , 1---->study timer , 2---->clock , 3---->lamp on/off

	sint8 starting_page = choice_page_index[number_of_choice];
	uint8 ending_page = starting_page-1;
     2c8:	3a 94       	dec	r3



	for(; starting_page >= ending_page ;starting_page--){
     2ca:	23 2d       	mov	r18, r3
     2cc:	30 e0       	ldi	r19, 0x00	; 0
     2ce:	3e 83       	std	Y+6, r19	; 0x06
     2d0:	2d 83       	std	Y+5, r18	; 0x05
     2d2:	33 94       	inc	r3
     2d4:	4c c0       	rjmp	.+152    	; 0x36e <color_choice_white+0x110>
		setColumnAddress(0,127);
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	6f e7       	ldi	r22, 0x7F	; 127
     2da:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setColumnAddress>
		setPageAddress(starting_page,7);
     2de:	83 2d       	mov	r24, r3
     2e0:	39 81       	ldd	r19, Y+1	; 0x01
     2e2:	83 1b       	sub	r24, r19
     2e4:	67 e0       	ldi	r22, 0x07	; 7
     2e6:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <setPageAddress>
		I2C_Init();
     2ea:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <I2C_Init>
		I2C_Start(oled_write_address);
     2ee:	8a e7       	ldi	r24, 0x7A	; 122
     2f0:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
		I2C_Write(CONTROL_DATA);
     2f4:	80 e4       	ldi	r24, 0x40	; 64
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
     2fc:	ef e7       	ldi	r30, 0x7F	; 127
     2fe:	4e 2e       	mov	r4, r30
     300:	51 2c       	mov	r5, r1
     302:	61 2c       	mov	r6, r1
     304:	71 2c       	mov	r7, r1
     306:	48 0c       	add	r4, r8
     308:	59 1c       	adc	r5, r9
     30a:	6a 1c       	adc	r6, r10
     30c:	7b 1c       	adc	r7, r11
     30e:	85 01       	movw	r16, r10
     310:	74 01       	movw	r14, r8
     312:	d8 86       	std	Y+8, r13	; 0x08
     314:	cf 82       	std	Y+7, r12	; 0x07
     316:	13 c0       	rjmp	.+38     	; 0x33e <color_choice_white+0xe0>
		uint32 end_byte_index = start_byte_index + 127 ;


		//this means black the choice
		for(;start_byte_index < end_byte_index ; start_byte_index++){
			I2C_Write(~(eeprom_read_byte(start_byte_index)));
     318:	8f 81       	ldd	r24, Y+7	; 0x07
     31a:	98 85       	ldd	r25, Y+8	; 0x08
     31c:	0e 94 f7 17 	call	0x2fee	; 0x2fee <__eerd_byte_m32>
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	80 95       	com	r24
     324:	90 95       	com	r25
     326:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
		//end byte to write
		uint32 end_byte_index = start_byte_index + 127 ;


		//this means black the choice
		for(;start_byte_index < end_byte_index ; start_byte_index++){
     32a:	08 94       	sec
     32c:	e1 1c       	adc	r14, r1
     32e:	f1 1c       	adc	r15, r1
     330:	01 1d       	adc	r16, r1
     332:	11 1d       	adc	r17, r1
     334:	8f 81       	ldd	r24, Y+7	; 0x07
     336:	98 85       	ldd	r25, Y+8	; 0x08
     338:	01 96       	adiw	r24, 0x01	; 1
     33a:	98 87       	std	Y+8, r25	; 0x08
     33c:	8f 83       	std	Y+7, r24	; 0x07
     33e:	e4 14       	cp	r14, r4
     340:	f5 04       	cpc	r15, r5
     342:	06 05       	cpc	r16, r6
     344:	17 05       	cpc	r17, r7
     346:	40 f3       	brcs	.-48     	; 0x318 <color_choice_white+0xba>
			I2C_Write(~(eeprom_read_byte(start_byte_index)));
		}
		I2C_Stop();
     348:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>
     34c:	a9 81       	ldd	r26, Y+1	; 0x01
     34e:	ba 81       	ldd	r27, Y+2	; 0x02
     350:	11 96       	adiw	r26, 0x01	; 1
     352:	ba 83       	std	Y+2, r27	; 0x02
     354:	a9 83       	std	Y+1, r26	; 0x01
     356:	e0 e8       	ldi	r30, 0x80	; 128
     358:	f0 e0       	ldi	r31, 0x00	; 0
     35a:	ce 0e       	add	r12, r30
     35c:	df 1e       	adc	r13, r31
     35e:	80 e8       	ldi	r24, 0x80	; 128
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	a0 e0       	ldi	r26, 0x00	; 0
     364:	b0 e0       	ldi	r27, 0x00	; 0
     366:	88 0e       	add	r8, r24
     368:	99 1e       	adc	r9, r25
     36a:	aa 1e       	adc	r10, r26
     36c:	bb 1e       	adc	r11, r27
	sint8 starting_page = choice_page_index[number_of_choice];
	uint8 ending_page = starting_page-1;



	for(; starting_page >= ending_page ;starting_page--){
     36e:	8b 81       	ldd	r24, Y+3	; 0x03
     370:	9c 81       	ldd	r25, Y+4	; 0x04
     372:	a9 81       	ldd	r26, Y+1	; 0x01
     374:	ba 81       	ldd	r27, Y+2	; 0x02
     376:	8a 1b       	sub	r24, r26
     378:	9b 0b       	sbc	r25, r27
     37a:	ed 81       	ldd	r30, Y+5	; 0x05
     37c:	fe 81       	ldd	r31, Y+6	; 0x06
     37e:	8e 17       	cp	r24, r30
     380:	9f 07       	cpc	r25, r31
     382:	0c f0       	brlt	.+2      	; 0x386 <color_choice_white+0x128>
     384:	a8 cf       	rjmp	.-176    	; 0x2d6 <color_choice_white+0x78>
		for(;start_byte_index < end_byte_index ; start_byte_index++){
			I2C_Write(~(eeprom_read_byte(start_byte_index)));
		}
		I2C_Stop();
	}
}
     386:	28 96       	adiw	r28, 0x08	; 8
     388:	0f b6       	in	r0, 0x3f	; 63
     38a:	f8 94       	cli
     38c:	de bf       	out	0x3e, r29	; 62
     38e:	0f be       	out	0x3f, r0	; 63
     390:	cd bf       	out	0x3d, r28	; 61
     392:	cf 91       	pop	r28
     394:	df 91       	pop	r29
     396:	1f 91       	pop	r17
     398:	0f 91       	pop	r16
     39a:	ff 90       	pop	r15
     39c:	ef 90       	pop	r14
     39e:	df 90       	pop	r13
     3a0:	cf 90       	pop	r12
     3a2:	bf 90       	pop	r11
     3a4:	af 90       	pop	r10
     3a6:	9f 90       	pop	r9
     3a8:	8f 90       	pop	r8
     3aa:	7f 90       	pop	r7
     3ac:	6f 90       	pop	r6
     3ae:	5f 90       	pop	r5
     3b0:	4f 90       	pop	r4
     3b2:	3f 90       	pop	r3
     3b4:	08 95       	ret

000003b6 <color_choice_black>:
		I2C_Stop();
	}
}
/*********************************************************************/
uint8 choice_page_index[4] = {0 , 5 , 3 , 1};
void color_choice_black(uint8 number_of_choice){
     3b6:	3f 92       	push	r3
     3b8:	4f 92       	push	r4
     3ba:	5f 92       	push	r5
     3bc:	6f 92       	push	r6
     3be:	7f 92       	push	r7
     3c0:	8f 92       	push	r8
     3c2:	9f 92       	push	r9
     3c4:	af 92       	push	r10
     3c6:	bf 92       	push	r11
     3c8:	cf 92       	push	r12
     3ca:	df 92       	push	r13
     3cc:	ef 92       	push	r14
     3ce:	ff 92       	push	r15
     3d0:	0f 93       	push	r16
     3d2:	1f 93       	push	r17
     3d4:	df 93       	push	r29
     3d6:	cf 93       	push	r28
     3d8:	cd b7       	in	r28, 0x3d	; 61
     3da:	de b7       	in	r29, 0x3e	; 62
     3dc:	28 97       	sbiw	r28, 0x08	; 8
     3de:	0f b6       	in	r0, 0x3f	; 63
     3e0:	f8 94       	cli
     3e2:	de bf       	out	0x3e, r29	; 62
     3e4:	0f be       	out	0x3f, r0	; 63
     3e6:	cd bf       	out	0x3d, r28	; 61
	//color either 0----> black , 1---->white
	//we have 3 choices , 1---->study timer , 2---->clock , 3---->lamp on/off

	sint8 starting_page = choice_page_index[number_of_choice];
     3e8:	e8 2f       	mov	r30, r24
     3ea:	f0 e0       	ldi	r31, 0x00	; 0
     3ec:	e9 56       	subi	r30, 0x69	; 105
     3ee:	ff 4f       	sbci	r31, 0xFF	; 255
     3f0:	30 80       	ld	r3, Z
		I2C_Stop();
	}
}
/*********************************************************************/
uint8 choice_page_index[4] = {0 , 5 , 3 , 1};
void color_choice_black(uint8 number_of_choice){
     3f2:	83 2d       	mov	r24, r3
     3f4:	99 27       	eor	r25, r25
     3f6:	87 fd       	sbrc	r24, 7
     3f8:	90 95       	com	r25
     3fa:	07 e0       	ldi	r16, 0x07	; 7
     3fc:	c0 2e       	mov	r12, r16
     3fe:	d1 2c       	mov	r13, r1
     400:	c8 1a       	sub	r12, r24
     402:	d9 0a       	sbc	r13, r25
     404:	d6 94       	lsr	r13
     406:	dc 2c       	mov	r13, r12
     408:	cc 24       	eor	r12, r12
     40a:	d7 94       	ror	r13
     40c:	c7 94       	ror	r12
     40e:	46 01       	movw	r8, r12
     410:	aa 24       	eor	r10, r10
     412:	97 fc       	sbrc	r9, 7
     414:	a0 94       	com	r10
     416:	ba 2c       	mov	r11, r10
     418:	1a 82       	std	Y+2, r1	; 0x02
     41a:	19 82       	std	Y+1, r1	; 0x01
	sint8 starting_page = choice_page_index[number_of_choice];
	uint8 ending_page = starting_page-1;



	for(; starting_page >= ending_page ;starting_page--){
     41c:	9c 83       	std	Y+4, r25	; 0x04
     41e:	8b 83       	std	Y+3, r24	; 0x03
void color_choice_black(uint8 number_of_choice){
	//color either 0----> black , 1---->white
	//we have 3 choices , 1---->study timer , 2---->clock , 3---->lamp on/off

	sint8 starting_page = choice_page_index[number_of_choice];
	uint8 ending_page = starting_page-1;
     420:	3a 94       	dec	r3



	for(; starting_page >= ending_page ;starting_page--){
     422:	23 2d       	mov	r18, r3
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	3e 83       	std	Y+6, r19	; 0x06
     428:	2d 83       	std	Y+5, r18	; 0x05
     42a:	33 94       	inc	r3
     42c:	4a c0       	rjmp	.+148    	; 0x4c2 <color_choice_black+0x10c>
		setColumnAddress(0,127);
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	6f e7       	ldi	r22, 0x7F	; 127
     432:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setColumnAddress>
		setPageAddress(starting_page,7);
     436:	83 2d       	mov	r24, r3
     438:	39 81       	ldd	r19, Y+1	; 0x01
     43a:	83 1b       	sub	r24, r19
     43c:	67 e0       	ldi	r22, 0x07	; 7
     43e:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <setPageAddress>
		I2C_Init();
     442:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <I2C_Init>
		I2C_Start(oled_write_address);
     446:	8a e7       	ldi	r24, 0x7A	; 122
     448:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
		I2C_Write(CONTROL_DATA);
     44c:	80 e4       	ldi	r24, 0x40	; 64
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
     454:	bf e7       	ldi	r27, 0x7F	; 127
     456:	4b 2e       	mov	r4, r27
     458:	51 2c       	mov	r5, r1
     45a:	61 2c       	mov	r6, r1
     45c:	71 2c       	mov	r7, r1
     45e:	48 0c       	add	r4, r8
     460:	59 1c       	adc	r5, r9
     462:	6a 1c       	adc	r6, r10
     464:	7b 1c       	adc	r7, r11
     466:	85 01       	movw	r16, r10
     468:	74 01       	movw	r14, r8
     46a:	d8 86       	std	Y+8, r13	; 0x08
     46c:	cf 82       	std	Y+7, r12	; 0x07
     46e:	11 c0       	rjmp	.+34     	; 0x492 <color_choice_black+0xdc>
		uint32 end_byte_index = start_byte_index + 127 ;


		//this means black the choice
		for(;start_byte_index < end_byte_index ; start_byte_index++){
			I2C_Write(eeprom_read_byte(start_byte_index));
     470:	8f 81       	ldd	r24, Y+7	; 0x07
     472:	98 85       	ldd	r25, Y+8	; 0x08
     474:	0e 94 f7 17 	call	0x2fee	; 0x2fee <__eerd_byte_m32>
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
		//end byte to write
		uint32 end_byte_index = start_byte_index + 127 ;


		//this means black the choice
		for(;start_byte_index < end_byte_index ; start_byte_index++){
     47e:	08 94       	sec
     480:	e1 1c       	adc	r14, r1
     482:	f1 1c       	adc	r15, r1
     484:	01 1d       	adc	r16, r1
     486:	11 1d       	adc	r17, r1
     488:	8f 81       	ldd	r24, Y+7	; 0x07
     48a:	98 85       	ldd	r25, Y+8	; 0x08
     48c:	01 96       	adiw	r24, 0x01	; 1
     48e:	98 87       	std	Y+8, r25	; 0x08
     490:	8f 83       	std	Y+7, r24	; 0x07
     492:	e4 14       	cp	r14, r4
     494:	f5 04       	cpc	r15, r5
     496:	06 05       	cpc	r16, r6
     498:	17 05       	cpc	r17, r7
     49a:	50 f3       	brcs	.-44     	; 0x470 <color_choice_black+0xba>
			I2C_Write(eeprom_read_byte(start_byte_index));
		}
		I2C_Stop();
     49c:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>
     4a0:	a9 81       	ldd	r26, Y+1	; 0x01
     4a2:	ba 81       	ldd	r27, Y+2	; 0x02
     4a4:	11 96       	adiw	r26, 0x01	; 1
     4a6:	ba 83       	std	Y+2, r27	; 0x02
     4a8:	a9 83       	std	Y+1, r26	; 0x01
     4aa:	e0 e8       	ldi	r30, 0x80	; 128
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	ce 0e       	add	r12, r30
     4b0:	df 1e       	adc	r13, r31
     4b2:	80 e8       	ldi	r24, 0x80	; 128
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	a0 e0       	ldi	r26, 0x00	; 0
     4b8:	b0 e0       	ldi	r27, 0x00	; 0
     4ba:	88 0e       	add	r8, r24
     4bc:	99 1e       	adc	r9, r25
     4be:	aa 1e       	adc	r10, r26
     4c0:	bb 1e       	adc	r11, r27
	sint8 starting_page = choice_page_index[number_of_choice];
	uint8 ending_page = starting_page-1;



	for(; starting_page >= ending_page ;starting_page--){
     4c2:	8b 81       	ldd	r24, Y+3	; 0x03
     4c4:	9c 81       	ldd	r25, Y+4	; 0x04
     4c6:	a9 81       	ldd	r26, Y+1	; 0x01
     4c8:	ba 81       	ldd	r27, Y+2	; 0x02
     4ca:	8a 1b       	sub	r24, r26
     4cc:	9b 0b       	sbc	r25, r27
     4ce:	ed 81       	ldd	r30, Y+5	; 0x05
     4d0:	fe 81       	ldd	r31, Y+6	; 0x06
     4d2:	8e 17       	cp	r24, r30
     4d4:	9f 07       	cpc	r25, r31
     4d6:	0c f0       	brlt	.+2      	; 0x4da <color_choice_black+0x124>
     4d8:	aa cf       	rjmp	.-172    	; 0x42e <color_choice_black+0x78>
		for(;start_byte_index < end_byte_index ; start_byte_index++){
			I2C_Write(eeprom_read_byte(start_byte_index));
		}
		I2C_Stop();
	}
}
     4da:	28 96       	adiw	r28, 0x08	; 8
     4dc:	0f b6       	in	r0, 0x3f	; 63
     4de:	f8 94       	cli
     4e0:	de bf       	out	0x3e, r29	; 62
     4e2:	0f be       	out	0x3f, r0	; 63
     4e4:	cd bf       	out	0x3d, r28	; 61
     4e6:	cf 91       	pop	r28
     4e8:	df 91       	pop	r29
     4ea:	1f 91       	pop	r17
     4ec:	0f 91       	pop	r16
     4ee:	ff 90       	pop	r15
     4f0:	ef 90       	pop	r14
     4f2:	df 90       	pop	r13
     4f4:	cf 90       	pop	r12
     4f6:	bf 90       	pop	r11
     4f8:	af 90       	pop	r10
     4fa:	9f 90       	pop	r9
     4fc:	8f 90       	pop	r8
     4fe:	7f 90       	pop	r7
     500:	6f 90       	pop	r6
     502:	5f 90       	pop	r5
     504:	4f 90       	pop	r4
     506:	3f 90       	pop	r3
     508:	08 95       	ret

0000050a <letter_write>:
	I2C_Stop();

}

/********************************************************************************/
void letter_write(uint8 page_num , uint8 col_num , uint8 letter_index){
     50a:	bf 92       	push	r11
     50c:	cf 92       	push	r12
     50e:	df 92       	push	r13
     510:	ef 92       	push	r14
     512:	ff 92       	push	r15
     514:	0f 93       	push	r16
     516:	1f 93       	push	r17
     518:	df 93       	push	r29
     51a:	cf 93       	push	r28
     51c:	cd b7       	in	r28, 0x3d	; 61
     51e:	de b7       	in	r29, 0x3e	; 62
     520:	2e 97       	sbiw	r28, 0x0e	; 14
     522:	0f b6       	in	r0, 0x3f	; 63
     524:	f8 94       	cli
     526:	de bf       	out	0x3e, r29	; 62
     528:	0f be       	out	0x3f, r0	; 63
     52a:	cd bf       	out	0x3d, r28	; 61
     52c:	b8 2e       	mov	r11, r24
     52e:	c6 2e       	mov	r12, r22
     530:	14 2f       	mov	r17, r20
	I2C_Init();
     532:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <I2C_Init>
	/*storing bytes array*/
	uint8 bitmap_holder[14] = {0};
     536:	0e e0       	ldi	r16, 0x0E	; 14
     538:	7e 01       	movw	r14, r28
     53a:	08 94       	sec
     53c:	e1 1c       	adc	r14, r1
     53e:	f1 1c       	adc	r15, r1
     540:	f7 01       	movw	r30, r14
     542:	80 2f       	mov	r24, r16
     544:	11 92       	st	Z+, r1
     546:	8a 95       	dec	r24
     548:	e9 f7       	brne	.-6      	; 0x544 <letter_write+0x3a>


	//first we want to send that we want to write and write the start reading address.
	//but take care that the first 8 letters(index ----> 0 to 7) are stored in BLOCK 1 in eeprom.
	//and the latter 18 letters (index ----> 8 to 17) are stored in BLOCK 2 in eeprom.
	if(letter_index >= 0 && letter_index <= 7){
     54a:	18 30       	cpi	r17, 0x08	; 8
     54c:	e0 f4       	brcc	.+56     	; 0x586 <letter_write+0x7c>

		I2C_Start(Slave_Address_W);
     54e:	88 ea       	ldi	r24, 0xA8	; 168
     550:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
		/*calculate the starting reading address depend on the number_index)*/
		uint8 address = ( ( letter_index * 14 ) + 140 );
		I2C_Write(address);
     554:	10 9f       	mul	r17, r16
     556:	c0 01       	movw	r24, r0
     558:	11 24       	eor	r1, r1
     55a:	84 57       	subi	r24, 0x74	; 116
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
		/*now initiate the communication again but this time in read mode*/
		I2C_Repeated_Start(Slave_Address_R);
     562:	89 ea       	ldi	r24, 0xA9	; 169
     564:	0e 94 9b 11 	call	0x2336	; 0x2336 <I2C_Repeated_Start>
     568:	87 01       	movw	r16, r14

		/*now reading from the eeprom and storing in "bitmap_holder" array*/
		for(uint8 byte_address = 0 ; byte_address < 13 ; byte_address++){
     56a:	5e e0       	ldi	r21, 0x0E	; 14
     56c:	e5 2e       	mov	r14, r21
     56e:	f1 2c       	mov	r15, r1
     570:	ec 0e       	add	r14, r28
     572:	fd 1e       	adc	r15, r29
			bitmap_holder[byte_address] = I2C_Read_ACK();
     574:	0e 94 cb 11 	call	0x2396	; 0x2396 <I2C_Read_ACK>
     578:	f8 01       	movw	r30, r16
     57a:	81 93       	st	Z+, r24
     57c:	8f 01       	movw	r16, r30
		I2C_Write(address);
		/*now initiate the communication again but this time in read mode*/
		I2C_Repeated_Start(Slave_Address_R);

		/*now reading from the eeprom and storing in "bitmap_holder" array*/
		for(uint8 byte_address = 0 ; byte_address < 13 ; byte_address++){
     57e:	ee 15       	cp	r30, r14
     580:	ff 05       	cpc	r31, r15
     582:	c1 f7       	brne	.-16     	; 0x574 <letter_write+0x6a>
     584:	54 c0       	rjmp	.+168    	; 0x62e <letter_write+0x124>
			bitmap_holder[byte_address] = I2C_Read_ACK();
		}
		bitmap_holder[13] = I2C_Read_NACK();
		I2C_Stop();

	}else if(letter_index == 8){
     586:	18 30       	cpi	r17, 0x08	; 8
     588:	99 f5       	brne	.+102    	; 0x5f0 <letter_write+0xe6>

		I2C_Start(Slave_Address_W);
     58a:	88 ea       	ldi	r24, 0xA8	; 168
     58c:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
		/*calculate the starting reading address depend on the number_index)*/
		uint8 address = ( ( letter_index * 14 ) + 140 );
		I2C_Write(address);
     590:	8c ef       	ldi	r24, 0xFC	; 252
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
		/*now initiate the communication again but this time in read mode*/
		I2C_Repeated_Start(Slave_Address_R);
     598:	89 ea       	ldi	r24, 0xA9	; 169
     59a:	0e 94 9b 11 	call	0x2336	; 0x2336 <I2C_Repeated_Start>

		for(uint8 byte_address = 0 ; byte_address < 3 ; byte_address++){
			bitmap_holder[byte_address] = I2C_Read_ACK();
     59e:	0e 94 cb 11 	call	0x2396	; 0x2396 <I2C_Read_ACK>
     5a2:	89 83       	std	Y+1, r24	; 0x01
     5a4:	0e 94 cb 11 	call	0x2396	; 0x2396 <I2C_Read_ACK>
     5a8:	8a 83       	std	Y+2, r24	; 0x02
     5aa:	0e 94 cb 11 	call	0x2396	; 0x2396 <I2C_Read_ACK>
     5ae:	8b 83       	std	Y+3, r24	; 0x03
		}
		bitmap_holder[3] = I2C_Read_NACK();
     5b0:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <I2C_Read_NACK>
     5b4:	8c 83       	std	Y+4, r24	; 0x04
		I2C_Stop();
     5b6:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>

		I2C_Start(0b10101010);
     5ba:	8a ea       	ldi	r24, 0xAA	; 170
     5bc:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
		I2C_Write(0x00);
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
		I2C_Repeated_Start(0b10101011);
     5c8:	8b ea       	ldi	r24, 0xAB	; 171
     5ca:	0e 94 9b 11 	call	0x2336	; 0x2336 <I2C_Repeated_Start>
     5ce:	8e 01       	movw	r16, r28
     5d0:	0b 5f       	subi	r16, 0xFB	; 251
     5d2:	1f 4f       	sbci	r17, 0xFF	; 255
		for(uint8 byte_address = 4 ; byte_address < 13 ; byte_address++){
     5d4:	4e e0       	ldi	r20, 0x0E	; 14
     5d6:	e4 2e       	mov	r14, r20
     5d8:	f1 2c       	mov	r15, r1
     5da:	ec 0e       	add	r14, r28
     5dc:	fd 1e       	adc	r15, r29
			bitmap_holder[byte_address] = I2C_Read_ACK();
     5de:	0e 94 cb 11 	call	0x2396	; 0x2396 <I2C_Read_ACK>
     5e2:	f8 01       	movw	r30, r16
     5e4:	81 93       	st	Z+, r24
     5e6:	8f 01       	movw	r16, r30
		I2C_Stop();

		I2C_Start(0b10101010);
		I2C_Write(0x00);
		I2C_Repeated_Start(0b10101011);
		for(uint8 byte_address = 4 ; byte_address < 13 ; byte_address++){
     5e8:	ee 15       	cp	r30, r14
     5ea:	ff 05       	cpc	r31, r15
     5ec:	c1 f7       	brne	.-16     	; 0x5de <letter_write+0xd4>
     5ee:	1f c0       	rjmp	.+62     	; 0x62e <letter_write+0x124>
			bitmap_holder[byte_address] = I2C_Read_ACK();
		}
		bitmap_holder[13] = I2C_Read_NACK();
		I2C_Stop();

	}else if(letter_index > 8 && letter_index <= 25){
     5f0:	81 2f       	mov	r24, r17
     5f2:	89 50       	subi	r24, 0x09	; 9
     5f4:	81 31       	cpi	r24, 0x11	; 17
     5f6:	00 f5       	brcc	.+64     	; 0x638 <letter_write+0x12e>

		I2C_Start(0b10101010);//to start reading from block 0
     5f8:	8a ea       	ldi	r24, 0xAA	; 170
     5fa:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
		/*calculate the starting reading address depend on the number_index)*/
		uint8 address = (( (letter_index-9) * 14 ) + 10);
		I2C_Write(address);
     5fe:	10 9f       	mul	r17, r16
     600:	c0 01       	movw	r24, r0
     602:	11 24       	eor	r1, r1
     604:	84 57       	subi	r24, 0x74	; 116
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
		/*now initiate the communication again but this time in read mode*/
		I2C_Repeated_Start(0b10101011);
     60c:	8b ea       	ldi	r24, 0xAB	; 171
     60e:	0e 94 9b 11 	call	0x2336	; 0x2336 <I2C_Repeated_Start>
     612:	87 01       	movw	r16, r14

		/*now reading from the eeprom and storing in "bitmap_holder" array*/
		for(uint8 byte_address = 0 ; byte_address < 13 ; byte_address++){
     614:	3e e0       	ldi	r19, 0x0E	; 14
     616:	e3 2e       	mov	r14, r19
     618:	f1 2c       	mov	r15, r1
     61a:	ec 0e       	add	r14, r28
     61c:	fd 1e       	adc	r15, r29
			bitmap_holder[byte_address] = I2C_Read_ACK();
     61e:	0e 94 cb 11 	call	0x2396	; 0x2396 <I2C_Read_ACK>
     622:	f8 01       	movw	r30, r16
     624:	81 93       	st	Z+, r24
     626:	8f 01       	movw	r16, r30
		I2C_Write(address);
		/*now initiate the communication again but this time in read mode*/
		I2C_Repeated_Start(0b10101011);

		/*now reading from the eeprom and storing in "bitmap_holder" array*/
		for(uint8 byte_address = 0 ; byte_address < 13 ; byte_address++){
     628:	ee 15       	cp	r30, r14
     62a:	ff 05       	cpc	r31, r15
     62c:	c1 f7       	brne	.-16     	; 0x61e <letter_write+0x114>
			bitmap_holder[byte_address] = I2C_Read_ACK();
		}
		bitmap_holder[13] = I2C_Read_NACK();
     62e:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <I2C_Read_NACK>
     632:	8e 87       	std	Y+14, r24	; 0x0e
		I2C_Stop();
     634:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>

	}

	/*now after getting the data from the eeprom we want to send it to the oled screen*/
	setColumnAddress(col_num,col_num+7);
     638:	27 e0       	ldi	r18, 0x07	; 7
     63a:	d2 2e       	mov	r13, r18
     63c:	dc 0c       	add	r13, r12
     63e:	8c 2d       	mov	r24, r12
     640:	6d 2d       	mov	r22, r13
     642:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setColumnAddress>
	setPageAddress(page_num,7);
     646:	8b 2d       	mov	r24, r11
     648:	67 e0       	ldi	r22, 0x07	; 7
     64a:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <setPageAddress>
	I2C_Start(oled_write_address);
     64e:	8a e7       	ldi	r24, 0x7A	; 122
     650:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
	I2C_Write(CONTROL_DATA);
     654:	80 e4       	ldi	r24, 0x40	; 64
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
     65c:	8e 01       	movw	r16, r28
     65e:	0f 5f       	subi	r16, 0xFF	; 255
     660:	1f 4f       	sbci	r17, 0xFF	; 255

	for(uint8 byte_address = 0 ; byte_address < 7 ; byte_address++){
     662:	98 e0       	ldi	r25, 0x08	; 8
     664:	e9 2e       	mov	r14, r25
     666:	f1 2c       	mov	r15, r1
     668:	ec 0e       	add	r14, r28
     66a:	fd 1e       	adc	r15, r29
		I2C_Write(bitmap_holder[byte_address]);
     66c:	f8 01       	movw	r30, r16
     66e:	81 91       	ld	r24, Z+
     670:	8f 01       	movw	r16, r30
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
	setColumnAddress(col_num,col_num+7);
	setPageAddress(page_num,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);

	for(uint8 byte_address = 0 ; byte_address < 7 ; byte_address++){
     678:	0e 15       	cp	r16, r14
     67a:	1f 05       	cpc	r17, r15
     67c:	b9 f7       	brne	.-18     	; 0x66c <letter_write+0x162>
		I2C_Write(bitmap_holder[byte_address]);
	}

	I2C_Stop();
     67e:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>
	setColumnAddress(col_num,col_num+7);
     682:	8c 2d       	mov	r24, r12
     684:	6d 2d       	mov	r22, r13
     686:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setColumnAddress>
	setPageAddress(page_num-1,7);
     68a:	8b 2d       	mov	r24, r11
     68c:	81 50       	subi	r24, 0x01	; 1
     68e:	67 e0       	ldi	r22, 0x07	; 7
     690:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <setPageAddress>
	I2C_Start(oled_write_address);
     694:	8a e7       	ldi	r24, 0x7A	; 122
     696:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
	I2C_Write(CONTROL_DATA);
     69a:	80 e4       	ldi	r24, 0x40	; 64
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>

	for(uint8 byte_address = 7 ; byte_address < 14 ; byte_address++){
     6a2:	8f e0       	ldi	r24, 0x0F	; 15
     6a4:	e8 2e       	mov	r14, r24
     6a6:	f1 2c       	mov	r15, r1
     6a8:	ec 0e       	add	r14, r28
     6aa:	fd 1e       	adc	r15, r29
		I2C_Write(bitmap_holder[byte_address]);
     6ac:	f8 01       	movw	r30, r16
     6ae:	81 91       	ld	r24, Z+
     6b0:	8f 01       	movw	r16, r30
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
	setColumnAddress(col_num,col_num+7);
	setPageAddress(page_num-1,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);

	for(uint8 byte_address = 7 ; byte_address < 14 ; byte_address++){
     6b8:	0e 15       	cp	r16, r14
     6ba:	1f 05       	cpc	r17, r15
     6bc:	b9 f7       	brne	.-18     	; 0x6ac <letter_write+0x1a2>
		I2C_Write(bitmap_holder[byte_address]);
	}

	I2C_Stop();
     6be:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>
}
     6c2:	2e 96       	adiw	r28, 0x0e	; 14
     6c4:	0f b6       	in	r0, 0x3f	; 63
     6c6:	f8 94       	cli
     6c8:	de bf       	out	0x3e, r29	; 62
     6ca:	0f be       	out	0x3f, r0	; 63
     6cc:	cd bf       	out	0x3d, r28	; 61
     6ce:	cf 91       	pop	r28
     6d0:	df 91       	pop	r29
     6d2:	1f 91       	pop	r17
     6d4:	0f 91       	pop	r16
     6d6:	ff 90       	pop	r15
     6d8:	ef 90       	pop	r14
     6da:	df 90       	pop	r13
     6dc:	cf 90       	pop	r12
     6de:	bf 90       	pop	r11
     6e0:	08 95       	ret

000006e2 <day_name_print>:
	}else{
		return 0 ; //it is not a leap year.
	}
}
/*********************************************************************/
void day_name_print(uint8 day_name_track , uint8 ptr[][3]){
     6e2:	1f 93       	push	r17
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
     6e8:	eb 01       	movw	r28, r22
     6ea:	93 e0       	ldi	r25, 0x03	; 3
     6ec:	89 9f       	mul	r24, r25
     6ee:	c0 01       	movw	r24, r0
     6f0:	11 24       	eor	r1, r1
     6f2:	c8 0f       	add	r28, r24
     6f4:	d9 1f       	adc	r29, r25
     6f6:	11 e6       	ldi	r17, 0x61	; 97
	for(uint8 letter_index = 0 ; letter_index < 3 ; letter_index++){
		letter_write(2,((letter_index*7)+97),ptr[day_name_track][letter_index]) ;
     6f8:	82 e0       	ldi	r24, 0x02	; 2
     6fa:	61 2f       	mov	r22, r17
     6fc:	49 91       	ld	r20, Y+
     6fe:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
     702:	19 5f       	subi	r17, 0xF9	; 249
		return 0 ; //it is not a leap year.
	}
}
/*********************************************************************/
void day_name_print(uint8 day_name_track , uint8 ptr[][3]){
	for(uint8 letter_index = 0 ; letter_index < 3 ; letter_index++){
     704:	16 37       	cpi	r17, 0x76	; 118
     706:	c1 f7       	brne	.-16     	; 0x6f8 <day_name_print+0x16>
		letter_write(2,((letter_index*7)+97),ptr[day_name_track][letter_index]) ;
	}
}
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
     70c:	1f 91       	pop	r17
     70e:	08 95       	ret

00000710 <printing_menu_with_choice>:
	digit = ( dec << 4 ) | digit ;
	return digit ;
}
/*********************************************************************/

void printing_menu_with_choice(void){
     710:	5f 92       	push	r5
     712:	6f 92       	push	r6
     714:	7f 92       	push	r7
     716:	8f 92       	push	r8
     718:	9f 92       	push	r9
     71a:	af 92       	push	r10
     71c:	bf 92       	push	r11
     71e:	cf 92       	push	r12
     720:	df 92       	push	r13
     722:	ef 92       	push	r14
     724:	ff 92       	push	r15
     726:	0f 93       	push	r16
     728:	1f 93       	push	r17
     72a:	cf 93       	push	r28
     72c:	df 93       	push	r29
     72e:	e7 e0       	ldi	r30, 0x07	; 7
     730:	5e 2e       	mov	r5, r30
     732:	aa 24       	eor	r10, r10
     734:	bb 24       	eor	r11, r11
     736:	65 01       	movw	r12, r10


	for(sint8 i = 7; i >= 0 ; i--){
			setColumnAddress(0,127);
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	6f e7       	ldi	r22, 0x7F	; 127
     73c:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setColumnAddress>
			setPageAddress(i,7);
     740:	85 2d       	mov	r24, r5
     742:	67 e0       	ldi	r22, 0x07	; 7
     744:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <setPageAddress>
			I2C_Init();
     748:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <I2C_Init>
			I2C_Start(oled_write_address);
     74c:	8a e7       	ldi	r24, 0x7A	; 122
     74e:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
			I2C_Write(CONTROL_DATA);
     752:	80 e4       	ldi	r24, 0x40	; 64
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
     75a:	7f e7       	ldi	r23, 0x7F	; 127
     75c:	67 2e       	mov	r6, r23
     75e:	71 2c       	mov	r7, r1
     760:	81 2c       	mov	r8, r1
     762:	91 2c       	mov	r9, r1
     764:	6a 0c       	add	r6, r10
     766:	7b 1c       	adc	r7, r11
     768:	8c 1c       	adc	r8, r12
     76a:	9d 1c       	adc	r9, r13

			//start byte to write
			uint32 start_byte_index = (7-i) * 128 ;
			//end byte to write
			uint32 end_byte_index = start_byte_index + 127 ;
			if(i == 5 || i == 4){
     76c:	85 2d       	mov	r24, r5
     76e:	84 50       	subi	r24, 0x04	; 4
     770:	82 30       	cpi	r24, 0x02	; 2
     772:	20 f0       	brcs	.+8      	; 0x77c <printing_menu_with_choice+0x6c>
     774:	e5 01       	movw	r28, r10
     776:	86 01       	movw	r16, r12
     778:	75 01       	movw	r14, r10
     77a:	24 c0       	rjmp	.+72     	; 0x7c4 <printing_menu_with_choice+0xb4>
     77c:	e5 01       	movw	r28, r10
     77e:	86 01       	movw	r16, r12
     780:	75 01       	movw	r14, r10
     782:	0e c0       	rjmp	.+28     	; 0x7a0 <printing_menu_with_choice+0x90>
				for(;start_byte_index < end_byte_index ; start_byte_index++){
					I2C_Write(~(eeprom_read_byte(start_byte_index)));
     784:	ce 01       	movw	r24, r28
     786:	0e 94 f7 17 	call	0x2fee	; 0x2fee <__eerd_byte_m32>
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	80 95       	com	r24
     78e:	90 95       	com	r25
     790:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
			//start byte to write
			uint32 start_byte_index = (7-i) * 128 ;
			//end byte to write
			uint32 end_byte_index = start_byte_index + 127 ;
			if(i == 5 || i == 4){
				for(;start_byte_index < end_byte_index ; start_byte_index++){
     794:	08 94       	sec
     796:	e1 1c       	adc	r14, r1
     798:	f1 1c       	adc	r15, r1
     79a:	01 1d       	adc	r16, r1
     79c:	11 1d       	adc	r17, r1
     79e:	21 96       	adiw	r28, 0x01	; 1
     7a0:	e6 14       	cp	r14, r6
     7a2:	f7 04       	cpc	r15, r7
     7a4:	08 05       	cpc	r16, r8
     7a6:	19 05       	cpc	r17, r9
     7a8:	68 f3       	brcs	.-38     	; 0x784 <printing_menu_with_choice+0x74>
     7aa:	11 c0       	rjmp	.+34     	; 0x7ce <printing_menu_with_choice+0xbe>
					I2C_Write(~(eeprom_read_byte(start_byte_index)));
				}
			}else{
				for(;start_byte_index < end_byte_index ; start_byte_index++){
					I2C_Write(eeprom_read_byte(start_byte_index));
     7ac:	ce 01       	movw	r24, r28
     7ae:	0e 94 f7 17 	call	0x2fee	; 0x2fee <__eerd_byte_m32>
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
			if(i == 5 || i == 4){
				for(;start_byte_index < end_byte_index ; start_byte_index++){
					I2C_Write(~(eeprom_read_byte(start_byte_index)));
				}
			}else{
				for(;start_byte_index < end_byte_index ; start_byte_index++){
     7b8:	08 94       	sec
     7ba:	e1 1c       	adc	r14, r1
     7bc:	f1 1c       	adc	r15, r1
     7be:	01 1d       	adc	r16, r1
     7c0:	11 1d       	adc	r17, r1
     7c2:	21 96       	adiw	r28, 0x01	; 1
     7c4:	e6 14       	cp	r14, r6
     7c6:	f7 04       	cpc	r15, r7
     7c8:	08 05       	cpc	r16, r8
     7ca:	19 05       	cpc	r17, r9
     7cc:	78 f3       	brcs	.-34     	; 0x7ac <printing_menu_with_choice+0x9c>
					I2C_Write(eeprom_read_byte(start_byte_index));
				}
			}
			I2C_Stop();
     7ce:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>
/*********************************************************************/

void printing_menu_with_choice(void){


	for(sint8 i = 7; i >= 0 ; i--){
     7d2:	5a 94       	dec	r5
     7d4:	80 e8       	ldi	r24, 0x80	; 128
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	a0 e0       	ldi	r26, 0x00	; 0
     7da:	b0 e0       	ldi	r27, 0x00	; 0
     7dc:	a8 0e       	add	r10, r24
     7de:	b9 1e       	adc	r11, r25
     7e0:	ca 1e       	adc	r12, r26
     7e2:	db 1e       	adc	r13, r27
     7e4:	9f ef       	ldi	r25, 0xFF	; 255
     7e6:	59 16       	cp	r5, r25
     7e8:	09 f0       	breq	.+2      	; 0x7ec <printing_menu_with_choice+0xdc>
     7ea:	a6 cf       	rjmp	.-180    	; 0x738 <printing_menu_with_choice+0x28>
			}
			I2C_Stop();
	}


	I2C_Start(0b10101010); //Starting communication with the external eeprom.
     7ec:	8a ea       	ldi	r24, 0xAA	; 170
     7ee:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
	I2C_Write(0xF9); //Writing the starting address to read from the eeprom.
     7f2:	89 ef       	ldi	r24, 0xF9	; 249
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
	I2C_Repeated_Start(0b10101011);//Rs & telling the eeprom that we will read from it.
     7fa:	8b ea       	ldi	r24, 0xAB	; 171
     7fc:	0e 94 9b 11 	call	0x2336	; 0x2336 <I2C_Repeated_Start>
     800:	62 ed       	ldi	r22, 0xD2	; 210
     802:	e6 2e       	mov	r14, r22
     804:	60 e0       	ldi	r22, 0x00	; 0
     806:	f6 2e       	mov	r15, r22
     808:	e7 01       	movw	r28, r14
	for(uint8 i = 0 ; i < 4 ; i++){
		username[i] = I2C_Read_ACK();
     80a:	0e 94 cb 11 	call	0x2396	; 0x2396 <I2C_Read_ACK>
     80e:	89 93       	st	Y+, r24


	I2C_Start(0b10101010); //Starting communication with the external eeprom.
	I2C_Write(0xF9); //Writing the starting address to read from the eeprom.
	I2C_Repeated_Start(0b10101011);//Rs & telling the eeprom that we will read from it.
	for(uint8 i = 0 ; i < 4 ; i++){
     810:	a0 e0       	ldi	r26, 0x00	; 0
     812:	c6 3d       	cpi	r28, 0xD6	; 214
     814:	da 07       	cpc	r29, r26
     816:	c9 f7       	brne	.-14     	; 0x80a <printing_menu_with_choice+0xfa>
		username[i] = I2C_Read_ACK();
	}
	username[4] = I2C_Read_NACK();
     818:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <I2C_Read_NACK>
     81c:	88 83       	st	Y, r24
	I2C_Stop();
     81e:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>
     822:	18 e3       	ldi	r17, 0x38	; 56

	//now print the name on the OLED
	for(uint8 i = 0 ; i < 5 ; i++){
		letter_write(7,(56+(7*i)),username[i]);
     824:	87 e0       	ldi	r24, 0x07	; 7
     826:	61 2f       	mov	r22, r17
     828:	f7 01       	movw	r30, r14
     82a:	41 91       	ld	r20, Z+
     82c:	7f 01       	movw	r14, r30
     82e:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
     832:	19 5f       	subi	r17, 0xF9	; 249
	}
	username[4] = I2C_Read_NACK();
	I2C_Stop();

	//now print the name on the OLED
	for(uint8 i = 0 ; i < 5 ; i++){
     834:	1b 35       	cpi	r17, 0x5B	; 91
     836:	b1 f7       	brne	.-20     	; 0x824 <printing_menu_with_choice+0x114>
		letter_write(7,(56+(7*i)),username[i]);
	}



}
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	1f 91       	pop	r17
     83e:	0f 91       	pop	r16
     840:	ff 90       	pop	r15
     842:	ef 90       	pop	r14
     844:	df 90       	pop	r13
     846:	cf 90       	pop	r12
     848:	bf 90       	pop	r11
     84a:	af 90       	pop	r10
     84c:	9f 90       	pop	r9
     84e:	8f 90       	pop	r8
     850:	7f 90       	pop	r7
     852:	6f 90       	pop	r6
     854:	5f 90       	pop	r5
     856:	08 95       	ret

00000858 <number_write>:
//bitmap array for -
uint8 dash_bitmap[14] = {0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};


/********************************************************************************/
void number_write(uint8 page_num , uint8 col_num , uint8 number_index){
     858:	af 92       	push	r10
     85a:	bf 92       	push	r11
     85c:	cf 92       	push	r12
     85e:	df 92       	push	r13
     860:	ef 92       	push	r14
     862:	ff 92       	push	r15
     864:	0f 93       	push	r16
     866:	1f 93       	push	r17
     868:	df 93       	push	r29
     86a:	cf 93       	push	r28
     86c:	cd b7       	in	r28, 0x3d	; 61
     86e:	de b7       	in	r29, 0x3e	; 62
     870:	2e 97       	sbiw	r28, 0x0e	; 14
     872:	0f b6       	in	r0, 0x3f	; 63
     874:	f8 94       	cli
     876:	de bf       	out	0x3e, r29	; 62
     878:	0f be       	out	0x3f, r0	; 63
     87a:	cd bf       	out	0x3d, r28	; 61
     87c:	a8 2e       	mov	r10, r24
     87e:	b6 2e       	mov	r11, r22
     880:	e4 2e       	mov	r14, r20
	I2C_Init();
     882:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <I2C_Init>
	/*storing bytes array*/
	uint8 bitmap_holder[14] = {0};
     886:	1e e0       	ldi	r17, 0x0E	; 14
     888:	f1 2e       	mov	r15, r17
     88a:	8e 01       	movw	r16, r28
     88c:	0f 5f       	subi	r16, 0xFF	; 255
     88e:	1f 4f       	sbci	r17, 0xFF	; 255
     890:	f8 01       	movw	r30, r16
     892:	8f 2d       	mov	r24, r15
     894:	11 92       	st	Z+, r1
     896:	8a 95       	dec	r24
     898:	e9 f7       	brne	.-6      	; 0x894 <__stack+0x35>


	//first we want to send that we want to write and write the start reading address.
	I2C_Start(Slave_Address_W);
     89a:	88 ea       	ldi	r24, 0xA8	; 168
     89c:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>

	/*calculate the starting reading address depend on the number_index)*/
	uint8 address = ( number_index * 14 );
	I2C_Write(address);
     8a0:	ef 9c       	mul	r14, r15
     8a2:	80 2d       	mov	r24, r0
     8a4:	11 24       	eor	r1, r1
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>

	/*now initiate the communication again but this time in read mode*/
	I2C_Repeated_Start(Slave_Address_R);
     8ac:	89 ea       	ldi	r24, 0xA9	; 169
     8ae:	0e 94 9b 11 	call	0x2336	; 0x2336 <I2C_Repeated_Start>
     8b2:	78 01       	movw	r14, r16

	/*now reading from the eeprom and storing in "bitmap_holder" array*/
	for(uint8 byte_address = 0 ; byte_address < 13 ; byte_address++){
     8b4:	be e0       	ldi	r27, 0x0E	; 14
     8b6:	cb 2e       	mov	r12, r27
     8b8:	d1 2c       	mov	r13, r1
     8ba:	cc 0e       	add	r12, r28
     8bc:	dd 1e       	adc	r13, r29
		bitmap_holder[byte_address] = I2C_Read_ACK();
     8be:	0e 94 cb 11 	call	0x2396	; 0x2396 <I2C_Read_ACK>
     8c2:	f7 01       	movw	r30, r14
     8c4:	81 93       	st	Z+, r24
     8c6:	7f 01       	movw	r14, r30

	/*now initiate the communication again but this time in read mode*/
	I2C_Repeated_Start(Slave_Address_R);

	/*now reading from the eeprom and storing in "bitmap_holder" array*/
	for(uint8 byte_address = 0 ; byte_address < 13 ; byte_address++){
     8c8:	ec 15       	cp	r30, r12
     8ca:	fd 05       	cpc	r31, r13
     8cc:	c1 f7       	brne	.-16     	; 0x8be <__stack+0x5f>
		bitmap_holder[byte_address] = I2C_Read_ACK();
	}
	bitmap_holder[13] = I2C_Read_NACK();
     8ce:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <I2C_Read_NACK>
     8d2:	8e 87       	std	Y+14, r24	; 0x0e
	I2C_Stop();
     8d4:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>

	/*now after getting the data from the eeprom we want to send it to the oled screen*/
	setColumnAddress(col_num,col_num+7);
     8d8:	a7 e0       	ldi	r26, 0x07	; 7
     8da:	da 2e       	mov	r13, r26
     8dc:	db 0c       	add	r13, r11
     8de:	8b 2d       	mov	r24, r11
     8e0:	6d 2d       	mov	r22, r13
     8e2:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setColumnAddress>
	setPageAddress(page_num,7);
     8e6:	8a 2d       	mov	r24, r10
     8e8:	67 e0       	ldi	r22, 0x07	; 7
     8ea:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <setPageAddress>
	I2C_Start(oled_write_address);
     8ee:	8a e7       	ldi	r24, 0x7A	; 122
     8f0:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
	I2C_Write(CONTROL_DATA);
     8f4:	80 e4       	ldi	r24, 0x40	; 64
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>

	for(uint8 byte_address = 0 ; byte_address < 7 ; byte_address++){
     8fc:	f8 e0       	ldi	r31, 0x08	; 8
     8fe:	ef 2e       	mov	r14, r31
     900:	f1 2c       	mov	r15, r1
     902:	ec 0e       	add	r14, r28
     904:	fd 1e       	adc	r15, r29
		I2C_Write(bitmap_holder[byte_address]);
     906:	f8 01       	movw	r30, r16
     908:	81 91       	ld	r24, Z+
     90a:	8f 01       	movw	r16, r30
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
	setColumnAddress(col_num,col_num+7);
	setPageAddress(page_num,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);

	for(uint8 byte_address = 0 ; byte_address < 7 ; byte_address++){
     912:	0e 15       	cp	r16, r14
     914:	1f 05       	cpc	r17, r15
     916:	b9 f7       	brne	.-18     	; 0x906 <__stack+0xa7>
		I2C_Write(bitmap_holder[byte_address]);
	}

	I2C_Stop();
     918:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>
	setColumnAddress(col_num,col_num+7);
     91c:	8b 2d       	mov	r24, r11
     91e:	6d 2d       	mov	r22, r13
     920:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setColumnAddress>
	setPageAddress(page_num-1,7);
     924:	8a 2d       	mov	r24, r10
     926:	81 50       	subi	r24, 0x01	; 1
     928:	67 e0       	ldi	r22, 0x07	; 7
     92a:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <setPageAddress>
	I2C_Start(oled_write_address);
     92e:	8a e7       	ldi	r24, 0x7A	; 122
     930:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
	I2C_Write(CONTROL_DATA);
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
     93c:	78 01       	movw	r14, r16

	for(uint8 byte_address = 7 ; byte_address < 14 ; byte_address++){
     93e:	8e 01       	movw	r16, r28
     940:	01 5f       	subi	r16, 0xF1	; 241
     942:	1f 4f       	sbci	r17, 0xFF	; 255
		I2C_Write(bitmap_holder[byte_address]);
     944:	f7 01       	movw	r30, r14
     946:	81 91       	ld	r24, Z+
     948:	7f 01       	movw	r14, r30
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
	setColumnAddress(col_num,col_num+7);
	setPageAddress(page_num-1,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);

	for(uint8 byte_address = 7 ; byte_address < 14 ; byte_address++){
     950:	e0 16       	cp	r14, r16
     952:	f1 06       	cpc	r15, r17
     954:	b9 f7       	brne	.-18     	; 0x944 <__stack+0xe5>
		I2C_Write(bitmap_holder[byte_address]);
	}

	I2C_Stop();
     956:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>

}
     95a:	2e 96       	adiw	r28, 0x0e	; 14
     95c:	0f b6       	in	r0, 0x3f	; 63
     95e:	f8 94       	cli
     960:	de bf       	out	0x3e, r29	; 62
     962:	0f be       	out	0x3f, r0	; 63
     964:	cd bf       	out	0x3d, r28	; 61
     966:	cf 91       	pop	r28
     968:	df 91       	pop	r29
     96a:	1f 91       	pop	r17
     96c:	0f 91       	pop	r16
     96e:	ff 90       	pop	r15
     970:	ef 90       	pop	r14
     972:	df 90       	pop	r13
     974:	cf 90       	pop	r12
     976:	bf 90       	pop	r11
     978:	af 90       	pop	r10
     97a:	08 95       	ret

0000097c <triple_digit_write>:
	number_write(page_num,col_num+7,digit);
	number /= 10 ;
	number_write(page_num,col_num,number);
}
/*********************************************************************/
void triple_digit_write(uint8 page_num , uint8 col_num , uint16 number){
     97c:	ef 92       	push	r14
     97e:	ff 92       	push	r15
     980:	0f 93       	push	r16
     982:	1f 93       	push	r17
     984:	f8 2e       	mov	r15, r24
     986:	e6 2e       	mov	r14, r22
     988:	8a 01       	movw	r16, r20
	uint8 digit = number % 10 ;
	number_write(page_num,(col_num+14),digit);
     98a:	26 2f       	mov	r18, r22
     98c:	22 5f       	subi	r18, 0xF2	; 242
     98e:	ca 01       	movw	r24, r20
     990:	6a e0       	ldi	r22, 0x0A	; 10
     992:	70 e0       	ldi	r23, 0x00	; 0
     994:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__udivmodhi4>
     998:	48 2f       	mov	r20, r24
     99a:	8f 2d       	mov	r24, r15
     99c:	62 2f       	mov	r22, r18
     99e:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
	number /= 10 ;
     9a2:	c8 01       	movw	r24, r16
     9a4:	6a e0       	ldi	r22, 0x0A	; 10
     9a6:	70 e0       	ldi	r23, 0x00	; 0
     9a8:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__udivmodhi4>
     9ac:	16 2f       	mov	r17, r22
     9ae:	07 2f       	mov	r16, r23
	digit = number % 10 ;
	number_write(page_num,col_num+7,digit);
     9b0:	2e 2d       	mov	r18, r14
     9b2:	29 5f       	subi	r18, 0xF9	; 249
     9b4:	86 2f       	mov	r24, r22
     9b6:	97 2f       	mov	r25, r23
     9b8:	6a e0       	ldi	r22, 0x0A	; 10
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__udivmodhi4>
     9c0:	48 2f       	mov	r20, r24
     9c2:	8f 2d       	mov	r24, r15
     9c4:	62 2f       	mov	r22, r18
     9c6:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
	number /= 10 ;
	digit = number % 10 ;
	number_write(page_num,col_num,digit);
     9ca:	81 2f       	mov	r24, r17
     9cc:	90 2f       	mov	r25, r16
     9ce:	6a e0       	ldi	r22, 0x0A	; 10
     9d0:	70 e0       	ldi	r23, 0x00	; 0
     9d2:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__udivmodhi4>
     9d6:	cb 01       	movw	r24, r22
     9d8:	6a e0       	ldi	r22, 0x0A	; 10
     9da:	70 e0       	ldi	r23, 0x00	; 0
     9dc:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__udivmodhi4>
     9e0:	48 2f       	mov	r20, r24
     9e2:	8f 2d       	mov	r24, r15
     9e4:	6e 2d       	mov	r22, r14
     9e6:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
}
     9ea:	1f 91       	pop	r17
     9ec:	0f 91       	pop	r16
     9ee:	ff 90       	pop	r15
     9f0:	ef 90       	pop	r14
     9f2:	08 95       	ret

000009f4 <double_digit_write>:
	I2C_Stop();

	return 1 ; //adding name to eeprom done successfully.
}
/**********************************************************************/
void double_digit_write(uint8 page_num , uint8 col_num , uint8 number){
     9f4:	ff 92       	push	r15
     9f6:	0f 93       	push	r16
     9f8:	1f 93       	push	r17
     9fa:	08 2f       	mov	r16, r24
     9fc:	f6 2e       	mov	r15, r22
     9fe:	14 2f       	mov	r17, r20
	uint8 digit = number % 10 ;
	number_write(page_num,col_num+7,digit);
     a00:	26 2f       	mov	r18, r22
     a02:	29 5f       	subi	r18, 0xF9	; 249
     a04:	84 2f       	mov	r24, r20
     a06:	6a e0       	ldi	r22, 0x0A	; 10
     a08:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <__udivmodqi4>
     a0c:	80 2f       	mov	r24, r16
     a0e:	62 2f       	mov	r22, r18
     a10:	49 2f       	mov	r20, r25
     a12:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
	number /= 10 ;
	number_write(page_num,col_num,number);
     a16:	81 2f       	mov	r24, r17
     a18:	6a e0       	ldi	r22, 0x0A	; 10
     a1a:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <__udivmodqi4>
     a1e:	48 2f       	mov	r20, r24
     a20:	80 2f       	mov	r24, r16
     a22:	6f 2d       	mov	r22, r15
     a24:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
}
     a28:	1f 91       	pop	r17
     a2a:	0f 91       	pop	r16
     a2c:	ff 90       	pop	r15
     a2e:	08 95       	ret

00000a30 <button_check>:
	DIO_SetPinValue(DIO_PORTC,DIO_PIN6,DIO_PIN_VAL_HIGH);

}

/****************************************************************************/
uint8 button_check(void){
     a30:	df 92       	push	r13
     a32:	ef 92       	push	r14
     a34:	ff 92       	push	r15
     a36:	0f 93       	push	r16
     a38:	1f 93       	push	r17
     a3a:	df 93       	push	r29
     a3c:	cf 93       	push	r28
     a3e:	0f 92       	push	r0
     a40:	cd b7       	in	r28, 0x3d	; 61
     a42:	de b7       	in	r29, 0x3e	; 62
     a44:	03 e0       	ldi	r16, 0x03	; 3

	uint8 which_button = 0 ;

	//now we want to loop over the pins 3,4,5 and set each one to low and check if pin2 get LOW value.
	for(uint8 COL_PIN = 3 ; COL_PIN <= 6 ; COL_PIN++){
		uint8 button_pressed = 1 ;
     a46:	dd 24       	eor	r13, r13
     a48:	d3 94       	inc	r13

		DIO_SetPinValue(DIO_PORTC,COL_PIN,DIO_PIN_VAL_LOW);
		DIO_GetPinValue(DIO_PORTC,DIO_PIN2, &button_pressed);
     a4a:	7e 01       	movw	r14, r28
     a4c:	08 94       	sec
     a4e:	e1 1c       	adc	r14, r1
     a50:	f1 1c       	adc	r15, r1

	uint8 which_button = 0 ;

	//now we want to loop over the pins 3,4,5 and set each one to low and check if pin2 get LOW value.
	for(uint8 COL_PIN = 3 ; COL_PIN <= 6 ; COL_PIN++){
		uint8 button_pressed = 1 ;
     a52:	d9 82       	std	Y+1, r13	; 0x01

		DIO_SetPinValue(DIO_PORTC,COL_PIN,DIO_PIN_VAL_LOW);
     a54:	82 e0       	ldi	r24, 0x02	; 2
     a56:	60 2f       	mov	r22, r16
     a58:	40 e0       	ldi	r20, 0x00	; 0
     a5a:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <DIO_SetPinValue>
		DIO_GetPinValue(DIO_PORTC,DIO_PIN2, &button_pressed);
     a5e:	82 e0       	ldi	r24, 0x02	; 2
     a60:	62 e0       	ldi	r22, 0x02	; 2
     a62:	a7 01       	movw	r20, r14
     a64:	0e 94 44 10 	call	0x2088	; 0x2088 <DIO_GetPinValue>

		//0 means button is pressed
		if(button_pressed == 0){
     a68:	89 81       	ldd	r24, Y+1	; 0x01
     a6a:	88 23       	and	r24, r24
     a6c:	39 f0       	breq	.+14     	; 0xa7c <button_check+0x4c>
     a6e:	10 e0       	ldi	r17, 0x00	; 0
     a70:	09 c0       	rjmp	.+18     	; 0xa84 <button_check+0x54>
			which_button = COL_PIN ;

			while(button_pressed == 0){
				DIO_GetPinValue(DIO_PORTC, DIO_PIN2, &button_pressed);
     a72:	82 e0       	ldi	r24, 0x02	; 2
     a74:	62 e0       	ldi	r22, 0x02	; 2
     a76:	a7 01       	movw	r20, r14
     a78:	0e 94 44 10 	call	0x2088	; 0x2088 <DIO_GetPinValue>

		//0 means button is pressed
		if(button_pressed == 0){
			which_button = COL_PIN ;

			while(button_pressed == 0){
     a7c:	89 81       	ldd	r24, Y+1	; 0x01
     a7e:	88 23       	and	r24, r24
     a80:	c1 f3       	breq	.-16     	; 0xa72 <button_check+0x42>
     a82:	10 2f       	mov	r17, r16
				DIO_GetPinValue(DIO_PORTC, DIO_PIN2, &button_pressed);
			}
		}

		DIO_SetPinValue(DIO_PORTC,COL_PIN,DIO_PIN_VAL_HIGH);
     a84:	82 e0       	ldi	r24, 0x02	; 2
     a86:	60 2f       	mov	r22, r16
     a88:	41 e0       	ldi	r20, 0x01	; 1
     a8a:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <DIO_SetPinValue>
		if(which_button != 0)
     a8e:	11 23       	and	r17, r17
     a90:	19 f4       	brne	.+6      	; 0xa98 <button_check+0x68>
uint8 button_check(void){

	uint8 which_button = 0 ;

	//now we want to loop over the pins 3,4,5 and set each one to low and check if pin2 get LOW value.
	for(uint8 COL_PIN = 3 ; COL_PIN <= 6 ; COL_PIN++){
     a92:	0f 5f       	subi	r16, 0xFF	; 255
     a94:	07 30       	cpi	r16, 0x07	; 7
     a96:	e9 f6       	brne	.-70     	; 0xa52 <button_check+0x22>
		DIO_SetPinValue(DIO_PORTC,COL_PIN,DIO_PIN_VAL_HIGH);
		if(which_button != 0)
			return which_button ;
	}
	return which_button ;
}
     a98:	81 2f       	mov	r24, r17
     a9a:	0f 90       	pop	r0
     a9c:	cf 91       	pop	r28
     a9e:	df 91       	pop	r29
     aa0:	1f 91       	pop	r17
     aa2:	0f 91       	pop	r16
     aa4:	ff 90       	pop	r15
     aa6:	ef 90       	pop	r14
     aa8:	df 90       	pop	r13
     aaa:	08 95       	ret

00000aac <study_timer>:
	return 1;

}
/*********************************************************************/

uint8 study_timer(void){
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	df 93       	push	r29
     ab8:	cf 93       	push	r28
     aba:	00 d0       	rcall	.+0      	; 0xabc <study_timer+0x10>
     abc:	cd b7       	in	r28, 0x3d	; 61
     abe:	de b7       	in	r29, 0x3e	; 62

	black_entire_screen();
     ac0:	0e 94 09 01 	call	0x212	; 0x212 <black_entire_screen>
	//studying min
	letter_write(7,1,18);
     ac4:	87 e0       	ldi	r24, 0x07	; 7
     ac6:	61 e0       	ldi	r22, 0x01	; 1
     ac8:	42 e1       	ldi	r20, 0x12	; 18
     aca:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,8,19);
     ace:	87 e0       	ldi	r24, 0x07	; 7
     ad0:	68 e0       	ldi	r22, 0x08	; 8
     ad2:	43 e1       	ldi	r20, 0x13	; 19
     ad4:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,15,20);
     ad8:	87 e0       	ldi	r24, 0x07	; 7
     ada:	6f e0       	ldi	r22, 0x0F	; 15
     adc:	44 e1       	ldi	r20, 0x14	; 20
     ade:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,22,3);
     ae2:	87 e0       	ldi	r24, 0x07	; 7
     ae4:	66 e1       	ldi	r22, 0x16	; 22
     ae6:	43 e0       	ldi	r20, 0x03	; 3
     ae8:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,29,24);
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	6d e1       	ldi	r22, 0x1D	; 29
     af0:	48 e1       	ldi	r20, 0x18	; 24
     af2:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,36,8);
     af6:	87 e0       	ldi	r24, 0x07	; 7
     af8:	64 e2       	ldi	r22, 0x24	; 36
     afa:	48 e0       	ldi	r20, 0x08	; 8
     afc:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,43,13);
     b00:	87 e0       	ldi	r24, 0x07	; 7
     b02:	6b e2       	ldi	r22, 0x2B	; 43
     b04:	4d e0       	ldi	r20, 0x0D	; 13
     b06:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,50,6);
     b0a:	87 e0       	ldi	r24, 0x07	; 7
     b0c:	62 e3       	ldi	r22, 0x32	; 50
     b0e:	46 e0       	ldi	r20, 0x06	; 6
     b10:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>

	letter_write(7,64,12);
     b14:	87 e0       	ldi	r24, 0x07	; 7
     b16:	60 e4       	ldi	r22, 0x40	; 64
     b18:	4c e0       	ldi	r20, 0x0C	; 12
     b1a:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,71,8);
     b1e:	87 e0       	ldi	r24, 0x07	; 7
     b20:	67 e4       	ldi	r22, 0x47	; 71
     b22:	48 e0       	ldi	r20, 0x08	; 8
     b24:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,78,13);
     b28:	87 e0       	ldi	r24, 0x07	; 7
     b2a:	6e e4       	ldi	r22, 0x4E	; 78
     b2c:	4d e0       	ldi	r20, 0x0D	; 13
     b2e:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,85,18);
     b32:	87 e0       	ldi	r24, 0x07	; 7
     b34:	65 e5       	ldi	r22, 0x55	; 85
     b36:	42 e1       	ldi	r20, 0x12	; 18
     b38:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>

	//first we will print 00
	number_write(4,48,0);
     b3c:	84 e0       	ldi	r24, 0x04	; 4
     b3e:	60 e3       	ldi	r22, 0x30	; 48
     b40:	40 e0       	ldi	r20, 0x00	; 0
     b42:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
	number_write(4,55,0);
     b46:	84 e0       	ldi	r24, 0x04	; 4
     b48:	67 e3       	ldi	r22, 0x37	; 55
     b4a:	40 e0       	ldi	r20, 0x00	; 0
     b4c:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>

	//writing min beside 00
	letter_write(4,69,12);
     b50:	84 e0       	ldi	r24, 0x04	; 4
     b52:	65 e4       	ldi	r22, 0x45	; 69
     b54:	4c e0       	ldi	r20, 0x0C	; 12
     b56:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(4,76,8);
     b5a:	84 e0       	ldi	r24, 0x04	; 4
     b5c:	6c e4       	ldi	r22, 0x4C	; 76
     b5e:	48 e0       	ldi	r20, 0x08	; 8
     b60:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(4,83,13);
     b64:	84 e0       	ldi	r24, 0x04	; 4
     b66:	63 e5       	ldi	r22, 0x53	; 83
     b68:	4d e0       	ldi	r20, 0x0D	; 13
     b6a:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>

	//drawing the underline
	setColumnAddress(48,62);
     b6e:	80 e3       	ldi	r24, 0x30	; 48
     b70:	6e e3       	ldi	r22, 0x3E	; 62
     b72:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setColumnAddress>
	setPageAddress(2,7);
     b76:	82 e0       	ldi	r24, 0x02	; 2
     b78:	67 e0       	ldi	r22, 0x07	; 7
     b7a:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <setPageAddress>
	I2C_Start(oled_write_address);
     b7e:	8a e7       	ldi	r24, 0x7A	; 122
     b80:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
	I2C_Write(CONTROL_DATA);
     b84:	80 e4       	ldi	r24, 0x40	; 64
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
     b8c:	00 e0       	ldi	r16, 0x00	; 0
	for(uint8 i = 0 ; i < 14 ; i++){
		I2C_Write(0xC0);
     b8e:	80 ec       	ldi	r24, 0xC0	; 192
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
	//drawing the underline
	setColumnAddress(48,62);
	setPageAddress(2,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(uint8 i = 0 ; i < 14 ; i++){
     b96:	0f 5f       	subi	r16, 0xFF	; 255
     b98:	0e 30       	cpi	r16, 0x0E	; 14
     b9a:	c9 f7       	brne	.-14     	; 0xb8e <study_timer+0xe2>
		I2C_Write(0xC0);
	}
	I2C_Stop();
     b9c:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>

	//writing slot
	letter_write(1,50,18);
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	62 e3       	ldi	r22, 0x32	; 50
     ba4:	42 e1       	ldi	r20, 0x12	; 18
     ba6:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(1,57,11);
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	69 e3       	ldi	r22, 0x39	; 57
     bae:	4b e0       	ldi	r20, 0x0B	; 11
     bb0:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(1,64,14);
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	60 e4       	ldi	r22, 0x40	; 64
     bb8:	4e e0       	ldi	r20, 0x0E	; 14
     bba:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(1,71,19);
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	67 e4       	ldi	r22, 0x47	; 71
     bc2:	43 e1       	ldi	r20, 0x13	; 19
     bc4:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>

	number_write(1,85,1);
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	65 e5       	ldi	r22, 0x55	; 85
     bcc:	41 e0       	ldi	r20, 0x01	; 1
     bce:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
     bd2:	10 e0       	ldi	r17, 0x00	; 0

	uint8 timer_tracker = 0 ;
	uint8 which_button = 0 ;
	do{
		which_button = 0 ;
		which_button = button_check();
     bd4:	0e 94 18 05 	call	0xa30	; 0xa30 <button_check>

		if(which_button == 3){
     bd8:	83 30       	cpi	r24, 0x03	; 3
     bda:	59 f4       	brne	.+22     	; 0xbf2 <study_timer+0x146>
			//this means that we pressed left
			//check if we stopping at letter a
			if(timer_tracker == 0){
     bdc:	11 23       	and	r17, r17
     bde:	39 f4       	brne	.+14     	; 0xbee <study_timer+0x142>
				timer_tracker = 99 ;
				double_digit_write(4,48,timer_tracker);
     be0:	84 e0       	ldi	r24, 0x04	; 4
     be2:	60 e3       	ldi	r22, 0x30	; 48
     be4:	43 e6       	ldi	r20, 0x63	; 99
     be6:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
     bea:	13 e6       	ldi	r17, 0x63	; 99
     bec:	f3 cf       	rjmp	.-26     	; 0xbd4 <study_timer+0x128>
			}else{
				timer_tracker-- ;
     bee:	11 50       	subi	r17, 0x01	; 1
     bf0:	0a c0       	rjmp	.+20     	; 0xc06 <study_timer+0x15a>
				double_digit_write(4,48,timer_tracker);
			}

		}else if(which_button == 4){
     bf2:	84 30       	cpi	r24, 0x04	; 4
     bf4:	71 f4       	brne	.+28     	; 0xc12 <study_timer+0x166>
			//this means that we pressed right
			//check if we stopping at letter z
			if(timer_tracker == 99){
     bf6:	13 36       	cpi	r17, 0x63	; 99
     bf8:	29 f4       	brne	.+10     	; 0xc04 <study_timer+0x158>
				timer_tracker = 0 ;
				double_digit_write(4,48,timer_tracker);
     bfa:	60 e3       	ldi	r22, 0x30	; 48
     bfc:	40 e0       	ldi	r20, 0x00	; 0
     bfe:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
     c02:	e7 cf       	rjmp	.-50     	; 0xbd2 <study_timer+0x126>
			}else{
				timer_tracker++ ;
     c04:	1f 5f       	subi	r17, 0xFF	; 255
				double_digit_write(4,48,timer_tracker);
     c06:	84 e0       	ldi	r24, 0x04	; 4
     c08:	60 e3       	ldi	r22, 0x30	; 48
     c0a:	41 2f       	mov	r20, r17
     c0c:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
     c10:	e1 cf       	rjmp	.-62     	; 0xbd4 <study_timer+0x128>
			}
		}

	}while(which_button != 5);
     c12:	85 30       	cpi	r24, 0x05	; 5
     c14:	f9 f6       	brne	.-66     	; 0xbd4 <study_timer+0x128>
     c16:	e1 2e       	mov	r14, r17
	//remove the underline
	setColumnAddress(48,62);
     c18:	80 e3       	ldi	r24, 0x30	; 48
     c1a:	6e e3       	ldi	r22, 0x3E	; 62
     c1c:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setColumnAddress>
	setPageAddress(2,7);
     c20:	82 e0       	ldi	r24, 0x02	; 2
     c22:	67 e0       	ldi	r22, 0x07	; 7
     c24:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <setPageAddress>
	I2C_Start(oled_write_address);
     c28:	8a e7       	ldi	r24, 0x7A	; 122
     c2a:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
	I2C_Write(CONTROL_DATA);
     c2e:	80 e4       	ldi	r24, 0x40	; 64
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
     c36:	00 e0       	ldi	r16, 0x00	; 0
	for(uint8 i = 0 ; i < 14 ; i++){
		I2C_Write(0x00);
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
	//remove the underline
	setColumnAddress(48,62);
	setPageAddress(2,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(uint8 i = 0 ; i < 14 ; i++){
     c40:	0f 5f       	subi	r16, 0xFF	; 255
     c42:	0e 30       	cpi	r16, 0x0E	; 14
     c44:	c9 f7       	brne	.-14     	; 0xc38 <study_timer+0x18c>
		I2C_Write(0x00);
	}
	I2C_Stop();
     c46:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>
     c4a:	dd 24       	eor	r13, r13
     c4c:	d3 94       	inc	r13
	uint8 slot_tracker = 1 ;


	do{
		which_button = 0 ;
		which_button = button_check();
     c4e:	0e 94 18 05 	call	0xa30	; 0xa30 <button_check>

		if(which_button == 3){
     c52:	83 30       	cpi	r24, 0x03	; 3
     c54:	61 f4       	brne	.+24     	; 0xc6e <study_timer+0x1c2>
			//this means that we pressed left
			//check if we stopping at letter a
			if(slot_tracker == 1){
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	d8 16       	cp	r13, r24
     c5a:	39 f4       	brne	.+14     	; 0xc6a <study_timer+0x1be>
				slot_tracker = 3 ;
				number_write(1,85,slot_tracker);
     c5c:	65 e5       	ldi	r22, 0x55	; 85
     c5e:	43 e0       	ldi	r20, 0x03	; 3
     c60:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
     c64:	83 e0       	ldi	r24, 0x03	; 3
     c66:	d8 2e       	mov	r13, r24
     c68:	f2 cf       	rjmp	.-28     	; 0xc4e <study_timer+0x1a2>
			}else{
				slot_tracker-- ;
     c6a:	da 94       	dec	r13
     c6c:	0c c0       	rjmp	.+24     	; 0xc86 <study_timer+0x1da>
				number_write(1,85,slot_tracker);
			}

		}else if(which_button == 4){
     c6e:	84 30       	cpi	r24, 0x04	; 4
     c70:	81 f4       	brne	.+32     	; 0xc92 <study_timer+0x1e6>
			if(slot_tracker == 3){
     c72:	93 e0       	ldi	r25, 0x03	; 3
     c74:	d9 16       	cp	r13, r25
     c76:	31 f4       	brne	.+12     	; 0xc84 <study_timer+0x1d8>
				slot_tracker = 1 ;
				number_write(1,85,slot_tracker);
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	65 e5       	ldi	r22, 0x55	; 85
     c7c:	41 e0       	ldi	r20, 0x01	; 1
     c7e:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
     c82:	e3 cf       	rjmp	.-58     	; 0xc4a <study_timer+0x19e>
			}else{
				slot_tracker++ ;
     c84:	d3 94       	inc	r13
				number_write(1,85,slot_tracker);
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	65 e5       	ldi	r22, 0x55	; 85
     c8a:	4d 2d       	mov	r20, r13
     c8c:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
     c90:	de cf       	rjmp	.-68     	; 0xc4e <study_timer+0x1a2>
			}
		}

	}while(which_button != 5);
     c92:	85 30       	cpi	r24, 0x05	; 5
     c94:	e1 f6       	brne	.-72     	; 0xc4e <study_timer+0x1a2>



	/******************************************/
	//here we will black entire screen and print a studying motive and then start the timer.
	black_entire_screen();
     c96:	0e 94 09 01 	call	0x212	; 0x212 <black_entire_screen>

	//keep going
	letter_write(7,1,10);
     c9a:	87 e0       	ldi	r24, 0x07	; 7
     c9c:	61 e0       	ldi	r22, 0x01	; 1
     c9e:	4a e0       	ldi	r20, 0x0A	; 10
     ca0:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,8,4);
     ca4:	87 e0       	ldi	r24, 0x07	; 7
     ca6:	68 e0       	ldi	r22, 0x08	; 8
     ca8:	44 e0       	ldi	r20, 0x04	; 4
     caa:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,15,4);
     cae:	87 e0       	ldi	r24, 0x07	; 7
     cb0:	6f e0       	ldi	r22, 0x0F	; 15
     cb2:	44 e0       	ldi	r20, 0x04	; 4
     cb4:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,22,15);
     cb8:	87 e0       	ldi	r24, 0x07	; 7
     cba:	66 e1       	ldi	r22, 0x16	; 22
     cbc:	4f e0       	ldi	r20, 0x0F	; 15
     cbe:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>

	letter_write(7,36,6);
     cc2:	87 e0       	ldi	r24, 0x07	; 7
     cc4:	64 e2       	ldi	r22, 0x24	; 36
     cc6:	46 e0       	ldi	r20, 0x06	; 6
     cc8:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,43,14);
     ccc:	87 e0       	ldi	r24, 0x07	; 7
     cce:	6b e2       	ldi	r22, 0x2B	; 43
     cd0:	4e e0       	ldi	r20, 0x0E	; 14
     cd2:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,50,8);
     cd6:	87 e0       	ldi	r24, 0x07	; 7
     cd8:	62 e3       	ldi	r22, 0x32	; 50
     cda:	48 e0       	ldi	r20, 0x08	; 8
     cdc:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,57,13);
     ce0:	87 e0       	ldi	r24, 0x07	; 7
     ce2:	69 e3       	ldi	r22, 0x39	; 57
     ce4:	4d e0       	ldi	r20, 0x0D	; 13
     ce6:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(7,64,6);
     cea:	87 e0       	ldi	r24, 0x07	; 7
     cec:	60 e4       	ldi	r22, 0x40	; 64
     cee:	46 e0       	ldi	r20, 0x06	; 6
     cf0:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>

	//print start min
	double_digit_write(4,48,timer_tracker);
     cf4:	84 e0       	ldi	r24, 0x04	; 4
     cf6:	60 e3       	ldi	r22, 0x30	; 48
     cf8:	41 2f       	mov	r20, r17
     cfa:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
	//writing min beside 00
	letter_write(4,69,12);
     cfe:	84 e0       	ldi	r24, 0x04	; 4
     d00:	65 e4       	ldi	r22, 0x45	; 69
     d02:	4c e0       	ldi	r20, 0x0C	; 12
     d04:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(4,76,8);
     d08:	84 e0       	ldi	r24, 0x04	; 4
     d0a:	6c e4       	ldi	r22, 0x4C	; 76
     d0c:	48 e0       	ldi	r20, 0x08	; 8
     d0e:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(4,83,13);
     d12:	84 e0       	ldi	r24, 0x04	; 4
     d14:	63 e5       	ldi	r22, 0x53	; 83
     d16:	4d e0       	ldi	r20, 0x0D	; 13
     d18:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>

	//drawing the underline
	setColumnAddress(48,62);
     d1c:	80 e3       	ldi	r24, 0x30	; 48
     d1e:	6e e3       	ldi	r22, 0x3E	; 62
     d20:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setColumnAddress>
	setPageAddress(2,7);
     d24:	82 e0       	ldi	r24, 0x02	; 2
     d26:	67 e0       	ldi	r22, 0x07	; 7
     d28:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <setPageAddress>
	I2C_Start(oled_write_address);
     d2c:	8a e7       	ldi	r24, 0x7A	; 122
     d2e:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
	I2C_Write(CONTROL_DATA);
     d32:	80 e4       	ldi	r24, 0x40	; 64
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
     d3a:	00 e0       	ldi	r16, 0x00	; 0
	for(uint8 i = 0 ; i < 14 ; i++){
		I2C_Write(0xC0);
     d3c:	80 ec       	ldi	r24, 0xC0	; 192
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
	//drawing the underline
	setColumnAddress(48,62);
	setPageAddress(2,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(uint8 i = 0 ; i < 14 ; i++){
     d44:	0f 5f       	subi	r16, 0xFF	; 255
     d46:	0e 30       	cpi	r16, 0x0E	; 14
     d48:	c9 f7       	brne	.-14     	; 0xd3c <study_timer+0x290>
		I2C_Write(0xC0);
	}
	I2C_Stop();
     d4a:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>
     d4e:	08 c0       	rjmp	.+16     	; 0xd60 <study_timer+0x2b4>
	//5) store in minutes ---> whole_minutes % 60


	uint8 studied_mins = 0 ;
	while(timer_tracker ){
		minute_delay();
     d50:	0e 94 b2 14 	call	0x2964	; 0x2964 <minute_delay>
		studied_mins++ ;
		timer_tracker--;
     d54:	11 50       	subi	r17, 0x01	; 1
		double_digit_write(4,48,timer_tracker);
     d56:	84 e0       	ldi	r24, 0x04	; 4
     d58:	60 e3       	ldi	r22, 0x30	; 48
     d5a:	41 2f       	mov	r20, r17
     d5c:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
	//4) whole_minute / 60 --> add this value to the hours
	//5) store in minutes ---> whole_minutes % 60


	uint8 studied_mins = 0 ;
	while(timer_tracker ){
     d60:	11 23       	and	r17, r17
     d62:	b1 f7       	brne	.-20     	; 0xd50 <study_timer+0x2a4>

	uint8 targeted_address = 0 ;
	uint8 mem_page_address_read = 0 ;
	uint8 mem_page_address_write = 0 ;

	if(slot_tracker == 1){
     d64:	e1 e0       	ldi	r30, 0x01	; 1
     d66:	de 16       	cp	r13, r30
     d68:	19 f4       	brne	.+6      	; 0xd70 <study_timer+0x2c4>
     d6a:	0e ef       	ldi	r16, 0xFE	; 254
     d6c:	d0 2e       	mov	r13, r16
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <study_timer+0x2ce>
		targeted_address = 0xFE ;
		mem_page_address_write = 0b10101010 ;
		mem_page_address_read = 0b10101011 ;
	}else if(slot_tracker == 2){
     d70:	f2 e0       	ldi	r31, 0x02	; 2
     d72:	df 16       	cp	r13, r31
     d74:	29 f4       	brne	.+10     	; 0xd80 <study_timer+0x2d4>
     d76:	dd 24       	eor	r13, r13
     d78:	da 94       	dec	r13
     d7a:	0b ea       	ldi	r16, 0xAB	; 171
     d7c:	1a ea       	ldi	r17, 0xAA	; 170
     d7e:	0a c0       	rjmp	.+20     	; 0xd94 <study_timer+0x2e8>
		targeted_address = 0xFF ;
		mem_page_address_write = 0b10101010 ;
		mem_page_address_read = 0b10101011 ;
	}else if(slot_tracker == 3){
     d80:	83 e0       	ldi	r24, 0x03	; 3
     d82:	d8 16       	cp	r13, r24
     d84:	21 f4       	brne	.+8      	; 0xd8e <study_timer+0x2e2>
     d86:	dd 24       	eor	r13, r13
     d88:	0d ea       	ldi	r16, 0xAD	; 173
     d8a:	1c ea       	ldi	r17, 0xAC	; 172
     d8c:	03 c0       	rjmp	.+6      	; 0xd94 <study_timer+0x2e8>
     d8e:	dd 24       	eor	r13, r13
     d90:	00 e0       	ldi	r16, 0x00	; 0
     d92:	10 e0       	ldi	r17, 0x00	; 0
		mem_page_address_write = 0b10101100 ;
		mem_page_address_read = 0b10101101 ;
	}

	//now read from the memory
	I2C_Init();
     d94:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <I2C_Init>
	I2C_Start(mem_page_address_write);
     d98:	81 2f       	mov	r24, r17
     d9a:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
	I2C_Write(targeted_address);
     d9e:	8d 2d       	mov	r24, r13
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
	I2C_Repeated_Start(mem_page_address_read);
     da6:	80 2f       	mov	r24, r16
     da8:	0e 94 9b 11 	call	0x2336	; 0x2336 <I2C_Repeated_Start>
	uint8 slot_val = I2C_Read_NACK();
     dac:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <I2C_Read_NACK>
     db0:	08 2f       	mov	r16, r24
	I2C_Stop();
     db2:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>

	//now make operation on the slot_val
	uint8 mins_holder = ((slot_val & 0b00011111) + studied_mins ) % 60 ;
     db6:	e0 2f       	mov	r30, r16
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	fa 83       	std	Y+2, r31	; 0x02
     dbc:	e9 83       	std	Y+1, r30	; 0x01
     dbe:	ff 24       	eor	r15, r15
	uint8 hours_holder = ((slot_val & 0b11100000) + studied_mins ) / 60 ;
	slot_val = hours_holder | mins_holder ;


	//now send it again to the memory
	I2C_Init();
     dc0:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <I2C_Init>
	I2C_Start(mem_page_address_write);
     dc4:	81 2f       	mov	r24, r17
     dc6:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
	I2C_Write(targeted_address);
     dca:	8d 2d       	mov	r24, r13
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
	I2C_Write(slot_val);
     dd2:	89 81       	ldd	r24, Y+1	; 0x01
     dd4:	9a 81       	ldd	r25, Y+2	; 0x02
     dd6:	80 7e       	andi	r24, 0xE0	; 224
     dd8:	90 70       	andi	r25, 0x00	; 0
     dda:	8e 0d       	add	r24, r14
     ddc:	9f 1d       	adc	r25, r15
     dde:	6c e3       	ldi	r22, 0x3C	; 60
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <__divmodhi4>
     de6:	26 2f       	mov	r18, r22
     de8:	89 81       	ldd	r24, Y+1	; 0x01
     dea:	9a 81       	ldd	r25, Y+2	; 0x02
     dec:	8f 71       	andi	r24, 0x1F	; 31
     dee:	90 70       	andi	r25, 0x00	; 0
     df0:	9a 83       	std	Y+2, r25	; 0x02
     df2:	89 83       	std	Y+1, r24	; 0x01
     df4:	8e 0d       	add	r24, r14
     df6:	9f 1d       	adc	r25, r15
     df8:	6c e3       	ldi	r22, 0x3C	; 60
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <__divmodhi4>
     e00:	82 2b       	or	r24, r18
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
	I2C_Stop();
     e08:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>


	//session finished
	return 1 ;

}
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	0f 90       	pop	r0
     e10:	0f 90       	pop	r0
     e12:	cf 91       	pop	r28
     e14:	df 91       	pop	r29
     e16:	1f 91       	pop	r17
     e18:	0f 91       	pop	r16
     e1a:	ff 90       	pop	r15
     e1c:	ef 90       	pop	r14
     e1e:	df 90       	pop	r13
     e20:	08 95       	ret

00000e22 <live_clock>:
	uint8 tens = (bcd >> 4) * 10 ;
	tens = tens + (bcd & 0b00001111) ;
	return tens ;
}
/*********************************************************************/
uint8 live_clock(void){
     e22:	2f 92       	push	r2
     e24:	3f 92       	push	r3
     e26:	4f 92       	push	r4
     e28:	5f 92       	push	r5
     e2a:	6f 92       	push	r6
     e2c:	7f 92       	push	r7
     e2e:	8f 92       	push	r8
     e30:	9f 92       	push	r9
     e32:	af 92       	push	r10
     e34:	bf 92       	push	r11
     e36:	cf 92       	push	r12
     e38:	df 92       	push	r13
     e3a:	ef 92       	push	r14
     e3c:	ff 92       	push	r15
     e3e:	0f 93       	push	r16
     e40:	1f 93       	push	r17
     e42:	df 93       	push	r29
     e44:	cf 93       	push	r28
     e46:	cd b7       	in	r28, 0x3d	; 61
     e48:	de b7       	in	r29, 0x3e	; 62
     e4a:	29 97       	sbiw	r28, 0x09	; 9
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	f8 94       	cli
     e50:	de bf       	out	0x3e, r29	; 62
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	cd bf       	out	0x3d, r28	; 61

	black_entire_screen();
     e56:	0e 94 09 01 	call	0x212	; 0x212 <black_entire_screen>
	//making struct object to hold the data coming from the RTC
	CLOCK_DATA CLOCK_HOLDER_NEW , CLOCK_HOLDER_OLD;
	DATE_DATA DATE_HOLDER_NEW , DATE_HOLDER_OLD;

	//for storing data for the first comparison
	CLOCK_HOLDER_OLD = CLOCK_HOLDER_NEW;
     e5a:	4c 80       	ldd	r4, Y+4	; 0x04
     e5c:	2a 80       	ldd	r2, Y+2	; 0x02
     e5e:	bb 80       	ldd	r11, Y+3	; 0x03
	RTC_CLOCK_Read(0x00,&CLOCK_HOLDER_NEW);
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	be 01       	movw	r22, r28
     e64:	6f 5f       	subi	r22, 0xFF	; 255
     e66:	7f 4f       	sbci	r23, 0xFF	; 255
     e68:	0e 94 43 15 	call	0x2a86	; 0x2a86 <RTC_CLOCK_Read>
	RTC_DATE_Read(0x03,&DATE_HOLDER_NEW);
     e6c:	83 e0       	ldi	r24, 0x03	; 3
     e6e:	be 01       	movw	r22, r28
     e70:	6b 5f       	subi	r22, 0xFB	; 251
     e72:	7f 4f       	sbci	r23, 0xFF	; 255
     e74:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <RTC_DATE_Read>

	//to mask the clock bits only and remove PM/AM and 24/12 hour format bits.
	CLOCK_HOLDER_NEW.hours &= 0b00011111 ;
     e78:	8b 81       	ldd	r24, Y+3	; 0x03
     e7a:	48 2f       	mov	r20, r24
     e7c:	4f 71       	andi	r20, 0x1F	; 31
     e7e:	4b 83       	std	Y+3, r20	; 0x03
	}
	return 1 ;
}
/*********************************************************************/
uint8 bcd_to_dec(uint8 bcd){
	uint8 tens = (bcd >> 4) * 10 ;
     e80:	42 95       	swap	r20
     e82:	4f 70       	andi	r20, 0x0F	; 15
     e84:	9a e0       	ldi	r25, 0x0A	; 10
     e86:	49 9f       	mul	r20, r25
     e88:	40 2d       	mov	r20, r0
     e8a:	11 24       	eor	r1, r1

	//to mask the clock bits only and remove PM/AM and 24/12 hour format bits.
	CLOCK_HOLDER_NEW.hours &= 0b00011111 ;

	//Printing current time
	double_digit_write(5, 41, bcd_to_dec(CLOCK_HOLDER_NEW.hours));
     e8c:	8f 70       	andi	r24, 0x0F	; 15
     e8e:	48 0f       	add	r20, r24
     e90:	85 e0       	ldi	r24, 0x05	; 5
     e92:	69 e2       	ldi	r22, 0x29	; 41
     e94:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>

	//Printing :
	setColumnAddress(55,128);
     e98:	87 e3       	ldi	r24, 0x37	; 55
     e9a:	60 e8       	ldi	r22, 0x80	; 128
     e9c:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setColumnAddress>
	setPageAddress(5,7);
     ea0:	85 e0       	ldi	r24, 0x05	; 5
     ea2:	67 e0       	ldi	r22, 0x07	; 7
     ea4:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <setPageAddress>
	I2C_Start(oled_write_address);
     ea8:	8a e7       	ldi	r24, 0x7A	; 122
     eaa:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
	I2C_Write(CONTROL_DATA);
     eae:	80 e4       	ldi	r24, 0x40	; 64
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
     eb6:	0b e7       	ldi	r16, 0x7B	; 123
     eb8:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8 i = 0 ; i < 7 ;i++){
		I2C_Write(double_dot_bitmap[i]);
     eba:	f8 01       	movw	r30, r16
     ebc:	81 91       	ld	r24, Z+
     ebe:	8f 01       	movw	r16, r30
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
	//Printing :
	setColumnAddress(55,128);
	setPageAddress(5,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(uint8 i = 0 ; i < 7 ;i++){
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	02 38       	cpi	r16, 0x82	; 130
     eca:	1f 07       	cpc	r17, r31
     ecc:	b1 f7       	brne	.-20     	; 0xeba <live_clock+0x98>
		I2C_Write(double_dot_bitmap[i]);
	}
	I2C_Stop();
     ece:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>

	setColumnAddress(55,128);
     ed2:	87 e3       	ldi	r24, 0x37	; 55
     ed4:	60 e8       	ldi	r22, 0x80	; 128
     ed6:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setColumnAddress>
	setPageAddress(4,7);
     eda:	84 e0       	ldi	r24, 0x04	; 4
     edc:	67 e0       	ldi	r22, 0x07	; 7
     ede:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <setPageAddress>
	I2C_Start(oled_write_address);
     ee2:	8a e7       	ldi	r24, 0x7A	; 122
     ee4:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
	I2C_Write(CONTROL_DATA);
     ee8:	80 e4       	ldi	r24, 0x40	; 64
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
	for(uint8 i = 7 ; i < 14 ; i++){
		I2C_Write(double_dot_bitmap[i]);
     ef0:	f8 01       	movw	r30, r16
     ef2:	81 91       	ld	r24, Z+
     ef4:	8f 01       	movw	r16, r30
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>

	setColumnAddress(55,128);
	setPageAddress(4,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(uint8 i = 7 ; i < 14 ; i++){
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	09 38       	cpi	r16, 0x89	; 137
     f00:	1f 07       	cpc	r17, r31
     f02:	b1 f7       	brne	.-20     	; 0xef0 <live_clock+0xce>
		I2C_Write(double_dot_bitmap[i]);
	}
	I2C_Stop();
     f04:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>

	double_digit_write(5 ,62 ,bcd_to_dec(CLOCK_HOLDER_NEW.minutes));
     f08:	8a 81       	ldd	r24, Y+2	; 0x02
	}
	return 1 ;
}
/*********************************************************************/
uint8 bcd_to_dec(uint8 bcd){
	uint8 tens = (bcd >> 4) * 10 ;
     f0a:	48 2f       	mov	r20, r24
     f0c:	42 95       	swap	r20
     f0e:	4f 70       	andi	r20, 0x0F	; 15
     f10:	9a e0       	ldi	r25, 0x0A	; 10
     f12:	49 9f       	mul	r20, r25
     f14:	40 2d       	mov	r20, r0
     f16:	11 24       	eor	r1, r1
	for(uint8 i = 7 ; i < 14 ; i++){
		I2C_Write(double_dot_bitmap[i]);
	}
	I2C_Stop();

	double_digit_write(5 ,62 ,bcd_to_dec(CLOCK_HOLDER_NEW.minutes));
     f18:	8f 70       	andi	r24, 0x0F	; 15
     f1a:	48 0f       	add	r20, r24
     f1c:	85 e0       	ldi	r24, 0x05	; 5
     f1e:	6e e3       	ldi	r22, 0x3E	; 62
     f20:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>

	//writing pm or am
	if(CLOCK_HOLDER_NEW.am_pm){
     f24:	8c 81       	ldd	r24, Y+4	; 0x04
     f26:	88 23       	and	r24, r24
     f28:	21 f0       	breq	.+8      	; 0xf32 <live_clock+0x110>
		//this means that we are pm
		letter_write(5,76,15);
     f2a:	85 e0       	ldi	r24, 0x05	; 5
     f2c:	6c e4       	ldi	r22, 0x4C	; 76
     f2e:	4f e0       	ldi	r20, 0x0F	; 15
     f30:	03 c0       	rjmp	.+6      	; 0xf38 <live_clock+0x116>
		letter_write(5,83,12);
	}else if(CLOCK_HOLDER_NEW.am_pm == 0){
		letter_write(5,76,0);
     f32:	85 e0       	ldi	r24, 0x05	; 5
     f34:	6c e4       	ldi	r22, 0x4C	; 76
     f36:	40 e0       	ldi	r20, 0x00	; 0
     f38:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
		letter_write(5,83,12);
     f3c:	85 e0       	ldi	r24, 0x05	; 5
     f3e:	63 e5       	ldi	r22, 0x53	; 83
     f40:	4c e0       	ldi	r20, 0x0C	; 12
     f42:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	}

	//writing the day from date
	double_digit_write(2,20,bcd_to_dec(DATE_HOLDER_NEW.date));
     f46:	8e 81       	ldd	r24, Y+6	; 0x06
	}
	return 1 ;
}
/*********************************************************************/
uint8 bcd_to_dec(uint8 bcd){
	uint8 tens = (bcd >> 4) * 10 ;
     f48:	48 2f       	mov	r20, r24
     f4a:	42 95       	swap	r20
     f4c:	4f 70       	andi	r20, 0x0F	; 15
     f4e:	9a e0       	ldi	r25, 0x0A	; 10
     f50:	49 9f       	mul	r20, r25
     f52:	40 2d       	mov	r20, r0
     f54:	11 24       	eor	r1, r1
		letter_write(5,76,0);
		letter_write(5,83,12);
	}

	//writing the day from date
	double_digit_write(2,20,bcd_to_dec(DATE_HOLDER_NEW.date));
     f56:	8f 70       	andi	r24, 0x0F	; 15
     f58:	48 0f       	add	r20, r24
     f5a:	82 e0       	ldi	r24, 0x02	; 2
     f5c:	64 e1       	ldi	r22, 0x14	; 20
     f5e:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>


	//Printing -
	setColumnAddress(34,128);
     f62:	82 e2       	ldi	r24, 0x22	; 34
     f64:	60 e8       	ldi	r22, 0x80	; 128
     f66:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setColumnAddress>
	setPageAddress(2,7);
     f6a:	82 e0       	ldi	r24, 0x02	; 2
     f6c:	67 e0       	ldi	r22, 0x07	; 7
     f6e:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <setPageAddress>
	I2C_Start(oled_write_address);
     f72:	8a e7       	ldi	r24, 0x7A	; 122
     f74:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
	I2C_Write(CONTROL_DATA);
     f78:	80 e4       	ldi	r24, 0x40	; 64
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
     f80:	29 e8       	ldi	r18, 0x89	; 137
     f82:	c2 2e       	mov	r12, r18
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	d2 2e       	mov	r13, r18
     f88:	86 01       	movw	r16, r12
	for(uint8 i = 0 ; i < 7 ;i++){
		I2C_Write(dash_bitmap[i]);
     f8a:	f8 01       	movw	r30, r16
     f8c:	81 91       	ld	r24, Z+
     f8e:	8f 01       	movw	r16, r30
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
	//Printing -
	setColumnAddress(34,128);
	setPageAddress(2,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(uint8 i = 0 ; i < 7 ;i++){
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	00 39       	cpi	r16, 0x90	; 144
     f9a:	1f 07       	cpc	r17, r31
     f9c:	b1 f7       	brne	.-20     	; 0xf8a <live_clock+0x168>
		I2C_Write(dash_bitmap[i]);
	}
	I2C_Stop();
     f9e:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>

	setColumnAddress(34,128);
     fa2:	82 e2       	ldi	r24, 0x22	; 34
     fa4:	60 e8       	ldi	r22, 0x80	; 128
     fa6:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setColumnAddress>
	setPageAddress(1,7);
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	67 e0       	ldi	r22, 0x07	; 7
     fae:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <setPageAddress>
	I2C_Start(oled_write_address);
     fb2:	8a e7       	ldi	r24, 0x7A	; 122
     fb4:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
	I2C_Write(CONTROL_DATA);
     fb8:	80 e4       	ldi	r24, 0x40	; 64
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
     fc0:	78 01       	movw	r14, r16
	for(uint8 i = 7 ; i < 14 ; i++){
		I2C_Write(dash_bitmap[i]);
     fc2:	f8 01       	movw	r30, r16
     fc4:	81 91       	ld	r24, Z+
     fc6:	8f 01       	movw	r16, r30
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>

	setColumnAddress(34,128);
	setPageAddress(1,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(uint8 i = 7 ; i < 14 ; i++){
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	07 39       	cpi	r16, 0x97	; 151
     fd2:	1f 07       	cpc	r17, r31
     fd4:	b1 f7       	brne	.-20     	; 0xfc2 <live_clock+0x1a0>
		I2C_Write(dash_bitmap[i]);
	}
	I2C_Stop();
     fd6:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>

	//writing the month
	double_digit_write(2, 41, bcd_to_dec(DATE_HOLDER_NEW.month));
     fda:	8f 81       	ldd	r24, Y+7	; 0x07
	}
	return 1 ;
}
/*********************************************************************/
uint8 bcd_to_dec(uint8 bcd){
	uint8 tens = (bcd >> 4) * 10 ;
     fdc:	48 2f       	mov	r20, r24
     fde:	42 95       	swap	r20
     fe0:	4f 70       	andi	r20, 0x0F	; 15
     fe2:	9a e0       	ldi	r25, 0x0A	; 10
     fe4:	49 9f       	mul	r20, r25
     fe6:	40 2d       	mov	r20, r0
     fe8:	11 24       	eor	r1, r1
		I2C_Write(dash_bitmap[i]);
	}
	I2C_Stop();

	//writing the month
	double_digit_write(2, 41, bcd_to_dec(DATE_HOLDER_NEW.month));
     fea:	8f 70       	andi	r24, 0x0F	; 15
     fec:	48 0f       	add	r20, r24
     fee:	82 e0       	ldi	r24, 0x02	; 2
     ff0:	69 e2       	ldi	r22, 0x29	; 41
     ff2:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>

	//Printing -
	setColumnAddress(55,128);
     ff6:	87 e3       	ldi	r24, 0x37	; 55
     ff8:	60 e8       	ldi	r22, 0x80	; 128
     ffa:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setColumnAddress>
	setPageAddress(2,7);
     ffe:	82 e0       	ldi	r24, 0x02	; 2
    1000:	67 e0       	ldi	r22, 0x07	; 7
    1002:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <setPageAddress>
	I2C_Start(oled_write_address);
    1006:	8a e7       	ldi	r24, 0x7A	; 122
    1008:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
	I2C_Write(CONTROL_DATA);
    100c:	80 e4       	ldi	r24, 0x40	; 64
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
	for(uint8 i = 0 ; i < 7 ;i++){
		I2C_Write(dash_bitmap[i]);
    1014:	f6 01       	movw	r30, r12
    1016:	81 91       	ld	r24, Z+
    1018:	6f 01       	movw	r12, r30
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
	//Printing -
	setColumnAddress(55,128);
	setPageAddress(2,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(uint8 i = 0 ; i < 7 ;i++){
    1020:	f0 e9       	ldi	r31, 0x90	; 144
    1022:	cf 16       	cp	r12, r31
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	df 06       	cpc	r13, r31
    1028:	a9 f7       	brne	.-22     	; 0x1014 <live_clock+0x1f2>
		I2C_Write(dash_bitmap[i]);
	}
	I2C_Stop();
    102a:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>

	setColumnAddress(55,128);
    102e:	87 e3       	ldi	r24, 0x37	; 55
    1030:	60 e8       	ldi	r22, 0x80	; 128
    1032:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setColumnAddress>
	setPageAddress(1,7);
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	67 e0       	ldi	r22, 0x07	; 7
    103a:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <setPageAddress>
	I2C_Start(oled_write_address);
    103e:	8a e7       	ldi	r24, 0x7A	; 122
    1040:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
	I2C_Write(CONTROL_DATA);
    1044:	80 e4       	ldi	r24, 0x40	; 64
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
	for(uint8 i = 7 ; i < 14 ; i++){
		I2C_Write(dash_bitmap[i]);
    104c:	f7 01       	movw	r30, r14
    104e:	81 91       	ld	r24, Z+
    1050:	7f 01       	movw	r14, r30
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>

	setColumnAddress(55,128);
	setPageAddress(1,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(uint8 i = 7 ; i < 14 ; i++){
    1058:	f7 e9       	ldi	r31, 0x97	; 151
    105a:	ef 16       	cp	r14, r31
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	ff 06       	cpc	r15, r31
    1060:	a9 f7       	brne	.-22     	; 0x104c <live_clock+0x22a>
		I2C_Write(dash_bitmap[i]);
	}
	I2C_Stop();
    1062:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>

	//writing the thousand index 2 in 2023
	number_write(2,62,2);
    1066:	82 e0       	ldi	r24, 0x02	; 2
    1068:	6e e3       	ldi	r22, 0x3E	; 62
    106a:	42 e0       	ldi	r20, 0x02	; 2
    106c:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
	triple_digit_write(2, 69, bcd_to_dec(DATE_HOLDER_NEW.year));
    1070:	88 85       	ldd	r24, Y+8	; 0x08
	}
	return 1 ;
}
/*********************************************************************/
uint8 bcd_to_dec(uint8 bcd){
	uint8 tens = (bcd >> 4) * 10 ;
    1072:	48 2f       	mov	r20, r24
    1074:	42 95       	swap	r20
    1076:	4f 70       	andi	r20, 0x0F	; 15
    1078:	9a e0       	ldi	r25, 0x0A	; 10
    107a:	49 9f       	mul	r20, r25
    107c:	40 2d       	mov	r20, r0
    107e:	11 24       	eor	r1, r1
	}
	I2C_Stop();

	//writing the thousand index 2 in 2023
	number_write(2,62,2);
	triple_digit_write(2, 69, bcd_to_dec(DATE_HOLDER_NEW.year));
    1080:	8f 70       	andi	r24, 0x0F	; 15
    1082:	48 0f       	add	r20, r24
    1084:	82 e0       	ldi	r24, 0x02	; 2
    1086:	65 e4       	ldi	r22, 0x45	; 69
    1088:	50 e0       	ldi	r21, 0x00	; 0
    108a:	0e 94 be 04 	call	0x97c	; 0x97c <triple_digit_write>

	//printing the day
	day_name_print(DATE_HOLDER_NEW.day - 1 , days);
    108e:	8d 81       	ldd	r24, Y+5	; 0x05
    1090:	81 50       	subi	r24, 0x01	; 1
    1092:	66 e6       	ldi	r22, 0x66	; 102
    1094:	70 e0       	ldi	r23, 0x00	; 0
    1096:	0e 94 71 03 	call	0x6e2	; 0x6e2 <day_name_print>
	}
	return 1 ;
}
/*********************************************************************/
uint8 bcd_to_dec(uint8 bcd){
	uint8 tens = (bcd >> 4) * 10 ;
    109a:	9a e0       	ldi	r25, 0x0A	; 10
    109c:	a9 2e       	mov	r10, r25



	uint8 which_button = 0 ;
	do{
		which_button = button_check();
    109e:	0e 94 18 05 	call	0xa30	; 0xa30 <button_check>
    10a2:	38 2e       	mov	r3, r24

		//now checking and reading time
		RTC_CLOCK_Read(0x00,&CLOCK_HOLDER_NEW);
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	be 01       	movw	r22, r28
    10a8:	6f 5f       	subi	r22, 0xFF	; 255
    10aa:	7f 4f       	sbci	r23, 0xFF	; 255
    10ac:	0e 94 43 15 	call	0x2a86	; 0x2a86 <RTC_CLOCK_Read>
		if(CLOCK_HOLDER_NEW.hours != CLOCK_HOLDER_OLD.hours){
    10b0:	cb 80       	ldd	r12, Y+3	; 0x03
    10b2:	cb 14       	cp	r12, r11
    10b4:	81 f0       	breq	.+32     	; 0x10d6 <live_clock+0x2b4>
			CLOCK_HOLDER_NEW.hours &= 0b00011111 ;
    10b6:	8f e1       	ldi	r24, 0x1F	; 31
    10b8:	c8 22       	and	r12, r24
    10ba:	cb 82       	std	Y+3, r12	; 0x03
	}
	return 1 ;
}
/*********************************************************************/
uint8 bcd_to_dec(uint8 bcd){
	uint8 tens = (bcd >> 4) * 10 ;
    10bc:	4c 2d       	mov	r20, r12
    10be:	42 95       	swap	r20
    10c0:	4f 70       	andi	r20, 0x0F	; 15
    10c2:	4a 9d       	mul	r20, r10
    10c4:	40 2d       	mov	r20, r0
    10c6:	11 24       	eor	r1, r1
		//now checking and reading time
		RTC_CLOCK_Read(0x00,&CLOCK_HOLDER_NEW);
		if(CLOCK_HOLDER_NEW.hours != CLOCK_HOLDER_OLD.hours){
			CLOCK_HOLDER_NEW.hours &= 0b00011111 ;
			CLOCK_HOLDER_OLD.hours = CLOCK_HOLDER_NEW.hours;
			double_digit_write(5, 41, bcd_to_dec(CLOCK_HOLDER_OLD.hours));
    10c8:	8c 2d       	mov	r24, r12
    10ca:	8f 70       	andi	r24, 0x0F	; 15
    10cc:	48 0f       	add	r20, r24
    10ce:	85 e0       	ldi	r24, 0x05	; 5
    10d0:	69 e2       	ldi	r22, 0x29	; 41
    10d2:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
		}

		if(CLOCK_HOLDER_NEW.minutes != CLOCK_HOLDER_OLD.minutes){
    10d6:	ba 80       	ldd	r11, Y+2	; 0x02
    10d8:	b2 14       	cp	r11, r2
    10da:	69 f0       	breq	.+26     	; 0x10f6 <live_clock+0x2d4>
	}
	return 1 ;
}
/*********************************************************************/
uint8 bcd_to_dec(uint8 bcd){
	uint8 tens = (bcd >> 4) * 10 ;
    10dc:	4b 2d       	mov	r20, r11
    10de:	42 95       	swap	r20
    10e0:	4f 70       	andi	r20, 0x0F	; 15
    10e2:	4a 9d       	mul	r20, r10
    10e4:	40 2d       	mov	r20, r0
    10e6:	11 24       	eor	r1, r1
			double_digit_write(5, 41, bcd_to_dec(CLOCK_HOLDER_OLD.hours));
		}

		if(CLOCK_HOLDER_NEW.minutes != CLOCK_HOLDER_OLD.minutes){
			CLOCK_HOLDER_OLD.minutes = CLOCK_HOLDER_NEW.minutes ;
			double_digit_write(5, 62, bcd_to_dec(CLOCK_HOLDER_OLD.minutes));
    10e8:	8b 2d       	mov	r24, r11
    10ea:	8f 70       	andi	r24, 0x0F	; 15
    10ec:	48 0f       	add	r20, r24
    10ee:	85 e0       	ldi	r24, 0x05	; 5
    10f0:	6e e3       	ldi	r22, 0x3E	; 62
    10f2:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
		}

		if(CLOCK_HOLDER_NEW.am_pm != CLOCK_HOLDER_OLD.am_pm){
    10f6:	1c 81       	ldd	r17, Y+4	; 0x04
    10f8:	14 15       	cp	r17, r4
    10fa:	c9 f0       	breq	.+50     	; 0x112e <live_clock+0x30c>
			CLOCK_HOLDER_OLD.am_pm = CLOCK_HOLDER_NEW.am_pm ;
			//writing pm or am
			if(CLOCK_HOLDER_OLD.am_pm){
    10fc:	11 23       	and	r17, r17
    10fe:	61 f0       	breq	.+24     	; 0x1118 <live_clock+0x2f6>
				//this means that we are pm
				letter_write(5,76,15);
    1100:	85 e0       	ldi	r24, 0x05	; 5
    1102:	6c e4       	ldi	r22, 0x4C	; 76
    1104:	4f e0       	ldi	r20, 0x0F	; 15
    1106:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
				letter_write(5,83,12);
    110a:	85 e0       	ldi	r24, 0x05	; 5
    110c:	63 e5       	ldi	r22, 0x53	; 83
    110e:	4c e0       	ldi	r20, 0x0C	; 12
    1110:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
    1114:	41 2e       	mov	r4, r17
    1116:	0b c0       	rjmp	.+22     	; 0x112e <live_clock+0x30c>
			}else if(CLOCK_HOLDER_OLD.am_pm == 0){
				letter_write(5,76,0);
    1118:	85 e0       	ldi	r24, 0x05	; 5
    111a:	6c e4       	ldi	r22, 0x4C	; 76
    111c:	40 e0       	ldi	r20, 0x00	; 0
    111e:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
				letter_write(5,83,12);
    1122:	85 e0       	ldi	r24, 0x05	; 5
    1124:	63 e5       	ldi	r22, 0x53	; 83
    1126:	4c e0       	ldi	r20, 0x0C	; 12
    1128:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
    112c:	44 24       	eor	r4, r4
		}



		//now checking and reading date
		RTC_DATE_Read(0x03,&DATE_HOLDER_NEW);
    112e:	83 e0       	ldi	r24, 0x03	; 3
    1130:	be 01       	movw	r22, r28
    1132:	6b 5f       	subi	r22, 0xFB	; 251
    1134:	7f 4f       	sbci	r23, 0xFF	; 255
    1136:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <RTC_DATE_Read>

		if(DATE_HOLDER_NEW.date != DATE_HOLDER_OLD.date){
    113a:	de 80       	ldd	r13, Y+6	; 0x06
    113c:	d7 14       	cp	r13, r7
    113e:	21 f4       	brne	.+8      	; 0x1148 <live_clock+0x326>
    1140:	f5 2c       	mov	r15, r5
    1142:	84 01       	movw	r16, r8
    1144:	e6 2c       	mov	r14, r6
    1146:	3a c0       	rjmp	.+116    	; 0x11bc <live_clock+0x39a>
	}
	return 1 ;
}
/*********************************************************************/
uint8 bcd_to_dec(uint8 bcd){
	uint8 tens = (bcd >> 4) * 10 ;
    1148:	4d 2d       	mov	r20, r13
    114a:	42 95       	swap	r20
    114c:	4f 70       	andi	r20, 0x0F	; 15
    114e:	4a 9d       	mul	r20, r10
    1150:	40 2d       	mov	r20, r0
    1152:	11 24       	eor	r1, r1
		//now checking and reading date
		RTC_DATE_Read(0x03,&DATE_HOLDER_NEW);

		if(DATE_HOLDER_NEW.date != DATE_HOLDER_OLD.date){
			DATE_HOLDER_OLD.date = DATE_HOLDER_NEW.date ;
			double_digit_write(2,20,bcd_to_dec(DATE_HOLDER_NEW.date));
    1154:	8d 2d       	mov	r24, r13
    1156:	8f 70       	andi	r24, 0x0F	; 15
    1158:	48 0f       	add	r20, r24
    115a:	82 e0       	ldi	r24, 0x02	; 2
    115c:	64 e1       	ldi	r22, 0x14	; 20
    115e:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>

			if(DATE_HOLDER_NEW.month != DATE_HOLDER_OLD.month){
    1162:	ef 80       	ldd	r14, Y+7	; 0x07
    1164:	e6 14       	cp	r14, r6
    1166:	69 f0       	breq	.+26     	; 0x1182 <live_clock+0x360>
	}
	return 1 ;
}
/*********************************************************************/
uint8 bcd_to_dec(uint8 bcd){
	uint8 tens = (bcd >> 4) * 10 ;
    1168:	4e 2d       	mov	r20, r14
    116a:	42 95       	swap	r20
    116c:	4f 70       	andi	r20, 0x0F	; 15
    116e:	4a 9d       	mul	r20, r10
    1170:	40 2d       	mov	r20, r0
    1172:	11 24       	eor	r1, r1
			DATE_HOLDER_OLD.date = DATE_HOLDER_NEW.date ;
			double_digit_write(2,20,bcd_to_dec(DATE_HOLDER_NEW.date));

			if(DATE_HOLDER_NEW.month != DATE_HOLDER_OLD.month){
				DATE_HOLDER_OLD.month = DATE_HOLDER_NEW.month ;
				double_digit_write(2, 41, bcd_to_dec(DATE_HOLDER_NEW.month));
    1174:	8e 2d       	mov	r24, r14
    1176:	8f 70       	andi	r24, 0x0F	; 15
    1178:	48 0f       	add	r20, r24
    117a:	82 e0       	ldi	r24, 0x02	; 2
    117c:	69 e2       	ldi	r22, 0x29	; 41
    117e:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
			}

			if(DATE_HOLDER_NEW.year != DATE_HOLDER_OLD.year){
    1182:	08 85       	ldd	r16, Y+8	; 0x08
    1184:	19 85       	ldd	r17, Y+9	; 0x09
    1186:	08 15       	cp	r16, r8
    1188:	19 05       	cpc	r17, r9
    118a:	71 f0       	breq	.+28     	; 0x11a8 <live_clock+0x386>
				DATE_HOLDER_OLD.year = DATE_HOLDER_NEW.year ;
				triple_digit_write(2, 69, bcd_to_dec(DATE_HOLDER_NEW.year));
    118c:	80 2f       	mov	r24, r16
	}
	return 1 ;
}
/*********************************************************************/
uint8 bcd_to_dec(uint8 bcd){
	uint8 tens = (bcd >> 4) * 10 ;
    118e:	40 2f       	mov	r20, r16
    1190:	42 95       	swap	r20
    1192:	4f 70       	andi	r20, 0x0F	; 15
    1194:	4a 9d       	mul	r20, r10
    1196:	40 2d       	mov	r20, r0
    1198:	11 24       	eor	r1, r1
				double_digit_write(2, 41, bcd_to_dec(DATE_HOLDER_NEW.month));
			}

			if(DATE_HOLDER_NEW.year != DATE_HOLDER_OLD.year){
				DATE_HOLDER_OLD.year = DATE_HOLDER_NEW.year ;
				triple_digit_write(2, 69, bcd_to_dec(DATE_HOLDER_NEW.year));
    119a:	8f 70       	andi	r24, 0x0F	; 15
    119c:	48 0f       	add	r20, r24
    119e:	82 e0       	ldi	r24, 0x02	; 2
    11a0:	65 e4       	ldi	r22, 0x45	; 69
    11a2:	50 e0       	ldi	r21, 0x00	; 0
    11a4:	0e 94 be 04 	call	0x97c	; 0x97c <triple_digit_write>
			}

			if(DATE_HOLDER_NEW.day != DATE_HOLDER_OLD.day){
    11a8:	fd 80       	ldd	r15, Y+5	; 0x05
    11aa:	f5 14       	cp	r15, r5
    11ac:	31 f0       	breq	.+12     	; 0x11ba <live_clock+0x398>
				DATE_HOLDER_OLD.day = DATE_HOLDER_NEW.day ;
				day_name_print(DATE_HOLDER_NEW.day - 1 , days);
    11ae:	8f 2d       	mov	r24, r15
    11b0:	81 50       	subi	r24, 0x01	; 1
    11b2:	66 e6       	ldi	r22, 0x66	; 102
    11b4:	70 e0       	ldi	r23, 0x00	; 0
    11b6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <day_name_print>
    11ba:	7d 2c       	mov	r7, r13
			}

		}

	}while(which_button != 5);
    11bc:	e5 e0       	ldi	r30, 0x05	; 5
    11be:	3e 16       	cp	r3, r30
    11c0:	31 f0       	breq	.+12     	; 0x11ce <live_clock+0x3ac>
    11c2:	2b 2c       	mov	r2, r11
    11c4:	bc 2c       	mov	r11, r12
    11c6:	5f 2c       	mov	r5, r15
    11c8:	48 01       	movw	r8, r16
    11ca:	6e 2c       	mov	r6, r14
    11cc:	68 cf       	rjmp	.-304    	; 0x109e <live_clock+0x27c>

	return 1;

}
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	29 96       	adiw	r28, 0x09	; 9
    11d2:	0f b6       	in	r0, 0x3f	; 63
    11d4:	f8 94       	cli
    11d6:	de bf       	out	0x3e, r29	; 62
    11d8:	0f be       	out	0x3f, r0	; 63
    11da:	cd bf       	out	0x3d, r28	; 61
    11dc:	cf 91       	pop	r28
    11de:	df 91       	pop	r29
    11e0:	1f 91       	pop	r17
    11e2:	0f 91       	pop	r16
    11e4:	ff 90       	pop	r15
    11e6:	ef 90       	pop	r14
    11e8:	df 90       	pop	r13
    11ea:	cf 90       	pop	r12
    11ec:	bf 90       	pop	r11
    11ee:	af 90       	pop	r10
    11f0:	9f 90       	pop	r9
    11f2:	8f 90       	pop	r8
    11f4:	7f 90       	pop	r7
    11f6:	6f 90       	pop	r6
    11f8:	5f 90       	pop	r5
    11fa:	4f 90       	pop	r4
    11fc:	3f 90       	pop	r3
    11fe:	2f 90       	pop	r2
    1200:	08 95       	ret

00001202 <main_menu>:
		status = 0;
	}
}
/*********************************************************************/

uint8 main_menu(void){
    1202:	df 92       	push	r13
    1204:	ef 92       	push	r14
    1206:	ff 92       	push	r15
    1208:	0f 93       	push	r16
    120a:	1f 93       	push	r17
    120c:	df 93       	push	r29
    120e:	cf 93       	push	r28
    1210:	00 d0       	rcall	.+0      	; 0x1212 <main_menu+0x10>
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62

	printing_menu_with_choice();
    1216:	0e 94 88 03 	call	0x710	; 0x710 <printing_menu_with_choice>
    121a:	11 e0       	ldi	r17, 0x01	; 1
	//now we want to take the buttons input
	uint8 which_button = 0 ;
	uint8 menu_tracker = 1 ; //this means that we will land on the first option on the main menu.
	do{
		which_button = 0 ;
		which_button = button_check();
    121c:	0e 94 18 05 	call	0xa30	; 0xa30 <button_check>

		if(which_button == 3){//here which_button == 3 (we will deal with it as UP direction).
    1220:	83 30       	cpi	r24, 0x03	; 3
    1222:	69 f4       	brne	.+26     	; 0x123e <main_menu+0x3c>
			if(menu_tracker == 1){
    1224:	11 30       	cpi	r17, 0x01	; 1
    1226:	41 f4       	brne	.+16     	; 0x1238 <main_menu+0x36>
				menu_tracker = 3 ;
				color_choice_black(1);
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	0e 94 db 01 	call	0x3b6	; 0x3b6 <color_choice_black>
				color_choice_white(3);
    122e:	83 e0       	ldi	r24, 0x03	; 3
    1230:	0e 94 2f 01 	call	0x25e	; 0x25e <color_choice_white>
    1234:	13 e0       	ldi	r17, 0x03	; 3
    1236:	f2 cf       	rjmp	.-28     	; 0x121c <main_menu+0x1a>
			}else{
				//working fine
				menu_tracker-- ;
    1238:	01 2f       	mov	r16, r17
    123a:	01 50       	subi	r16, 0x01	; 1
    123c:	0d c0       	rjmp	.+26     	; 0x1258 <main_menu+0x56>
				color_choice_black(menu_tracker+1);
				color_choice_white(menu_tracker);
			}
		}else if(which_button == 4){// here which_button == 4 (we will deal with it as DOWN Direction).
    123e:	84 30       	cpi	r24, 0x04	; 4
    1240:	99 f4       	brne	.+38     	; 0x1268 <main_menu+0x66>
			if(menu_tracker == 3){
    1242:	13 30       	cpi	r17, 0x03	; 3
    1244:	39 f4       	brne	.+14     	; 0x1254 <main_menu+0x52>
				menu_tracker = 1 ;
				color_choice_black(3);
    1246:	83 e0       	ldi	r24, 0x03	; 3
    1248:	0e 94 db 01 	call	0x3b6	; 0x3b6 <color_choice_black>
				color_choice_white(1);
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	0e 94 2f 01 	call	0x25e	; 0x25e <color_choice_white>
    1252:	e3 cf       	rjmp	.-58     	; 0x121a <main_menu+0x18>
			}else{
				//working fine
				menu_tracker++ ;
    1254:	01 2f       	mov	r16, r17
    1256:	0f 5f       	subi	r16, 0xFF	; 255
				color_choice_black(menu_tracker-1);
    1258:	81 2f       	mov	r24, r17
    125a:	0e 94 db 01 	call	0x3b6	; 0x3b6 <color_choice_black>
				color_choice_white(menu_tracker);
    125e:	80 2f       	mov	r24, r16
    1260:	0e 94 2f 01 	call	0x25e	; 0x25e <color_choice_white>
	if(menu_tracker == 1){
		study_timer();
	}else if(menu_tracker == 2){
		live_clock();
	}else if(menu_tracker == 3){
		lamp_on_off();
    1264:	10 2f       	mov	r17, r16
    1266:	da cf       	rjmp	.-76     	; 0x121c <main_menu+0x1a>
				//working fine
				menu_tracker++ ;
				color_choice_black(menu_tracker-1);
				color_choice_white(menu_tracker);
			}
		}else if(which_button == 6){
    1268:	86 30       	cpi	r24, 0x06	; 6
    126a:	09 f0       	breq	.+2      	; 0x126e <main_menu+0x6c>
    126c:	45 c0       	rjmp	.+138    	; 0x12f8 <main_menu+0xf6>
    126e:	6e ef       	ldi	r22, 0xFE	; 254
    1270:	e6 2e       	mov	r14, r22
    1272:	5b ea       	ldi	r21, 0xAB	; 171
    1274:	f5 2e       	mov	r15, r21
    1276:	0a ea       	ldi	r16, 0xAA	; 170
    1278:	dd 24       	eor	r13, r13
    127a:	d3 94       	inc	r13
    127c:	0d c0       	rjmp	.+26     	; 0x1298 <main_menu+0x96>
			for(uint8 i = 1 ; i <= 3 ; i++){
				if(i == 1){
					targeted_address = 0xFE ;
					mem_page_address_write = 0b10101010 ;
					mem_page_address_read = 0b10101011 ;
				}else if(i == 2){
    127e:	82 e0       	ldi	r24, 0x02	; 2
    1280:	d8 16       	cp	r13, r24
    1282:	29 f0       	breq	.+10     	; 0x128e <main_menu+0x8c>
    1284:	ee 24       	eor	r14, r14
    1286:	4d ea       	ldi	r20, 0xAD	; 173
    1288:	f4 2e       	mov	r15, r20
    128a:	0c ea       	ldi	r16, 0xAC	; 172
    128c:	05 c0       	rjmp	.+10     	; 0x1298 <main_menu+0x96>
    128e:	ee 24       	eor	r14, r14
    1290:	ea 94       	dec	r14
    1292:	3b ea       	ldi	r19, 0xAB	; 171
    1294:	f3 2e       	mov	r15, r19
    1296:	0a ea       	ldi	r16, 0xAA	; 170
					mem_page_address_write = 0b10101100 ;
					mem_page_address_read = 0b10101101 ;
				}

				//now read from the memory
				I2C_Init();
    1298:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <I2C_Init>
				I2C_Start(mem_page_address_write);
    129c:	80 2f       	mov	r24, r16
    129e:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
				I2C_Write(targeted_address);
    12a2:	8e 2d       	mov	r24, r14
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
				I2C_Repeated_Start(mem_page_address_read);
    12aa:	8f 2d       	mov	r24, r15
    12ac:	0e 94 9b 11 	call	0x2336	; 0x2336 <I2C_Repeated_Start>
				uint8 slot_val = I2C_Read_NACK();
    12b0:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <I2C_Read_NACK>
    12b4:	08 2f       	mov	r16, r24
				I2C_Stop();
    12b6:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>

				//now make operation on the slot_val
				uint8 mins_holder = ((slot_val & 0b00011111) % 60 );
    12ba:	e0 2f       	mov	r30, r16
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	fa 83       	std	Y+2, r31	; 0x02
    12c0:	e9 83       	std	Y+1, r30	; 0x01
				uint8 hours_holder = ((slot_val & 0b11100000) / 60 );
				slot_val = hours_holder | mins_holder ;

				UART_Init();
    12c2:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <UART_Init>
				UART_Tx(slot_val);
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	9a 81       	ldd	r25, Y+2	; 0x02
    12ca:	80 7e       	andi	r24, 0xE0	; 224
    12cc:	90 70       	andi	r25, 0x00	; 0
    12ce:	6c e3       	ldi	r22, 0x3C	; 60
    12d0:	70 e0       	ldi	r23, 0x00	; 0
    12d2:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <__divmodhi4>
    12d6:	26 2f       	mov	r18, r22
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
    12da:	9a 81       	ldd	r25, Y+2	; 0x02
    12dc:	8f 71       	andi	r24, 0x1F	; 31
    12de:	90 70       	andi	r25, 0x00	; 0
    12e0:	6c e3       	ldi	r22, 0x3C	; 60
    12e2:	70 e0       	ldi	r23, 0x00	; 0
    12e4:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <__divmodhi4>
    12e8:	82 2b       	or	r24, r18
    12ea:	0e 94 f5 14 	call	0x29ea	; 0x29ea <UART_Tx>
			}
		}else if(which_button == 6){
			uint8 targeted_address = 0 ;
			uint8 mem_page_address_read = 0 ;
			uint8 mem_page_address_write = 0 ;
			for(uint8 i = 1 ; i <= 3 ; i++){
    12ee:	d3 94       	inc	r13
    12f0:	f4 e0       	ldi	r31, 0x04	; 4
    12f2:	df 16       	cp	r13, r31
    12f4:	21 f6       	brne	.-120    	; 0x127e <main_menu+0x7c>
    12f6:	92 cf       	rjmp	.-220    	; 0x121c <main_menu+0x1a>

				UART_Init();
				UART_Tx(slot_val);
			}
		}
	}while(which_button != 5);
    12f8:	85 30       	cpi	r24, 0x05	; 5
    12fa:	09 f0       	breq	.+2      	; 0x12fe <main_menu+0xfc>
    12fc:	8f cf       	rjmp	.-226    	; 0x121c <main_menu+0x1a>
	//if "menu_tracker" ----> 1 , We will call study_timer function.
	//if "menu_tracker" ----> 2 , We will call clock function.
	//if "menu_tracker" ----> 3 , We will call Lamp ON/OFF function.


	if(menu_tracker == 1){
    12fe:	11 30       	cpi	r17, 0x01	; 1
    1300:	19 f4       	brne	.+6      	; 0x1308 <main_menu+0x106>
		study_timer();
    1302:	0e 94 56 05 	call	0xaac	; 0xaac <study_timer>
    1306:	09 c0       	rjmp	.+18     	; 0x131a <main_menu+0x118>
	}else if(menu_tracker == 2){
    1308:	12 30       	cpi	r17, 0x02	; 2
    130a:	19 f4       	brne	.+6      	; 0x1312 <main_menu+0x110>
		live_clock();
    130c:	0e 94 11 07 	call	0xe22	; 0xe22 <live_clock>
    1310:	04 c0       	rjmp	.+8      	; 0x131a <main_menu+0x118>
	}else if(menu_tracker == 3){
    1312:	13 30       	cpi	r17, 0x03	; 3
    1314:	11 f4       	brne	.+4      	; 0x131a <main_menu+0x118>
		lamp_on_off();
    1316:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lamp_on_off>
	}

	return 1 ;

}
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	1f 91       	pop	r17
    1326:	0f 91       	pop	r16
    1328:	ff 90       	pop	r15
    132a:	ef 90       	pop	r14
    132c:	df 90       	pop	r13
    132e:	08 95       	ret

00001330 <time_menu>:
		}
		I2C_Stop();
	}
}
/*******************************************************************/
uint8 time_menu(void){
    1330:	8f 92       	push	r8
    1332:	9f 92       	push	r9
    1334:	af 92       	push	r10
    1336:	bf 92       	push	r11
    1338:	cf 92       	push	r12
    133a:	df 92       	push	r13
    133c:	ef 92       	push	r14
    133e:	ff 92       	push	r15
    1340:	0f 93       	push	r16
    1342:	1f 93       	push	r17
    1344:	df 93       	push	r29
    1346:	cf 93       	push	r28
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
    134c:	69 97       	sbiw	r28, 0x19	; 25
    134e:	0f b6       	in	r0, 0x3f	; 63
    1350:	f8 94       	cli
    1352:	de bf       	out	0x3e, r29	; 62
    1354:	0f be       	out	0x3f, r0	; 63
    1356:	cd bf       	out	0x3d, r28	; 61

	//WE WANT TO BLACK OUT THE ENTIRE SCREEN

	black_entire_screen();
    1358:	0e 94 09 01 	call	0x212	; 0x212 <black_entire_screen>

	//"adjust time" prompt letters array.
	uint8 adjust_time_arr[10] = {0,3,9,20,18,19,19,8,12,4};
    135c:	de 01       	movw	r26, r28
    135e:	11 96       	adiw	r26, 0x01	; 1
    1360:	eb eb       	ldi	r30, 0xBB	; 187
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	8a e0       	ldi	r24, 0x0A	; 10
    1366:	01 90       	ld	r0, Z+
    1368:	0d 92       	st	X+, r0
    136a:	81 50       	subi	r24, 0x01	; 1
    136c:	e1 f7       	brne	.-8      	; 0x1366 <time_menu+0x36>
    136e:	7e 01       	movw	r14, r28
    1370:	08 94       	sec
    1372:	e1 1c       	adc	r14, r1
    1374:	f1 1c       	adc	r15, r1
    1376:	87 01       	movw	r16, r14
    1378:	94 e1       	ldi	r25, 0x14	; 20

	uint8 starting_col = 20 ;
	for(uint8 letter_index = 0 ; letter_index < 10 ; letter_index++){
    137a:	8b e0       	ldi	r24, 0x0B	; 11
    137c:	c8 2e       	mov	r12, r24
    137e:	d1 2c       	mov	r13, r1
    1380:	cc 0e       	add	r12, r28
    1382:	dd 1e       	adc	r13, r29


		if(letter_index == 6){
    1384:	80 2f       	mov	r24, r16
    1386:	8e 19       	sub	r24, r14
    1388:	86 30       	cpi	r24, 0x06	; 6
    138a:	11 f4       	brne	.+4      	; 0x1390 <time_menu+0x60>
			starting_col += 14;
    138c:	92 5f       	subi	r25, 0xF2	; 242
    138e:	01 c0       	rjmp	.+2      	; 0x1392 <time_menu+0x62>
		}else{
			starting_col += 7;
    1390:	99 5f       	subi	r25, 0xF9	; 249
		}

		letter_write(7,starting_col,adjust_time_arr[letter_index]);
    1392:	87 e0       	ldi	r24, 0x07	; 7
    1394:	69 2f       	mov	r22, r25
    1396:	f8 01       	movw	r30, r16
    1398:	41 91       	ld	r20, Z+
    139a:	8f 01       	movw	r16, r30
    139c:	99 8f       	std	Y+25, r25	; 0x19
    139e:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>

	//"adjust time" prompt letters array.
	uint8 adjust_time_arr[10] = {0,3,9,20,18,19,19,8,12,4};

	uint8 starting_col = 20 ;
	for(uint8 letter_index = 0 ; letter_index < 10 ; letter_index++){
    13a2:	99 8d       	ldd	r25, Y+25	; 0x19
    13a4:	0c 15       	cp	r16, r12
    13a6:	1d 05       	cpc	r17, r13
    13a8:	69 f7       	brne	.-38     	; 0x1384 <time_menu+0x54>

	/************************************************************/
	//Printing time 00:00 AM

	//Printing 00
	number_write(5,41,0);
    13aa:	85 e0       	ldi	r24, 0x05	; 5
    13ac:	69 e2       	ldi	r22, 0x29	; 41
    13ae:	40 e0       	ldi	r20, 0x00	; 0
    13b0:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
	number_write(5,48,1);
    13b4:	85 e0       	ldi	r24, 0x05	; 5
    13b6:	60 e3       	ldi	r22, 0x30	; 48
    13b8:	41 e0       	ldi	r20, 0x01	; 1
    13ba:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>

	//Printing :
	setColumnAddress(55,128);
    13be:	87 e3       	ldi	r24, 0x37	; 55
    13c0:	60 e8       	ldi	r22, 0x80	; 128
    13c2:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setColumnAddress>
	setPageAddress(5,7);
    13c6:	85 e0       	ldi	r24, 0x05	; 5
    13c8:	67 e0       	ldi	r22, 0x07	; 7
    13ca:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <setPageAddress>
	I2C_Start(oled_write_address);
    13ce:	8a e7       	ldi	r24, 0x7A	; 122
    13d0:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
	I2C_Write(CONTROL_DATA);
    13d4:	80 e4       	ldi	r24, 0x40	; 64
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
    13dc:	0b e7       	ldi	r16, 0x7B	; 123
    13de:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8 i = 0 ; i < 7 ;i++){
		I2C_Write(double_dot_bitmap[i]);
    13e0:	f8 01       	movw	r30, r16
    13e2:	81 91       	ld	r24, Z+
    13e4:	8f 01       	movw	r16, r30
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
	//Printing :
	setColumnAddress(55,128);
	setPageAddress(5,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(uint8 i = 0 ; i < 7 ;i++){
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	02 38       	cpi	r16, 0x82	; 130
    13f0:	1f 07       	cpc	r17, r31
    13f2:	b1 f7       	brne	.-20     	; 0x13e0 <time_menu+0xb0>
		I2C_Write(double_dot_bitmap[i]);
	}
	I2C_Stop();
    13f4:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>

	setColumnAddress(55,128);
    13f8:	87 e3       	ldi	r24, 0x37	; 55
    13fa:	60 e8       	ldi	r22, 0x80	; 128
    13fc:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setColumnAddress>
	setPageAddress(4,7);
    1400:	84 e0       	ldi	r24, 0x04	; 4
    1402:	67 e0       	ldi	r22, 0x07	; 7
    1404:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <setPageAddress>
	I2C_Start(oled_write_address);
    1408:	8a e7       	ldi	r24, 0x7A	; 122
    140a:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
	I2C_Write(CONTROL_DATA);
    140e:	80 e4       	ldi	r24, 0x40	; 64
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
	for(uint8 i = 7 ; i < 14 ; i++){
		I2C_Write(double_dot_bitmap[i]);
    1416:	f8 01       	movw	r30, r16
    1418:	81 91       	ld	r24, Z+
    141a:	8f 01       	movw	r16, r30
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>

	setColumnAddress(55,128);
	setPageAddress(4,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(uint8 i = 7 ; i < 14 ; i++){
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	09 38       	cpi	r16, 0x89	; 137
    1426:	1f 07       	cpc	r17, r31
    1428:	b1 f7       	brne	.-20     	; 0x1416 <time_menu+0xe6>
		I2C_Write(double_dot_bitmap[i]);
	}
	I2C_Stop();
    142a:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>

	//Printing 00
	number_write(5,62,0);
    142e:	85 e0       	ldi	r24, 0x05	; 5
    1430:	6e e3       	ldi	r22, 0x3E	; 62
    1432:	40 e0       	ldi	r20, 0x00	; 0
    1434:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
	number_write(5,69,0);
    1438:	85 e0       	ldi	r24, 0x05	; 5
    143a:	65 e4       	ldi	r22, 0x45	; 69
    143c:	40 e0       	ldi	r20, 0x00	; 0
    143e:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>

	//Printing AM
	letter_write(5,76,0);
    1442:	85 e0       	ldi	r24, 0x05	; 5
    1444:	6c e4       	ldi	r22, 0x4C	; 76
    1446:	40 e0       	ldi	r20, 0x00	; 0
    1448:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(5,83,12);
    144c:	85 e0       	ldi	r24, 0x05	; 5
    144e:	63 e5       	ldi	r22, 0x53	; 83
    1450:	4c e0       	ldi	r20, 0x0C	; 12
    1452:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>

	/************************************************************/
	//Printing 28-12-2023 SUN

	//Printing 28
	number_write(2,20,2);
    1456:	82 e0       	ldi	r24, 0x02	; 2
    1458:	64 e1       	ldi	r22, 0x14	; 20
    145a:	42 e0       	ldi	r20, 0x02	; 2
    145c:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
	number_write(2,27,8);
    1460:	82 e0       	ldi	r24, 0x02	; 2
    1462:	6b e1       	ldi	r22, 0x1B	; 27
    1464:	48 e0       	ldi	r20, 0x08	; 8
    1466:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>

	uint8 dash_bitmap[14] = {0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    146a:	de 01       	movw	r26, r28
    146c:	1b 96       	adiw	r26, 0x0b	; 11
    146e:	ed ea       	ldi	r30, 0xAD	; 173
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	8e e0       	ldi	r24, 0x0E	; 14
    1474:	01 90       	ld	r0, Z+
    1476:	0d 92       	st	X+, r0
    1478:	81 50       	subi	r24, 0x01	; 1
    147a:	e1 f7       	brne	.-8      	; 0x1474 <time_menu+0x144>
	//Printing -
	setColumnAddress(34,128);
    147c:	82 e2       	ldi	r24, 0x22	; 34
    147e:	60 e8       	ldi	r22, 0x80	; 128
    1480:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setColumnAddress>
	setPageAddress(2,7);
    1484:	82 e0       	ldi	r24, 0x02	; 2
    1486:	67 e0       	ldi	r22, 0x07	; 7
    1488:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <setPageAddress>
	I2C_Start(oled_write_address);
    148c:	8a e7       	ldi	r24, 0x7A	; 122
    148e:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
	I2C_Write(CONTROL_DATA);
    1492:	80 e4       	ldi	r24, 0x40	; 64
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
    149a:	1b e0       	ldi	r17, 0x0B	; 11
    149c:	c1 2e       	mov	r12, r17
    149e:	d1 2c       	mov	r13, r1
    14a0:	cc 0e       	add	r12, r28
    14a2:	dd 1e       	adc	r13, r29
    14a4:	86 01       	movw	r16, r12
	for(uint8 i = 0 ; i < 7 ;i++){
    14a6:	b2 e1       	ldi	r27, 0x12	; 18
    14a8:	eb 2e       	mov	r14, r27
    14aa:	f1 2c       	mov	r15, r1
    14ac:	ec 0e       	add	r14, r28
    14ae:	fd 1e       	adc	r15, r29
		I2C_Write(dash_bitmap[i]);
    14b0:	f8 01       	movw	r30, r16
    14b2:	81 91       	ld	r24, Z+
    14b4:	8f 01       	movw	r16, r30
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
	//Printing -
	setColumnAddress(34,128);
	setPageAddress(2,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(uint8 i = 0 ; i < 7 ;i++){
    14bc:	0e 15       	cp	r16, r14
    14be:	1f 05       	cpc	r17, r15
    14c0:	b9 f7       	brne	.-18     	; 0x14b0 <time_menu+0x180>
		I2C_Write(dash_bitmap[i]);
	}
	I2C_Stop();
    14c2:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>

	setColumnAddress(34,128);
    14c6:	82 e2       	ldi	r24, 0x22	; 34
    14c8:	60 e8       	ldi	r22, 0x80	; 128
    14ca:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setColumnAddress>
	setPageAddress(1,7);
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	67 e0       	ldi	r22, 0x07	; 7
    14d2:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <setPageAddress>
	I2C_Start(oled_write_address);
    14d6:	8a e7       	ldi	r24, 0x7A	; 122
    14d8:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
	I2C_Write(CONTROL_DATA);
    14dc:	80 e4       	ldi	r24, 0x40	; 64
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
    14e4:	a2 e1       	ldi	r26, 0x12	; 18
    14e6:	8a 2e       	mov	r8, r26
    14e8:	91 2c       	mov	r9, r1
    14ea:	8c 0e       	add	r8, r28
    14ec:	9d 1e       	adc	r9, r29
    14ee:	78 01       	movw	r14, r16
	for(uint8 i = 7 ; i < 14 ; i++){
    14f0:	f9 e1       	ldi	r31, 0x19	; 25
    14f2:	af 2e       	mov	r10, r31
    14f4:	b1 2c       	mov	r11, r1
    14f6:	ac 0e       	add	r10, r28
    14f8:	bd 1e       	adc	r11, r29
		I2C_Write(dash_bitmap[i]);
    14fa:	f7 01       	movw	r30, r14
    14fc:	81 91       	ld	r24, Z+
    14fe:	7f 01       	movw	r14, r30
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>

	setColumnAddress(34,128);
	setPageAddress(1,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(uint8 i = 7 ; i < 14 ; i++){
    1506:	ea 14       	cp	r14, r10
    1508:	fb 04       	cpc	r15, r11
    150a:	b9 f7       	brne	.-18     	; 0x14fa <time_menu+0x1ca>
		I2C_Write(dash_bitmap[i]);
	}
	I2C_Stop();
    150c:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>

	//Printing 12
	number_write(2,41,1);
    1510:	82 e0       	ldi	r24, 0x02	; 2
    1512:	69 e2       	ldi	r22, 0x29	; 41
    1514:	41 e0       	ldi	r20, 0x01	; 1
    1516:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
	number_write(2,48,2);
    151a:	82 e0       	ldi	r24, 0x02	; 2
    151c:	60 e3       	ldi	r22, 0x30	; 48
    151e:	42 e0       	ldi	r20, 0x02	; 2
    1520:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>

	//Printing -
	setColumnAddress(55,128);
    1524:	87 e3       	ldi	r24, 0x37	; 55
    1526:	60 e8       	ldi	r22, 0x80	; 128
    1528:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setColumnAddress>
	setPageAddress(2,7);
    152c:	82 e0       	ldi	r24, 0x02	; 2
    152e:	67 e0       	ldi	r22, 0x07	; 7
    1530:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <setPageAddress>
	I2C_Start(oled_write_address);
    1534:	8a e7       	ldi	r24, 0x7A	; 122
    1536:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
	I2C_Write(CONTROL_DATA);
    153a:	80 e4       	ldi	r24, 0x40	; 64
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
	for(uint8 i = 0 ; i < 7 ;i++){
		I2C_Write(dash_bitmap[i]);
    1542:	f6 01       	movw	r30, r12
    1544:	81 91       	ld	r24, Z+
    1546:	6f 01       	movw	r12, r30
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
	//Printing -
	setColumnAddress(55,128);
	setPageAddress(2,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(uint8 i = 0 ; i < 7 ;i++){
    154e:	c0 16       	cp	r12, r16
    1550:	d1 06       	cpc	r13, r17
    1552:	b9 f7       	brne	.-18     	; 0x1542 <time_menu+0x212>
		I2C_Write(dash_bitmap[i]);
	}
	I2C_Stop();
    1554:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>

	setColumnAddress(55,128);
    1558:	87 e3       	ldi	r24, 0x37	; 55
    155a:	60 e8       	ldi	r22, 0x80	; 128
    155c:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setColumnAddress>
	setPageAddress(1,7);
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	67 e0       	ldi	r22, 0x07	; 7
    1564:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <setPageAddress>
	I2C_Start(oled_write_address);
    1568:	8a e7       	ldi	r24, 0x7A	; 122
    156a:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
	I2C_Write(CONTROL_DATA);
    156e:	80 e4       	ldi	r24, 0x40	; 64
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
	for(uint8 i = 7 ; i < 14 ; i++){
		I2C_Write(dash_bitmap[i]);
    1576:	f4 01       	movw	r30, r8
    1578:	81 91       	ld	r24, Z+
    157a:	4f 01       	movw	r8, r30
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>

	setColumnAddress(55,128);
	setPageAddress(1,7);
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(uint8 i = 7 ; i < 14 ; i++){
    1582:	8e 14       	cp	r8, r14
    1584:	9f 04       	cpc	r9, r15
    1586:	b9 f7       	brne	.-18     	; 0x1576 <time_menu+0x246>
		I2C_Write(dash_bitmap[i]);
	}
	I2C_Stop();
    1588:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>

	//Printing 2023
	number_write(2,62,2);
    158c:	82 e0       	ldi	r24, 0x02	; 2
    158e:	6e e3       	ldi	r22, 0x3E	; 62
    1590:	42 e0       	ldi	r20, 0x02	; 2
    1592:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
	number_write(2,69,0);
    1596:	82 e0       	ldi	r24, 0x02	; 2
    1598:	65 e4       	ldi	r22, 0x45	; 69
    159a:	40 e0       	ldi	r20, 0x00	; 0
    159c:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
	number_write(2,76,2);
    15a0:	82 e0       	ldi	r24, 0x02	; 2
    15a2:	6c e4       	ldi	r22, 0x4C	; 76
    15a4:	42 e0       	ldi	r20, 0x02	; 2
    15a6:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>
	number_write(2,83,3);
    15aa:	82 e0       	ldi	r24, 0x02	; 2
    15ac:	63 e5       	ldi	r22, 0x53	; 83
    15ae:	43 e0       	ldi	r20, 0x03	; 3
    15b0:	0e 94 2c 04 	call	0x858	; 0x858 <number_write>

	//Printing THU ----> 6
	letter_write(2,97,19);
    15b4:	82 e0       	ldi	r24, 0x02	; 2
    15b6:	61 e6       	ldi	r22, 0x61	; 97
    15b8:	43 e1       	ldi	r20, 0x13	; 19
    15ba:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(2,104,7);
    15be:	82 e0       	ldi	r24, 0x02	; 2
    15c0:	68 e6       	ldi	r22, 0x68	; 104
    15c2:	47 e0       	ldi	r20, 0x07	; 7
    15c4:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	letter_write(2,111,20);
    15c8:	82 e0       	ldi	r24, 0x02	; 2
    15ca:	6f e6       	ldi	r22, 0x6F	; 111
    15cc:	44 e1       	ldi	r20, 0x14	; 20
    15ce:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
    15d2:	dd 24       	eor	r13, r13
	CLOCK_DATA clock_input ;
	DATE_DATA date_input ;


	for(uint8 num_of_inputs = 0 ; num_of_inputs < 7 ; num_of_inputs++){
		if(num_of_inputs == 0){/********************************************************/
    15d4:	dd 20       	and	r13, r13
    15d6:	09 f0       	breq	.+2      	; 0x15da <time_menu+0x2aa>
    15d8:	58 c0       	rjmp	.+176    	; 0x168a <time_menu+0x35a>
			//this means that we are taking hours as an input.

			//for the underline
			setColumnAddress(41,55);
    15da:	89 e2       	ldi	r24, 0x29	; 41
    15dc:	67 e3       	ldi	r22, 0x37	; 55
    15de:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setColumnAddress>
			setPageAddress(3,7);
    15e2:	83 e0       	ldi	r24, 0x03	; 3
    15e4:	67 e0       	ldi	r22, 0x07	; 7
    15e6:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <setPageAddress>
			I2C_Start(oled_write_address);
    15ea:	8a e7       	ldi	r24, 0x7A	; 122
    15ec:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
			I2C_Write(CONTROL_DATA);
    15f0:	80 e4       	ldi	r24, 0x40	; 64
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
    15f8:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8 i = 0 ; i < 14 ; i++){
				I2C_Write(0xC0);
    15fa:	80 ec       	ldi	r24, 0xC0	; 192
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
			//for the underline
			setColumnAddress(41,55);
			setPageAddress(3,7);
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 14 ; i++){
    1602:	1f 5f       	subi	r17, 0xFF	; 255
    1604:	1e 30       	cpi	r17, 0x0E	; 14
    1606:	c9 f7       	brne	.-14     	; 0x15fa <time_menu+0x2ca>
				I2C_Write(0xC0);
			}
			I2C_Stop();
    1608:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>
    160c:	01 e0       	ldi	r16, 0x01	; 1

			uint8 hours_tracker = 1 ;
			uint8 which_button = 0 ;
			do{
				which_button = 0 ;
				which_button = button_check();
    160e:	0e 94 18 05 	call	0xa30	; 0xa30 <button_check>

				if(which_button == 3){
    1612:	83 30       	cpi	r24, 0x03	; 3
    1614:	59 f4       	brne	.+22     	; 0x162c <time_menu+0x2fc>
					//this means that we pressed left
					//check if we stopping at letter a
					if(hours_tracker == 1){
    1616:	01 30       	cpi	r16, 0x01	; 1
    1618:	39 f4       	brne	.+14     	; 0x1628 <time_menu+0x2f8>
						hours_tracker = 12 ;
						double_digit_write(5,41,hours_tracker);
    161a:	85 e0       	ldi	r24, 0x05	; 5
    161c:	69 e2       	ldi	r22, 0x29	; 41
    161e:	4c e0       	ldi	r20, 0x0C	; 12
    1620:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
    1624:	0c e0       	ldi	r16, 0x0C	; 12
    1626:	f3 cf       	rjmp	.-26     	; 0x160e <time_menu+0x2de>
					}else{
						hours_tracker-- ;
    1628:	01 50       	subi	r16, 0x01	; 1
    162a:	0b c0       	rjmp	.+22     	; 0x1642 <time_menu+0x312>
						double_digit_write(5,41,hours_tracker);
					}

				}else if(which_button == 4){
    162c:	84 30       	cpi	r24, 0x04	; 4
    162e:	79 f4       	brne	.+30     	; 0x164e <time_menu+0x31e>
					//this means that we pressed right
					//check if we stopping at letter z
					if(hours_tracker == 12){
    1630:	0c 30       	cpi	r16, 0x0C	; 12
    1632:	31 f4       	brne	.+12     	; 0x1640 <time_menu+0x310>
						hours_tracker = 1 ;
						double_digit_write(5,41,hours_tracker);
    1634:	85 e0       	ldi	r24, 0x05	; 5
    1636:	69 e2       	ldi	r22, 0x29	; 41
    1638:	41 e0       	ldi	r20, 0x01	; 1
    163a:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
    163e:	e6 cf       	rjmp	.-52     	; 0x160c <time_menu+0x2dc>
					}else{
						hours_tracker++ ;
    1640:	0f 5f       	subi	r16, 0xFF	; 255
						double_digit_write(5,41,hours_tracker);
    1642:	85 e0       	ldi	r24, 0x05	; 5
    1644:	69 e2       	ldi	r22, 0x29	; 41
    1646:	40 2f       	mov	r20, r16
    1648:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
    164c:	e0 cf       	rjmp	.-64     	; 0x160e <time_menu+0x2de>
					}
				}

			}while(which_button != 5);
    164e:	85 30       	cpi	r24, 0x05	; 5
    1650:	f1 f6       	brne	.-68     	; 0x160e <time_menu+0x2de>
			//Storing hours in our struct for later rtc modification.
			clock_input.hours = dec_to_bcd(hours_tracker);

			//for clearing underline
			setColumnAddress(41,55);
    1652:	89 e2       	ldi	r24, 0x29	; 41
    1654:	67 e3       	ldi	r22, 0x37	; 55
    1656:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setColumnAddress>
			setPageAddress(3,7);
    165a:	83 e0       	ldi	r24, 0x03	; 3
    165c:	67 e0       	ldi	r22, 0x07	; 7
    165e:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <setPageAddress>
			I2C_Start(oled_write_address);
    1662:	8a e7       	ldi	r24, 0x7A	; 122
    1664:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
			I2C_Write(CONTROL_DATA);
    1668:	80 e4       	ldi	r24, 0x40	; 64
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
    1670:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8 i = 0 ; i < 14 ; i++){
				I2C_Write(0x00);
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
			//for clearing underline
			setColumnAddress(41,55);
			setPageAddress(3,7);
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 14 ; i++){
    167a:	1f 5f       	subi	r17, 0xFF	; 255
    167c:	1e 30       	cpi	r17, 0x0E	; 14
    167e:	c9 f7       	brne	.-14     	; 0x1672 <time_menu+0x342>
					}
				}

			}while(which_button != 5);
			//Storing hours in our struct for later rtc modification.
			clock_input.hours = dec_to_bcd(hours_tracker);
    1680:	80 2f       	mov	r24, r16
    1682:	0e 94 a4 00 	call	0x148	; 0x148 <dec_to_bcd>
    1686:	b8 2e       	mov	r11, r24
    1688:	5b c0       	rjmp	.+182    	; 0x1740 <time_menu+0x410>
			for(uint8 i = 0 ; i < 14 ; i++){
				I2C_Write(0x00);
			}
			I2C_Stop();

		}else if(num_of_inputs == 1){/********************************************************/
    168a:	f1 e0       	ldi	r31, 0x01	; 1
    168c:	df 16       	cp	r13, r31
    168e:	09 f0       	breq	.+2      	; 0x1692 <time_menu+0x362>
    1690:	5a c0       	rjmp	.+180    	; 0x1746 <time_menu+0x416>
			//we are adjusting minutes.

			//for the underline
			setColumnAddress(62,76);
    1692:	8e e3       	ldi	r24, 0x3E	; 62
    1694:	6c e4       	ldi	r22, 0x4C	; 76
    1696:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setColumnAddress>
			setPageAddress(3,7);
    169a:	83 e0       	ldi	r24, 0x03	; 3
    169c:	67 e0       	ldi	r22, 0x07	; 7
    169e:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <setPageAddress>
			I2C_Start(oled_write_address);
    16a2:	8a e7       	ldi	r24, 0x7A	; 122
    16a4:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
			I2C_Write(CONTROL_DATA);
    16a8:	80 e4       	ldi	r24, 0x40	; 64
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
    16b0:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8 i = 0 ; i < 14 ; i++){
				I2C_Write(0xC0);
    16b2:	80 ec       	ldi	r24, 0xC0	; 192
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
			//for the underline
			setColumnAddress(62,76);
			setPageAddress(3,7);
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 14 ; i++){
    16ba:	1f 5f       	subi	r17, 0xFF	; 255
    16bc:	1e 30       	cpi	r17, 0x0E	; 14
    16be:	c9 f7       	brne	.-14     	; 0x16b2 <time_menu+0x382>
				I2C_Write(0xC0);
			}
			I2C_Stop();
    16c0:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>
    16c4:	00 e0       	ldi	r16, 0x00	; 0

			uint8 minutes_tracker = 0 ;
			uint8 which_button = 0 ;
			do{
				which_button = 0 ;
				which_button = button_check();
    16c6:	0e 94 18 05 	call	0xa30	; 0xa30 <button_check>

				if(which_button == 3){
    16ca:	83 30       	cpi	r24, 0x03	; 3
    16cc:	59 f4       	brne	.+22     	; 0x16e4 <time_menu+0x3b4>
					//this means that we pressed left
					//check if we stopping at letter a
					if(minutes_tracker == 0){
    16ce:	00 23       	and	r16, r16
    16d0:	39 f4       	brne	.+14     	; 0x16e0 <time_menu+0x3b0>
						minutes_tracker = 59 ;
						double_digit_write(5,62,minutes_tracker);
    16d2:	85 e0       	ldi	r24, 0x05	; 5
    16d4:	6e e3       	ldi	r22, 0x3E	; 62
    16d6:	4b e3       	ldi	r20, 0x3B	; 59
    16d8:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
    16dc:	0b e3       	ldi	r16, 0x3B	; 59
    16de:	f3 cf       	rjmp	.-26     	; 0x16c6 <time_menu+0x396>
					}else{
						minutes_tracker-- ;
    16e0:	01 50       	subi	r16, 0x01	; 1
    16e2:	0b c0       	rjmp	.+22     	; 0x16fa <time_menu+0x3ca>
						double_digit_write(5,62,minutes_tracker);
					}

				}else if(which_button == 4){
    16e4:	84 30       	cpi	r24, 0x04	; 4
    16e6:	79 f4       	brne	.+30     	; 0x1706 <time_menu+0x3d6>
					//this means that we pressed right
					//check if we stopping at letter z
					if(minutes_tracker == 59){
    16e8:	0b 33       	cpi	r16, 0x3B	; 59
    16ea:	31 f4       	brne	.+12     	; 0x16f8 <time_menu+0x3c8>
						minutes_tracker = 0 ;
						double_digit_write(5,62,minutes_tracker);
    16ec:	85 e0       	ldi	r24, 0x05	; 5
    16ee:	6e e3       	ldi	r22, 0x3E	; 62
    16f0:	40 e0       	ldi	r20, 0x00	; 0
    16f2:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
    16f6:	e6 cf       	rjmp	.-52     	; 0x16c4 <time_menu+0x394>
					}else{
						minutes_tracker++ ;
    16f8:	0f 5f       	subi	r16, 0xFF	; 255
						double_digit_write(5,62,minutes_tracker);
    16fa:	85 e0       	ldi	r24, 0x05	; 5
    16fc:	6e e3       	ldi	r22, 0x3E	; 62
    16fe:	40 2f       	mov	r20, r16
    1700:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
    1704:	e0 cf       	rjmp	.-64     	; 0x16c6 <time_menu+0x396>
					}
				}

			}while(which_button != 5);
    1706:	85 30       	cpi	r24, 0x05	; 5
    1708:	f1 f6       	brne	.-68     	; 0x16c6 <time_menu+0x396>
			//Storing hours in our struct for later rtc modification.
			clock_input.minutes = dec_to_bcd(minutes_tracker);

			//for clearing underline
			setColumnAddress(62,76);
    170a:	8e e3       	ldi	r24, 0x3E	; 62
    170c:	6c e4       	ldi	r22, 0x4C	; 76
    170e:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setColumnAddress>
			setPageAddress(3,7);
    1712:	83 e0       	ldi	r24, 0x03	; 3
    1714:	67 e0       	ldi	r22, 0x07	; 7
    1716:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <setPageAddress>
			I2C_Start(oled_write_address);
    171a:	8a e7       	ldi	r24, 0x7A	; 122
    171c:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
			I2C_Write(CONTROL_DATA);
    1720:	80 e4       	ldi	r24, 0x40	; 64
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
    1728:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8 i = 0 ; i < 14 ; i++){
				I2C_Write(0x00);
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
			//for clearing underline
			setColumnAddress(62,76);
			setPageAddress(3,7);
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 14 ; i++){
    1732:	1f 5f       	subi	r17, 0xFF	; 255
    1734:	1e 30       	cpi	r17, 0x0E	; 14
    1736:	c9 f7       	brne	.-14     	; 0x172a <time_menu+0x3fa>
					}
				}

			}while(which_button != 5);
			//Storing hours in our struct for later rtc modification.
			clock_input.minutes = dec_to_bcd(minutes_tracker);
    1738:	80 2f       	mov	r24, r16
    173a:	0e 94 a4 00 	call	0x148	; 0x148 <dec_to_bcd>
    173e:	a8 2e       	mov	r10, r24
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 14 ; i++){
				I2C_Write(0x00);
			}
			I2C_Stop();
    1740:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>
    1744:	35 c2       	rjmp	.+1130   	; 0x1bb0 <time_menu+0x880>


		}else if(num_of_inputs == 2){/********************************************************/
    1746:	82 e0       	ldi	r24, 0x02	; 2
    1748:	d8 16       	cp	r13, r24
    174a:	09 f0       	breq	.+2      	; 0x174e <time_menu+0x41e>
    174c:	4c c0       	rjmp	.+152    	; 0x17e6 <time_menu+0x4b6>
			//now we are choosing am or pm

			//for the underline
			setColumnAddress(76,90);
    174e:	8c e4       	ldi	r24, 0x4C	; 76
    1750:	6a e5       	ldi	r22, 0x5A	; 90
    1752:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setColumnAddress>
			setPageAddress(3,7);
    1756:	83 e0       	ldi	r24, 0x03	; 3
    1758:	67 e0       	ldi	r22, 0x07	; 7
    175a:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <setPageAddress>
			I2C_Start(oled_write_address);
    175e:	8a e7       	ldi	r24, 0x7A	; 122
    1760:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
			I2C_Write(CONTROL_DATA);
    1764:	80 e4       	ldi	r24, 0x40	; 64
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
    176c:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8 i = 0 ; i < 14 ; i++){
				I2C_Write(0xC0);
    176e:	80 ec       	ldi	r24, 0xC0	; 192
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
			//for the underline
			setColumnAddress(76,90);
			setPageAddress(3,7);
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 14 ; i++){
    1776:	1f 5f       	subi	r17, 0xFF	; 255
    1778:	1e 30       	cpi	r17, 0x0E	; 14
    177a:	c9 f7       	brne	.-14     	; 0x176e <time_menu+0x43e>
				I2C_Write(0xC0);
			}
			I2C_Stop();
    177c:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>
    1780:	00 e0       	ldi	r16, 0x00	; 0
			//if am_pm_tracker == 0 ----> AM , if am_pm_tracker == 1 ----> PM
			uint8 am_pm_tracker = 0 ;
			uint8 which_button = 0 ;
			do{
				which_button = 0 ;
				which_button = button_check();
    1782:	0e 94 18 05 	call	0xa30	; 0xa30 <button_check>
    1786:	18 2f       	mov	r17, r24

				if(which_button == 3 || which_button == 4){
    1788:	83 50       	subi	r24, 0x03	; 3
    178a:	82 30       	cpi	r24, 0x02	; 2
    178c:	78 f4       	brcc	.+30     	; 0x17ac <time_menu+0x47c>
					//this means that we pressed left
					if(am_pm_tracker == 0){
    178e:	00 23       	and	r16, r16
    1790:	39 f4       	brne	.+14     	; 0x17a0 <time_menu+0x470>
						am_pm_tracker = 1;
						letter_write(5,76,15);
    1792:	85 e0       	ldi	r24, 0x05	; 5
    1794:	6c e4       	ldi	r22, 0x4C	; 76
    1796:	4f e0       	ldi	r20, 0x0F	; 15
    1798:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
    179c:	01 e0       	ldi	r16, 0x01	; 1
    179e:	06 c0       	rjmp	.+12     	; 0x17ac <time_menu+0x47c>
					}else if(am_pm_tracker == 1){
						am_pm_tracker = 0 ;
						letter_write(5,76,0);
    17a0:	85 e0       	ldi	r24, 0x05	; 5
    17a2:	6c e4       	ldi	r22, 0x4C	; 76
    17a4:	40 e0       	ldi	r20, 0x00	; 0
    17a6:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
    17aa:	00 e0       	ldi	r16, 0x00	; 0
					}
				}

			}while(which_button != 5);
    17ac:	15 30       	cpi	r17, 0x05	; 5
    17ae:	49 f7       	brne	.-46     	; 0x1782 <time_menu+0x452>

			clock_input.am_pm = am_pm_tracker  ;


			//for clearing underline
			setColumnAddress(76,90);
    17b0:	8c e4       	ldi	r24, 0x4C	; 76
    17b2:	6a e5       	ldi	r22, 0x5A	; 90
    17b4:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setColumnAddress>
			setPageAddress(3,7);
    17b8:	83 e0       	ldi	r24, 0x03	; 3
    17ba:	67 e0       	ldi	r22, 0x07	; 7
    17bc:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <setPageAddress>
			I2C_Start(oled_write_address);
    17c0:	8a e7       	ldi	r24, 0x7A	; 122
    17c2:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
			I2C_Write(CONTROL_DATA);
    17c6:	80 e4       	ldi	r24, 0x40	; 64
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
    17ce:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8 i = 0 ; i < 14 ; i++){
				I2C_Write(0x00);
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
			//for clearing underline
			setColumnAddress(76,90);
			setPageAddress(3,7);
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 14 ; i++){
    17d8:	1f 5f       	subi	r17, 0xFF	; 255
    17da:	1e 30       	cpi	r17, 0x0E	; 14
    17dc:	c9 f7       	brne	.-14     	; 0x17d0 <time_menu+0x4a0>
				I2C_Write(0x00);
			}
			I2C_Stop();
    17de:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>
    17e2:	90 2e       	mov	r9, r16
    17e4:	e5 c1       	rjmp	.+970    	; 0x1bb0 <time_menu+0x880>


		}else if(num_of_inputs == 3){/********************************************************/
    17e6:	e3 e0       	ldi	r30, 0x03	; 3
    17e8:	de 16       	cp	r13, r30
    17ea:	09 f0       	breq	.+2      	; 0x17ee <time_menu+0x4be>
    17ec:	7e c0       	rjmp	.+252    	; 0x18ea <time_menu+0x5ba>
			//now we are adjusting the year

			//for the underline
			setColumnAddress(62,90);
    17ee:	8e e3       	ldi	r24, 0x3E	; 62
    17f0:	6a e5       	ldi	r22, 0x5A	; 90
    17f2:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setColumnAddress>
			setPageAddress(0,7);
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	67 e0       	ldi	r22, 0x07	; 7
    17fa:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <setPageAddress>
			I2C_Start(oled_write_address);
    17fe:	8a e7       	ldi	r24, 0x7A	; 122
    1800:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
			I2C_Write(CONTROL_DATA);
    1804:	80 e4       	ldi	r24, 0x40	; 64
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
    180c:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8 i = 0 ; i < 28 ; i++){
				I2C_Write(0xC0);
    180e:	80 ec       	ldi	r24, 0xC0	; 192
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
			//for the underline
			setColumnAddress(62,90);
			setPageAddress(0,7);
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 28 ; i++){
    1816:	1f 5f       	subi	r17, 0xFF	; 255
    1818:	1c 31       	cpi	r17, 0x1C	; 28
    181a:	c9 f7       	brne	.-14     	; 0x180e <time_menu+0x4de>
				I2C_Write(0xC0);
			}
			I2C_Stop();
    181c:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>
    1820:	07 ee       	ldi	r16, 0xE7	; 231
    1822:	17 e0       	ldi	r17, 0x07	; 7

			uint16 year_tracker = 2023 ;
			uint8 which_button = 0 ;
			do{
				which_button = 0 ;
				which_button = button_check();
    1824:	0e 94 18 05 	call	0xa30	; 0xa30 <button_check>

				if(which_button == 3){
    1828:	83 30       	cpi	r24, 0x03	; 3
    182a:	81 f4       	brne	.+32     	; 0x184c <time_menu+0x51c>
					//this means that we pressed left
					//check if we stopping at letter a
					if(year_tracker == 2023){
    182c:	f7 e0       	ldi	r31, 0x07	; 7
    182e:	07 3e       	cpi	r16, 0xE7	; 231
    1830:	1f 07       	cpc	r17, r31
    1832:	49 f4       	brne	.+18     	; 0x1846 <time_menu+0x516>
						year_tracker = 2100 ;
						triple_digit_write(2,69,year_tracker);
    1834:	82 e0       	ldi	r24, 0x02	; 2
    1836:	65 e4       	ldi	r22, 0x45	; 69
    1838:	44 e3       	ldi	r20, 0x34	; 52
    183a:	58 e0       	ldi	r21, 0x08	; 8
    183c:	0e 94 be 04 	call	0x97c	; 0x97c <triple_digit_write>
    1840:	04 e3       	ldi	r16, 0x34	; 52
    1842:	18 e0       	ldi	r17, 0x08	; 8
    1844:	ef cf       	rjmp	.-34     	; 0x1824 <time_menu+0x4f4>
					}else{
						year_tracker-- ;
    1846:	01 50       	subi	r16, 0x01	; 1
    1848:	10 40       	sbci	r17, 0x00	; 0
    184a:	0f c0       	rjmp	.+30     	; 0x186a <time_menu+0x53a>
						triple_digit_write(2,69,year_tracker);
					}

				}else if(which_button == 4){
    184c:	84 30       	cpi	r24, 0x04	; 4
    184e:	99 f4       	brne	.+38     	; 0x1876 <time_menu+0x546>
					//this means that we pressed right
					//check if we stopping at letter z
					if(year_tracker == 2100){
    1850:	88 e0       	ldi	r24, 0x08	; 8
    1852:	04 33       	cpi	r16, 0x34	; 52
    1854:	18 07       	cpc	r17, r24
    1856:	39 f4       	brne	.+14     	; 0x1866 <time_menu+0x536>
						year_tracker = 2023 ;
						triple_digit_write(2,69,year_tracker);
    1858:	82 e0       	ldi	r24, 0x02	; 2
    185a:	65 e4       	ldi	r22, 0x45	; 69
    185c:	47 ee       	ldi	r20, 0xE7	; 231
    185e:	57 e0       	ldi	r21, 0x07	; 7
    1860:	0e 94 be 04 	call	0x97c	; 0x97c <triple_digit_write>
    1864:	dd cf       	rjmp	.-70     	; 0x1820 <time_menu+0x4f0>
					}else{
						year_tracker++ ;
    1866:	0f 5f       	subi	r16, 0xFF	; 255
    1868:	1f 4f       	sbci	r17, 0xFF	; 255
						triple_digit_write(2,69,year_tracker);
    186a:	82 e0       	ldi	r24, 0x02	; 2
    186c:	65 e4       	ldi	r22, 0x45	; 69
    186e:	a8 01       	movw	r20, r16
    1870:	0e 94 be 04 	call	0x97c	; 0x97c <triple_digit_write>
    1874:	d7 cf       	rjmp	.-82     	; 0x1824 <time_menu+0x4f4>
					}
				}

			}while(which_button != 5);
    1876:	85 30       	cpi	r24, 0x05	; 5
    1878:	a9 f6       	brne	.-86     	; 0x1824 <time_menu+0x4f4>
			year_tracker /= 10 ;
			last_two_digit = ((year_tracker % 10) * 10 ) + last_two_digit ;
			date_input.year = dec_to_bcd(last_two_digit) ;

			//for clearing/deleting the underline
			setColumnAddress(62,90);
    187a:	8e e3       	ldi	r24, 0x3E	; 62
    187c:	6a e5       	ldi	r22, 0x5A	; 90
    187e:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setColumnAddress>
			setPageAddress(0,7);
    1882:	80 e0       	ldi	r24, 0x00	; 0
    1884:	67 e0       	ldi	r22, 0x07	; 7
    1886:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <setPageAddress>
			I2C_Start(oled_write_address);
    188a:	8a e7       	ldi	r24, 0x7A	; 122
    188c:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
			I2C_Write(CONTROL_DATA);
    1890:	80 e4       	ldi	r24, 0x40	; 64
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
    1898:	ff 24       	eor	r15, r15
			for(uint8 i = 0 ; i < 28 ; i++){
				I2C_Write(0x00);
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
			//for clearing/deleting the underline
			setColumnAddress(62,90);
			setPageAddress(0,7);
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 28 ; i++){
    18a2:	f3 94       	inc	r15
    18a4:	ec e1       	ldi	r30, 0x1C	; 28
    18a6:	fe 16       	cp	r15, r30
    18a8:	c1 f7       	brne	.-16     	; 0x189a <time_menu+0x56a>
						triple_digit_write(2,69,year_tracker);
					}
				}

			}while(which_button != 5);
			uint8 last_two_digit = year_tracker % 10 ;
    18aa:	c8 01       	movw	r24, r16
    18ac:	6a e0       	ldi	r22, 0x0A	; 10
    18ae:	70 e0       	ldi	r23, 0x00	; 0
    18b0:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__udivmodhi4>
    18b4:	48 2f       	mov	r20, r24
			year_tracker /= 10 ;
			last_two_digit = ((year_tracker % 10) * 10 ) + last_two_digit ;
			date_input.year = dec_to_bcd(last_two_digit) ;
    18b6:	c8 01       	movw	r24, r16
    18b8:	6a e0       	ldi	r22, 0x0A	; 10
    18ba:	70 e0       	ldi	r23, 0x00	; 0
    18bc:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__udivmodhi4>
    18c0:	cb 01       	movw	r24, r22
    18c2:	6a e0       	ldi	r22, 0x0A	; 10
    18c4:	70 e0       	ldi	r23, 0x00	; 0
    18c6:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__udivmodhi4>
    18ca:	9c 01       	movw	r18, r24
    18cc:	e3 e0       	ldi	r30, 0x03	; 3
    18ce:	88 0f       	add	r24, r24
    18d0:	99 1f       	adc	r25, r25
    18d2:	ea 95       	dec	r30
    18d4:	e1 f7       	brne	.-8      	; 0x18ce <time_menu+0x59e>
    18d6:	22 0f       	add	r18, r18
    18d8:	33 1f       	adc	r19, r19
    18da:	82 0f       	add	r24, r18
    18dc:	93 1f       	adc	r25, r19
    18de:	84 0f       	add	r24, r20
    18e0:	0e 94 a4 00 	call	0x148	; 0x148 <dec_to_bcd>
    18e4:	f8 2e       	mov	r15, r24
    18e6:	88 24       	eor	r8, r8
    18e8:	2b cf       	rjmp	.-426    	; 0x1740 <time_menu+0x410>
			for(uint8 i = 0 ; i < 28 ; i++){
				I2C_Write(0x00);
			}
			I2C_Stop();

		}else if(num_of_inputs == 4){/********************************************************/
    18ea:	f4 e0       	ldi	r31, 0x04	; 4
    18ec:	df 16       	cp	r13, r31
    18ee:	09 f0       	breq	.+2      	; 0x18f2 <time_menu+0x5c2>
    18f0:	58 c0       	rjmp	.+176    	; 0x19a2 <time_menu+0x672>
			//this means that we are choosing the current month.

			//for the underline
			setColumnAddress(41,55);
    18f2:	89 e2       	ldi	r24, 0x29	; 41
    18f4:	67 e3       	ldi	r22, 0x37	; 55
    18f6:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setColumnAddress>
			setPageAddress(0,7);
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	67 e0       	ldi	r22, 0x07	; 7
    18fe:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <setPageAddress>
			I2C_Start(oled_write_address);
    1902:	8a e7       	ldi	r24, 0x7A	; 122
    1904:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
			I2C_Write(CONTROL_DATA);
    1908:	80 e4       	ldi	r24, 0x40	; 64
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
    1910:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8 i = 0 ; i < 14 ; i++){
				I2C_Write(0xC0);
    1912:	80 ec       	ldi	r24, 0xC0	; 192
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
			//for the underline
			setColumnAddress(41,55);
			setPageAddress(0,7);
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 14 ; i++){
    191a:	1f 5f       	subi	r17, 0xFF	; 255
    191c:	1e 30       	cpi	r17, 0x0E	; 14
    191e:	c9 f7       	brne	.-14     	; 0x1912 <time_menu+0x5e2>
				I2C_Write(0xC0);
			}
			I2C_Stop();
    1920:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>
    1924:	0c e0       	ldi	r16, 0x0C	; 12

			uint8 month_tracker = 12 ;
			uint8 which_button = 0 ;
			do{
				which_button = 0 ;
				which_button = button_check();
    1926:	0e 94 18 05 	call	0xa30	; 0xa30 <button_check>

				if(which_button == 3){
    192a:	83 30       	cpi	r24, 0x03	; 3
    192c:	51 f4       	brne	.+20     	; 0x1942 <time_menu+0x612>
					//this means that we pressed left
					//check if we stopping at letter a
					if(month_tracker == 1){
    192e:	01 30       	cpi	r16, 0x01	; 1
    1930:	31 f4       	brne	.+12     	; 0x193e <time_menu+0x60e>
						month_tracker = 12 ;
						double_digit_write(2,41,month_tracker);
    1932:	82 e0       	ldi	r24, 0x02	; 2
    1934:	69 e2       	ldi	r22, 0x29	; 41
    1936:	4c e0       	ldi	r20, 0x0C	; 12
    1938:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
    193c:	f3 cf       	rjmp	.-26     	; 0x1924 <time_menu+0x5f4>
					}else{
						month_tracker-- ;
    193e:	01 50       	subi	r16, 0x01	; 1
    1940:	0c c0       	rjmp	.+24     	; 0x195a <time_menu+0x62a>
						double_digit_write(2,41,month_tracker);
					}

				}else if(which_button == 4){
    1942:	84 30       	cpi	r24, 0x04	; 4
    1944:	81 f4       	brne	.+32     	; 0x1966 <time_menu+0x636>
					//this means that we pressed right
					//check if we stopping at letter z
					if(month_tracker == 12){
    1946:	0c 30       	cpi	r16, 0x0C	; 12
    1948:	39 f4       	brne	.+14     	; 0x1958 <time_menu+0x628>
						month_tracker = 1 ;
						double_digit_write(2,41,month_tracker);
    194a:	82 e0       	ldi	r24, 0x02	; 2
    194c:	69 e2       	ldi	r22, 0x29	; 41
    194e:	41 e0       	ldi	r20, 0x01	; 1
    1950:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
    1954:	01 e0       	ldi	r16, 0x01	; 1
    1956:	e7 cf       	rjmp	.-50     	; 0x1926 <time_menu+0x5f6>
					}else{
						month_tracker++ ;
    1958:	0f 5f       	subi	r16, 0xFF	; 255
						double_digit_write(2,41,month_tracker);
    195a:	82 e0       	ldi	r24, 0x02	; 2
    195c:	69 e2       	ldi	r22, 0x29	; 41
    195e:	40 2f       	mov	r20, r16
    1960:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
    1964:	e0 cf       	rjmp	.-64     	; 0x1926 <time_menu+0x5f6>
					}
				}

			}while(which_button != 5);
    1966:	85 30       	cpi	r24, 0x05	; 5
    1968:	f1 f6       	brne	.-68     	; 0x1926 <time_menu+0x5f6>
			date_input.month = dec_to_bcd(month_tracker) ;

			//for clearing the underline
			setColumnAddress(41,55);
    196a:	89 e2       	ldi	r24, 0x29	; 41
    196c:	67 e3       	ldi	r22, 0x37	; 55
    196e:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setColumnAddress>
			setPageAddress(0,7);
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	67 e0       	ldi	r22, 0x07	; 7
    1976:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <setPageAddress>
			I2C_Start(oled_write_address);
    197a:	8a e7       	ldi	r24, 0x7A	; 122
    197c:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
			I2C_Write(CONTROL_DATA);
    1980:	80 e4       	ldi	r24, 0x40	; 64
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
    1988:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8 i = 0 ; i < 14 ; i++){
				I2C_Write(0x00);
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
			//for clearing the underline
			setColumnAddress(41,55);
			setPageAddress(0,7);
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 14 ; i++){
    1992:	1f 5f       	subi	r17, 0xFF	; 255
    1994:	1e 30       	cpi	r17, 0x0E	; 14
    1996:	c9 f7       	brne	.-14     	; 0x198a <time_menu+0x65a>
						double_digit_write(2,41,month_tracker);
					}
				}

			}while(which_button != 5);
			date_input.month = dec_to_bcd(month_tracker) ;
    1998:	80 2f       	mov	r24, r16
    199a:	0e 94 a4 00 	call	0x148	; 0x148 <dec_to_bcd>
    199e:	e8 2e       	mov	r14, r24
    19a0:	cf ce       	rjmp	.-610    	; 0x1740 <time_menu+0x410>
				I2C_Write(0x00);
			}
			I2C_Stop();


		}else if(num_of_inputs == 5){/********************************************************/
    19a2:	85 e0       	ldi	r24, 0x05	; 5
    19a4:	d8 16       	cp	r13, r24
    19a6:	09 f0       	breq	.+2      	; 0x19aa <time_menu+0x67a>
    19a8:	9c c0       	rjmp	.+312    	; 0x1ae2 <time_menu+0x7b2>

			//now we are choosing the day
			//for the underline
			setColumnAddress(20,34);
    19aa:	84 e1       	ldi	r24, 0x14	; 20
    19ac:	62 e2       	ldi	r22, 0x22	; 34
    19ae:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setColumnAddress>
			setPageAddress(0,7);
    19b2:	80 e0       	ldi	r24, 0x00	; 0
    19b4:	67 e0       	ldi	r22, 0x07	; 7
    19b6:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <setPageAddress>
			I2C_Start(oled_write_address);
    19ba:	8a e7       	ldi	r24, 0x7A	; 122
    19bc:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
			I2C_Write(CONTROL_DATA);
    19c0:	80 e4       	ldi	r24, 0x40	; 64
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
    19c8:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8 i = 0 ; i < 14 ; i++){
				I2C_Write(0xC0);
    19ca:	80 ec       	ldi	r24, 0xC0	; 192
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
			//for the underline
			setColumnAddress(20,34);
			setPageAddress(0,7);
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 14 ; i++){
    19d2:	1f 5f       	subi	r17, 0xFF	; 255
    19d4:	1e 30       	cpi	r17, 0x0E	; 14
    19d6:	c9 f7       	brne	.-14     	; 0x19ca <time_menu+0x69a>
				I2C_Write(0xC0);
			}
			I2C_Stop();
    19d8:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>
    19dc:	1c e1       	ldi	r17, 0x1C	; 28
			uint8 which_button = 0 ;


			do{
				which_button = 0 ;
				which_button = button_check();
    19de:	0e 94 18 05 	call	0xa30	; 0xa30 <button_check>

				if(which_button == 3){
    19e2:	83 30       	cpi	r24, 0x03	; 3
    19e4:	a1 f5       	brne	.+104    	; 0x1a4e <time_menu+0x71e>
					//we have a the following cases:
					//1.we are 1,3,5,7,8,10,12 ----> 31 day
					//2.we are 4,6,9,11 ---->30 days
					//3.February 28 days if it is not leap year , 29 days if it is leap year.{
					if(day_tracker == 1){
    19e6:	11 30       	cpi	r17, 0x01	; 1
    19e8:	81 f5       	brne	.+96     	; 0x1a4a <time_menu+0x71a>
						if( (date_input.month == 2) && (is_it_leap_year(date_input.year)) ){
    19ea:	e2 e0       	ldi	r30, 0x02	; 2
    19ec:	ee 16       	cp	r14, r30
    19ee:	99 f4       	brne	.+38     	; 0x1a16 <time_menu+0x6e6>
    19f0:	8f 2d       	mov	r24, r15
    19f2:	98 2d       	mov	r25, r8
    19f4:	0e 94 80 00 	call	0x100	; 0x100 <is_it_leap_year>
    19f8:	88 23       	and	r24, r24
    19fa:	39 f0       	breq	.+14     	; 0x1a0a <time_menu+0x6da>
							day_tracker = 29 ;
							double_digit_write(2,20,day_tracker);
    19fc:	82 e0       	ldi	r24, 0x02	; 2
    19fe:	64 e1       	ldi	r22, 0x14	; 20
    1a00:	4d e1       	ldi	r20, 0x1D	; 29
    1a02:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
    1a06:	1d e1       	ldi	r17, 0x1D	; 29
    1a08:	ea cf       	rjmp	.-44     	; 0x19de <time_menu+0x6ae>
						}else if( (date_input.month == 2) && !(is_it_leap_year(date_input.year)) ){
							day_tracker = 28 ;
							double_digit_write(2,20,day_tracker);
    1a0a:	82 e0       	ldi	r24, 0x02	; 2
    1a0c:	64 e1       	ldi	r22, 0x14	; 20
    1a0e:	4c e1       	ldi	r20, 0x1C	; 28
    1a10:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
    1a14:	e3 cf       	rjmp	.-58     	; 0x19dc <time_menu+0x6ac>
						}else if(date_input.month == 4||date_input.month == 6||date_input.month == 9||date_input.month == 11){
    1a16:	f4 e0       	ldi	r31, 0x04	; 4
    1a18:	ef 16       	cp	r14, r31
    1a1a:	49 f0       	breq	.+18     	; 0x1a2e <time_menu+0x6fe>
    1a1c:	86 e0       	ldi	r24, 0x06	; 6
    1a1e:	e8 16       	cp	r14, r24
    1a20:	31 f0       	breq	.+12     	; 0x1a2e <time_menu+0x6fe>
    1a22:	e9 e0       	ldi	r30, 0x09	; 9
    1a24:	ee 16       	cp	r14, r30
    1a26:	19 f0       	breq	.+6      	; 0x1a2e <time_menu+0x6fe>
    1a28:	fb e0       	ldi	r31, 0x0B	; 11
    1a2a:	ef 16       	cp	r14, r31
    1a2c:	39 f4       	brne	.+14     	; 0x1a3c <time_menu+0x70c>
							day_tracker = 30 ;
							double_digit_write(2,20,day_tracker);
    1a2e:	82 e0       	ldi	r24, 0x02	; 2
    1a30:	64 e1       	ldi	r22, 0x14	; 20
    1a32:	4e e1       	ldi	r20, 0x1E	; 30
    1a34:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
    1a38:	1e e1       	ldi	r17, 0x1E	; 30
    1a3a:	d1 cf       	rjmp	.-94     	; 0x19de <time_menu+0x6ae>
						}else{
							day_tracker = 31 ;
							double_digit_write(2,20,day_tracker);
    1a3c:	82 e0       	ldi	r24, 0x02	; 2
    1a3e:	64 e1       	ldi	r22, 0x14	; 20
    1a40:	4f e1       	ldi	r20, 0x1F	; 31
    1a42:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
    1a46:	1f e1       	ldi	r17, 0x1F	; 31
    1a48:	ca cf       	rjmp	.-108    	; 0x19de <time_menu+0x6ae>
						}
					}else{
						day_tracker-- ;
    1a4a:	11 50       	subi	r17, 0x01	; 1
    1a4c:	25 c0       	rjmp	.+74     	; 0x1a98 <time_menu+0x768>
						double_digit_write(2,20,day_tracker);
					}

				}else if(which_button == 4){
    1a4e:	84 30       	cpi	r24, 0x04	; 4
    1a50:	49 f5       	brne	.+82     	; 0x1aa4 <time_menu+0x774>
					//this means that we pressed right
					//check if we stopping at letter z
					if( (date_input.month == 2) && (is_it_leap_year(date_input.year)) ){
    1a52:	82 e0       	ldi	r24, 0x02	; 2
    1a54:	e8 16       	cp	r14, r24
    1a56:	61 f4       	brne	.+24     	; 0x1a70 <time_menu+0x740>
    1a58:	8f 2d       	mov	r24, r15
    1a5a:	98 2d       	mov	r25, r8
    1a5c:	0e 94 80 00 	call	0x100	; 0x100 <is_it_leap_year>
    1a60:	88 23       	and	r24, r24
    1a62:	19 f0       	breq	.+6      	; 0x1a6a <time_menu+0x73a>
						if(day_tracker != 29){
    1a64:	1d 31       	cpi	r17, 0x1D	; 29
    1a66:	b9 f4       	brne	.+46     	; 0x1a96 <time_menu+0x766>
    1a68:	14 c0       	rjmp	.+40     	; 0x1a92 <time_menu+0x762>
							day_tracker = 1 ;
						}
						double_digit_write(2,20,day_tracker);

					}else if( (date_input.month == 2) && !(is_it_leap_year(date_input.year)) ){
						if(day_tracker != 28){
    1a6a:	1c 31       	cpi	r17, 0x1C	; 28
    1a6c:	a1 f4       	brne	.+40     	; 0x1a96 <time_menu+0x766>
    1a6e:	11 c0       	rjmp	.+34     	; 0x1a92 <time_menu+0x762>
						}else{
							day_tracker = 1 ;
						}
						double_digit_write(2,20,day_tracker);

					}else if(date_input.month == 4||date_input.month == 6||date_input.month == 9||date_input.month == 11){
    1a70:	e4 e0       	ldi	r30, 0x04	; 4
    1a72:	ee 16       	cp	r14, r30
    1a74:	49 f0       	breq	.+18     	; 0x1a88 <time_menu+0x758>
    1a76:	f6 e0       	ldi	r31, 0x06	; 6
    1a78:	ef 16       	cp	r14, r31
    1a7a:	31 f0       	breq	.+12     	; 0x1a88 <time_menu+0x758>
    1a7c:	89 e0       	ldi	r24, 0x09	; 9
    1a7e:	e8 16       	cp	r14, r24
    1a80:	19 f0       	breq	.+6      	; 0x1a88 <time_menu+0x758>
    1a82:	eb e0       	ldi	r30, 0x0B	; 11
    1a84:	ee 16       	cp	r14, r30
    1a86:	19 f4       	brne	.+6      	; 0x1a8e <time_menu+0x75e>
						if(day_tracker != 30){
    1a88:	1e 31       	cpi	r17, 0x1E	; 30
    1a8a:	29 f4       	brne	.+10     	; 0x1a96 <time_menu+0x766>
    1a8c:	02 c0       	rjmp	.+4      	; 0x1a92 <time_menu+0x762>
							day_tracker = 1 ;
						}
						double_digit_write(2,20,day_tracker);

					}else{
						if(day_tracker != 31){
    1a8e:	1f 31       	cpi	r17, 0x1F	; 31
    1a90:	11 f4       	brne	.+4      	; 0x1a96 <time_menu+0x766>
    1a92:	11 e0       	ldi	r17, 0x01	; 1
    1a94:	01 c0       	rjmp	.+2      	; 0x1a98 <time_menu+0x768>
							day_tracker++;
    1a96:	1f 5f       	subi	r17, 0xFF	; 255
						}else{
							day_tracker = 1 ;
						}
						double_digit_write(2,20,day_tracker);
    1a98:	82 e0       	ldi	r24, 0x02	; 2
    1a9a:	64 e1       	ldi	r22, 0x14	; 20
    1a9c:	41 2f       	mov	r20, r17
    1a9e:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <double_digit_write>
    1aa2:	9d cf       	rjmp	.-198    	; 0x19de <time_menu+0x6ae>
					}
				}

			}while(which_button != 5);
    1aa4:	85 30       	cpi	r24, 0x05	; 5
    1aa6:	09 f0       	breq	.+2      	; 0x1aaa <time_menu+0x77a>
    1aa8:	9a cf       	rjmp	.-204    	; 0x19de <time_menu+0x6ae>
			date_input.date = dec_to_bcd(day_tracker) ;

			//for the underline
			setColumnAddress(20,34);
    1aaa:	84 e1       	ldi	r24, 0x14	; 20
    1aac:	62 e2       	ldi	r22, 0x22	; 34
    1aae:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setColumnAddress>
			setPageAddress(0,7);
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	67 e0       	ldi	r22, 0x07	; 7
    1ab6:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <setPageAddress>
			I2C_Start(oled_write_address);
    1aba:	8a e7       	ldi	r24, 0x7A	; 122
    1abc:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
			I2C_Write(CONTROL_DATA);
    1ac0:	80 e4       	ldi	r24, 0x40	; 64
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
    1ac8:	00 e0       	ldi	r16, 0x00	; 0
			for(uint8 i = 0 ; i < 14 ; i++){
				I2C_Write(0x00);
    1aca:	80 e0       	ldi	r24, 0x00	; 0
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
			//for the underline
			setColumnAddress(20,34);
			setPageAddress(0,7);
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 14 ; i++){
    1ad2:	0f 5f       	subi	r16, 0xFF	; 255
    1ad4:	0e 30       	cpi	r16, 0x0E	; 14
    1ad6:	c9 f7       	brne	.-14     	; 0x1aca <time_menu+0x79a>
						double_digit_write(2,20,day_tracker);
					}
				}

			}while(which_button != 5);
			date_input.date = dec_to_bcd(day_tracker) ;
    1ad8:	81 2f       	mov	r24, r17
    1ada:	0e 94 a4 00 	call	0x148	; 0x148 <dec_to_bcd>
    1ade:	c8 2e       	mov	r12, r24
    1ae0:	2f ce       	rjmp	.-930    	; 0x1740 <time_menu+0x410>
			I2C_Stop();
		}else if(num_of_inputs == 6){/********************************************************/
			//now we are choosing the day name.

			//for the underline
			setColumnAddress(97,118);
    1ae2:	81 e6       	ldi	r24, 0x61	; 97
    1ae4:	66 e7       	ldi	r22, 0x76	; 118
    1ae6:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setColumnAddress>
			setPageAddress(0,7);
    1aea:	80 e0       	ldi	r24, 0x00	; 0
    1aec:	67 e0       	ldi	r22, 0x07	; 7
    1aee:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <setPageAddress>
			I2C_Start(oled_write_address);
    1af2:	8a e7       	ldi	r24, 0x7A	; 122
    1af4:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
			I2C_Write(CONTROL_DATA);
    1af8:	80 e4       	ldi	r24, 0x40	; 64
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
    1b00:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8 i = 0 ; i < 21 ; i++){
				I2C_Write(0xC0);
    1b02:	80 ec       	ldi	r24, 0xC0	; 192
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
			//for the underline
			setColumnAddress(97,118);
			setPageAddress(0,7);
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 21 ; i++){
    1b0a:	1f 5f       	subi	r17, 0xFF	; 255
    1b0c:	15 31       	cpi	r17, 0x15	; 21
    1b0e:	c9 f7       	brne	.-14     	; 0x1b02 <time_menu+0x7d2>
				I2C_Write(0xC0);
			}
			I2C_Stop();
    1b10:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>
    1b14:	06 e0       	ldi	r16, 0x06	; 6
			//starting from 1 to 7 , but in index form we will send "day_name_tracker - 1".
			uint8 day_name_tracker = 6 ;
			uint8 which_button = 0 ;
			do{
				which_button = 0 ;
				which_button = button_check();
    1b16:	0e 94 18 05 	call	0xa30	; 0xa30 <button_check>

				if(which_button == 3){
    1b1a:	83 30       	cpi	r24, 0x03	; 3
    1b1c:	71 f4       	brne	.+28     	; 0x1b3a <time_menu+0x80a>
					//this means that we pressed left
					//check if we stopping at letter a
					if(day_name_tracker == 1){
    1b1e:	01 30       	cpi	r16, 0x01	; 1
    1b20:	39 f4       	brne	.+14     	; 0x1b30 <time_menu+0x800>
						day_name_tracker = 7 ;
						day_name_print(day_name_tracker - 1 , days);
    1b22:	86 e0       	ldi	r24, 0x06	; 6
    1b24:	66 e6       	ldi	r22, 0x66	; 102
    1b26:	70 e0       	ldi	r23, 0x00	; 0
    1b28:	0e 94 71 03 	call	0x6e2	; 0x6e2 <day_name_print>
    1b2c:	07 e0       	ldi	r16, 0x07	; 7
    1b2e:	f3 cf       	rjmp	.-26     	; 0x1b16 <time_menu+0x7e6>
					}else{
						day_name_tracker-- ;
    1b30:	10 2f       	mov	r17, r16
    1b32:	11 50       	subi	r17, 0x01	; 1
						day_name_print(day_name_tracker - 1 , days);
    1b34:	81 2f       	mov	r24, r17
    1b36:	81 50       	subi	r24, 0x01	; 1
    1b38:	0e c0       	rjmp	.+28     	; 0x1b56 <time_menu+0x826>
					}

				}else if(which_button == 4){
    1b3a:	84 30       	cpi	r24, 0x04	; 4
    1b3c:	91 f4       	brne	.+36     	; 0x1b62 <time_menu+0x832>
					//this means that we pressed right
					//check if we stopping at letter z
					if(day_name_tracker == 7){
    1b3e:	07 30       	cpi	r16, 0x07	; 7
    1b40:	39 f4       	brne	.+14     	; 0x1b50 <time_menu+0x820>
						day_name_tracker = 1 ;
						day_name_print(day_name_tracker - 1 , days);
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	66 e6       	ldi	r22, 0x66	; 102
    1b46:	70 e0       	ldi	r23, 0x00	; 0
    1b48:	0e 94 71 03 	call	0x6e2	; 0x6e2 <day_name_print>
    1b4c:	01 e0       	ldi	r16, 0x01	; 1
    1b4e:	e3 cf       	rjmp	.-58     	; 0x1b16 <time_menu+0x7e6>
					}else{
						day_name_tracker++ ;
    1b50:	10 2f       	mov	r17, r16
    1b52:	1f 5f       	subi	r17, 0xFF	; 255
						day_name_print(day_name_tracker - 1 , days);
    1b54:	80 2f       	mov	r24, r16
    1b56:	66 e6       	ldi	r22, 0x66	; 102
    1b58:	70 e0       	ldi	r23, 0x00	; 0
    1b5a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <day_name_print>
	//For storing runtime input
	CLOCK_DATA clock_input ;
	DATE_DATA date_input ;


	for(uint8 num_of_inputs = 0 ; num_of_inputs < 7 ; num_of_inputs++){
    1b5e:	01 2f       	mov	r16, r17
    1b60:	da cf       	rjmp	.-76     	; 0x1b16 <time_menu+0x7e6>
					}else{
						day_name_tracker++ ;
						day_name_print(day_name_tracker - 1 , days);
					}
				}
			}while(which_button != 5);
    1b62:	85 30       	cpi	r24, 0x05	; 5
    1b64:	c1 f6       	brne	.-80     	; 0x1b16 <time_menu+0x7e6>
			date_input.day = day_name_tracker ;

			//for clearing underline
			setColumnAddress(97,118);
    1b66:	81 e6       	ldi	r24, 0x61	; 97
    1b68:	66 e7       	ldi	r22, 0x76	; 118
    1b6a:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setColumnAddress>
			setPageAddress(0,7);
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	67 e0       	ldi	r22, 0x07	; 7
    1b72:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <setPageAddress>
			I2C_Start(oled_write_address);
    1b76:	8a e7       	ldi	r24, 0x7A	; 122
    1b78:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
			I2C_Write(CONTROL_DATA);
    1b7c:	80 e4       	ldi	r24, 0x40	; 64
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
    1b84:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8 i = 0 ; i < 21 ; i++){
				I2C_Write(0x00);
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
			//for clearing underline
			setColumnAddress(97,118);
			setPageAddress(0,7);
			I2C_Start(oled_write_address);
			I2C_Write(CONTROL_DATA);
			for(uint8 i = 0 ; i < 21 ; i++){
    1b8e:	1f 5f       	subi	r17, 0xFF	; 255
    1b90:	15 31       	cpi	r17, 0x15	; 21
    1b92:	c9 f7       	brne	.-14     	; 0x1b86 <time_menu+0x856>
				I2C_Write(0x00);
			}
			I2C_Stop();
    1b94:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>
			//after taking all inputs now we will set the time\date and send data to the rtc.
			RTC_CLOCK_Write(clock_input.hours,clock_input.minutes,clock_input.seconds,clock_input.am_pm);
    1b98:	8b 2d       	mov	r24, r11
    1b9a:	6a 2d       	mov	r22, r10
    1b9c:	40 e0       	ldi	r20, 0x00	; 0
    1b9e:	29 2d       	mov	r18, r9
    1ba0:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <RTC_CLOCK_Write>
			RTC_DATE_Write(date_input.day,date_input.date,date_input.month,date_input.year);
    1ba4:	80 2f       	mov	r24, r16
    1ba6:	6c 2d       	mov	r22, r12
    1ba8:	4e 2d       	mov	r20, r14
    1baa:	2f 2d       	mov	r18, r15
    1bac:	0e 94 6f 15 	call	0x2ade	; 0x2ade <RTC_DATE_Write>
	//For storing runtime input
	CLOCK_DATA clock_input ;
	DATE_DATA date_input ;


	for(uint8 num_of_inputs = 0 ; num_of_inputs < 7 ; num_of_inputs++){
    1bb0:	d3 94       	inc	r13
    1bb2:	f7 e0       	ldi	r31, 0x07	; 7
    1bb4:	df 16       	cp	r13, r31
    1bb6:	09 f0       	breq	.+2      	; 0x1bba <time_menu+0x88a>
    1bb8:	0d cd       	rjmp	.-1510   	; 0x15d4 <time_menu+0x2a4>
			RTC_DATE_Write(date_input.day,date_input.date,date_input.month,date_input.year);
		}

	}
	return 1 ;
}
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	69 96       	adiw	r28, 0x19	; 25
    1bbe:	0f b6       	in	r0, 0x3f	; 63
    1bc0:	f8 94       	cli
    1bc2:	de bf       	out	0x3e, r29	; 62
    1bc4:	0f be       	out	0x3f, r0	; 63
    1bc6:	cd bf       	out	0x3d, r28	; 61
    1bc8:	cf 91       	pop	r28
    1bca:	df 91       	pop	r29
    1bcc:	1f 91       	pop	r17
    1bce:	0f 91       	pop	r16
    1bd0:	ff 90       	pop	r15
    1bd2:	ef 90       	pop	r14
    1bd4:	df 90       	pop	r13
    1bd6:	cf 90       	pop	r12
    1bd8:	bf 90       	pop	r11
    1bda:	af 90       	pop	r10
    1bdc:	9f 90       	pop	r9
    1bde:	8f 90       	pop	r8
    1be0:	08 95       	ret

00001be2 <name_menu>:
			return which_button ;
	}
	return which_button ;
}
/*****************************************************************************/
uint8 name_menu(void){
    1be2:	ef 92       	push	r14
    1be4:	ff 92       	push	r15
    1be6:	0f 93       	push	r16
    1be8:	1f 93       	push	r17
    1bea:	df 93       	push	r29
    1bec:	cf 93       	push	r28
    1bee:	cd b7       	in	r28, 0x3d	; 61
    1bf0:	de b7       	in	r29, 0x3e	; 62
    1bf2:	2d 97       	sbiw	r28, 0x0d	; 13
    1bf4:	0f b6       	in	r0, 0x3f	; 63
    1bf6:	f8 94       	cli
    1bf8:	de bf       	out	0x3e, r29	; 62
    1bfa:	0f be       	out	0x3f, r0	; 63
    1bfc:	cd bf       	out	0x3d, r28	; 61

	//First we will print "enter your name" on the top of the screen.
	/*enter_name_arr is an array that hold the indexes of the letters in "enter your name" sentence.*/

	black_entire_screen();
    1bfe:	0e 94 09 01 	call	0x212	; 0x212 <black_entire_screen>

	uint8 enter_name_arr[13] = {4,13,19,4,17,24,14,20,17,13,0,12,4};
    1c02:	de 01       	movw	r26, r28
    1c04:	11 96       	adiw	r26, 0x01	; 1
    1c06:	e5 ec       	ldi	r30, 0xC5	; 197
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	8d e0       	ldi	r24, 0x0D	; 13
    1c0c:	01 90       	ld	r0, Z+
    1c0e:	0d 92       	st	X+, r0
    1c10:	81 50       	subi	r24, 0x01	; 1
    1c12:	e1 f7       	brne	.-8      	; 0x1c0c <name_menu+0x2a>
    1c14:	7e 01       	movw	r14, r28
    1c16:	08 94       	sec
    1c18:	e1 1c       	adc	r14, r1
    1c1a:	f1 1c       	adc	r15, r1
    1c1c:	00 e0       	ldi	r16, 0x00	; 0
    1c1e:	10 e0       	ldi	r17, 0x00	; 0
	/*now we will print them on the screen*/
	uint8 starting_col = 0 ;
	for(uint8 letter_index = 0 ; letter_index < 13 ; letter_index++){


		if(letter_index == 5 || letter_index == 9){
    1c20:	15 30       	cpi	r17, 0x05	; 5
    1c22:	11 f0       	breq	.+4      	; 0x1c28 <name_menu+0x46>
    1c24:	19 30       	cpi	r17, 0x09	; 9
    1c26:	11 f4       	brne	.+4      	; 0x1c2c <name_menu+0x4a>
			starting_col += 14;
    1c28:	02 5f       	subi	r16, 0xF2	; 242
    1c2a:	01 c0       	rjmp	.+2      	; 0x1c2e <name_menu+0x4c>
		}else{
			starting_col += 7;
    1c2c:	09 5f       	subi	r16, 0xF9	; 249
		}

		letter_write(7,starting_col,enter_name_arr[letter_index]);
    1c2e:	87 e0       	ldi	r24, 0x07	; 7
    1c30:	60 2f       	mov	r22, r16
    1c32:	f7 01       	movw	r30, r14
    1c34:	41 91       	ld	r20, Z+
    1c36:	7f 01       	movw	r14, r30
    1c38:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
	black_entire_screen();

	uint8 enter_name_arr[13] = {4,13,19,4,17,24,14,20,17,13,0,12,4};
	/*now we will print them on the screen*/
	uint8 starting_col = 0 ;
	for(uint8 letter_index = 0 ; letter_index < 13 ; letter_index++){
    1c3c:	1f 5f       	subi	r17, 0xFF	; 255
    1c3e:	1d 30       	cpi	r17, 0x0D	; 13
    1c40:	79 f7       	brne	.-34     	; 0x1c20 <name_menu+0x3e>
    1c42:	92 ed       	ldi	r25, 0xD2	; 210
    1c44:	e9 2e       	mov	r14, r25
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	f9 2e       	mov	r15, r25
    1c4a:	00 e0       	ldi	r16, 0x00	; 0
	for(uint8 letter_in = 0 ; letter_in < 5 ; letter_in++){
		//we want to have a variable to keep track of what letter to show on screen.
		uint8 letter_count = 0 ;

		//now we print letter 'a' and underline it.
		letter_write(3,(letter_in * 7),0);
    1c4c:	83 e0       	ldi	r24, 0x03	; 3
    1c4e:	60 2f       	mov	r22, r16
    1c50:	40 e0       	ldi	r20, 0x00	; 0
    1c52:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>

		//for the underline
		setColumnAddress((letter_in * 7),8);
    1c56:	80 2f       	mov	r24, r16
    1c58:	68 e0       	ldi	r22, 0x08	; 8
    1c5a:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setColumnAddress>
		setPageAddress(1,7);
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	67 e0       	ldi	r22, 0x07	; 7
    1c62:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <setPageAddress>
		I2C_Start(oled_write_address);
    1c66:	8a e7       	ldi	r24, 0x7A	; 122
    1c68:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
		I2C_Write(CONTROL_DATA);
    1c6c:	80 e4       	ldi	r24, 0x40	; 64
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
    1c74:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8 i = 0 ; i < 7 ; i++){
			I2C_Write(0x03);
    1c76:	83 e0       	ldi	r24, 0x03	; 3
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
		//for the underline
		setColumnAddress((letter_in * 7),8);
		setPageAddress(1,7);
		I2C_Start(oled_write_address);
		I2C_Write(CONTROL_DATA);
		for(uint8 i = 0 ; i < 7 ; i++){
    1c7e:	1f 5f       	subi	r17, 0xFF	; 255
    1c80:	17 30       	cpi	r17, 0x07	; 7
    1c82:	c9 f7       	brne	.-14     	; 0x1c76 <name_menu+0x94>
			I2C_Write(0x03);
		}
		I2C_Stop();
    1c84:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>
    1c88:	10 e0       	ldi	r17, 0x00	; 0
		//now we want to enter a do while loop in order to check for the buttons.
		//design a function that returns with the value of the button pressed.
		uint8 which_button = 0 ;
		do{
			which_button = 0 ;
			which_button = button_check();
    1c8a:	0e 94 18 05 	call	0xa30	; 0xa30 <button_check>

			if(which_button == 3){
    1c8e:	83 30       	cpi	r24, 0x03	; 3
    1c90:	51 f4       	brne	.+20     	; 0x1ca6 <name_menu+0xc4>
				//this means that we pressed left
				//check if we stopping at letter a
				if(letter_count == 0){
    1c92:	11 23       	and	r17, r17
    1c94:	31 f4       	brne	.+12     	; 0x1ca2 <name_menu+0xc0>
					letter_count = 25 ;
					letter_write(3,(letter_in * 7),letter_count);
    1c96:	60 2f       	mov	r22, r16
    1c98:	49 e1       	ldi	r20, 0x19	; 25
    1c9a:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
    1c9e:	19 e1       	ldi	r17, 0x19	; 25
    1ca0:	f4 cf       	rjmp	.-24     	; 0x1c8a <name_menu+0xa8>
				}else{
					letter_count-- ;
    1ca2:	11 50       	subi	r17, 0x01	; 1
    1ca4:	0b c0       	rjmp	.+22     	; 0x1cbc <name_menu+0xda>
					letter_write(3,(letter_in * 7),letter_count);
				}

			}else if(which_button == 4){
    1ca6:	84 30       	cpi	r24, 0x04	; 4
    1ca8:	79 f4       	brne	.+30     	; 0x1cc8 <name_menu+0xe6>
				//this means that we pressed right
				//check if we stopping at letter z
				if(letter_count == 25){
    1caa:	19 31       	cpi	r17, 0x19	; 25
    1cac:	31 f4       	brne	.+12     	; 0x1cba <name_menu+0xd8>
					letter_count = 0 ;
					letter_write(3,(letter_in * 7),letter_count);
    1cae:	83 e0       	ldi	r24, 0x03	; 3
    1cb0:	60 2f       	mov	r22, r16
    1cb2:	40 e0       	ldi	r20, 0x00	; 0
    1cb4:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
    1cb8:	e7 cf       	rjmp	.-50     	; 0x1c88 <name_menu+0xa6>
				}else{
					letter_count++ ;
    1cba:	1f 5f       	subi	r17, 0xFF	; 255
					letter_write(3,(letter_in * 7),letter_count);
    1cbc:	83 e0       	ldi	r24, 0x03	; 3
    1cbe:	60 2f       	mov	r22, r16
    1cc0:	41 2f       	mov	r20, r17
    1cc2:	0e 94 85 02 	call	0x50a	; 0x50a <letter_write>
    1cc6:	e1 cf       	rjmp	.-62     	; 0x1c8a <name_menu+0xa8>
				}
			}


		}while(which_button != 5);
    1cc8:	85 30       	cpi	r24, 0x05	; 5
    1cca:	f9 f6       	brne	.-66     	; 0x1c8a <name_menu+0xa8>

		//now we need to store the letter the user have chosen.
		username[letter_in] = letter_count ;
    1ccc:	f7 01       	movw	r30, r14
    1cce:	10 83       	st	Z, r17

		//now we need to clear the underline
		setColumnAddress((letter_in * 7),8);
    1cd0:	80 2f       	mov	r24, r16
    1cd2:	68 e0       	ldi	r22, 0x08	; 8
    1cd4:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setColumnAddress>
		setPageAddress(1,7);
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	67 e0       	ldi	r22, 0x07	; 7
    1cdc:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <setPageAddress>
		I2C_Start(oled_write_address);
    1ce0:	8a e7       	ldi	r24, 0x7A	; 122
    1ce2:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
		I2C_Write(CONTROL_DATA);
    1ce6:	80 e4       	ldi	r24, 0x40	; 64
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
    1cee:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8 i = 0 ; i < 7 ; i++){
			I2C_Write(0x00);
    1cf0:	80 e0       	ldi	r24, 0x00	; 0
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
		//now we need to clear the underline
		setColumnAddress((letter_in * 7),8);
		setPageAddress(1,7);
		I2C_Start(oled_write_address);
		I2C_Write(CONTROL_DATA);
		for(uint8 i = 0 ; i < 7 ; i++){
    1cf8:	1f 5f       	subi	r17, 0xFF	; 255
    1cfa:	17 30       	cpi	r17, 0x07	; 7
    1cfc:	c9 f7       	brne	.-14     	; 0x1cf0 <name_menu+0x10e>
			I2C_Write(0x00);
		}
		I2C_Stop();
    1cfe:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>
    1d02:	09 5f       	subi	r16, 0xF9	; 249
    1d04:	08 94       	sec
    1d06:	e1 1c       	adc	r14, r1
    1d08:	f1 1c       	adc	r15, r1


	//also we want an array of 5 bytes to store the name of the user.
	//uint8 username[5] = {0} ;

	for(uint8 letter_in = 0 ; letter_in < 5 ; letter_in++){
    1d0a:	03 32       	cpi	r16, 0x23	; 35
    1d0c:	09 f0       	breq	.+2      	; 0x1d10 <name_menu+0x12e>
    1d0e:	9e cf       	rjmp	.-196    	; 0x1c4c <name_menu+0x6a>
		}
		I2C_Stop();

	}
	//now save the name inside eeprom starting from 0x1F9
	I2C_Start(0b10101010);
    1d10:	8a ea       	ldi	r24, 0xAA	; 170
    1d12:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
	//For the address of the boot check byte = 0x1F8
	I2C_Write(0xF9);
    1d16:	89 ef       	ldi	r24, 0xF9	; 249
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
	for(uint8 i = 0 ; i < 5 ; i++){
		I2C_Write(username[i]);
    1d1e:	80 91 d2 00 	lds	r24, 0x00D2
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
    1d28:	80 91 d3 00 	lds	r24, 0x00D3
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
    1d32:	80 91 d4 00 	lds	r24, 0x00D4
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
    1d3c:	80 91 d5 00 	lds	r24, 0x00D5
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
    1d46:	80 91 d6 00 	lds	r24, 0x00D6
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
	}
	I2C_Stop();
    1d50:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>

	return 1 ; //adding name to eeprom done successfully.
}
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	2d 96       	adiw	r28, 0x0d	; 13
    1d58:	0f b6       	in	r0, 0x3f	; 63
    1d5a:	f8 94       	cli
    1d5c:	de bf       	out	0x3e, r29	; 62
    1d5e:	0f be       	out	0x3f, r0	; 63
    1d60:	cd bf       	out	0x3d, r28	; 61
    1d62:	cf 91       	pop	r28
    1d64:	df 91       	pop	r29
    1d66:	1f 91       	pop	r17
    1d68:	0f 91       	pop	r16
    1d6a:	ff 90       	pop	r15
    1d6c:	ef 90       	pop	r14
    1d6e:	08 95       	ret

00001d70 <button_init>:
	I2C_Stop();
}
/****************************************************************************/
void button_init(void){
	//For Pin2 PortC
	DIO_SetPinDirection(DIO_PORTC,DIO_PIN2,DIO_PIN_DIR_INPUT);
    1d70:	82 e0       	ldi	r24, 0x02	; 2
    1d72:	62 e0       	ldi	r22, 0x02	; 2
    1d74:	40 e0       	ldi	r20, 0x00	; 0
    1d76:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_SetPinDirection>
	DIO_SetPullUpRes(DIO_PORTC, DIO_PIN2);
    1d7a:	82 e0       	ldi	r24, 0x02	; 2
    1d7c:	62 e0       	ldi	r22, 0x02	; 2
    1d7e:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_SetPullUpRes>


	//For the 3 buttons
	DIO_SetPinDirection(DIO_PORTC, DIO_PIN3, DIO_PIN_DIR_OUTPUT);
    1d82:	82 e0       	ldi	r24, 0x02	; 2
    1d84:	63 e0       	ldi	r22, 0x03	; 3
    1d86:	41 e0       	ldi	r20, 0x01	; 1
    1d88:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTC, DIO_PIN4, DIO_PIN_DIR_OUTPUT);
    1d8c:	82 e0       	ldi	r24, 0x02	; 2
    1d8e:	64 e0       	ldi	r22, 0x04	; 4
    1d90:	41 e0       	ldi	r20, 0x01	; 1
    1d92:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTC, DIO_PIN5, DIO_PIN_DIR_OUTPUT);
    1d96:	82 e0       	ldi	r24, 0x02	; 2
    1d98:	65 e0       	ldi	r22, 0x05	; 5
    1d9a:	41 e0       	ldi	r20, 0x01	; 1
    1d9c:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTC, DIO_PIN6, DIO_PIN_DIR_OUTPUT);
    1da0:	82 e0       	ldi	r24, 0x02	; 2
    1da2:	66 e0       	ldi	r22, 0x06	; 6
    1da4:	41 e0       	ldi	r20, 0x01	; 1
    1da6:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_SetPinDirection>


	//Set the values to HIGH
	DIO_SetPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_VAL_HIGH);
    1daa:	82 e0       	ldi	r24, 0x02	; 2
    1dac:	63 e0       	ldi	r22, 0x03	; 3
    1dae:	41 e0       	ldi	r20, 0x01	; 1
    1db0:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTC,DIO_PIN4,DIO_PIN_VAL_HIGH);
    1db4:	82 e0       	ldi	r24, 0x02	; 2
    1db6:	64 e0       	ldi	r22, 0x04	; 4
    1db8:	41 e0       	ldi	r20, 0x01	; 1
    1dba:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTC,DIO_PIN5,DIO_PIN_VAL_HIGH);
    1dbe:	82 e0       	ldi	r24, 0x02	; 2
    1dc0:	65 e0       	ldi	r22, 0x05	; 5
    1dc2:	41 e0       	ldi	r20, 0x01	; 1
    1dc4:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTC,DIO_PIN6,DIO_PIN_VAL_HIGH);
    1dc8:	82 e0       	ldi	r24, 0x02	; 2
    1dca:	66 e0       	ldi	r22, 0x06	; 6
    1dcc:	41 e0       	ldi	r20, 0x01	; 1
    1dce:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <DIO_SetPinValue>

}
    1dd2:	08 95       	ret

00001dd4 <DIO_SetPortDirection>:

#include "DIO.h"

void DIO_SetPortDirection(uint8 Port, uint8 Direction){

	switch(Port){
    1dd4:	81 30       	cpi	r24, 0x01	; 1
    1dd6:	79 f0       	breq	.+30     	; 0x1df6 <DIO_SetPortDirection+0x22>
    1dd8:	81 30       	cpi	r24, 0x01	; 1
    1dda:	28 f0       	brcs	.+10     	; 0x1de6 <DIO_SetPortDirection+0x12>
    1ddc:	82 30       	cpi	r24, 0x02	; 2
    1dde:	99 f0       	breq	.+38     	; 0x1e06 <DIO_SetPortDirection+0x32>
    1de0:	83 30       	cpi	r24, 0x03	; 3
    1de2:	01 f5       	brne	.+64     	; 0x1e24 <DIO_SetPortDirection+0x50>
    1de4:	18 c0       	rjmp	.+48     	; 0x1e16 <DIO_SetPortDirection+0x42>
	case(DIO_PORTA):
						if(Direction == DIO_PORT_DIR_INPUT)
    1de6:	66 23       	and	r22, r22
    1de8:	11 f4       	brne	.+4      	; 0x1dee <DIO_SetPortDirection+0x1a>
							DDRA = DIO_PORT_DIR_INPUT ;
    1dea:	1a ba       	out	0x1a, r1	; 26
    1dec:	08 95       	ret
						else if(Direction == DIO_PORT_DIR_OUTPUT)
    1dee:	6f 3f       	cpi	r22, 0xFF	; 255
    1df0:	c9 f4       	brne	.+50     	; 0x1e24 <DIO_SetPortDirection+0x50>
							DDRA = DIO_PORT_DIR_OUTPUT ;
    1df2:	6a bb       	out	0x1a, r22	; 26
    1df4:	08 95       	ret
	break ;

	case(DIO_PORTB):
						if(Direction == DIO_PORT_DIR_INPUT)
    1df6:	66 23       	and	r22, r22
    1df8:	11 f4       	brne	.+4      	; 0x1dfe <DIO_SetPortDirection+0x2a>
							DDRB = DIO_PORT_DIR_INPUT ;
    1dfa:	17 ba       	out	0x17, r1	; 23
    1dfc:	08 95       	ret
						else if(Direction == DIO_PORT_DIR_OUTPUT)
    1dfe:	6f 3f       	cpi	r22, 0xFF	; 255
    1e00:	89 f4       	brne	.+34     	; 0x1e24 <DIO_SetPortDirection+0x50>
							DDRB = DIO_PORT_DIR_OUTPUT ;
    1e02:	67 bb       	out	0x17, r22	; 23
    1e04:	08 95       	ret
	break ;


	case(DIO_PORTC):
						if(Direction == DIO_PORT_DIR_INPUT)
    1e06:	66 23       	and	r22, r22
    1e08:	11 f4       	brne	.+4      	; 0x1e0e <DIO_SetPortDirection+0x3a>
							DDRC = DIO_PORT_DIR_INPUT ;
    1e0a:	14 ba       	out	0x14, r1	; 20
    1e0c:	08 95       	ret
						else if(Direction == DIO_PORT_DIR_OUTPUT)
    1e0e:	6f 3f       	cpi	r22, 0xFF	; 255
    1e10:	49 f4       	brne	.+18     	; 0x1e24 <DIO_SetPortDirection+0x50>
							DDRC = DIO_PORT_DIR_OUTPUT ;
    1e12:	64 bb       	out	0x14, r22	; 20
    1e14:	08 95       	ret
	break ;


	case(DIO_PORTD):
						if(Direction == DIO_PORT_DIR_INPUT)
    1e16:	66 23       	and	r22, r22
    1e18:	11 f4       	brne	.+4      	; 0x1e1e <DIO_SetPortDirection+0x4a>
							DDRD = DIO_PORT_DIR_INPUT ;
    1e1a:	11 ba       	out	0x11, r1	; 17
    1e1c:	08 95       	ret
						else if(Direction == DIO_PORT_DIR_OUTPUT)
    1e1e:	6f 3f       	cpi	r22, 0xFF	; 255
    1e20:	09 f4       	brne	.+2      	; 0x1e24 <DIO_SetPortDirection+0x50>
							DDRD = DIO_PORT_DIR_OUTPUT ;
    1e22:	61 bb       	out	0x11, r22	; 17
    1e24:	08 95       	ret

00001e26 <DIO_SetPinDirection>:
	}

}

void DIO_SetPinDirection(uint8 Port, uint8 Pin, uint8 Direction){
	switch(Port){
    1e26:	81 30       	cpi	r24, 0x01	; 1
    1e28:	29 f1       	breq	.+74     	; 0x1e74 <DIO_SetPinDirection+0x4e>
    1e2a:	81 30       	cpi	r24, 0x01	; 1
    1e2c:	38 f0       	brcs	.+14     	; 0x1e3c <DIO_SetPinDirection+0x16>
    1e2e:	82 30       	cpi	r24, 0x02	; 2
    1e30:	09 f4       	brne	.+2      	; 0x1e34 <DIO_SetPinDirection+0xe>
    1e32:	3c c0       	rjmp	.+120    	; 0x1eac <DIO_SetPinDirection+0x86>
    1e34:	83 30       	cpi	r24, 0x03	; 3
    1e36:	09 f0       	breq	.+2      	; 0x1e3a <DIO_SetPinDirection+0x14>
    1e38:	6e c0       	rjmp	.+220    	; 0x1f16 <DIO_SetPinDirection+0xf0>
    1e3a:	53 c0       	rjmp	.+166    	; 0x1ee2 <DIO_SetPinDirection+0xbc>

	case(DIO_PORTA):
			if(Direction == DIO_PIN_DIR_INPUT)
    1e3c:	44 23       	and	r20, r20
    1e3e:	61 f4       	brne	.+24     	; 0x1e58 <DIO_SetPinDirection+0x32>
				CLR_BIT(DDRA,Pin);
    1e40:	2a b3       	in	r18, 0x1a	; 26
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	02 c0       	rjmp	.+4      	; 0x1e4c <DIO_SetPinDirection+0x26>
    1e48:	88 0f       	add	r24, r24
    1e4a:	99 1f       	adc	r25, r25
    1e4c:	6a 95       	dec	r22
    1e4e:	e2 f7       	brpl	.-8      	; 0x1e48 <DIO_SetPinDirection+0x22>
    1e50:	80 95       	com	r24
    1e52:	82 23       	and	r24, r18
    1e54:	8a bb       	out	0x1a, r24	; 26
    1e56:	08 95       	ret
			else if(Direction == DIO_PIN_DIR_OUTPUT)
    1e58:	41 30       	cpi	r20, 0x01	; 1
    1e5a:	09 f0       	breq	.+2      	; 0x1e5e <DIO_SetPinDirection+0x38>
    1e5c:	5c c0       	rjmp	.+184    	; 0x1f16 <DIO_SetPinDirection+0xf0>
				SET_BIT(DDRA,Pin);
    1e5e:	2a b3       	in	r18, 0x1a	; 26
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	02 c0       	rjmp	.+4      	; 0x1e6a <DIO_SetPinDirection+0x44>
    1e66:	88 0f       	add	r24, r24
    1e68:	99 1f       	adc	r25, r25
    1e6a:	6a 95       	dec	r22
    1e6c:	e2 f7       	brpl	.-8      	; 0x1e66 <DIO_SetPinDirection+0x40>
    1e6e:	28 2b       	or	r18, r24
    1e70:	2a bb       	out	0x1a, r18	; 26
    1e72:	08 95       	ret
	break;

	case(DIO_PORTB):
			if(Direction == DIO_PIN_DIR_INPUT)
    1e74:	44 23       	and	r20, r20
    1e76:	61 f4       	brne	.+24     	; 0x1e90 <DIO_SetPinDirection+0x6a>
				CLR_BIT(DDRB,Pin);
    1e78:	27 b3       	in	r18, 0x17	; 23
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	02 c0       	rjmp	.+4      	; 0x1e84 <DIO_SetPinDirection+0x5e>
    1e80:	88 0f       	add	r24, r24
    1e82:	99 1f       	adc	r25, r25
    1e84:	6a 95       	dec	r22
    1e86:	e2 f7       	brpl	.-8      	; 0x1e80 <DIO_SetPinDirection+0x5a>
    1e88:	80 95       	com	r24
    1e8a:	82 23       	and	r24, r18
    1e8c:	87 bb       	out	0x17, r24	; 23
    1e8e:	08 95       	ret
			else if(Direction == DIO_PIN_DIR_OUTPUT)
    1e90:	41 30       	cpi	r20, 0x01	; 1
    1e92:	09 f0       	breq	.+2      	; 0x1e96 <DIO_SetPinDirection+0x70>
    1e94:	40 c0       	rjmp	.+128    	; 0x1f16 <DIO_SetPinDirection+0xf0>
				SET_BIT(DDRB,Pin);
    1e96:	27 b3       	in	r18, 0x17	; 23
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	02 c0       	rjmp	.+4      	; 0x1ea2 <DIO_SetPinDirection+0x7c>
    1e9e:	88 0f       	add	r24, r24
    1ea0:	99 1f       	adc	r25, r25
    1ea2:	6a 95       	dec	r22
    1ea4:	e2 f7       	brpl	.-8      	; 0x1e9e <DIO_SetPinDirection+0x78>
    1ea6:	28 2b       	or	r18, r24
    1ea8:	27 bb       	out	0x17, r18	; 23
    1eaa:	08 95       	ret
	break;

	case(DIO_PORTC):
			if(Direction == DIO_PIN_DIR_INPUT)
    1eac:	44 23       	and	r20, r20
    1eae:	61 f4       	brne	.+24     	; 0x1ec8 <DIO_SetPinDirection+0xa2>
				CLR_BIT(DDRC,Pin);
    1eb0:	24 b3       	in	r18, 0x14	; 20
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	02 c0       	rjmp	.+4      	; 0x1ebc <DIO_SetPinDirection+0x96>
    1eb8:	88 0f       	add	r24, r24
    1eba:	99 1f       	adc	r25, r25
    1ebc:	6a 95       	dec	r22
    1ebe:	e2 f7       	brpl	.-8      	; 0x1eb8 <DIO_SetPinDirection+0x92>
    1ec0:	80 95       	com	r24
    1ec2:	82 23       	and	r24, r18
    1ec4:	84 bb       	out	0x14, r24	; 20
    1ec6:	08 95       	ret
			else if(Direction == DIO_PIN_DIR_OUTPUT)
    1ec8:	41 30       	cpi	r20, 0x01	; 1
    1eca:	29 f5       	brne	.+74     	; 0x1f16 <DIO_SetPinDirection+0xf0>
				SET_BIT(DDRC,Pin);
    1ecc:	24 b3       	in	r18, 0x14	; 20
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	02 c0       	rjmp	.+4      	; 0x1ed8 <DIO_SetPinDirection+0xb2>
    1ed4:	88 0f       	add	r24, r24
    1ed6:	99 1f       	adc	r25, r25
    1ed8:	6a 95       	dec	r22
    1eda:	e2 f7       	brpl	.-8      	; 0x1ed4 <DIO_SetPinDirection+0xae>
    1edc:	28 2b       	or	r18, r24
    1ede:	24 bb       	out	0x14, r18	; 20
    1ee0:	08 95       	ret
		break;

	case(DIO_PORTD):
			if(Direction == DIO_PIN_DIR_INPUT)
    1ee2:	44 23       	and	r20, r20
    1ee4:	61 f4       	brne	.+24     	; 0x1efe <DIO_SetPinDirection+0xd8>
				CLR_BIT(DDRD,Pin);
    1ee6:	21 b3       	in	r18, 0x11	; 17
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	02 c0       	rjmp	.+4      	; 0x1ef2 <DIO_SetPinDirection+0xcc>
    1eee:	88 0f       	add	r24, r24
    1ef0:	99 1f       	adc	r25, r25
    1ef2:	6a 95       	dec	r22
    1ef4:	e2 f7       	brpl	.-8      	; 0x1eee <DIO_SetPinDirection+0xc8>
    1ef6:	80 95       	com	r24
    1ef8:	82 23       	and	r24, r18
    1efa:	81 bb       	out	0x11, r24	; 17
    1efc:	08 95       	ret
			else if(Direction == DIO_PIN_DIR_OUTPUT)
    1efe:	41 30       	cpi	r20, 0x01	; 1
    1f00:	51 f4       	brne	.+20     	; 0x1f16 <DIO_SetPinDirection+0xf0>
				SET_BIT(DDRD,Pin);
    1f02:	21 b3       	in	r18, 0x11	; 17
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	02 c0       	rjmp	.+4      	; 0x1f0e <DIO_SetPinDirection+0xe8>
    1f0a:	88 0f       	add	r24, r24
    1f0c:	99 1f       	adc	r25, r25
    1f0e:	6a 95       	dec	r22
    1f10:	e2 f7       	brpl	.-8      	; 0x1f0a <DIO_SetPinDirection+0xe4>
    1f12:	28 2b       	or	r18, r24
    1f14:	21 bb       	out	0x11, r18	; 17
    1f16:	08 95       	ret

00001f18 <DIO_SetPortValue>:
	}

}

void DIO_SetPortValue(uint8 Port, uint8 Value){
	switch(Value){
    1f18:	66 23       	and	r22, r22
    1f1a:	61 f0       	breq	.+24     	; 0x1f34 <DIO_SetPortValue+0x1c>
    1f1c:	6f 3f       	cpi	r22, 0xFF	; 255
    1f1e:	d9 f4       	brne	.+54     	; 0x1f56 <DIO_SetPortValue+0x3e>

	case(DIO_PORT_VAL_HIGH):
			switch(Port){
    1f20:	81 30       	cpi	r24, 0x01	; 1
    1f22:	21 f1       	breq	.+72     	; 0x1f6c <DIO_SetPortValue+0x54>
    1f24:	81 30       	cpi	r24, 0x01	; 1
    1f26:	00 f1       	brcs	.+64     	; 0x1f68 <DIO_SetPortValue+0x50>
    1f28:	82 30       	cpi	r24, 0x02	; 2
    1f2a:	11 f1       	breq	.+68     	; 0x1f70 <DIO_SetPortValue+0x58>
    1f2c:	83 30       	cpi	r24, 0x03	; 3
    1f2e:	19 f5       	brne	.+70     	; 0x1f76 <DIO_SetPortValue+0x5e>
					break;
			case(DIO_PORTC):
					PORTC = DIO_PORT_VAL_HIGH ;
					break;
			case(DIO_PORTD):
					PORTD = DIO_PORT_VAL_HIGH ;
    1f30:	62 bb       	out	0x12, r22	; 18
    1f32:	08 95       	ret
				break;
			}
		break;

		case(DIO_PORT_VAL_LOW):
			switch(Port){
    1f34:	81 30       	cpi	r24, 0x01	; 1
    1f36:	49 f0       	breq	.+18     	; 0x1f4a <DIO_SetPortValue+0x32>
    1f38:	81 30       	cpi	r24, 0x01	; 1
    1f3a:	28 f0       	brcs	.+10     	; 0x1f46 <DIO_SetPortValue+0x2e>
    1f3c:	82 30       	cpi	r24, 0x02	; 2
    1f3e:	39 f0       	breq	.+14     	; 0x1f4e <DIO_SetPortValue+0x36>
    1f40:	83 30       	cpi	r24, 0x03	; 3
    1f42:	c9 f4       	brne	.+50     	; 0x1f76 <DIO_SetPortValue+0x5e>
    1f44:	06 c0       	rjmp	.+12     	; 0x1f52 <DIO_SetPortValue+0x3a>
			case(DIO_PORTA):
					PORTA = DIO_PORT_VAL_LOW ;
    1f46:	1b ba       	out	0x1b, r1	; 27
    1f48:	08 95       	ret
					break;
			case(DIO_PORTB):
					PORTB = DIO_PORT_VAL_LOW ;
    1f4a:	18 ba       	out	0x18, r1	; 24
    1f4c:	08 95       	ret
					break;
			case(DIO_PORTC):
					PORTC = DIO_PORT_VAL_LOW ;
    1f4e:	15 ba       	out	0x15, r1	; 21
    1f50:	08 95       	ret
					break;
			case(DIO_PORTD):
					PORTD = DIO_PORT_VAL_LOW ;
    1f52:	12 ba       	out	0x12, r1	; 18
    1f54:	08 95       	ret
				break;
			}
			break;

			default:
				switch(Port){
    1f56:	81 30       	cpi	r24, 0x01	; 1
    1f58:	49 f0       	breq	.+18     	; 0x1f6c <DIO_SetPortValue+0x54>
    1f5a:	81 30       	cpi	r24, 0x01	; 1
    1f5c:	28 f0       	brcs	.+10     	; 0x1f68 <DIO_SetPortValue+0x50>
    1f5e:	82 30       	cpi	r24, 0x02	; 2
    1f60:	39 f0       	breq	.+14     	; 0x1f70 <DIO_SetPortValue+0x58>
    1f62:	83 30       	cpi	r24, 0x03	; 3
    1f64:	41 f4       	brne	.+16     	; 0x1f76 <DIO_SetPortValue+0x5e>
    1f66:	06 c0       	rjmp	.+12     	; 0x1f74 <DIO_SetPortValue+0x5c>
				case(DIO_PORTA):
						PORTA = Value ;
    1f68:	6b bb       	out	0x1b, r22	; 27
    1f6a:	08 95       	ret
						break;
				case(DIO_PORTB):
						PORTB = Value ;
    1f6c:	68 bb       	out	0x18, r22	; 24
    1f6e:	08 95       	ret
						break;
				case(DIO_PORTC):
						PORTC = Value ;
    1f70:	65 bb       	out	0x15, r22	; 21
    1f72:	08 95       	ret
						break;
				case(DIO_PORTD):
						PORTD = Value ;
    1f74:	62 bb       	out	0x12, r22	; 18
    1f76:	08 95       	ret

00001f78 <DIO_SetPinValue>:
	}

}

void DIO_SetPinValue(uint8 Port, uint8 Pin, uint8 Value){
	switch(Value){
    1f78:	44 23       	and	r20, r20
    1f7a:	c9 f1       	breq	.+114    	; 0x1fee <DIO_SetPinValue+0x76>
    1f7c:	41 30       	cpi	r20, 0x01	; 1
    1f7e:	09 f0       	breq	.+2      	; 0x1f82 <DIO_SetPinValue+0xa>
    1f80:	6e c0       	rjmp	.+220    	; 0x205e <DIO_SetPinValue+0xe6>

	case(DIO_PIN_VAL_HIGH):
			switch(Port){
    1f82:	81 30       	cpi	r24, 0x01	; 1
    1f84:	99 f0       	breq	.+38     	; 0x1fac <DIO_SetPinValue+0x34>
    1f86:	81 30       	cpi	r24, 0x01	; 1
    1f88:	30 f0       	brcs	.+12     	; 0x1f96 <DIO_SetPinValue+0x1e>
    1f8a:	82 30       	cpi	r24, 0x02	; 2
    1f8c:	d1 f0       	breq	.+52     	; 0x1fc2 <DIO_SetPinValue+0x4a>
    1f8e:	83 30       	cpi	r24, 0x03	; 3
    1f90:	09 f0       	breq	.+2      	; 0x1f94 <DIO_SetPinValue+0x1c>
    1f92:	65 c0       	rjmp	.+202    	; 0x205e <DIO_SetPinValue+0xe6>
    1f94:	21 c0       	rjmp	.+66     	; 0x1fd8 <DIO_SetPinValue+0x60>
			case(DIO_PORTA):
					SET_BIT(PORTA,Pin) ;
    1f96:	2b b3       	in	r18, 0x1b	; 27
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	02 c0       	rjmp	.+4      	; 0x1fa2 <DIO_SetPinValue+0x2a>
    1f9e:	88 0f       	add	r24, r24
    1fa0:	99 1f       	adc	r25, r25
    1fa2:	6a 95       	dec	r22
    1fa4:	e2 f7       	brpl	.-8      	; 0x1f9e <DIO_SetPinValue+0x26>
    1fa6:	28 2b       	or	r18, r24
    1fa8:	2b bb       	out	0x1b, r18	; 27
    1faa:	08 95       	ret
					break;
			case(DIO_PORTB):
					SET_BIT(PORTB,Pin) ;
    1fac:	28 b3       	in	r18, 0x18	; 24
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	02 c0       	rjmp	.+4      	; 0x1fb8 <DIO_SetPinValue+0x40>
    1fb4:	88 0f       	add	r24, r24
    1fb6:	99 1f       	adc	r25, r25
    1fb8:	6a 95       	dec	r22
    1fba:	e2 f7       	brpl	.-8      	; 0x1fb4 <DIO_SetPinValue+0x3c>
    1fbc:	28 2b       	or	r18, r24
    1fbe:	28 bb       	out	0x18, r18	; 24
    1fc0:	08 95       	ret
					break;
			case(DIO_PORTC):
					SET_BIT(PORTC,Pin) ;
    1fc2:	25 b3       	in	r18, 0x15	; 21
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	02 c0       	rjmp	.+4      	; 0x1fce <DIO_SetPinValue+0x56>
    1fca:	88 0f       	add	r24, r24
    1fcc:	99 1f       	adc	r25, r25
    1fce:	6a 95       	dec	r22
    1fd0:	e2 f7       	brpl	.-8      	; 0x1fca <DIO_SetPinValue+0x52>
    1fd2:	28 2b       	or	r18, r24
    1fd4:	25 bb       	out	0x15, r18	; 21
    1fd6:	08 95       	ret
					break;
			case(DIO_PORTD):
					SET_BIT(PORTD,Pin) ;
    1fd8:	22 b3       	in	r18, 0x12	; 18
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	02 c0       	rjmp	.+4      	; 0x1fe4 <DIO_SetPinValue+0x6c>
    1fe0:	88 0f       	add	r24, r24
    1fe2:	99 1f       	adc	r25, r25
    1fe4:	6a 95       	dec	r22
    1fe6:	e2 f7       	brpl	.-8      	; 0x1fe0 <DIO_SetPinValue+0x68>
    1fe8:	28 2b       	or	r18, r24
    1fea:	22 bb       	out	0x12, r18	; 18
    1fec:	08 95       	ret
				break;
			}
	break;

	case(DIO_PIN_VAL_LOW):
			switch(Port){
    1fee:	81 30       	cpi	r24, 0x01	; 1
    1ff0:	99 f0       	breq	.+38     	; 0x2018 <DIO_SetPinValue+0xa0>
    1ff2:	81 30       	cpi	r24, 0x01	; 1
    1ff4:	28 f0       	brcs	.+10     	; 0x2000 <DIO_SetPinValue+0x88>
    1ff6:	82 30       	cpi	r24, 0x02	; 2
    1ff8:	d9 f0       	breq	.+54     	; 0x2030 <DIO_SetPinValue+0xb8>
    1ffa:	83 30       	cpi	r24, 0x03	; 3
    1ffc:	81 f5       	brne	.+96     	; 0x205e <DIO_SetPinValue+0xe6>
    1ffe:	24 c0       	rjmp	.+72     	; 0x2048 <DIO_SetPinValue+0xd0>
			case(DIO_PORTA):
					CLR_BIT(PORTA,Pin) ;
    2000:	2b b3       	in	r18, 0x1b	; 27
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	02 c0       	rjmp	.+4      	; 0x200c <DIO_SetPinValue+0x94>
    2008:	88 0f       	add	r24, r24
    200a:	99 1f       	adc	r25, r25
    200c:	6a 95       	dec	r22
    200e:	e2 f7       	brpl	.-8      	; 0x2008 <DIO_SetPinValue+0x90>
    2010:	80 95       	com	r24
    2012:	82 23       	and	r24, r18
    2014:	8b bb       	out	0x1b, r24	; 27
    2016:	08 95       	ret
					break;
			case(DIO_PORTB):
					CLR_BIT(PORTB,Pin) ;
    2018:	28 b3       	in	r18, 0x18	; 24
    201a:	81 e0       	ldi	r24, 0x01	; 1
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	02 c0       	rjmp	.+4      	; 0x2024 <DIO_SetPinValue+0xac>
    2020:	88 0f       	add	r24, r24
    2022:	99 1f       	adc	r25, r25
    2024:	6a 95       	dec	r22
    2026:	e2 f7       	brpl	.-8      	; 0x2020 <DIO_SetPinValue+0xa8>
    2028:	80 95       	com	r24
    202a:	82 23       	and	r24, r18
    202c:	88 bb       	out	0x18, r24	; 24
    202e:	08 95       	ret
					break;
			case(DIO_PORTC):
					CLR_BIT(PORTC,Pin) ;
    2030:	25 b3       	in	r18, 0x15	; 21
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	02 c0       	rjmp	.+4      	; 0x203c <DIO_SetPinValue+0xc4>
    2038:	88 0f       	add	r24, r24
    203a:	99 1f       	adc	r25, r25
    203c:	6a 95       	dec	r22
    203e:	e2 f7       	brpl	.-8      	; 0x2038 <DIO_SetPinValue+0xc0>
    2040:	80 95       	com	r24
    2042:	82 23       	and	r24, r18
    2044:	85 bb       	out	0x15, r24	; 21
    2046:	08 95       	ret
					break;
			case(DIO_PORTD):
					CLR_BIT(PORTD,Pin) ;
    2048:	22 b3       	in	r18, 0x12	; 18
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	02 c0       	rjmp	.+4      	; 0x2054 <DIO_SetPinValue+0xdc>
    2050:	88 0f       	add	r24, r24
    2052:	99 1f       	adc	r25, r25
    2054:	6a 95       	dec	r22
    2056:	e2 f7       	brpl	.-8      	; 0x2050 <DIO_SetPinValue+0xd8>
    2058:	80 95       	com	r24
    205a:	82 23       	and	r24, r18
    205c:	82 bb       	out	0x12, r24	; 18
    205e:	08 95       	ret

00002060 <DIO_GetPortValue>:

}



void DIO_GetPortValue(uint8 Port, uint8 *Value){
    2060:	fb 01       	movw	r30, r22

	switch(Port){
    2062:	81 30       	cpi	r24, 0x01	; 1
    2064:	49 f0       	breq	.+18     	; 0x2078 <DIO_GetPortValue+0x18>
    2066:	81 30       	cpi	r24, 0x01	; 1
    2068:	28 f0       	brcs	.+10     	; 0x2074 <DIO_GetPortValue+0x14>
    206a:	82 30       	cpi	r24, 0x02	; 2
    206c:	39 f0       	breq	.+14     	; 0x207c <DIO_GetPortValue+0x1c>
    206e:	83 30       	cpi	r24, 0x03	; 3
    2070:	51 f4       	brne	.+20     	; 0x2086 <DIO_GetPortValue+0x26>
    2072:	07 c0       	rjmp	.+14     	; 0x2082 <DIO_GetPortValue+0x22>
	case DIO_PORTA :
		*Value = PINA ;
    2074:	89 b3       	in	r24, 0x19	; 25
    2076:	03 c0       	rjmp	.+6      	; 0x207e <DIO_GetPortValue+0x1e>
		break;

	case DIO_PORTB :
		*Value = PINB ;
    2078:	86 b3       	in	r24, 0x16	; 22
    207a:	01 c0       	rjmp	.+2      	; 0x207e <DIO_GetPortValue+0x1e>
		break;

	case DIO_PORTC :
		*Value = PINC ;
    207c:	83 b3       	in	r24, 0x13	; 19
    207e:	80 83       	st	Z, r24
    2080:	08 95       	ret
		break;

	case DIO_PORTD :
		*Value = PIND ;
    2082:	80 b3       	in	r24, 0x10	; 16
    2084:	80 83       	st	Z, r24
    2086:	08 95       	ret

00002088 <DIO_GetPinValue>:
		break;
	}

}

void DIO_GetPinValue(uint8 Port, uint8 Pin, uint8 *Value){
    2088:	fa 01       	movw	r30, r20

	switch(Port){
    208a:	81 30       	cpi	r24, 0x01	; 1
    208c:	49 f0       	breq	.+18     	; 0x20a0 <DIO_GetPinValue+0x18>
    208e:	81 30       	cpi	r24, 0x01	; 1
    2090:	28 f0       	brcs	.+10     	; 0x209c <DIO_GetPinValue+0x14>
    2092:	82 30       	cpi	r24, 0x02	; 2
    2094:	39 f0       	breq	.+14     	; 0x20a4 <DIO_GetPinValue+0x1c>
    2096:	83 30       	cpi	r24, 0x03	; 3
    2098:	c1 f4       	brne	.+48     	; 0x20ca <DIO_GetPinValue+0x42>
    209a:	0e c0       	rjmp	.+28     	; 0x20b8 <DIO_GetPinValue+0x30>
	case DIO_PORTA :
		*Value = GET_BIT(PINA,Pin) ;
    209c:	89 b3       	in	r24, 0x19	; 25
    209e:	03 c0       	rjmp	.+6      	; 0x20a6 <DIO_GetPinValue+0x1e>
		break;

	case DIO_PORTB :
		*Value = GET_BIT(PINB,Pin) ;
    20a0:	86 b3       	in	r24, 0x16	; 22
    20a2:	01 c0       	rjmp	.+2      	; 0x20a6 <DIO_GetPinValue+0x1e>
		break;

	case DIO_PORTC :
		*Value = GET_BIT(PINC,Pin) ;
    20a4:	83 b3       	in	r24, 0x13	; 19
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	02 c0       	rjmp	.+4      	; 0x20ae <DIO_GetPinValue+0x26>
    20aa:	95 95       	asr	r25
    20ac:	87 95       	ror	r24
    20ae:	6a 95       	dec	r22
    20b0:	e2 f7       	brpl	.-8      	; 0x20aa <DIO_GetPinValue+0x22>
    20b2:	81 70       	andi	r24, 0x01	; 1
    20b4:	80 83       	st	Z, r24
    20b6:	08 95       	ret
		break;

	case DIO_PORTD :
		*Value = GET_BIT(PIND,Pin) ;
    20b8:	80 b3       	in	r24, 0x10	; 16
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	02 c0       	rjmp	.+4      	; 0x20c2 <DIO_GetPinValue+0x3a>
    20be:	95 95       	asr	r25
    20c0:	87 95       	ror	r24
    20c2:	6a 95       	dec	r22
    20c4:	e2 f7       	brpl	.-8      	; 0x20be <DIO_GetPinValue+0x36>
    20c6:	81 70       	andi	r24, 0x01	; 1
    20c8:	80 83       	st	Z, r24
    20ca:	08 95       	ret

000020cc <DIO_TogglePin>:
	}

}

void DIO_TogglePin(uint8 Port, uint8 Pin){
	switch(Port){
    20cc:	81 30       	cpi	r24, 0x01	; 1
    20ce:	91 f0       	breq	.+36     	; 0x20f4 <DIO_TogglePin+0x28>
    20d0:	81 30       	cpi	r24, 0x01	; 1
    20d2:	28 f0       	brcs	.+10     	; 0x20de <DIO_TogglePin+0x12>
    20d4:	82 30       	cpi	r24, 0x02	; 2
    20d6:	c9 f0       	breq	.+50     	; 0x210a <DIO_TogglePin+0x3e>
    20d8:	83 30       	cpi	r24, 0x03	; 3
    20da:	61 f5       	brne	.+88     	; 0x2134 <DIO_TogglePin+0x68>
    20dc:	21 c0       	rjmp	.+66     	; 0x2120 <DIO_TogglePin+0x54>
	case DIO_PORTA :
		Toggle_BIT(PORTA,Pin);
    20de:	2b b3       	in	r18, 0x1b	; 27
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	02 c0       	rjmp	.+4      	; 0x20ea <DIO_TogglePin+0x1e>
    20e6:	88 0f       	add	r24, r24
    20e8:	99 1f       	adc	r25, r25
    20ea:	6a 95       	dec	r22
    20ec:	e2 f7       	brpl	.-8      	; 0x20e6 <DIO_TogglePin+0x1a>
    20ee:	28 27       	eor	r18, r24
    20f0:	2b bb       	out	0x1b, r18	; 27
    20f2:	08 95       	ret
		break;

	case DIO_PORTB :
		Toggle_BIT(PORTB,Pin);
    20f4:	28 b3       	in	r18, 0x18	; 24
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	02 c0       	rjmp	.+4      	; 0x2100 <DIO_TogglePin+0x34>
    20fc:	88 0f       	add	r24, r24
    20fe:	99 1f       	adc	r25, r25
    2100:	6a 95       	dec	r22
    2102:	e2 f7       	brpl	.-8      	; 0x20fc <DIO_TogglePin+0x30>
    2104:	28 27       	eor	r18, r24
    2106:	28 bb       	out	0x18, r18	; 24
    2108:	08 95       	ret
		break;

	case DIO_PORTC :
		Toggle_BIT(PORTC,Pin);
    210a:	25 b3       	in	r18, 0x15	; 21
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	02 c0       	rjmp	.+4      	; 0x2116 <DIO_TogglePin+0x4a>
    2112:	88 0f       	add	r24, r24
    2114:	99 1f       	adc	r25, r25
    2116:	6a 95       	dec	r22
    2118:	e2 f7       	brpl	.-8      	; 0x2112 <DIO_TogglePin+0x46>
    211a:	28 27       	eor	r18, r24
    211c:	25 bb       	out	0x15, r18	; 21
    211e:	08 95       	ret
		break;

	case DIO_PORTD :
		Toggle_BIT(PORTD,Pin);
    2120:	22 b3       	in	r18, 0x12	; 18
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	02 c0       	rjmp	.+4      	; 0x212c <DIO_TogglePin+0x60>
    2128:	88 0f       	add	r24, r24
    212a:	99 1f       	adc	r25, r25
    212c:	6a 95       	dec	r22
    212e:	e2 f7       	brpl	.-8      	; 0x2128 <DIO_TogglePin+0x5c>
    2130:	28 27       	eor	r18, r24
    2132:	22 bb       	out	0x12, r18	; 18
    2134:	08 95       	ret

00002136 <DIO_SetPullUpRes>:

}


void DIO_SetPullUpRes(uint8 Port, uint8 Pin){
	switch(Port){
    2136:	81 30       	cpi	r24, 0x01	; 1
    2138:	91 f0       	breq	.+36     	; 0x215e <DIO_SetPullUpRes+0x28>
    213a:	81 30       	cpi	r24, 0x01	; 1
    213c:	28 f0       	brcs	.+10     	; 0x2148 <DIO_SetPullUpRes+0x12>
    213e:	82 30       	cpi	r24, 0x02	; 2
    2140:	c9 f0       	breq	.+50     	; 0x2174 <DIO_SetPullUpRes+0x3e>
    2142:	83 30       	cpi	r24, 0x03	; 3
    2144:	61 f5       	brne	.+88     	; 0x219e <DIO_SetPullUpRes+0x68>
    2146:	21 c0       	rjmp	.+66     	; 0x218a <DIO_SetPullUpRes+0x54>
	case DIO_PORTA :
		SET_BIT(PORTA,Pin);
    2148:	2b b3       	in	r18, 0x1b	; 27
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	02 c0       	rjmp	.+4      	; 0x2154 <DIO_SetPullUpRes+0x1e>
    2150:	88 0f       	add	r24, r24
    2152:	99 1f       	adc	r25, r25
    2154:	6a 95       	dec	r22
    2156:	e2 f7       	brpl	.-8      	; 0x2150 <DIO_SetPullUpRes+0x1a>
    2158:	28 2b       	or	r18, r24
    215a:	2b bb       	out	0x1b, r18	; 27
    215c:	08 95       	ret
		break;

	case DIO_PORTB :
		SET_BIT(PORTB,Pin);
    215e:	28 b3       	in	r18, 0x18	; 24
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	02 c0       	rjmp	.+4      	; 0x216a <DIO_SetPullUpRes+0x34>
    2166:	88 0f       	add	r24, r24
    2168:	99 1f       	adc	r25, r25
    216a:	6a 95       	dec	r22
    216c:	e2 f7       	brpl	.-8      	; 0x2166 <DIO_SetPullUpRes+0x30>
    216e:	28 2b       	or	r18, r24
    2170:	28 bb       	out	0x18, r18	; 24
    2172:	08 95       	ret
		break;

	case DIO_PORTC :
		SET_BIT(PORTC,Pin);
    2174:	25 b3       	in	r18, 0x15	; 21
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	02 c0       	rjmp	.+4      	; 0x2180 <DIO_SetPullUpRes+0x4a>
    217c:	88 0f       	add	r24, r24
    217e:	99 1f       	adc	r25, r25
    2180:	6a 95       	dec	r22
    2182:	e2 f7       	brpl	.-8      	; 0x217c <DIO_SetPullUpRes+0x46>
    2184:	28 2b       	or	r18, r24
    2186:	25 bb       	out	0x15, r18	; 21
    2188:	08 95       	ret
		break;

	case DIO_PORTD :
		SET_BIT(PORTD,Pin);
    218a:	22 b3       	in	r18, 0x12	; 18
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	02 c0       	rjmp	.+4      	; 0x2196 <DIO_SetPullUpRes+0x60>
    2192:	88 0f       	add	r24, r24
    2194:	99 1f       	adc	r25, r25
    2196:	6a 95       	dec	r22
    2198:	e2 f7       	brpl	.-8      	; 0x2192 <DIO_SetPullUpRes+0x5c>
    219a:	28 2b       	or	r18, r24
    219c:	22 bb       	out	0x12, r18	; 18
    219e:	08 95       	ret

000021a0 <TASK_CREATE>:

Task arr[NUM_TASKS] = {} ;


void TASK_CREATE(uint8 priority, uint8 period, void(*Func_ptr)(void)){
	arr[priority].Period = period ;
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	fc 01       	movw	r30, r24
    21a4:	ee 0f       	add	r30, r30
    21a6:	ff 1f       	adc	r31, r31
    21a8:	e8 0f       	add	r30, r24
    21aa:	f9 1f       	adc	r31, r25
    21ac:	e8 52       	subi	r30, 0x28	; 40
    21ae:	ff 4f       	sbci	r31, 0xFF	; 255
    21b0:	60 83       	st	Z, r22
	arr[priority].Func_ptr = Func_ptr ;
    21b2:	52 83       	std	Z+2, r21	; 0x02
    21b4:	41 83       	std	Z+1, r20	; 0x01
}
    21b6:	08 95       	ret

000021b8 <Scheduler>:
		LCD_WriteString(name);
	}

}

void Scheduler(uint8 ticks){
    21b8:	1f 93       	push	r17
    21ba:	cf 93       	push	r28
    21bc:	df 93       	push	r29
    21be:	18 2f       	mov	r17, r24
    21c0:	c8 ed       	ldi	r28, 0xD8	; 216
    21c2:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i = 0 ; i < NUM_TASKS ; i++){
		if(ticks % arr[i].Period == 0){
    21c4:	68 81       	ld	r22, Y
    21c6:	81 2f       	mov	r24, r17
    21c8:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <__udivmodqi4>
    21cc:	99 23       	and	r25, r25
    21ce:	19 f4       	brne	.+6      	; 0x21d6 <Scheduler+0x1e>
			arr[i].Func_ptr();
    21d0:	e9 81       	ldd	r30, Y+1	; 0x01
    21d2:	fa 81       	ldd	r31, Y+2	; 0x02
    21d4:	09 95       	icall
    21d6:	23 96       	adiw	r28, 0x03	; 3
	}

}

void Scheduler(uint8 ticks){
	for(int i = 0 ; i < NUM_TASKS ; i++){
    21d8:	80 e0       	ldi	r24, 0x00	; 0
    21da:	c7 3e       	cpi	r28, 0xE7	; 231
    21dc:	d8 07       	cpc	r29, r24
    21de:	91 f7       	brne	.-28     	; 0x21c4 <Scheduler+0xc>
		if(ticks % arr[i].Period == 0){
			arr[i].Func_ptr();
		}
	}
}
    21e0:	df 91       	pop	r29
    21e2:	cf 91       	pop	r28
    21e4:	1f 91       	pop	r17
    21e6:	08 95       	ret

000021e8 <LCD>:
		flip *= -1;
	}
}

void LCD(void){
	LCD_Init();
    21e8:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <LCD_Init>

	static uint8 index = 0 ;
	static sint8 dir = 1 ;

	char *name = "Ahmed" ;
	if(index == 11 && dir == 1){
    21ec:	60 91 e7 00 	lds	r22, 0x00E7
    21f0:	6b 30       	cpi	r22, 0x0B	; 11
    21f2:	69 f4       	brne	.+26     	; 0x220e <LCD+0x26>
    21f4:	80 91 9b 00 	lds	r24, 0x009B
    21f8:	81 30       	cpi	r24, 0x01	; 1
    21fa:	69 f5       	brne	.+90     	; 0x2256 <LCD+0x6e>
		dir *= -1 ;
    21fc:	8f ef       	ldi	r24, 0xFF	; 255
    21fe:	80 93 9b 00 	sts	0x009B, r24
		index += dir ;
    2202:	8a e0       	ldi	r24, 0x0A	; 10
    2204:	80 93 e7 00 	sts	0x00E7, r24
		LCD_GoTo(0,index);
    2208:	80 e0       	ldi	r24, 0x00	; 0
    220a:	6a e0       	ldi	r22, 0x0A	; 10
    220c:	0d c0       	rjmp	.+26     	; 0x2228 <LCD+0x40>
		LCD_WriteString(name);
	}else if(index == 0 && dir == -1){
    220e:	66 23       	and	r22, r22
    2210:	91 f4       	brne	.+36     	; 0x2236 <LCD+0x4e>
    2212:	80 91 9b 00 	lds	r24, 0x009B
    2216:	8f 3f       	cpi	r24, 0xFF	; 255
    2218:	81 f4       	brne	.+32     	; 0x223a <LCD+0x52>
		dir *= -1 ;
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	80 93 9b 00 	sts	0x009B, r24
		index += dir ;
    2220:	80 93 e7 00 	sts	0x00E7, r24
		LCD_GoTo(0,index);
    2224:	80 e0       	ldi	r24, 0x00	; 0
    2226:	61 e0       	ldi	r22, 0x01	; 1
    2228:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <LCD_GoTo>
		LCD_WriteString(name);
    222c:	80 e6       	ldi	r24, 0x60	; 96
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	0e 94 8c 13 	call	0x2718	; 0x2718 <LCD_WriteString>
    2234:	08 95       	ret
	}else if(index >= 0 && index < 11){
    2236:	6b 30       	cpi	r22, 0x0B	; 11
    2238:	70 f4       	brcc	.+28     	; 0x2256 <LCD+0x6e>
		LCD_GoTo(0,index);
    223a:	80 e0       	ldi	r24, 0x00	; 0
    223c:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <LCD_GoTo>
		index += dir ;
    2240:	80 91 e7 00 	lds	r24, 0x00E7
    2244:	90 91 9b 00 	lds	r25, 0x009B
    2248:	89 0f       	add	r24, r25
    224a:	80 93 e7 00 	sts	0x00E7, r24
		LCD_WriteString(name);
    224e:	80 e6       	ldi	r24, 0x60	; 96
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	0e 94 8c 13 	call	0x2718	; 0x2718 <LCD_WriteString>
    2256:	08 95       	ret

00002258 <MOTOR>:
}

void MOTOR(void){
	static sint8 flip = 1 ;

	DIO_SetPinDirection(DIO_PORTD, DIO_PIN3, DIO_PIN_DIR_OUTPUT);
    2258:	83 e0       	ldi	r24, 0x03	; 3
    225a:	63 e0       	ldi	r22, 0x03	; 3
    225c:	41 e0       	ldi	r20, 0x01	; 1
    225e:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTD, DIO_PIN4, DIO_PIN_DIR_OUTPUT);
    2262:	83 e0       	ldi	r24, 0x03	; 3
    2264:	64 e0       	ldi	r22, 0x04	; 4
    2266:	41 e0       	ldi	r20, 0x01	; 1
    2268:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_SetPinDirection>

	if(flip == 1){
    226c:	80 91 9c 00 	lds	r24, 0x009C
    2270:	81 30       	cpi	r24, 0x01	; 1
    2272:	81 f4       	brne	.+32     	; 0x2294 <MOTOR+0x3c>
		DIO_SetPinValue(DIO_PORTD,DIO_PIN3,DIO_PIN_VAL_HIGH);
    2274:	83 e0       	ldi	r24, 0x03	; 3
    2276:	63 e0       	ldi	r22, 0x03	; 3
    2278:	41 e0       	ldi	r20, 0x01	; 1
    227a:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <DIO_SetPinValue>
		DIO_SetPinValue(DIO_PORTD,DIO_PIN4,DIO_PIN_VAL_LOW);
    227e:	83 e0       	ldi	r24, 0x03	; 3
    2280:	64 e0       	ldi	r22, 0x04	; 4
    2282:	40 e0       	ldi	r20, 0x00	; 0
    2284:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <DIO_SetPinValue>
		flip *= -1 ;
    2288:	80 91 9c 00 	lds	r24, 0x009C
    228c:	81 95       	neg	r24
    228e:	80 93 9c 00 	sts	0x009C, r24
    2292:	08 95       	ret
	}else if(flip == -1){
    2294:	8f 3f       	cpi	r24, 0xFF	; 255
    2296:	79 f4       	brne	.+30     	; 0x22b6 <MOTOR+0x5e>
		DIO_SetPinValue(DIO_PORTD,DIO_PIN3,DIO_PIN_VAL_LOW);
    2298:	83 e0       	ldi	r24, 0x03	; 3
    229a:	63 e0       	ldi	r22, 0x03	; 3
    229c:	40 e0       	ldi	r20, 0x00	; 0
    229e:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <DIO_SetPinValue>
		DIO_SetPinValue(DIO_PORTD,DIO_PIN4,DIO_PIN_VAL_HIGH);
    22a2:	83 e0       	ldi	r24, 0x03	; 3
    22a4:	64 e0       	ldi	r22, 0x04	; 4
    22a6:	41 e0       	ldi	r20, 0x01	; 1
    22a8:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <DIO_SetPinValue>
		flip *= -1;
    22ac:	80 91 9c 00 	lds	r24, 0x009C
    22b0:	81 95       	neg	r24
    22b2:	80 93 9c 00 	sts	0x009C, r24
    22b6:	08 95       	ret

000022b8 <GRE_BLINK>:
	DIO_SetPinDirection(DIO_PORTD, DIO_PIN1, DIO_PIN_DIR_OUTPUT);
	DIO_TogglePin(DIO_PORTD, DIO_PIN1);
}

void GRE_BLINK(void){
	DIO_SetPinDirection(DIO_PORTD, DIO_PIN2, DIO_PIN_DIR_OUTPUT);
    22b8:	83 e0       	ldi	r24, 0x03	; 3
    22ba:	62 e0       	ldi	r22, 0x02	; 2
    22bc:	41 e0       	ldi	r20, 0x01	; 1
    22be:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_SetPinDirection>
	DIO_TogglePin(DIO_PORTD, DIO_PIN2);
    22c2:	83 e0       	ldi	r24, 0x03	; 3
    22c4:	62 e0       	ldi	r22, 0x02	; 2
    22c6:	0e 94 66 10 	call	0x20cc	; 0x20cc <DIO_TogglePin>
}
    22ca:	08 95       	ret

000022cc <YEL_BLINK>:
	DIO_SetPinDirection(DIO_PORTD, DIO_PIN0, DIO_PIN_DIR_OUTPUT);
	DIO_TogglePin(DIO_PORTD, DIO_PIN0);
}

void YEL_BLINK(void){
	DIO_SetPinDirection(DIO_PORTD, DIO_PIN1, DIO_PIN_DIR_OUTPUT);
    22cc:	83 e0       	ldi	r24, 0x03	; 3
    22ce:	61 e0       	ldi	r22, 0x01	; 1
    22d0:	41 e0       	ldi	r20, 0x01	; 1
    22d2:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_SetPinDirection>
	DIO_TogglePin(DIO_PORTD, DIO_PIN1);
    22d6:	83 e0       	ldi	r24, 0x03	; 3
    22d8:	61 e0       	ldi	r22, 0x01	; 1
    22da:	0e 94 66 10 	call	0x20cc	; 0x20cc <DIO_TogglePin>
}
    22de:	08 95       	ret

000022e0 <RED_BLINK>:
	arr[priority].Period = period ;
	arr[priority].Func_ptr = Func_ptr ;
}

void RED_BLINK(void){
	DIO_SetPinDirection(DIO_PORTD, DIO_PIN0, DIO_PIN_DIR_OUTPUT);
    22e0:	83 e0       	ldi	r24, 0x03	; 3
    22e2:	60 e0       	ldi	r22, 0x00	; 0
    22e4:	41 e0       	ldi	r20, 0x01	; 1
    22e6:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_SetPinDirection>
	DIO_TogglePin(DIO_PORTD, DIO_PIN0);
    22ea:	83 e0       	ldi	r24, 0x03	; 3
    22ec:	60 e0       	ldi	r22, 0x00	; 0
    22ee:	0e 94 66 10 	call	0x20cc	; 0x20cc <DIO_TogglePin>
}
    22f2:	08 95       	ret

000022f4 <I2C_Init>:

#include "I2C.h"

void I2C_Init(void){
	//for 100 KHz communication speed
	TWBR = 32 ;
    22f4:	80 e2       	ldi	r24, 0x20	; 32
    22f6:	80 b9       	out	0x00, r24	; 0
	//TWBR = 72 ;
}
    22f8:	08 95       	ret

000022fa <I2C_Start>:

uint8 I2C_Start(uint8 Slave_Address_W){
    22fa:	98 2f       	mov	r25, r24
	uint8 status = 0x00 ;

	//0b10100100 -- Make TWINT bit = 0 , Generate Start bit , I2C Enable
	TWCR = 0b10100100 ;
    22fc:	84 ea       	ldi	r24, 0xA4	; 164
    22fe:	86 bf       	out	0x36, r24	; 54

	//wait until TWI finished generating start bit by checking TWI interrupt bit
	while(GET_BIT(TWCR,7) == 0);
    2300:	06 b6       	in	r0, 0x36	; 54
    2302:	07 fe       	sbrs	r0, 7
    2304:	fd cf       	rjmp	.-6      	; 0x2300 <I2C_Start+0x6>

	//get value inside status ( DON'T forget to mask Prescalar bits ) ( you need 5 MSB bits only )
	status = TWSR & 0xF8 ;
    2306:	81 b1       	in	r24, 0x01	; 1

	if(status != 0x08)
    2308:	88 7f       	andi	r24, 0xF8	; 248
    230a:	88 30       	cpi	r24, 0x08	; 8
    230c:	11 f0       	breq	.+4      	; 0x2312 <I2C_Start+0x18>
    230e:	80 e0       	ldi	r24, 0x00	; 0
    2310:	08 95       	ret
		return 0 ; //signal tells us that START bit failed

	//load Slave_Address to write to in TWDR - Data register
	TWDR = Slave_Address_W ;
    2312:	93 b9       	out	0x03, r25	; 3

	//Make TWINT bit = 0 , I2C Enable
	TWCR = 0b10000100 ;
    2314:	84 e8       	ldi	r24, 0x84	; 132
    2316:	86 bf       	out	0x36, r24	; 54

	//wait until making sure address has been sent
	while(GET_BIT(TWCR,7) == 0);
    2318:	06 b6       	in	r0, 0x36	; 54
    231a:	07 fe       	sbrs	r0, 7
    231c:	fd cf       	rjmp	.-6      	; 0x2318 <I2C_Start+0x1e>

	status = TWSR & 0xF8 ;
    231e:	81 b1       	in	r24, 0x01	; 1
    2320:	88 7f       	andi	r24, 0xF8	; 248

	if(status == 0x18)
    2322:	88 31       	cpi	r24, 0x18	; 24
    2324:	11 f4       	brne	.+4      	; 0x232a <I2C_Start+0x30>
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	08 95       	ret
		return 1 ; //slave address + Write bit has been transmitted + ACK

	if(status == 0x20)
    232a:	80 32       	cpi	r24, 0x20	; 32
    232c:	11 f0       	breq	.+4      	; 0x2332 <I2C_Start+0x38>
    232e:	83 e0       	ldi	r24, 0x03	; 3
    2330:	08 95       	ret
    2332:	82 e0       	ldi	r24, 0x02	; 2
	else
		return 3 ; //slave address + Write bit failed



}
    2334:	08 95       	ret

00002336 <I2C_Repeated_Start>:

uint8 I2C_Repeated_Start(uint8 Slave_Address_R){
    2336:	98 2f       	mov	r25, r24
	uint8 status = 0x00 ;

	//0b10100100 -- Make TWINT bit = 0 , Generate Start bit , I2C Enable
	TWCR = 0b10100100 ;
    2338:	84 ea       	ldi	r24, 0xA4	; 164
    233a:	86 bf       	out	0x36, r24	; 54

	//wait until TWI finished generating start bit by checking TWI interrupt bit
	while(GET_BIT(TWCR,7) == 0);
    233c:	06 b6       	in	r0, 0x36	; 54
    233e:	07 fe       	sbrs	r0, 7
    2340:	fd cf       	rjmp	.-6      	; 0x233c <I2C_Repeated_Start+0x6>

	//get value inside status ( DON'T forget to mask prescaler bits ) ( you need 5 MSB bits only )
	status = TWSR & 0xF8 ;
    2342:	81 b1       	in	r24, 0x01	; 1

	//repeated start not transmitted
	if(status != 0x10)
    2344:	88 7f       	andi	r24, 0xF8	; 248
    2346:	80 31       	cpi	r24, 0x10	; 16
    2348:	11 f0       	breq	.+4      	; 0x234e <I2C_Repeated_Start+0x18>
    234a:	80 e0       	ldi	r24, 0x00	; 0
    234c:	08 95       	ret
		return 0 ;

	//load Slave_Address to write to in TWDR - Data register
	TWDR = Slave_Address_R ;
    234e:	93 b9       	out	0x03, r25	; 3

	//Make TWINT bit = 0 , I2C Enable
	TWCR = 0b10000100 ;
    2350:	84 e8       	ldi	r24, 0x84	; 132
    2352:	86 bf       	out	0x36, r24	; 54

	//wait until making sure address has been sent
	while(GET_BIT(TWCR,7) == 0);
    2354:	06 b6       	in	r0, 0x36	; 54
    2356:	07 fe       	sbrs	r0, 7
    2358:	fd cf       	rjmp	.-6      	; 0x2354 <I2C_Repeated_Start+0x1e>

	status = TWSR & 0xF8 ;
    235a:	81 b1       	in	r24, 0x01	; 1
    235c:	88 7f       	andi	r24, 0xF8	; 248

	if(status == 0x40)
    235e:	80 34       	cpi	r24, 0x40	; 64
    2360:	11 f4       	brne	.+4      	; 0x2366 <I2C_Repeated_Start+0x30>
    2362:	81 e0       	ldi	r24, 0x01	; 1
    2364:	08 95       	ret
		return 1 ; //SLA+R transmitted and ACK received
	if(status == 0x48)
    2366:	88 34       	cpi	r24, 0x48	; 72
    2368:	11 f0       	breq	.+4      	; 0x236e <I2C_Repeated_Start+0x38>
    236a:	83 e0       	ldi	r24, 0x03	; 3
    236c:	08 95       	ret
    236e:	82 e0       	ldi	r24, 0x02	; 2
		return 2 ; //SLA+R transmitted and NACK received
	else
		return 3 ; //SLA+R transmission failed


}
    2370:	08 95       	ret

00002372 <I2C_Write>:

uint8 I2C_Write(uint16 Data){
	uint8 status = 0x00 ;

	//Load data or address in TWDR
	TWDR = Data ;
    2372:	83 b9       	out	0x03, r24	; 3

	//Make TWINT bit = 0 , I2C Enable
	TWCR = 0b10000100 ;
    2374:	84 e8       	ldi	r24, 0x84	; 132
    2376:	86 bf       	out	0x36, r24	; 54

	//wait until making sure data or address has been sent
	while(GET_BIT(TWCR,7) == 0);
    2378:	06 b6       	in	r0, 0x36	; 54
    237a:	07 fe       	sbrs	r0, 7
    237c:	fd cf       	rjmp	.-6      	; 0x2378 <I2C_Write+0x6>

	status = TWSR & 0xF8 ;
    237e:	81 b1       	in	r24, 0x01	; 1
    2380:	88 7f       	andi	r24, 0xF8	; 248

	if(status == 0x28)
    2382:	88 32       	cpi	r24, 0x28	; 40
    2384:	11 f4       	brne	.+4      	; 0x238a <I2C_Write+0x18>
    2386:	80 e0       	ldi	r24, 0x00	; 0
    2388:	08 95       	ret
		return 0 ; // data has been sent and ACK received
	if(status == 0x30)
    238a:	80 33       	cpi	r24, 0x30	; 48
    238c:	11 f0       	breq	.+4      	; 0x2392 <I2C_Write+0x20>
    238e:	82 e0       	ldi	r24, 0x02	; 2
    2390:	08 95       	ret
    2392:	81 e0       	ldi	r24, 0x01	; 1
		return 1 ; // data has been sent and NACK received
	else
		return 2 ; // data transmission failed

}
    2394:	08 95       	ret

00002396 <I2C_Read_ACK>:

uint8 I2C_Read_ACK(void){

	//Send Acknowledgment , Set TWINT bit to zero , enable I2C
	TWCR = 0b11000100 ;
    2396:	84 ec       	ldi	r24, 0xC4	; 196
    2398:	86 bf       	out	0x36, r24	; 54

	while(GET_BIT(TWCR,7) == 0);
    239a:	06 b6       	in	r0, 0x36	; 54
    239c:	07 fe       	sbrs	r0, 7
    239e:	fd cf       	rjmp	.-6      	; 0x239a <I2C_Read_ACK+0x4>

	return TWDR ;
    23a0:	83 b1       	in	r24, 0x03	; 3
}
    23a2:	08 95       	ret

000023a4 <I2C_Read_NACK>:

uint8 I2C_Read_NACK(void){
	//Send NOT Acknowledgment , Set TWINT bit to zero , enable I2C
	TWCR = 0b10000100 ;
    23a4:	84 e8       	ldi	r24, 0x84	; 132
    23a6:	86 bf       	out	0x36, r24	; 54

	while(GET_BIT(TWCR,7) == 0);
    23a8:	06 b6       	in	r0, 0x36	; 54
    23aa:	07 fe       	sbrs	r0, 7
    23ac:	fd cf       	rjmp	.-6      	; 0x23a8 <I2C_Read_NACK+0x4>

	return TWDR ;
    23ae:	83 b1       	in	r24, 0x03	; 3
}
    23b0:	08 95       	ret

000023b2 <I2C_Stop>:

void  I2C_Stop(void){
	TWCR = 0b10010100 ;
    23b2:	84 e9       	ldi	r24, 0x94	; 148
    23b4:	86 bf       	out	0x36, r24	; 54

	while(GET_BIT(TWCR,4) == 1);
    23b6:	06 b6       	in	r0, 0x36	; 54
    23b8:	04 fc       	sbrc	r0, 4
    23ba:	fd cf       	rjmp	.-6      	; 0x23b6 <I2C_Stop+0x4>
}
    23bc:	08 95       	ret

000023be <eeprom_address>:
 */
#include "Internal_EEPROM.h"


void eeprom_address(uint16 address){
	EEARL = 0x00 | address ;
    23be:	8e bb       	out	0x1e, r24	; 30
	EEARH = (address>>8);
    23c0:	9f bb       	out	0x1f, r25	; 31
}
    23c2:	08 95       	ret

000023c4 <eeprom_write>:


void eeprom_write(uint16 address , uint8 data){

	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
    23c4:	e1 99       	sbic	0x1c, 1	; 28
    23c6:	fe cf       	rjmp	.-4      	; 0x23c4 <eeprom_write>
	/* Set up address and data registers */
	EEAR = address;
    23c8:	9f bb       	out	0x1f, r25	; 31
    23ca:	8e bb       	out	0x1e, r24	; 30
	EEDR = data;
    23cc:	6d bb       	out	0x1d, r22	; 29

	/* Start eeprom write by setting EEWE */
	SET_BIT(EECR,2);
    23ce:	e2 9a       	sbi	0x1c, 2	; 28
	SET_BIT(EECR,1);
    23d0:	e1 9a       	sbi	0x1c, 1	; 28
	/* Write logical one to EEMWE */
	//EECR |= (1<<EEMWE);

}
    23d2:	08 95       	ret

000023d4 <eeprom_read>:


uint8 eeprom_read(uint16 address){
	//wait for the completion of the previous write operation
	while(EECR & (1<<1));
    23d4:	e1 99       	sbic	0x1c, 1	; 28
    23d6:	fe cf       	rjmp	.-4      	; 0x23d4 <eeprom_read>

	//set up address register
	EEAR = address ;
    23d8:	9f bb       	out	0x1f, r25	; 31
    23da:	8e bb       	out	0x1e, r24	; 30

	//start read operation by setting EERE bit in Control Register
	EECR |= (1<<0);
    23dc:	e0 9a       	sbi	0x1c, 0	; 28

	//now return data from data register
	return EEDR ;
    23de:	8d b3       	in	r24, 0x1d	; 29

}
    23e0:	08 95       	ret

000023e2 <Interrupt_Init>:


void Interrupt_Init(void){

#if   GLOBAL_INTERRUPT_STATUS == GENERAL_INTERRUPT_ENABLE
	SET_BIT(SREG,7);
    23e2:	8f b7       	in	r24, 0x3f	; 63
    23e4:	80 68       	ori	r24, 0x80	; 128
    23e6:	8f bf       	out	0x3f, r24	; 63
#elif GLOBAL_INTERRUPT_STATUS == GENERAL_INTERRUPT_DISABLE
	CLR_BIT(SREG,7);
#endif

}
    23e8:	08 95       	ret

000023ea <Interrupt0_Init>:


void Interrupt_Init(void){

#if   GLOBAL_INTERRUPT_STATUS == GENERAL_INTERRUPT_ENABLE
	SET_BIT(SREG,7);
    23ea:	8f b7       	in	r24, 0x3f	; 63
    23ec:	80 68       	ori	r24, 0x80	; 128
    23ee:	8f bf       	out	0x3f, r24	; 63

void Interrupt0_Init(void){
	Interrupt_Init();

	//Enabling External Interrupt Request 0
	SET_BIT(GICR,6);
    23f0:	8b b7       	in	r24, 0x3b	; 59
    23f2:	80 64       	ori	r24, 0x40	; 64
    23f4:	8b bf       	out	0x3b, r24	; 59
	CLR_BIT(MCUCR,1);
#elif INTERRUPT0_TRIGGER == INTERRUPT_TRIGGER_RISING_EDGE
	SET_BIT(MCUCR,0);
	SET_BIT(MCUCR,1);
#elif INTERRUPT0_TRIGGER == INTERRUPT_TRIGGER_FALLING_EDGE
	CLR_BIT(MCUCR,0);
    23f6:	85 b7       	in	r24, 0x35	; 53
    23f8:	8e 7f       	andi	r24, 0xFE	; 254
    23fa:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR,1);
    23fc:	85 b7       	in	r24, 0x35	; 53
    23fe:	82 60       	ori	r24, 0x02	; 2
    2400:	85 bf       	out	0x35, r24	; 53
#endif

}
    2402:	08 95       	ret

00002404 <Interrupt1_Init>:


void Interrupt_Init(void){

#if   GLOBAL_INTERRUPT_STATUS == GENERAL_INTERRUPT_ENABLE
	SET_BIT(SREG,7);
    2404:	8f b7       	in	r24, 0x3f	; 63
    2406:	80 68       	ori	r24, 0x80	; 128
    2408:	8f bf       	out	0x3f, r24	; 63
void Interrupt1_Init(void){

	Interrupt_Init();

	//Enabling External Interrupt Request 1
	SET_BIT(GICR,7);
    240a:	8b b7       	in	r24, 0x3b	; 59
    240c:	80 68       	ori	r24, 0x80	; 128
    240e:	8b bf       	out	0x3b, r24	; 59
	CLR_BIT(MCUCR,3);
#elif INTERRUPT1_TRIGGER == INTERRUPT_TRIGGER_ANY_LOGICAL_CHANGE
	SET_BIT(MCUCR,2);
	CLR_BIT(MCUCR,3);
#elif INTERRUPT1_TRIGGER == INTERRUPT_TRIGGER_RISING_EDGE
	SET_BIT(MCUCR,2);
    2410:	85 b7       	in	r24, 0x35	; 53
    2412:	84 60       	ori	r24, 0x04	; 4
    2414:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR,3);
    2416:	85 b7       	in	r24, 0x35	; 53
    2418:	88 60       	ori	r24, 0x08	; 8
    241a:	85 bf       	out	0x35, r24	; 53
#elif INTERRUPT1_TRIGGER == INTERRUPT_TRIGGER_FALLING_EDGE
	CLR_BIT(MCUCR,2);
	SET_BIT(MCUCR,3);
#endif

}
    241c:	08 95       	ret

0000241e <Interrupt2_Init>:


void Interrupt_Init(void){

#if   GLOBAL_INTERRUPT_STATUS == GENERAL_INTERRUPT_ENABLE
	SET_BIT(SREG,7);
    241e:	8f b7       	in	r24, 0x3f	; 63
    2420:	80 68       	ori	r24, 0x80	; 128
    2422:	8f bf       	out	0x3f, r24	; 63
void Interrupt2_Init(void){

	Interrupt_Init();

	//Enabling External Interrupt Request 2
	SET_BIT(GICR,5);
    2424:	8b b7       	in	r24, 0x3b	; 59
    2426:	80 62       	ori	r24, 0x20	; 32
    2428:	8b bf       	out	0x3b, r24	; 59

//IF BIT.6 IN MCUCSR REGISTER IS LOW(0-BIT CLEARED) THEN INT2 ARE TRIGGERED IN FALLING EDGE MODE
//IF BIT.6 IN MCUCSR REGISTER IS HIGH(1-BIT SET) THEN INT2 ARE TRIGGERED IN RISING EDGE MODE
//PAGE.65 in DATASHEET
#if INTERRUPT2_TRIGGER == INTERRUPT_TRIGGER_FALLING_EDGE
	CLR_BIT(MCUCSR,6);
    242a:	84 b7       	in	r24, 0x34	; 52
    242c:	8f 7b       	andi	r24, 0xBF	; 191
    242e:	84 bf       	out	0x34, r24	; 52
#elif INTERRUPT2_TRIGGER == INTERRUPT_TRIGGER_RISING_EDGE
	SET_BIT(MCUCSR,6);

#endif

}
    2430:	08 95       	ret

00002432 <Keypad_Val>:

}



uint8 Keypad_Val(void){
    2432:	9f 92       	push	r9
    2434:	af 92       	push	r10
    2436:	bf 92       	push	r11
    2438:	cf 92       	push	r12
    243a:	df 92       	push	r13
    243c:	ef 92       	push	r14
    243e:	ff 92       	push	r15
    2440:	0f 93       	push	r16
    2442:	1f 93       	push	r17
    2444:	df 93       	push	r29
    2446:	cf 93       	push	r28
    2448:	0f 92       	push	r0
    244a:	cd b7       	in	r28, 0x3d	; 61
    244c:	de b7       	in	r29, 0x3e	; 62
	//Here in this function we want to loop through the columns pins first
	uint8 COL_PIN = 0 ;
	uint8 ROW_PIN = 0 ;

	uint8 BUTTON = 1 ;
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	89 83       	std	Y+1, r24	; 0x01
    2452:	ee 24       	eor	r14, r14
    2454:	ff 24       	eor	r15, r15

		DIO_SetPinValue(KEYPAD_PORT,COL_PIN,DIO_PIN_VAL_LOW);

		for(ROW_PIN = ROW_INIT_PIN ;ROW_PIN <= ROW_FINAL_PIN; ROW_PIN++){

			DIO_GetPinValue(KEYPAD_PORT, ROW_PIN, &BUTTON);
    2456:	5e 01       	movw	r10, r28
    2458:	08 94       	sec
    245a:	a1 1c       	adc	r10, r1
    245c:	b1 1c       	adc	r11, r1

				while(BUTTON == BUTTON_PRESSED)
					DIO_GetPinValue(KEYPAD_PORT, ROW_PIN, &BUTTON);

			}else if(BUTTON == BUTTON_NOT_PRESSED){
				VAL = 99 ;
    245e:	93 e6       	ldi	r25, 0x63	; 99
    2460:	99 2e       	mov	r9, r25
uint8 Keypad_Val(void){
	//Here in this function we want to loop through the columns pins first
	uint8 COL_PIN = 0 ;
	uint8 ROW_PIN = 0 ;

	uint8 BUTTON = 1 ;
    2462:	84 e0       	ldi	r24, 0x04	; 4
    2464:	c8 2e       	mov	r12, r24
    2466:	ce 0c       	add	r12, r14
	static uint8 VAL = 0 ;

	for(COL_PIN = COL_INIT_PIN ;COL_PIN <= COL_FINAL_PIN; COL_PIN++){

		DIO_SetPinValue(KEYPAD_PORT,COL_PIN,DIO_PIN_VAL_LOW);
    2468:	82 e0       	ldi	r24, 0x02	; 2
    246a:	6c 2d       	mov	r22, r12
    246c:	40 e0       	ldi	r20, 0x00	; 0
    246e:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <DIO_SetPinValue>
    2472:	87 01       	movw	r16, r14
    2474:	03 56       	subi	r16, 0x63	; 99
    2476:	1f 4f       	sbci	r17, 0xFF	; 255
    2478:	dd 24       	eor	r13, r13

		for(ROW_PIN = ROW_INIT_PIN ;ROW_PIN <= ROW_FINAL_PIN; ROW_PIN++){

			DIO_GetPinValue(KEYPAD_PORT, ROW_PIN, &BUTTON);
    247a:	82 e0       	ldi	r24, 0x02	; 2
    247c:	6d 2d       	mov	r22, r13
    247e:	a5 01       	movw	r20, r10
    2480:	0e 94 44 10 	call	0x2088	; 0x2088 <DIO_GetPinValue>

			if(BUTTON == BUTTON_PRESSED){
    2484:	89 81       	ldd	r24, Y+1	; 0x01
    2486:	88 23       	and	r24, r24
    2488:	71 f4       	brne	.+28     	; 0x24a6 <Keypad_Val+0x74>
				VAL = KEYPAD_ARR[ROW_PIN][COL_PIN-COL_INIT_PIN];
    248a:	f8 01       	movw	r30, r16
    248c:	80 81       	ld	r24, Z
    248e:	80 93 e8 00 	sts	0x00E8, r24
    2492:	05 c0       	rjmp	.+10     	; 0x249e <Keypad_Val+0x6c>

				while(BUTTON == BUTTON_PRESSED)
					DIO_GetPinValue(KEYPAD_PORT, ROW_PIN, &BUTTON);
    2494:	82 e0       	ldi	r24, 0x02	; 2
    2496:	6d 2d       	mov	r22, r13
    2498:	a5 01       	movw	r20, r10
    249a:	0e 94 44 10 	call	0x2088	; 0x2088 <DIO_GetPinValue>
			DIO_GetPinValue(KEYPAD_PORT, ROW_PIN, &BUTTON);

			if(BUTTON == BUTTON_PRESSED){
				VAL = KEYPAD_ARR[ROW_PIN][COL_PIN-COL_INIT_PIN];

				while(BUTTON == BUTTON_PRESSED)
    249e:	89 81       	ldd	r24, Y+1	; 0x01
    24a0:	88 23       	and	r24, r24
    24a2:	c1 f3       	breq	.-16     	; 0x2494 <Keypad_Val+0x62>
    24a4:	04 c0       	rjmp	.+8      	; 0x24ae <Keypad_Val+0x7c>
					DIO_GetPinValue(KEYPAD_PORT, ROW_PIN, &BUTTON);

			}else if(BUTTON == BUTTON_NOT_PRESSED){
    24a6:	81 30       	cpi	r24, 0x01	; 1
    24a8:	11 f4       	brne	.+4      	; 0x24ae <Keypad_Val+0x7c>
				VAL = 99 ;
    24aa:	90 92 e8 00 	sts	0x00E8, r9

	for(COL_PIN = COL_INIT_PIN ;COL_PIN <= COL_FINAL_PIN; COL_PIN++){

		DIO_SetPinValue(KEYPAD_PORT,COL_PIN,DIO_PIN_VAL_LOW);

		for(ROW_PIN = ROW_INIT_PIN ;ROW_PIN <= ROW_FINAL_PIN; ROW_PIN++){
    24ae:	d3 94       	inc	r13
    24b0:	0c 5f       	subi	r16, 0xFC	; 252
    24b2:	1f 4f       	sbci	r17, 0xFF	; 255
    24b4:	f4 e0       	ldi	r31, 0x04	; 4
    24b6:	df 16       	cp	r13, r31
    24b8:	01 f7       	brne	.-64     	; 0x247a <Keypad_Val+0x48>
			}else if(BUTTON == BUTTON_NOT_PRESSED){
				VAL = 99 ;
			}
		}

		DIO_SetPinValue(KEYPAD_PORT,COL_PIN,DIO_PIN_VAL_HIGH);
    24ba:	82 e0       	ldi	r24, 0x02	; 2
    24bc:	6c 2d       	mov	r22, r12
    24be:	41 e0       	ldi	r20, 0x01	; 1
    24c0:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <DIO_SetPinValue>
    24c4:	08 94       	sec
    24c6:	e1 1c       	adc	r14, r1
    24c8:	f1 1c       	adc	r15, r1
	uint8 ROW_PIN = 0 ;

	uint8 BUTTON = 1 ;
	static uint8 VAL = 0 ;

	for(COL_PIN = COL_INIT_PIN ;COL_PIN <= COL_FINAL_PIN; COL_PIN++){
    24ca:	84 e0       	ldi	r24, 0x04	; 4
    24cc:	e8 16       	cp	r14, r24
    24ce:	f1 04       	cpc	r15, r1
    24d0:	41 f6       	brne	.-112    	; 0x2462 <Keypad_Val+0x30>

		DIO_SetPinValue(KEYPAD_PORT,COL_PIN,DIO_PIN_VAL_HIGH);
	}

	return VAL ;
}
    24d2:	80 91 e8 00 	lds	r24, 0x00E8
    24d6:	0f 90       	pop	r0
    24d8:	cf 91       	pop	r28
    24da:	df 91       	pop	r29
    24dc:	1f 91       	pop	r17
    24de:	0f 91       	pop	r16
    24e0:	ff 90       	pop	r15
    24e2:	ef 90       	pop	r14
    24e4:	df 90       	pop	r13
    24e6:	cf 90       	pop	r12
    24e8:	bf 90       	pop	r11
    24ea:	af 90       	pop	r10
    24ec:	9f 90       	pop	r9
    24ee:	08 95       	ret

000024f0 <Keypad_Init>:
};

void Keypad_Init(void){

	//Make ROW Pins as an input
	DIO_SetPinDirection(KEYPAD_PORT,DIO_PIN0,DIO_PIN_DIR_INPUT);
    24f0:	82 e0       	ldi	r24, 0x02	; 2
    24f2:	60 e0       	ldi	r22, 0x00	; 0
    24f4:	40 e0       	ldi	r20, 0x00	; 0
    24f6:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,DIO_PIN1,DIO_PIN_DIR_INPUT);
    24fa:	82 e0       	ldi	r24, 0x02	; 2
    24fc:	61 e0       	ldi	r22, 0x01	; 1
    24fe:	40 e0       	ldi	r20, 0x00	; 0
    2500:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,DIO_PIN2,DIO_PIN_DIR_INPUT);
    2504:	82 e0       	ldi	r24, 0x02	; 2
    2506:	62 e0       	ldi	r22, 0x02	; 2
    2508:	40 e0       	ldi	r20, 0x00	; 0
    250a:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,DIO_PIN3,DIO_PIN_DIR_INPUT);
    250e:	82 e0       	ldi	r24, 0x02	; 2
    2510:	63 e0       	ldi	r22, 0x03	; 3
    2512:	40 e0       	ldi	r20, 0x00	; 0
    2514:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_SetPinDirection>

	//Activate Pull Up Resistors on the input pins
	DIO_SetPullUpRes(KEYPAD_PORT, DIO_PIN0);
    2518:	82 e0       	ldi	r24, 0x02	; 2
    251a:	60 e0       	ldi	r22, 0x00	; 0
    251c:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_SetPullUpRes>
	DIO_SetPullUpRes(KEYPAD_PORT, DIO_PIN1);
    2520:	82 e0       	ldi	r24, 0x02	; 2
    2522:	61 e0       	ldi	r22, 0x01	; 1
    2524:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_SetPullUpRes>
	DIO_SetPullUpRes(KEYPAD_PORT, DIO_PIN2);
    2528:	82 e0       	ldi	r24, 0x02	; 2
    252a:	62 e0       	ldi	r22, 0x02	; 2
    252c:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_SetPullUpRes>
	DIO_SetPullUpRes(KEYPAD_PORT, DIO_PIN3);
    2530:	82 e0       	ldi	r24, 0x02	; 2
    2532:	63 e0       	ldi	r22, 0x03	; 3
    2534:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_SetPullUpRes>

	//Make COL Pins as an output
	DIO_SetPinDirection(KEYPAD_PORT,DIO_PIN4,DIO_PIN_DIR_OUTPUT);
    2538:	82 e0       	ldi	r24, 0x02	; 2
    253a:	64 e0       	ldi	r22, 0x04	; 4
    253c:	41 e0       	ldi	r20, 0x01	; 1
    253e:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,DIO_PIN5,DIO_PIN_DIR_OUTPUT);
    2542:	82 e0       	ldi	r24, 0x02	; 2
    2544:	65 e0       	ldi	r22, 0x05	; 5
    2546:	41 e0       	ldi	r20, 0x01	; 1
    2548:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,DIO_PIN6,DIO_PIN_DIR_OUTPUT);
    254c:	82 e0       	ldi	r24, 0x02	; 2
    254e:	66 e0       	ldi	r22, 0x06	; 6
    2550:	41 e0       	ldi	r20, 0x01	; 1
    2552:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_PORT,DIO_PIN7,DIO_PIN_DIR_OUTPUT);
    2556:	82 e0       	ldi	r24, 0x02	; 2
    2558:	67 e0       	ldi	r22, 0x07	; 7
    255a:	41 e0       	ldi	r20, 0x01	; 1
    255c:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_SetPinDirection>

	//Make COL Pins output high value
	DIO_SetPinValue(KEYPAD_PORT, DIO_PIN4, DIO_PIN_VAL_HIGH);
    2560:	82 e0       	ldi	r24, 0x02	; 2
    2562:	64 e0       	ldi	r22, 0x04	; 4
    2564:	41 e0       	ldi	r20, 0x01	; 1
    2566:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <DIO_SetPinValue>
	DIO_SetPinValue(KEYPAD_PORT, DIO_PIN5, DIO_PIN_VAL_HIGH);
    256a:	82 e0       	ldi	r24, 0x02	; 2
    256c:	65 e0       	ldi	r22, 0x05	; 5
    256e:	41 e0       	ldi	r20, 0x01	; 1
    2570:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <DIO_SetPinValue>
	DIO_SetPinValue(KEYPAD_PORT, DIO_PIN6, DIO_PIN_VAL_HIGH);
    2574:	82 e0       	ldi	r24, 0x02	; 2
    2576:	66 e0       	ldi	r22, 0x06	; 6
    2578:	41 e0       	ldi	r20, 0x01	; 1
    257a:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <DIO_SetPinValue>
	DIO_SetPinValue(KEYPAD_PORT, DIO_PIN7, DIO_PIN_VAL_HIGH);
    257e:	82 e0       	ldi	r24, 0x02	; 2
    2580:	67 e0       	ldi	r22, 0x07	; 7
    2582:	41 e0       	ldi	r20, 0x01	; 1
    2584:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <DIO_SetPinValue>


}
    2588:	08 95       	ret

0000258a <LCD_WriteChar>:
#endif

}


void LCD_WriteChar(uint8 ch){
    258a:	ff 92       	push	r15
    258c:	0f 93       	push	r16
    258e:	1f 93       	push	r17
    2590:	f8 2e       	mov	r15, r24
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_E_PIN,DIO_PIN_VAL_LOW);
	_delay_ms(1);

#elif LCD_MODE == 4

	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_RS_PIN,DIO_PIN_VAL_HIGH);
    2592:	83 e0       	ldi	r24, 0x03	; 3
    2594:	61 e0       	ldi	r22, 0x01	; 1
    2596:	41 e0       	ldi	r20, 0x01	; 1
    2598:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_RW_PIN,DIO_PIN_VAL_LOW);
    259c:	83 e0       	ldi	r24, 0x03	; 3
    259e:	62 e0       	ldi	r22, 0x02	; 2
    25a0:	40 e0       	ldi	r20, 0x00	; 0
    25a2:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_E_PIN,DIO_PIN_VAL_LOW);
    25a6:	83 e0       	ldi	r24, 0x03	; 3
    25a8:	63 e0       	ldi	r22, 0x03	; 3
    25aa:	40 e0       	ldi	r20, 0x00	; 0
    25ac:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <DIO_SetPinValue>

	//Send Highest nibble first
	LCD_4BIT_DATA_PORT = (LCD_4BIT_DATA_PORT & 0x0f)|(ch & 0xf0) ;
    25b0:	8b b3       	in	r24, 0x1b	; 27
    25b2:	9f 2d       	mov	r25, r15
    25b4:	90 7f       	andi	r25, 0xF0	; 240
    25b6:	8f 70       	andi	r24, 0x0F	; 15
    25b8:	98 2b       	or	r25, r24
    25ba:	9b bb       	out	0x1b, r25	; 27
	//Latch the highest nibble
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_E_PIN,DIO_PIN_VAL_HIGH);
    25bc:	83 e0       	ldi	r24, 0x03	; 3
    25be:	63 e0       	ldi	r22, 0x03	; 3
    25c0:	41 e0       	ldi	r20, 0x01	; 1
    25c2:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <DIO_SetPinValue>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25c6:	00 ed       	ldi	r16, 0xD0	; 208
    25c8:	17 e0       	ldi	r17, 0x07	; 7
    25ca:	c8 01       	movw	r24, r16
    25cc:	01 97       	sbiw	r24, 0x01	; 1
    25ce:	f1 f7       	brne	.-4      	; 0x25cc <LCD_WriteChar+0x42>
	_delay_ms(1);
	//Stop Latch to send lowest nibble
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_E_PIN,DIO_PIN_VAL_LOW);
    25d0:	83 e0       	ldi	r24, 0x03	; 3
    25d2:	63 e0       	ldi	r22, 0x03	; 3
    25d4:	40 e0       	ldi	r20, 0x00	; 0
    25d6:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <DIO_SetPinValue>
    25da:	c8 01       	movw	r24, r16
    25dc:	01 97       	sbiw	r24, 0x01	; 1
    25de:	f1 f7       	brne	.-4      	; 0x25dc <LCD_WriteChar+0x52>
	_delay_ms(1);

	//Send Highest nibble first
	LCD_4BIT_DATA_PORT = (LCD_4BIT_DATA_PORT & 0x0f)|(ch<<4) ;
    25e0:	8b b3       	in	r24, 0x1b	; 27
    25e2:	f2 94       	swap	r15
    25e4:	90 ef       	ldi	r25, 0xF0	; 240
    25e6:	f9 22       	and	r15, r25
    25e8:	8f 70       	andi	r24, 0x0F	; 15
    25ea:	8f 29       	or	r24, r15
    25ec:	8b bb       	out	0x1b, r24	; 27
	//Latch the highest nibble
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_E_PIN,DIO_PIN_VAL_HIGH);
    25ee:	83 e0       	ldi	r24, 0x03	; 3
    25f0:	63 e0       	ldi	r22, 0x03	; 3
    25f2:	41 e0       	ldi	r20, 0x01	; 1
    25f4:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <DIO_SetPinValue>
    25f8:	c8 01       	movw	r24, r16
    25fa:	01 97       	sbiw	r24, 0x01	; 1
    25fc:	f1 f7       	brne	.-4      	; 0x25fa <LCD_WriteChar+0x70>
	_delay_ms(1);
	//Stop Latch to send lowest nibble
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_E_PIN,DIO_PIN_VAL_LOW);
    25fe:	83 e0       	ldi	r24, 0x03	; 3
    2600:	63 e0       	ldi	r22, 0x03	; 3
    2602:	40 e0       	ldi	r20, 0x00	; 0
    2604:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <DIO_SetPinValue>
    2608:	c8 01       	movw	r24, r16
    260a:	01 97       	sbiw	r24, 0x01	; 1
    260c:	f1 f7       	brne	.-4      	; 0x260a <LCD_WriteChar+0x80>
	_delay_ms(1);

#endif

}
    260e:	1f 91       	pop	r17
    2610:	0f 91       	pop	r16
    2612:	ff 90       	pop	r15
    2614:	08 95       	ret

00002616 <LCD_WriteInteger>:
		LCD_WriteCommand(cmd);
	}
}


void LCD_WriteInteger(sint32 num){
    2616:	9f 92       	push	r9
    2618:	af 92       	push	r10
    261a:	bf 92       	push	r11
    261c:	cf 92       	push	r12
    261e:	df 92       	push	r13
    2620:	ef 92       	push	r14
    2622:	ff 92       	push	r15
    2624:	0f 93       	push	r16
    2626:	1f 93       	push	r17
    2628:	7b 01       	movw	r14, r22
    262a:	8c 01       	movw	r16, r24
	uint32 reversed = 0 ;
	uint8 num_length = 0 ;

	if(num == 0){
    262c:	61 15       	cp	r22, r1
    262e:	71 05       	cpc	r23, r1
    2630:	81 05       	cpc	r24, r1
    2632:	91 05       	cpc	r25, r1
    2634:	11 f4       	brne	.+4      	; 0x263a <LCD_WriteInteger+0x24>
		LCD_WriteChar('0');
    2636:	80 e3       	ldi	r24, 0x30	; 48
    2638:	0b c0       	rjmp	.+22     	; 0x2650 <LCD_WriteInteger+0x3a>
	}

	if(num < 0){
    263a:	97 ff       	sbrs	r25, 7
    263c:	0b c0       	rjmp	.+22     	; 0x2654 <LCD_WriteInteger+0x3e>
		num *= -1 ;
    263e:	10 95       	com	r17
    2640:	00 95       	com	r16
    2642:	f0 94       	com	r15
    2644:	e0 94       	com	r14
    2646:	e1 1c       	adc	r14, r1
    2648:	f1 1c       	adc	r15, r1
    264a:	01 1d       	adc	r16, r1
    264c:	11 1d       	adc	r17, r1
		LCD_WriteChar('-');
    264e:	8d e2       	ldi	r24, 0x2D	; 45
    2650:	0e 94 c5 12 	call	0x258a	; 0x258a <LCD_WriteChar>
    2654:	aa 24       	eor	r10, r10
    2656:	bb 24       	eor	r11, r11
    2658:	65 01       	movw	r12, r10
    265a:	99 24       	eor	r9, r9
    265c:	28 c0       	rjmp	.+80     	; 0x26ae <LCD_WriteInteger+0x98>
	}

	while(num != 0){
		reversed = reversed + num%10;
    265e:	c8 01       	movw	r24, r16
    2660:	b7 01       	movw	r22, r14
    2662:	2a e0       	ldi	r18, 0x0A	; 10
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	40 e0       	ldi	r20, 0x00	; 0
    2668:	50 e0       	ldi	r21, 0x00	; 0
    266a:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <__divmodsi4>
    266e:	a6 0e       	add	r10, r22
    2670:	b7 1e       	adc	r11, r23
    2672:	c8 1e       	adc	r12, r24
    2674:	d9 1e       	adc	r13, r25
		num_length++ ;

		num = num / 10 ;
    2676:	c8 01       	movw	r24, r16
    2678:	b7 01       	movw	r22, r14
    267a:	2a e0       	ldi	r18, 0x0A	; 10
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	40 e0       	ldi	r20, 0x00	; 0
    2680:	50 e0       	ldi	r21, 0x00	; 0
    2682:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <__divmodsi4>
    2686:	c9 01       	movw	r24, r18
    2688:	da 01       	movw	r26, r20
    268a:	7c 01       	movw	r14, r24
    268c:	8d 01       	movw	r16, r26
		if(num != 0)
    268e:	e1 14       	cp	r14, r1
    2690:	f1 04       	cpc	r15, r1
    2692:	01 05       	cpc	r16, r1
    2694:	11 05       	cpc	r17, r1
    2696:	51 f0       	breq	.+20     	; 0x26ac <LCD_WriteInteger+0x96>
			reversed = reversed * 10 ;
    2698:	c6 01       	movw	r24, r12
    269a:	b5 01       	movw	r22, r10
    269c:	2a e0       	ldi	r18, 0x0A	; 10
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	40 e0       	ldi	r20, 0x00	; 0
    26a2:	50 e0       	ldi	r21, 0x00	; 0
    26a4:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <__mulsi3>
    26a8:	5b 01       	movw	r10, r22
    26aa:	6c 01       	movw	r12, r24
		LCD_WriteChar('-');
	}

	while(num != 0){
		reversed = reversed + num%10;
		num_length++ ;
    26ac:	93 94       	inc	r9
	if(num < 0){
		num *= -1 ;
		LCD_WriteChar('-');
	}

	while(num != 0){
    26ae:	e1 14       	cp	r14, r1
    26b0:	f1 04       	cpc	r15, r1
    26b2:	01 05       	cpc	r16, r1
    26b4:	11 05       	cpc	r17, r1
    26b6:	99 f6       	brne	.-90     	; 0x265e <LCD_WriteInteger+0x48>
    26b8:	19 c0       	rjmp	.+50     	; 0x26ec <LCD_WriteInteger+0xd6>



	while(reversed != 0){
		uint8 digit = reversed %10 ;
		LCD_WriteChar(digit + '0');
    26ba:	c6 01       	movw	r24, r12
    26bc:	b5 01       	movw	r22, r10
    26be:	2a e0       	ldi	r18, 0x0A	; 10
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	40 e0       	ldi	r20, 0x00	; 0
    26c4:	50 e0       	ldi	r21, 0x00	; 0
    26c6:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <__udivmodsi4>
    26ca:	86 2f       	mov	r24, r22
    26cc:	80 5d       	subi	r24, 0xD0	; 208
    26ce:	0e 94 c5 12 	call	0x258a	; 0x258a <LCD_WriteChar>
		reversed = reversed / 10 ;
    26d2:	c6 01       	movw	r24, r12
    26d4:	b5 01       	movw	r22, r10
    26d6:	2a e0       	ldi	r18, 0x0A	; 10
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	40 e0       	ldi	r20, 0x00	; 0
    26dc:	50 e0       	ldi	r21, 0x00	; 0
    26de:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <__udivmodsi4>
    26e2:	c9 01       	movw	r24, r18
    26e4:	da 01       	movw	r26, r20
    26e6:	5c 01       	movw	r10, r24
    26e8:	6d 01       	movw	r12, r26
		num_length--;
    26ea:	9a 94       	dec	r9
			reversed = reversed * 10 ;
	}



	while(reversed != 0){
    26ec:	a1 14       	cp	r10, r1
    26ee:	b1 04       	cpc	r11, r1
    26f0:	c1 04       	cpc	r12, r1
    26f2:	d1 04       	cpc	r13, r1
    26f4:	11 f7       	brne	.-60     	; 0x26ba <LCD_WriteInteger+0xa4>
    26f6:	04 c0       	rjmp	.+8      	; 0x2700 <LCD_WriteInteger+0xea>
		reversed = reversed / 10 ;
		num_length--;
	}

	while(num_length !=0){
		LCD_WriteChar('0');
    26f8:	80 e3       	ldi	r24, 0x30	; 48
    26fa:	0e 94 c5 12 	call	0x258a	; 0x258a <LCD_WriteChar>
		num_length--;
    26fe:	9a 94       	dec	r9
		LCD_WriteChar(digit + '0');
		reversed = reversed / 10 ;
		num_length--;
	}

	while(num_length !=0){
    2700:	99 20       	and	r9, r9
    2702:	d1 f7       	brne	.-12     	; 0x26f8 <LCD_WriteInteger+0xe2>
		LCD_WriteChar('0');
		num_length--;
	}

}
    2704:	1f 91       	pop	r17
    2706:	0f 91       	pop	r16
    2708:	ff 90       	pop	r15
    270a:	ef 90       	pop	r14
    270c:	df 90       	pop	r13
    270e:	cf 90       	pop	r12
    2710:	bf 90       	pop	r11
    2712:	af 90       	pop	r10
    2714:	9f 90       	pop	r9
    2716:	08 95       	ret

00002718 <LCD_WriteString>:

#endif

}

void LCD_WriteString(uint8 *str){
    2718:	cf 93       	push	r28
    271a:	df 93       	push	r29
    271c:	ec 01       	movw	r28, r24
    271e:	03 c0       	rjmp	.+6      	; 0x2726 <LCD_WriteString+0xe>
	while(*str != '\0'){
		LCD_WriteChar(*str);
    2720:	0e 94 c5 12 	call	0x258a	; 0x258a <LCD_WriteChar>
		str++ ;
    2724:	21 96       	adiw	r28, 0x01	; 1
#endif

}

void LCD_WriteString(uint8 *str){
	while(*str != '\0'){
    2726:	88 81       	ld	r24, Y
    2728:	88 23       	and	r24, r24
    272a:	d1 f7       	brne	.-12     	; 0x2720 <LCD_WriteString+0x8>
		LCD_WriteChar(*str);
		str++ ;
	}
}
    272c:	df 91       	pop	r29
    272e:	cf 91       	pop	r28
    2730:	08 95       	ret

00002732 <LCD_WriteCommand>:

#endif
}


void LCD_WriteCommand(uint8 cmd){
    2732:	ff 92       	push	r15
    2734:	0f 93       	push	r16
    2736:	1f 93       	push	r17
    2738:	f8 2e       	mov	r15, r24
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_E_PIN,DIO_PIN_VAL_LOW);
	_delay_ms(1);


#elif LCD_MODE == 4
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_RS_PIN,DIO_PIN_VAL_LOW);
    273a:	83 e0       	ldi	r24, 0x03	; 3
    273c:	61 e0       	ldi	r22, 0x01	; 1
    273e:	40 e0       	ldi	r20, 0x00	; 0
    2740:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_RW_PIN,DIO_PIN_VAL_LOW);
    2744:	83 e0       	ldi	r24, 0x03	; 3
    2746:	62 e0       	ldi	r22, 0x02	; 2
    2748:	40 e0       	ldi	r20, 0x00	; 0
    274a:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_E_PIN,DIO_PIN_VAL_LOW);
    274e:	83 e0       	ldi	r24, 0x03	; 3
    2750:	63 e0       	ldi	r22, 0x03	; 3
    2752:	40 e0       	ldi	r20, 0x00	; 0
    2754:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <DIO_SetPinValue>

	//Send Highest nibble first
	LCD_4BIT_DATA_PORT = (LCD_4BIT_DATA_PORT & 0x0f)|(cmd & 0xf0) ;
    2758:	8b b3       	in	r24, 0x1b	; 27
    275a:	9f 2d       	mov	r25, r15
    275c:	90 7f       	andi	r25, 0xF0	; 240
    275e:	8f 70       	andi	r24, 0x0F	; 15
    2760:	98 2b       	or	r25, r24
    2762:	9b bb       	out	0x1b, r25	; 27
	//Latch the highest nibble
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_E_PIN,DIO_PIN_VAL_HIGH);
    2764:	83 e0       	ldi	r24, 0x03	; 3
    2766:	63 e0       	ldi	r22, 0x03	; 3
    2768:	41 e0       	ldi	r20, 0x01	; 1
    276a:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <DIO_SetPinValue>
    276e:	00 ed       	ldi	r16, 0xD0	; 208
    2770:	17 e0       	ldi	r17, 0x07	; 7
    2772:	c8 01       	movw	r24, r16
    2774:	01 97       	sbiw	r24, 0x01	; 1
    2776:	f1 f7       	brne	.-4      	; 0x2774 <LCD_WriteCommand+0x42>
	_delay_ms(1);
	//Stop Latch to send lowest nibble
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_E_PIN,DIO_PIN_VAL_LOW);
    2778:	83 e0       	ldi	r24, 0x03	; 3
    277a:	63 e0       	ldi	r22, 0x03	; 3
    277c:	40 e0       	ldi	r20, 0x00	; 0
    277e:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <DIO_SetPinValue>
    2782:	c8 01       	movw	r24, r16
    2784:	01 97       	sbiw	r24, 0x01	; 1
    2786:	f1 f7       	brne	.-4      	; 0x2784 <LCD_WriteCommand+0x52>
	_delay_ms(1);

	//Send Highest nibble first
	LCD_4BIT_DATA_PORT = (LCD_4BIT_DATA_PORT & 0x0f)|(cmd<<4) ;
    2788:	8b b3       	in	r24, 0x1b	; 27
    278a:	f2 94       	swap	r15
    278c:	20 ef       	ldi	r18, 0xF0	; 240
    278e:	f2 22       	and	r15, r18
    2790:	8f 70       	andi	r24, 0x0F	; 15
    2792:	8f 29       	or	r24, r15
    2794:	8b bb       	out	0x1b, r24	; 27
	//Latch the highest nibble
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_E_PIN,DIO_PIN_VAL_HIGH);
    2796:	83 e0       	ldi	r24, 0x03	; 3
    2798:	63 e0       	ldi	r22, 0x03	; 3
    279a:	41 e0       	ldi	r20, 0x01	; 1
    279c:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <DIO_SetPinValue>
    27a0:	c8 01       	movw	r24, r16
    27a2:	01 97       	sbiw	r24, 0x01	; 1
    27a4:	f1 f7       	brne	.-4      	; 0x27a2 <LCD_WriteCommand+0x70>
	_delay_ms(1);
	//Stop Latch to send lowest nibble
	DIO_SetPinValue(LCD_8BIT_CONTROL_PORT,LCD_E_PIN,DIO_PIN_VAL_LOW);
    27a6:	83 e0       	ldi	r24, 0x03	; 3
    27a8:	63 e0       	ldi	r22, 0x03	; 3
    27aa:	40 e0       	ldi	r20, 0x00	; 0
    27ac:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <DIO_SetPinValue>
    27b0:	c8 01       	movw	r24, r16
    27b2:	01 97       	sbiw	r24, 0x01	; 1
    27b4:	f1 f7       	brne	.-4      	; 0x27b2 <LCD_WriteCommand+0x80>
	_delay_ms(1);

#endif

}
    27b6:	1f 91       	pop	r17
    27b8:	0f 91       	pop	r16
    27ba:	ff 90       	pop	r15
    27bc:	08 95       	ret

000027be <LCD_Clear>:

}


void LCD_Clear(void){
	LCD_WriteCommand(0x01);
    27be:	81 e0       	ldi	r24, 0x01	; 1
    27c0:	0e 94 99 13 	call	0x2732	; 0x2732 <LCD_WriteCommand>
}
    27c4:	08 95       	ret

000027c6 <LCD_GoTo>:
	}
}


void LCD_GoTo(uint8 row,uint8 col){
	if(row == 0){
    27c6:	88 23       	and	r24, r24
    27c8:	29 f4       	brne	.+10     	; 0x27d4 <LCD_GoTo+0xe>
		uint8 cmd = 0x80 + col ;
		LCD_WriteCommand(cmd);
    27ca:	86 2f       	mov	r24, r22
    27cc:	80 58       	subi	r24, 0x80	; 128
    27ce:	0e 94 99 13 	call	0x2732	; 0x2732 <LCD_WriteCommand>
    27d2:	08 95       	ret
	}else if(row == 1){
    27d4:	81 30       	cpi	r24, 0x01	; 1
    27d6:	21 f4       	brne	.+8      	; 0x27e0 <LCD_GoTo+0x1a>
		uint8 cmd = 0xC0 + col ;
		LCD_WriteCommand(cmd);
    27d8:	86 2f       	mov	r24, r22
    27da:	80 54       	subi	r24, 0x40	; 64
    27dc:	0e 94 99 13 	call	0x2732	; 0x2732 <LCD_WriteCommand>
    27e0:	08 95       	ret

000027e2 <LCD_Init>:
	LCD_WriteCommand(0x0C); //Display ON , Cursor OFF
	LCD_WriteCommand(0x01); //Clear LCD screen
	LCD_WriteCommand(0x02); //Return Cursor to HOME

#elif LCD_MODE == 4
	DIO_SetPinDirection(LCD_8BIT_DATA_PORT,LCD_D4_PIN,DIO_PIN_DIR_OUTPUT);
    27e2:	80 e0       	ldi	r24, 0x00	; 0
    27e4:	64 e0       	ldi	r22, 0x04	; 4
    27e6:	41 e0       	ldi	r20, 0x01	; 1
    27e8:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_8BIT_DATA_PORT,LCD_D5_PIN,DIO_PIN_DIR_OUTPUT);
    27ec:	80 e0       	ldi	r24, 0x00	; 0
    27ee:	65 e0       	ldi	r22, 0x05	; 5
    27f0:	41 e0       	ldi	r20, 0x01	; 1
    27f2:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_8BIT_DATA_PORT,LCD_D6_PIN,DIO_PIN_DIR_OUTPUT);
    27f6:	80 e0       	ldi	r24, 0x00	; 0
    27f8:	66 e0       	ldi	r22, 0x06	; 6
    27fa:	41 e0       	ldi	r20, 0x01	; 1
    27fc:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_8BIT_DATA_PORT,LCD_D7_PIN,DIO_PIN_DIR_OUTPUT);
    2800:	80 e0       	ldi	r24, 0x00	; 0
    2802:	67 e0       	ldi	r22, 0x07	; 7
    2804:	41 e0       	ldi	r20, 0x01	; 1
    2806:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_SetPinDirection>

	DIO_SetPinDirection(LCD_8BIT_CONTROL_PORT,LCD_RS_PIN,DIO_PIN_DIR_OUTPUT);
    280a:	83 e0       	ldi	r24, 0x03	; 3
    280c:	61 e0       	ldi	r22, 0x01	; 1
    280e:	41 e0       	ldi	r20, 0x01	; 1
    2810:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_8BIT_CONTROL_PORT,LCD_RW_PIN,DIO_PIN_DIR_OUTPUT);
    2814:	83 e0       	ldi	r24, 0x03	; 3
    2816:	62 e0       	ldi	r22, 0x02	; 2
    2818:	41 e0       	ldi	r20, 0x01	; 1
    281a:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_8BIT_CONTROL_PORT,LCD_E_PIN,DIO_PIN_DIR_OUTPUT);
    281e:	83 e0       	ldi	r24, 0x03	; 3
    2820:	63 e0       	ldi	r22, 0x03	; 3
    2822:	41 e0       	ldi	r20, 0x01	; 1
    2824:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_SetPinDirection>

	LCD_WriteCommand(0x33); //For 4bit mode
    2828:	83 e3       	ldi	r24, 0x33	; 51
    282a:	0e 94 99 13 	call	0x2732	; 0x2732 <LCD_WriteCommand>
	LCD_WriteCommand(0x32);
    282e:	82 e3       	ldi	r24, 0x32	; 50
    2830:	0e 94 99 13 	call	0x2732	; 0x2732 <LCD_WriteCommand>
	LCD_WriteCommand(0x28);
    2834:	88 e2       	ldi	r24, 0x28	; 40
    2836:	0e 94 99 13 	call	0x2732	; 0x2732 <LCD_WriteCommand>

	LCD_WriteCommand(0x0C); //Display ON , Cursor OFF
    283a:	8c e0       	ldi	r24, 0x0C	; 12
    283c:	0e 94 99 13 	call	0x2732	; 0x2732 <LCD_WriteCommand>
	LCD_WriteCommand(0x01); //Clear LCD screen
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	0e 94 99 13 	call	0x2732	; 0x2732 <LCD_WriteCommand>
	LCD_WriteCommand(0x02); //Return Cursor to HOME
    2846:	82 e0       	ldi	r24, 0x02	; 2
    2848:	0e 94 99 13 	call	0x2732	; 0x2732 <LCD_WriteCommand>

#endif
}
    284c:	08 95       	ret

0000284e <SPI_Data_Transmit>:
void  SPI_Transmit_Term(void){
	DIO_SetPinValue(DIO_PORTB,DIO_PIN4,DIO_PIN_VAL_HIGH);
}

uint8 SPI_Data_Transmit(uint8 data){
	SPDR = data ;
    284e:	8f b9       	out	0x0f, r24	; 15

	while(GET_BIT(SPSR,7) == 0);
    2850:	77 9b       	sbis	0x0e, 7	; 14
    2852:	fe cf       	rjmp	.-4      	; 0x2850 <SPI_Data_Transmit+0x2>

	uint8 received_data = 0 ;
	received_data = SPDR ;
    2854:	8f b1       	in	r24, 0x0f	; 15

	return received_data ;

}
    2856:	08 95       	ret

00002858 <SPI_Transmit_Term>:
void  SPI_Transmit_Start(void){
	DIO_SetPinValue(DIO_PORTB,DIO_PIN4,DIO_PIN_VAL_LOW);
}

void  SPI_Transmit_Term(void){
	DIO_SetPinValue(DIO_PORTB,DIO_PIN4,DIO_PIN_VAL_HIGH);
    2858:	81 e0       	ldi	r24, 0x01	; 1
    285a:	64 e0       	ldi	r22, 0x04	; 4
    285c:	41 e0       	ldi	r20, 0x01	; 1
    285e:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <DIO_SetPinValue>
}
    2862:	08 95       	ret

00002864 <SPI_Transmit_Start>:


}

void  SPI_Transmit_Start(void){
	DIO_SetPinValue(DIO_PORTB,DIO_PIN4,DIO_PIN_VAL_LOW);
    2864:	81 e0       	ldi	r24, 0x01	; 1
    2866:	64 e0       	ldi	r22, 0x04	; 4
    2868:	40 e0       	ldi	r20, 0x00	; 0
    286a:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <DIO_SetPinValue>
}
    286e:	08 95       	ret

00002870 <SPI_Slave_Init>:

	SPCR =  0x53;

}
void  SPI_Slave_Init(void){
	DIO_SetPinDirection(DIO_PORTB, DIO_PIN4, DIO_PIN_DIR_INPUT);
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	64 e0       	ldi	r22, 0x04	; 4
    2874:	40 e0       	ldi	r20, 0x00	; 0
    2876:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTB, DIO_PIN5, DIO_PIN_DIR_INPUT);
    287a:	81 e0       	ldi	r24, 0x01	; 1
    287c:	65 e0       	ldi	r22, 0x05	; 5
    287e:	40 e0       	ldi	r20, 0x00	; 0
    2880:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTB, DIO_PIN6, DIO_PIN_DIR_OUTPUT);
    2884:	81 e0       	ldi	r24, 0x01	; 1
    2886:	66 e0       	ldi	r22, 0x06	; 6
    2888:	41 e0       	ldi	r20, 0x01	; 1
    288a:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTB, DIO_PIN7, DIO_PIN_DIR_INPUT);
    288e:	81 e0       	ldi	r24, 0x01	; 1
    2890:	67 e0       	ldi	r22, 0x07	; 7
    2892:	40 e0       	ldi	r20, 0x00	; 0
    2894:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_SetPinDirection>
	//SET_BIT(SPCR,5);

	//Slave Select
	//CLR_BIT(SPCR,4);

	SPCR = 0x40 ;
    2898:	80 e4       	ldi	r24, 0x40	; 64
    289a:	8d b9       	out	0x0d, r24	; 13


}
    289c:	08 95       	ret

0000289e <SPI_Master_Init>:


#include "SPI.h"

void  SPI_Master_Init(void){
	DIO_SetPinDirection(DIO_PORTB, DIO_PIN4, DIO_PIN_DIR_OUTPUT);
    289e:	81 e0       	ldi	r24, 0x01	; 1
    28a0:	64 e0       	ldi	r22, 0x04	; 4
    28a2:	41 e0       	ldi	r20, 0x01	; 1
    28a4:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTB, DIO_PIN5, DIO_PIN_DIR_OUTPUT);
    28a8:	81 e0       	ldi	r24, 0x01	; 1
    28aa:	65 e0       	ldi	r22, 0x05	; 5
    28ac:	41 e0       	ldi	r20, 0x01	; 1
    28ae:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTB, DIO_PIN6, DIO_PIN_DIR_INPUT);
    28b2:	81 e0       	ldi	r24, 0x01	; 1
    28b4:	66 e0       	ldi	r22, 0x06	; 6
    28b6:	40 e0       	ldi	r20, 0x00	; 0
    28b8:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTB, DIO_PIN7, DIO_PIN_DIR_OUTPUT);
    28bc:	81 e0       	ldi	r24, 0x01	; 1
    28be:	67 e0       	ldi	r22, 0x07	; 7
    28c0:	41 e0       	ldi	r20, 0x01	; 1
    28c2:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_SetPinDirection>

	//CLK/128
	//SET_BIT(SPCR,0);
	//SET_BIT(SPCR,1);

	SPCR =  0x53;
    28c6:	83 e5       	ldi	r24, 0x53	; 83
    28c8:	8d b9       	out	0x0d, r24	; 13

}
    28ca:	08 95       	ret

000028cc <Timer0_Init>:

void Timer0_Init(void){
#if Timer0_MODE == Timer0_NORMAL_MODE

	//Choosing normal mode
	CLR_BIT(TCCR0,3);
    28cc:	83 b7       	in	r24, 0x33	; 51
    28ce:	87 7f       	andi	r24, 0xF7	; 247
    28d0:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,6);
    28d2:	83 b7       	in	r24, 0x33	; 51
    28d4:	8f 7b       	andi	r24, 0xBF	; 191
    28d6:	83 bf       	out	0x33, r24	; 51
	//Enable Global Interrupt
	//SET_BIT(SREG,7);

	//Enable overflow Interrupt
	//Timer/Counter0 Overflow Interrupt Enable
	SET_BIT(TIMSK,0);
    28d8:	89 b7       	in	r24, 0x39	; 57
    28da:	81 60       	ori	r24, 0x01	; 1
    28dc:	89 bf       	out	0x39, r24	; 57
	CLR_BIT(TIMSK,1);
    28de:	89 b7       	in	r24, 0x39	; 57
    28e0:	8d 7f       	andi	r24, 0xFD	; 253
    28e2:	89 bf       	out	0x39, r24	; 57
	SET_BIT(TCCR0,5);



#endif
}
    28e4:	08 95       	ret

000028e6 <Timer0_Start>:

void Timer0_Start(void){

	SET_BIT(TCCR0,0);
    28e6:	83 b7       	in	r24, 0x33	; 51
    28e8:	81 60       	ori	r24, 0x01	; 1
    28ea:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,1);
    28ec:	83 b7       	in	r24, 0x33	; 51
    28ee:	8d 7f       	andi	r24, 0xFD	; 253
    28f0:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,2);
    28f2:	83 b7       	in	r24, 0x33	; 51
    28f4:	84 60       	ori	r24, 0x04	; 4
    28f6:	83 bf       	out	0x33, r24	; 51
}
    28f8:	08 95       	ret

000028fa <Timer0_Stop>:

void Timer0_Stop(void){
	CLR_BIT(TCCR0,0);
    28fa:	83 b7       	in	r24, 0x33	; 51
    28fc:	8e 7f       	andi	r24, 0xFE	; 254
    28fe:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,1);
    2900:	83 b7       	in	r24, 0x33	; 51
    2902:	8d 7f       	andi	r24, 0xFD	; 253
    2904:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,2);
    2906:	83 b7       	in	r24, 0x33	; 51
    2908:	8b 7f       	andi	r24, 0xFB	; 251
    290a:	83 bf       	out	0x33, r24	; 51
}
    290c:	08 95       	ret

0000290e <Timer0_delay_ms>:

void Timer0_delay_ms(uint32 delay_ms){
	uint8 Tick_Time = 1024/8 ; //this time is in micro seconds
	uint32 Total_Ticks = (delay_ms*1000) / Tick_Time ;
    290e:	28 ee       	ldi	r18, 0xE8	; 232
    2910:	33 e0       	ldi	r19, 0x03	; 3
    2912:	40 e0       	ldi	r20, 0x00	; 0
    2914:	50 e0       	ldi	r21, 0x00	; 0
    2916:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <__mulsi3>
    291a:	37 e0       	ldi	r19, 0x07	; 7
    291c:	96 95       	lsr	r25
    291e:	87 95       	ror	r24
    2920:	77 95       	ror	r23
    2922:	67 95       	ror	r22
    2924:	3a 95       	dec	r19
    2926:	d1 f7       	brne	.-12     	; 0x291c <Timer0_delay_ms+0xe>
	NUM_OVF = Total_Ticks / 256 ;
    2928:	27 2f       	mov	r18, r23
    292a:	38 2f       	mov	r19, r24
    292c:	49 2f       	mov	r20, r25
    292e:	55 27       	eor	r21, r21
    2930:	20 93 e9 00 	sts	0x00E9, r18
    2934:	30 93 ea 00 	sts	0x00EA, r19
    2938:	40 93 eb 00 	sts	0x00EB, r20
    293c:	50 93 ec 00 	sts	0x00EC, r21

#if Timer0_MODE == Timer0_NORMAL_MODE

	INIT_VAL = 256 - (Total_Ticks % 256) ;
    2940:	20 e0       	ldi	r18, 0x00	; 0
    2942:	31 e0       	ldi	r19, 0x01	; 1
    2944:	40 e0       	ldi	r20, 0x00	; 0
    2946:	50 e0       	ldi	r21, 0x00	; 0
    2948:	26 1b       	sub	r18, r22
    294a:	31 09       	sbc	r19, r1
    294c:	41 09       	sbc	r20, r1
    294e:	51 09       	sbc	r21, r1
    2950:	20 93 ed 00 	sts	0x00ED, r18
    2954:	30 93 ee 00 	sts	0x00EE, r19
    2958:	40 93 ef 00 	sts	0x00EF, r20
    295c:	50 93 f0 00 	sts	0x00F0, r21
	TCNT0 = INIT_VAL ;
    2960:	22 bf       	out	0x32, r18	; 50
#elif Timer0_MODE == Timer0_CTC_MODE

	INIT_VAL = Total_Ticks % 256 ;
	OCR0 = INIT_VAL ;
#endif
}
    2962:	08 95       	ret

00002964 <minute_delay>:


void minute_delay(void){
	Timer0_Init();
    2964:	0e 94 66 14 	call	0x28cc	; 0x28cc <Timer0_Init>
	Timer0_Start();
    2968:	0e 94 73 14 	call	0x28e6	; 0x28e6 <Timer0_Start>
    296c:	26 e2       	ldi	r18, 0x26	; 38
    296e:	37 e0       	ldi	r19, 0x07	; 7


	//we will set number of overflows
	sint16 ovf_for_min = 1830 ;
	while(ovf_for_min > 0){
		if(GET_BIT(TIFR,0) == 1){
    2970:	08 b6       	in	r0, 0x38	; 56
    2972:	00 fe       	sbrs	r0, 0
    2974:	fd cf       	rjmp	.-6      	; 0x2970 <minute_delay+0xc>
			ovf_for_min-- ;
    2976:	21 50       	subi	r18, 0x01	; 1
    2978:	30 40       	sbci	r19, 0x00	; 0
			SET_BIT(TIFR,0) ;
    297a:	88 b7       	in	r24, 0x38	; 56
    297c:	81 60       	ori	r24, 0x01	; 1
    297e:	88 bf       	out	0x38, r24	; 56
	Timer0_Start();


	//we will set number of overflows
	sint16 ovf_for_min = 1830 ;
	while(ovf_for_min > 0){
    2980:	12 16       	cp	r1, r18
    2982:	13 06       	cpc	r1, r19
    2984:	ac f3       	brlt	.-22     	; 0x2970 <minute_delay+0xc>
			ovf_for_min-- ;
			SET_BIT(TIFR,0) ;
		}
	}

	Timer0_Stop();
    2986:	0e 94 7d 14 	call	0x28fa	; 0x28fa <Timer0_Stop>
}
    298a:	08 95       	ret

0000298c <Fast_PWM_Motor>:



void Fast_PWM_Motor(uint8 OCR){
	OCR0 = OCR ;
    298c:	8c bf       	out	0x3c, r24	; 60
}
    298e:	08 95       	ret

00002990 <Timer1_Init>:
#include "Timer1.h"

void Timer1_Init(void){

	//make pin5 on portd output
	SET_BIT(DDRD,5);
    2990:	8d 9a       	sbi	0x11, 5	; 17

	//fast pwm , TOP -->ICR1 , COMPARE-->OCR1A
	CLR_BIT(TCCR1A,0);
    2992:	8f b5       	in	r24, 0x2f	; 47
    2994:	8e 7f       	andi	r24, 0xFE	; 254
    2996:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A,1);
    2998:	8f b5       	in	r24, 0x2f	; 47
    299a:	82 60       	ori	r24, 0x02	; 2
    299c:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1B,3);
    299e:	8e b5       	in	r24, 0x2e	; 46
    29a0:	88 60       	ori	r24, 0x08	; 8
    29a2:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,4);
    29a4:	8e b5       	in	r24, 0x2e	; 46
    29a6:	80 61       	ori	r24, 0x10	; 16
    29a8:	8e bd       	out	0x2e, r24	; 46

	//Non inverted fast pwm
	CLR_BIT(TCCR1A,6);
    29aa:	8f b5       	in	r24, 0x2f	; 47
    29ac:	8f 7b       	andi	r24, 0xBF	; 191
    29ae:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A,7);
    29b0:	8f b5       	in	r24, 0x2f	; 47
    29b2:	80 68       	ori	r24, 0x80	; 128
    29b4:	8f bd       	out	0x2f, r24	; 47

}
    29b6:	08 95       	ret

000029b8 <Timer1_Start>:


void Timer1_Start(void){
	CLR_BIT(TCCR1B,0);
    29b8:	8e b5       	in	r24, 0x2e	; 46
    29ba:	8e 7f       	andi	r24, 0xFE	; 254
    29bc:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,1);
    29be:	8e b5       	in	r24, 0x2e	; 46
    29c0:	8d 7f       	andi	r24, 0xFD	; 253
    29c2:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,2);
    29c4:	8e b5       	in	r24, 0x2e	; 46
    29c6:	84 60       	ori	r24, 0x04	; 4
    29c8:	8e bd       	out	0x2e, r24	; 46
}
    29ca:	08 95       	ret

000029cc <Timer1_Stop>:
void Timer1_Stop(void){
	CLR_BIT(TCCR1B,0);
    29cc:	8e b5       	in	r24, 0x2e	; 46
    29ce:	8e 7f       	andi	r24, 0xFE	; 254
    29d0:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,1);
    29d2:	8e b5       	in	r24, 0x2e	; 46
    29d4:	8d 7f       	andi	r24, 0xFD	; 253
    29d6:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,2);
    29d8:	8e b5       	in	r24, 0x2e	; 46
    29da:	8b 7f       	andi	r24, 0xFB	; 251
    29dc:	8e bd       	out	0x2e, r24	; 46
}
    29de:	08 95       	ret

000029e0 <Timer1_Generate>:


void Timer1_Generate(uint16 Duty , uint16 Top){
	OCR1A = Duty ;
    29e0:	9b bd       	out	0x2b, r25	; 43
    29e2:	8a bd       	out	0x2a, r24	; 42
	ICR1 = Top ;
    29e4:	77 bd       	out	0x27, r23	; 39
    29e6:	66 bd       	out	0x26, r22	; 38
}
    29e8:	08 95       	ret

000029ea <UART_Tx>:
}


void UART_Tx(uint8 data){
	//put data we want to send in UDR register after that it will be shifted to output
	UDR = data;
    29ea:	8c b9       	out	0x0c, r24	; 12

	//keep looping until data buffer register is empty
	while(GET_BIT(UCSRA,5) != 1);
    29ec:	5d 9b       	sbis	0x0b, 5	; 11
    29ee:	fe cf       	rjmp	.-4      	; 0x29ec <UART_Tx+0x2>
}
    29f0:	08 95       	ret

000029f2 <UART_Tx_String>:

void UART_Tx_String(uint8 *data){
    29f2:	20 e0       	ldi	r18, 0x00	; 0
    29f4:	04 c0       	rjmp	.+8      	; 0x29fe <UART_Tx_String+0xc>
}


void UART_Tx(uint8 data){
	//put data we want to send in UDR register after that it will be shifted to output
	UDR = data;
    29f6:	ec b9       	out	0x0c, r30	; 12

	//keep looping until data buffer register is empty
	while(GET_BIT(UCSRA,5) != 1);
    29f8:	5d 9b       	sbis	0x0b, 5	; 11
    29fa:	fe cf       	rjmp	.-4      	; 0x29f8 <UART_Tx_String+0x6>
void UART_Tx_String(uint8 *data){
	uint8 counter = 0 ;

	while(data[counter] != '\0'){
		UART_Tx(data[counter]);
		counter++ ;
    29fc:	2f 5f       	subi	r18, 0xFF	; 255
}

void UART_Tx_String(uint8 *data){
	uint8 counter = 0 ;

	while(data[counter] != '\0'){
    29fe:	fc 01       	movw	r30, r24
    2a00:	e2 0f       	add	r30, r18
    2a02:	f1 1d       	adc	r31, r1
    2a04:	e0 81       	ld	r30, Z
    2a06:	ee 23       	and	r30, r30
    2a08:	b1 f7       	brne	.-20     	; 0x29f6 <UART_Tx_String+0x4>
		UART_Tx(data[counter]);
		counter++ ;
	}
}
    2a0a:	08 95       	ret

00002a0c <UART_Rx>:

uint8 UART_Rx(void){
	while(GET_BIT(UCSRA,7) != 1) ;
    2a0c:	5f 9b       	sbis	0x0b, 7	; 11
    2a0e:	fe cf       	rjmp	.-4      	; 0x2a0c <UART_Rx>

	return UDR ;
    2a10:	8c b1       	in	r24, 0x0c	; 12
}
    2a12:	08 95       	ret

00002a14 <UART_Init>:


void UART_Init(){

	//Set Tx pin output direction
	DIO_SetPinDirection(DIO_PORTD,DIO_PIN1,DIO_PIN_DIR_OUTPUT);
    2a14:	83 e0       	ldi	r24, 0x03	; 3
    2a16:	61 e0       	ldi	r22, 0x01	; 1
    2a18:	41 e0       	ldi	r20, 0x01	; 1
    2a1a:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_SetPinDirection>
	//Set Rx pin input direction
	DIO_SetPinDirection(DIO_PORTD, DIO_PIN0, DIO_PIN_DIR_INPUT);
    2a1e:	83 e0       	ldi	r24, 0x03	; 3
    2a20:	60 e0       	ldi	r22, 0x00	; 0
    2a22:	40 e0       	ldi	r20, 0x00	; 0
    2a24:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_SetPinDirection>

	//BaudRate calculation --> value to be input to down counter prescalar
	UBRRL = ((Freq)/(16*Desired_Baud_Rate)) - 1;
    2a28:	83 e3       	ldi	r24, 0x33	; 51
    2a2a:	89 b9       	out	0x09, r24	; 9

	//Enable Transmitter and Receiver
	SET_BIT(UCSRB,3);
    2a2c:	53 9a       	sbi	0x0a, 3	; 10
	SET_BIT(UCSRB,4);
    2a2e:	54 9a       	sbi	0x0a, 4	; 10

	//Asynchronous Operation
	//Stop Bits -->1 bit
	//Disable Parity
	//8 data bits
	UCSRC = 0x86 ; //0b1000 0110
    2a30:	86 e8       	ldi	r24, 0x86	; 134
    2a32:	80 bd       	out	0x20, r24	; 32

}
    2a34:	08 95       	ret

00002a36 <RTC_DATE_Read>:

	I2C_Stop();

}

void RTC_DATE_Read(uint8 starting_read_address , DATE_DATA *Data_Holder){
    2a36:	ff 92       	push	r15
    2a38:	0f 93       	push	r16
    2a3a:	1f 93       	push	r17
    2a3c:	f8 2e       	mov	r15, r24
    2a3e:	8b 01       	movw	r16, r22
	//first we want to Initialize clock rate of I2C & Generate start and send SLA+W address
	I2C_Init();
    2a40:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <I2C_Init>
	I2C_Start(RTC_SLA_W);
    2a44:	80 ed       	ldi	r24, 0xD0	; 208
    2a46:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
	//now we will set the pointer to the address we want to read from
	I2C_Write(starting_read_address);
    2a4a:	8f 2d       	mov	r24, r15
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>

	//now we will generate a repeated start but in reading mode this time
	I2C_Repeated_Start(RTC_SLA_R);
    2a52:	81 ed       	ldi	r24, 0xD1	; 209
    2a54:	0e 94 9b 11 	call	0x2336	; 0x2336 <I2C_Repeated_Start>
	Data_Holder->day = I2C_Read_ACK();
    2a58:	0e 94 cb 11 	call	0x2396	; 0x2396 <I2C_Read_ACK>
    2a5c:	f8 01       	movw	r30, r16
    2a5e:	80 83       	st	Z, r24
	Data_Holder->date = I2C_Read_ACK();
    2a60:	0e 94 cb 11 	call	0x2396	; 0x2396 <I2C_Read_ACK>
    2a64:	f8 01       	movw	r30, r16
    2a66:	81 83       	std	Z+1, r24	; 0x01
	Data_Holder->month = I2C_Read_ACK();
    2a68:	0e 94 cb 11 	call	0x2396	; 0x2396 <I2C_Read_ACK>
    2a6c:	f8 01       	movw	r30, r16
    2a6e:	82 83       	std	Z+2, r24	; 0x02
	Data_Holder->year = I2C_Read_NACK();
    2a70:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <I2C_Read_NACK>
    2a74:	f8 01       	movw	r30, r16
    2a76:	83 83       	std	Z+3, r24	; 0x03
    2a78:	14 82       	std	Z+4, r1	; 0x04

	I2C_Stop();
    2a7a:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>

}
    2a7e:	1f 91       	pop	r17
    2a80:	0f 91       	pop	r16
    2a82:	ff 90       	pop	r15
    2a84:	08 95       	ret

00002a86 <RTC_CLOCK_Read>:
	I2C_Write(year);
	I2C_Stop();
}


void RTC_CLOCK_Read(uint8 starting_read_address , CLOCK_DATA *Data_Holder){
    2a86:	ff 92       	push	r15
    2a88:	0f 93       	push	r16
    2a8a:	1f 93       	push	r17
    2a8c:	f8 2e       	mov	r15, r24
    2a8e:	8b 01       	movw	r16, r22
	//first we want to Initialize clock rate of I2C & Generate start and send SLA+W address
	I2C_Init();
    2a90:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <I2C_Init>
	I2C_Start(RTC_SLA_W);
    2a94:	80 ed       	ldi	r24, 0xD0	; 208
    2a96:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
	//now we will set the pointer to the address we want to read from
	I2C_Write(starting_read_address);
    2a9a:	8f 2d       	mov	r24, r15
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>

	//now we will generate a repeated start but in reading mode this time
	I2C_Repeated_Start(RTC_SLA_R);
    2aa2:	81 ed       	ldi	r24, 0xD1	; 209
    2aa4:	0e 94 9b 11 	call	0x2336	; 0x2336 <I2C_Repeated_Start>
	Data_Holder->seconds = I2C_Read_ACK();
    2aa8:	0e 94 cb 11 	call	0x2396	; 0x2396 <I2C_Read_ACK>
    2aac:	f8 01       	movw	r30, r16
    2aae:	80 83       	st	Z, r24
	Data_Holder->minutes = I2C_Read_ACK();
    2ab0:	0e 94 cb 11 	call	0x2396	; 0x2396 <I2C_Read_ACK>
    2ab4:	f8 01       	movw	r30, r16
    2ab6:	81 83       	std	Z+1, r24	; 0x01
	Data_Holder->hours = I2C_Read_NACK() ;
    2ab8:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <I2C_Read_NACK>
    2abc:	f8 01       	movw	r30, r16
    2abe:	82 83       	std	Z+2, r24	; 0x02
	Data_Holder->am_pm = ( ( Data_Holder->hours & 0b00100000 ) >> 5 ) ;
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	80 72       	andi	r24, 0x20	; 32
    2ac4:	90 70       	andi	r25, 0x00	; 0
    2ac6:	25 e0       	ldi	r18, 0x05	; 5
    2ac8:	95 95       	asr	r25
    2aca:	87 95       	ror	r24
    2acc:	2a 95       	dec	r18
    2ace:	e1 f7       	brne	.-8      	; 0x2ac8 <RTC_CLOCK_Read+0x42>
    2ad0:	83 83       	std	Z+3, r24	; 0x03

	I2C_Stop();
    2ad2:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>

}
    2ad6:	1f 91       	pop	r17
    2ad8:	0f 91       	pop	r16
    2ada:	ff 90       	pop	r15
    2adc:	08 95       	ret

00002ade <RTC_DATE_Write>:
	//stop communication
	I2C_Stop();

}

void RTC_DATE_Write(uint8 day , uint8 date , uint8 month , uint8 year){
    2ade:	ef 92       	push	r14
    2ae0:	ff 92       	push	r15
    2ae2:	0f 93       	push	r16
    2ae4:	1f 93       	push	r17
    2ae6:	18 2f       	mov	r17, r24
    2ae8:	06 2f       	mov	r16, r22
    2aea:	f4 2e       	mov	r15, r20
    2aec:	e2 2e       	mov	r14, r18
	//first we want to Initialize clock rate of I2C & Generate start and send SLA+W address
	I2C_Init();
    2aee:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <I2C_Init>
	I2C_Start(RTC_SLA_W);
    2af2:	80 ed       	ldi	r24, 0xD0	; 208
    2af4:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>

	//now we want to write the starting writing register address
	I2C_Write(0x03); //Starting from seconds register address (0x03)
    2af8:	83 e0       	ldi	r24, 0x03	; 3
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
	//now you pass the values : day , date , month , year
	I2C_Write(day);
    2b00:	81 2f       	mov	r24, r17
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
	I2C_Write(date);
    2b08:	80 2f       	mov	r24, r16
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
	I2C_Write(month);
    2b10:	8f 2d       	mov	r24, r15
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
	I2C_Write(year);
    2b18:	8e 2d       	mov	r24, r14
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
	I2C_Stop();
    2b20:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>
}
    2b24:	1f 91       	pop	r17
    2b26:	0f 91       	pop	r16
    2b28:	ff 90       	pop	r15
    2b2a:	ef 90       	pop	r14
    2b2c:	08 95       	ret

00002b2e <RTC_CLOCK_Write>:


#include "ds3231.h"


void RTC_CLOCK_Write(uint8 hour , uint8 min , uint8 sec , uint8 AM_PM){
    2b2e:	ef 92       	push	r14
    2b30:	ff 92       	push	r15
    2b32:	0f 93       	push	r16
    2b34:	1f 93       	push	r17
    2b36:	08 2f       	mov	r16, r24
    2b38:	e6 2e       	mov	r14, r22
    2b3a:	f4 2e       	mov	r15, r20
    2b3c:	12 2f       	mov	r17, r18
	//first we want to Initialize clock rate of I2C & Generate start and send SLA+W address
	I2C_Init();
    2b3e:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <I2C_Init>
	I2C_Start(RTC_SLA_W);
    2b42:	80 ed       	ldi	r24, 0xD0	; 208
    2b44:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>

	//now we want to write the starting writing register address
	I2C_Write(0x00); //Starting from seconds register address (0x00)
    2b48:	80 e0       	ldi	r24, 0x00	; 0
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
	//now you pass the values : sec , min , hours ;
	I2C_Write(sec);
    2b50:	8f 2d       	mov	r24, r15
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
	I2C_Write(min);
    2b58:	8e 2d       	mov	r24, r14
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>

	//0b01000000 means 12 hours mode
	hour = hour | (AM_PM<<5) | 0b01000000;
    2b60:	00 64       	ori	r16, 0x40	; 64
    2b62:	12 95       	swap	r17
    2b64:	11 0f       	add	r17, r17
    2b66:	10 7e       	andi	r17, 0xE0	; 224
	I2C_Write(hour);
    2b68:	81 2f       	mov	r24, r17
    2b6a:	80 2b       	or	r24, r16
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>

	//stop communication
	I2C_Stop();
    2b72:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>

}
    2b76:	1f 91       	pop	r17
    2b78:	0f 91       	pop	r16
    2b7a:	ff 90       	pop	r15
    2b7c:	ef 90       	pop	r14
    2b7e:	08 95       	ret

00002b80 <main>:
#include "Application_Header.h"
#include "Timer0.h"


int main(){
	I2C_Init();
    2b80:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <I2C_Init>
	Initialize();
    2b84:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <Initialize>
	button_init();
    2b88:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <button_init>
	DIO_SetPinDirection(DIO_PORTC,DIO_PIN7,DIO_PIN_DIR_OUTPUT);
    2b8c:	82 e0       	ldi	r24, 0x02	; 2
    2b8e:	67 e0       	ldi	r22, 0x07	; 7
    2b90:	41 e0       	ldi	r20, 0x01	; 1
    2b92:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_SetPinDirection>




	uint8 setup_done_correctly = 0;
	if(boot_check() == 0xFF){
    2b96:	0e 94 df 00 	call	0x1be	; 0x1be <boot_check>
    2b9a:	8f 3f       	cpi	r24, 0xFF	; 255
    2b9c:	39 f4       	brne	.+14     	; 0x2bac <main+0x2c>
		//first time booting up
		name_menu();
    2b9e:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <name_menu>
		setup_done_correctly = time_menu();
    2ba2:	0e 94 98 09 	call	0x1330	; 0x1330 <time_menu>
		while(1){
		main_menu();
		}
	}

	if(setup_done_correctly){
    2ba6:	88 23       	and	r24, r24
    2ba8:	41 f4       	brne	.+16     	; 0x2bba <main+0x3a>
    2baa:	0c c0       	rjmp	.+24     	; 0x2bc4 <main+0x44>
	uint8 setup_done_correctly = 0;
	if(boot_check() == 0xFF){
		//first time booting up
		name_menu();
		setup_done_correctly = time_menu();
	}else if(boot_check() == 0x01){
    2bac:	0e 94 df 00 	call	0x1be	; 0x1be <boot_check>
    2bb0:	81 30       	cpi	r24, 0x01	; 1
    2bb2:	41 f4       	brne	.+16     	; 0x2bc4 <main+0x44>
		while(1){
		main_menu();
    2bb4:	0e 94 01 09 	call	0x1202	; 0x1202 <main_menu>
    2bb8:	fd cf       	rjmp	.-6      	; 0x2bb4 <main+0x34>
		}
	}

	if(setup_done_correctly){
		system_set();
    2bba:	0e 94 bf 00 	call	0x17e	; 0x17e <system_set>
		while(1){
			main_menu();
    2bbe:	0e 94 01 09 	call	0x1202	; 0x1202 <main_menu>
    2bc2:	fd cf       	rjmp	.-6      	; 0x2bbe <main+0x3e>
    2bc4:	ff cf       	rjmp	.-2      	; 0x2bc4 <main+0x44>

00002bc6 <sendBuffer>:

void setPageStart(uint8 address){
	sendCommand(COMMAND_SET_PAGE_START_ADDRESS | (address & 0x07));
}

void sendBuffer(const uint8 *buffer , unsigned long length ){
    2bc6:	af 92       	push	r10
    2bc8:	bf 92       	push	r11
    2bca:	cf 92       	push	r12
    2bcc:	df 92       	push	r13
    2bce:	ef 92       	push	r14
    2bd0:	ff 92       	push	r15
    2bd2:	0f 93       	push	r16
    2bd4:	1f 93       	push	r17
    2bd6:	cf 93       	push	r28
    2bd8:	df 93       	push	r29
    2bda:	ec 01       	movw	r28, r24
    2bdc:	5a 01       	movw	r10, r20
    2bde:	6b 01       	movw	r12, r22
	I2C_Init();
    2be0:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <I2C_Init>
	I2C_Start(oled_write_address);
    2be4:	8a e7       	ldi	r24, 0x7A	; 122
    2be6:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
	I2C_Write(CONTROL_DATA);
    2bea:	80 e4       	ldi	r24, 0x40	; 64
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
    2bf2:	ee 24       	eor	r14, r14
    2bf4:	ff 24       	eor	r15, r15
    2bf6:	87 01       	movw	r16, r14
    2bf8:	0c c0       	rjmp	.+24     	; 0x2c12 <sendBuffer+0x4c>
	for(unsigned long i = 0 ; i < length ; i++){
		I2C_Write(buffer[i]);
    2bfa:	fe 01       	movw	r30, r28
    2bfc:	ee 0d       	add	r30, r14
    2bfe:	ff 1d       	adc	r31, r15
    2c00:	80 81       	ld	r24, Z
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>

void sendBuffer(const uint8 *buffer , unsigned long length ){
	I2C_Init();
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);
	for(unsigned long i = 0 ; i < length ; i++){
    2c08:	08 94       	sec
    2c0a:	e1 1c       	adc	r14, r1
    2c0c:	f1 1c       	adc	r15, r1
    2c0e:	01 1d       	adc	r16, r1
    2c10:	11 1d       	adc	r17, r1
    2c12:	ea 14       	cp	r14, r10
    2c14:	fb 04       	cpc	r15, r11
    2c16:	0c 05       	cpc	r16, r12
    2c18:	1d 05       	cpc	r17, r13
    2c1a:	78 f3       	brcs	.-34     	; 0x2bfa <sendBuffer+0x34>
		I2C_Write(buffer[i]);
	}
	I2C_Stop();
    2c1c:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>
}
    2c20:	df 91       	pop	r29
    2c22:	cf 91       	pop	r28
    2c24:	1f 91       	pop	r17
    2c26:	0f 91       	pop	r16
    2c28:	ff 90       	pop	r15
    2c2a:	ef 90       	pop	r14
    2c2c:	df 90       	pop	r13
    2c2e:	cf 90       	pop	r12
    2c30:	bf 90       	pop	r11
    2c32:	af 90       	pop	r10
    2c34:	08 95       	ret

00002c36 <sendCommand>:
 */

#include "ssd1306.h"


void sendCommand(uint8 cmd){
    2c36:	1f 93       	push	r17
    2c38:	18 2f       	mov	r17, r24
	I2C_Init();
    2c3a:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <I2C_Init>
	I2C_Start(oled_write_address);
    2c3e:	8a e7       	ldi	r24, 0x7A	; 122
    2c40:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
	I2C_Write(CONTROL_COMMAND);
    2c44:	80 e0       	ldi	r24, 0x00	; 0
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
	I2C_Write(cmd);
    2c4c:	81 2f       	mov	r24, r17
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
	I2C_Stop();
    2c54:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>
}
    2c58:	1f 91       	pop	r17
    2c5a:	08 95       	ret

00002c5c <setPageAddress>:
        sendCommand(COMMAND_COLUMN_ADDRESS);
        sendCommand(start);
        sendCommand(end);
}

void setPageAddress(uint8 start, uint8 end){
    2c5c:	0f 93       	push	r16
    2c5e:	1f 93       	push	r17
    2c60:	18 2f       	mov	r17, r24
    2c62:	06 2f       	mov	r16, r22
    sendCommand(COMMAND_SET_PAGE_ADDRESS);
    2c64:	82 e2       	ldi	r24, 0x22	; 34
    2c66:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <sendCommand>
    sendCommand(start & 0x07);
    2c6a:	81 2f       	mov	r24, r17
    2c6c:	87 70       	andi	r24, 0x07	; 7
    2c6e:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <sendCommand>
    sendCommand(end & 0x07);
    2c72:	80 2f       	mov	r24, r16
    2c74:	87 70       	andi	r24, 0x07	; 7
    2c76:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <sendCommand>
}
    2c7a:	1f 91       	pop	r17
    2c7c:	0f 91       	pop	r16
    2c7e:	08 95       	ret

00002c80 <setColumnAddress>:
		setPageStart(i);
		sendBuffer(page_buf,sizeof(page_buf));
	}
}

void setColumnAddress(uint8 start, uint8 end){
    2c80:	0f 93       	push	r16
    2c82:	1f 93       	push	r17
    2c84:	18 2f       	mov	r17, r24
    2c86:	06 2f       	mov	r16, r22
        sendCommand(COMMAND_COLUMN_ADDRESS);
    2c88:	81 e2       	ldi	r24, 0x21	; 33
    2c8a:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <sendCommand>
        sendCommand(start);
    2c8e:	81 2f       	mov	r24, r17
    2c90:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <sendCommand>
        sendCommand(end);
    2c94:	80 2f       	mov	r24, r16
    2c96:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <sendCommand>
}
    2c9a:	1f 91       	pop	r17
    2c9c:	0f 91       	pop	r16
    2c9e:	08 95       	ret

00002ca0 <setAddressingMode>:
		I2C_Write(buffer[i]);
	}
	I2C_Stop();
}

void setAddressingMode(uint8 mode){
    2ca0:	1f 93       	push	r17
    2ca2:	18 2f       	mov	r17, r24
	sendCommand(COMMAND_ADDRESSING_MODE);
    2ca4:	80 e0       	ldi	r24, 0x00	; 0
    2ca6:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <sendCommand>
	sendCommand(mode);
    2caa:	81 2f       	mov	r24, r17
    2cac:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <sendCommand>
}
    2cb0:	1f 91       	pop	r17
    2cb2:	08 95       	ret

00002cb4 <setPageStart>:
void resume(uint8 ignore_ram){
	sendCommand(COMMAND_DISPLAY_RESUME | ignore_ram);
}

void setPageStart(uint8 address){
	sendCommand(COMMAND_SET_PAGE_START_ADDRESS | (address & 0x07));
    2cb4:	87 70       	andi	r24, 0x07	; 7
    2cb6:	80 6b       	ori	r24, 0xB0	; 176
    2cb8:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <sendCommand>
}
    2cbc:	08 95       	ret

00002cbe <clear>:
void setAddressingMode(uint8 mode){
	sendCommand(COMMAND_ADDRESSING_MODE);
	sendCommand(mode);
}

void clear(){
    2cbe:	ef 92       	push	r14
    2cc0:	ff 92       	push	r15
    2cc2:	0f 93       	push	r16
    2cc4:	1f 93       	push	r17
    2cc6:	df 93       	push	r29
    2cc8:	cf 93       	push	r28
    2cca:	cd b7       	in	r28, 0x3d	; 61
    2ccc:	de b7       	in	r29, 0x3e	; 62
    2cce:	c0 58       	subi	r28, 0x80	; 128
    2cd0:	d0 40       	sbci	r29, 0x00	; 0
    2cd2:	0f b6       	in	r0, 0x3f	; 63
    2cd4:	f8 94       	cli
    2cd6:	de bf       	out	0x3e, r29	; 62
    2cd8:	0f be       	out	0x3f, r0	; 63
    2cda:	cd bf       	out	0x3d, r28	; 61
	//clear the display by writing a zeroed page buffer
	uint8 page_buf[128] = {0};
    2cdc:	8e 01       	movw	r16, r28
    2cde:	0f 5f       	subi	r16, 0xFF	; 255
    2ce0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ce2:	80 e8       	ldi	r24, 0x80	; 128
    2ce4:	f8 01       	movw	r30, r16
    2ce6:	11 92       	st	Z+, r1
    2ce8:	8a 95       	dec	r24
    2cea:	e9 f7       	brne	.-6      	; 0x2ce6 <clear+0x28>
	setAddressingMode(0x02);
    2cec:	82 e0       	ldi	r24, 0x02	; 2
    2cee:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <setAddressingMode>
    2cf2:	ff 24       	eor	r15, r15
	for(int i = 0 ; i < 8 ; i++){
		setPageStart(i);
		sendBuffer(page_buf,sizeof(page_buf));
    2cf4:	e0 2e       	mov	r14, r16
    2cf6:	01 2f       	mov	r16, r17
void clear(){
	//clear the display by writing a zeroed page buffer
	uint8 page_buf[128] = {0};
	setAddressingMode(0x02);
	for(int i = 0 ; i < 8 ; i++){
		setPageStart(i);
    2cf8:	8f 2d       	mov	r24, r15
    2cfa:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <setPageStart>
		sendBuffer(page_buf,sizeof(page_buf));
    2cfe:	8e 2d       	mov	r24, r14
    2d00:	90 2f       	mov	r25, r16
    2d02:	40 e8       	ldi	r20, 0x80	; 128
    2d04:	50 e0       	ldi	r21, 0x00	; 0
    2d06:	60 e0       	ldi	r22, 0x00	; 0
    2d08:	70 e0       	ldi	r23, 0x00	; 0
    2d0a:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <sendBuffer>
    2d0e:	f3 94       	inc	r15

void clear(){
	//clear the display by writing a zeroed page buffer
	uint8 page_buf[128] = {0};
	setAddressingMode(0x02);
	for(int i = 0 ; i < 8 ; i++){
    2d10:	f8 e0       	ldi	r31, 0x08	; 8
    2d12:	ff 16       	cp	r15, r31
    2d14:	89 f7       	brne	.-30     	; 0x2cf8 <clear+0x3a>
		setPageStart(i);
		sendBuffer(page_buf,sizeof(page_buf));
	}
}
    2d16:	c0 58       	subi	r28, 0x80	; 128
    2d18:	df 4f       	sbci	r29, 0xFF	; 255
    2d1a:	0f b6       	in	r0, 0x3f	; 63
    2d1c:	f8 94       	cli
    2d1e:	de bf       	out	0x3e, r29	; 62
    2d20:	0f be       	out	0x3f, r0	; 63
    2d22:	cd bf       	out	0x3d, r28	; 61
    2d24:	cf 91       	pop	r28
    2d26:	df 91       	pop	r29
    2d28:	1f 91       	pop	r17
    2d2a:	0f 91       	pop	r16
    2d2c:	ff 90       	pop	r15
    2d2e:	ef 90       	pop	r14
    2d30:	08 95       	ret

00002d32 <resume>:
void scroll(uint8 e){
	sendCommand(COMMAND_SCROLL_ACTIVATION | e);
}

void resume(uint8 ignore_ram){
	sendCommand(COMMAND_DISPLAY_RESUME | ignore_ram);
    2d32:	84 6a       	ori	r24, 0xA4	; 164
    2d34:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <sendCommand>
}
    2d38:	08 95       	ret

00002d3a <scroll>:
void Invert(uint8 invert){
	sendCommand(COMMAND_DISPLAY_INVERSE | invert);
}

void scroll(uint8 e){
	sendCommand(COMMAND_SCROLL_ACTIVATION | e);
    2d3a:	8e 62       	ori	r24, 0x2E	; 46
    2d3c:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <sendCommand>
}
    2d40:	08 95       	ret

00002d42 <Invert>:
	sendCommand(COMMAND_CHARGE_PUMP);
	sendCommand(0x10 | (enabled<<2));
}

void Invert(uint8 invert){
	sendCommand(COMMAND_DISPLAY_INVERSE | invert);
    2d42:	86 6a       	ori	r24, 0xA6	; 166
    2d44:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <sendCommand>
}
    2d48:	08 95       	ret

00002d4a <enableChargePump>:
void setMuliplexRatio(uint8 ratio){
	sendCommand(COMMAND_MULTIPLEX_RATIO);
	sendCommand(ratio & 0x3F);
}

void enableChargePump(uint8 enabled){
    2d4a:	1f 93       	push	r17
    2d4c:	18 2f       	mov	r17, r24
	sendCommand(COMMAND_CHARGE_PUMP);
    2d4e:	8d e8       	ldi	r24, 0x8D	; 141
    2d50:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <sendCommand>
	sendCommand(0x10 | (enabled<<2));
    2d54:	11 0f       	add	r17, r17
    2d56:	11 0f       	add	r17, r17
    2d58:	81 2f       	mov	r24, r17
    2d5a:	80 61       	ori	r24, 0x10	; 16
    2d5c:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <sendCommand>
}
    2d60:	1f 91       	pop	r17
    2d62:	08 95       	ret

00002d64 <setMuliplexRatio>:
void setClockConfig(uint8 divide , uint8 freq){
	sendCommand(COMMAND_DISPLAY_CLOCK_DIVIDE);
	sendCommand( ((freq&0x0F)<<4) | (divide & 0x0F));
}

void setMuliplexRatio(uint8 ratio){
    2d64:	1f 93       	push	r17
    2d66:	18 2f       	mov	r17, r24
	sendCommand(COMMAND_MULTIPLEX_RATIO);
    2d68:	88 ea       	ldi	r24, 0xA8	; 168
    2d6a:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <sendCommand>
	sendCommand(ratio & 0x3F);
    2d6e:	81 2f       	mov	r24, r17
    2d70:	8f 73       	andi	r24, 0x3F	; 63
    2d72:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <sendCommand>
}
    2d76:	1f 91       	pop	r17
    2d78:	08 95       	ret

00002d7a <setClockConfig>:
void setContrast(uint8 value){
	sendCommand(COMMAND_CONTRAST);
	sendCommand(value);
}

void setClockConfig(uint8 divide , uint8 freq){
    2d7a:	0f 93       	push	r16
    2d7c:	1f 93       	push	r17
    2d7e:	08 2f       	mov	r16, r24
    2d80:	16 2f       	mov	r17, r22
	sendCommand(COMMAND_DISPLAY_CLOCK_DIVIDE);
    2d82:	85 ed       	ldi	r24, 0xD5	; 213
    2d84:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <sendCommand>
	sendCommand( ((freq&0x0F)<<4) | (divide & 0x0F));
    2d88:	12 95       	swap	r17
    2d8a:	10 7f       	andi	r17, 0xF0	; 240
    2d8c:	0f 70       	andi	r16, 0x0F	; 15
    2d8e:	81 2f       	mov	r24, r17
    2d90:	80 2b       	or	r24, r16
    2d92:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <sendCommand>
}
    2d96:	1f 91       	pop	r17
    2d98:	0f 91       	pop	r16
    2d9a:	08 95       	ret

00002d9c <setContrast>:

	sendCommand(COMMAND_COM_CONFIG);
	sendCommand(config);
}

void setContrast(uint8 value){
    2d9c:	1f 93       	push	r17
    2d9e:	18 2f       	mov	r17, r24
	sendCommand(COMMAND_CONTRAST);
    2da0:	81 e8       	ldi	r24, 0x81	; 129
    2da2:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <sendCommand>
	sendCommand(value);
    2da6:	81 2f       	mov	r24, r17
    2da8:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <sendCommand>
}
    2dac:	1f 91       	pop	r17
    2dae:	08 95       	ret

00002db0 <setComConfig>:

void setComScanReverse(uint8 r){
	sendCommand(COMMAND_COM_SCAN_DIRECTION | (r<<3));
}

void setComConfig(uint8 com_alt, uint8 left_right_remap){
    2db0:	0f 93       	push	r16
    2db2:	1f 93       	push	r17
    2db4:	18 2f       	mov	r17, r24
    2db6:	06 2f       	mov	r16, r22
	const uint8 config = (com_alt <<4) | (left_right_remap << 5) | (0x02);

	sendCommand(COMMAND_COM_CONFIG);
    2db8:	8a ed       	ldi	r24, 0xDA	; 218
    2dba:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <sendCommand>
	sendCommand(config);
    2dbe:	12 95       	swap	r17
    2dc0:	10 7f       	andi	r17, 0xF0	; 240
    2dc2:	12 60       	ori	r17, 0x02	; 2
    2dc4:	02 95       	swap	r16
    2dc6:	00 0f       	add	r16, r16
    2dc8:	00 7e       	andi	r16, 0xE0	; 224
    2dca:	80 2f       	mov	r24, r16
    2dcc:	81 2b       	or	r24, r17
    2dce:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <sendCommand>
}
    2dd2:	1f 91       	pop	r17
    2dd4:	0f 91       	pop	r16
    2dd6:	08 95       	ret

00002dd8 <setComScanReverse>:
void setSegmentRemap(uint8 remap){
	sendCommand(COMMAND_SEGMENT_REMAP | remap);
}

void setComScanReverse(uint8 r){
	sendCommand(COMMAND_COM_SCAN_DIRECTION | (r<<3));
    2dd8:	88 0f       	add	r24, r24
    2dda:	88 0f       	add	r24, r24
    2ddc:	88 0f       	add	r24, r24
    2dde:	80 6c       	ori	r24, 0xC0	; 192
    2de0:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <sendCommand>
}
    2de4:	08 95       	ret

00002de6 <setSegmentRemap>:
void setDisplayStartLine(uint8 line){
	sendCommand(COMMAND_DISPLAY_START_LINE | (line & 0x3F));
}

void setSegmentRemap(uint8 remap){
	sendCommand(COMMAND_SEGMENT_REMAP | remap);
    2de6:	80 6a       	ori	r24, 0xA0	; 160
    2de8:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <sendCommand>
}
    2dec:	08 95       	ret

00002dee <setDisplayStartLine>:
	sendCommand(COMMAND_DISPLAY_OFFSET);
	sendCommand(offset & 0x3F); //anded with 0x3F to choose from 0 to 63 ; 0x3F = 63d.
}

void setDisplayStartLine(uint8 line){
	sendCommand(COMMAND_DISPLAY_START_LINE | (line & 0x3F));
    2dee:	8f 73       	andi	r24, 0x3F	; 63
    2df0:	80 64       	ori	r24, 0x40	; 64
    2df2:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <sendCommand>
}
    2df6:	08 95       	ret

00002df8 <setDisplayOffset>:

void enable(uint8 on){
	sendCommand(COMMAND_DISPLAY_ON | on) ;
}

void setDisplayOffset(uint8 offset){
    2df8:	1f 93       	push	r17
    2dfa:	18 2f       	mov	r17, r24
	sendCommand(COMMAND_DISPLAY_OFFSET);
    2dfc:	83 ed       	ldi	r24, 0xD3	; 211
    2dfe:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <sendCommand>
	sendCommand(offset & 0x3F); //anded with 0x3F to choose from 0 to 63 ; 0x3F = 63d.
    2e02:	81 2f       	mov	r24, r17
    2e04:	8f 73       	andi	r24, 0x3F	; 63
    2e06:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <sendCommand>
}
    2e0a:	1f 91       	pop	r17
    2e0c:	08 95       	ret

00002e0e <enable>:
	I2C_Write(cmd);
	I2C_Stop();
}

void enable(uint8 on){
	sendCommand(COMMAND_DISPLAY_ON | on) ;
    2e0e:	8e 6a       	ori	r24, 0xAE	; 174
    2e10:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <sendCommand>
}
    2e14:	08 95       	ret

00002e16 <Initialize>:

}


void Initialize(void){
	enable(0);
    2e16:	80 e0       	ldi	r24, 0x00	; 0
    2e18:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <enable>
	setDisplayOffset(0);
    2e1c:	80 e0       	ldi	r24, 0x00	; 0
    2e1e:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <setDisplayOffset>
	setDisplayStartLine(0);
    2e22:	80 e0       	ldi	r24, 0x00	; 0
    2e24:	0e 94 f7 16 	call	0x2dee	; 0x2dee <setDisplayStartLine>
	setSegmentRemap(1);
    2e28:	81 e0       	ldi	r24, 0x01	; 1
    2e2a:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <setSegmentRemap>
	setComScanReverse(0);
    2e2e:	80 e0       	ldi	r24, 0x00	; 0
    2e30:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <setComScanReverse>
	setComConfig(1, 0);
    2e34:	81 e0       	ldi	r24, 0x01	; 1
    2e36:	60 e0       	ldi	r22, 0x00	; 0
    2e38:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <setComConfig>
	setContrast(0x7F);
    2e3c:	8f e7       	ldi	r24, 0x7F	; 127
    2e3e:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <setContrast>
	setClockConfig(0x00, 0x08);
    2e42:	80 e0       	ldi	r24, 0x00	; 0
    2e44:	68 e0       	ldi	r22, 0x08	; 8
    2e46:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <setClockConfig>
	setMuliplexRatio(63);
    2e4a:	8f e3       	ldi	r24, 0x3F	; 63
    2e4c:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <setMuliplexRatio>
	enableChargePump(1);
    2e50:	81 e0       	ldi	r24, 0x01	; 1
    2e52:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <enableChargePump>
	Invert(0);
    2e56:	80 e0       	ldi	r24, 0x00	; 0
    2e58:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <Invert>
	scroll(0);
    2e5c:	80 e0       	ldi	r24, 0x00	; 0
    2e5e:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <scroll>
	enable(1);
    2e62:	81 e0       	ldi	r24, 0x01	; 1
    2e64:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <enable>
	resume(0);
    2e68:	80 e0       	ldi	r24, 0x00	; 0
    2e6a:	0e 94 99 16 	call	0x2d32	; 0x2d32 <resume>
	clear();
    2e6e:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <clear>
}
    2e72:	08 95       	ret

00002e74 <sendBufferPage>:
    sendCommand(COMMAND_SET_PAGE_ADDRESS);
    sendCommand(start & 0x07);
    sendCommand(end & 0x07);
}

void sendBufferPage(const uint8 *buffer , uint8 page){
    2e74:	0f 93       	push	r16
    2e76:	1f 93       	push	r17
    2e78:	cf 93       	push	r28
    2e7a:	df 93       	push	r29
    2e7c:	ec 01       	movw	r28, r24
    2e7e:	16 2f       	mov	r17, r22
	//we want to make a loop for each page
	setColumnAddress(0,127);
    2e80:	80 e0       	ldi	r24, 0x00	; 0
    2e82:	6f e7       	ldi	r22, 0x7F	; 127
    2e84:	0e 94 40 16 	call	0x2c80	; 0x2c80 <setColumnAddress>
	setPageAddress(page,7);
    2e88:	81 2f       	mov	r24, r17
    2e8a:	67 e0       	ldi	r22, 0x07	; 7
    2e8c:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <setPageAddress>

	//first initialize the communication
	I2C_Init();
    2e90:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <I2C_Init>
	I2C_Start(oled_write_address);
    2e94:	8a e7       	ldi	r24, 0x7A	; 122
    2e96:	0e 94 7d 11 	call	0x22fa	; 0x22fa <I2C_Start>
	I2C_Write(CONTROL_DATA);
    2e9a:	80 e4       	ldi	r24, 0x40	; 64
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>

	uint8 start_byte_in_bitmap = page * 128 ;
    2ea2:	17 95       	ror	r17
    2ea4:	11 27       	eor	r17, r17
    2ea6:	17 95       	ror	r17
	uint8 end_byte_in_bitmap = start_byte_in_bitmap + 127 ;
    2ea8:	01 2f       	mov	r16, r17
    2eaa:	01 58       	subi	r16, 0x81	; 129
    2eac:	08 c0       	rjmp	.+16     	; 0x2ebe <sendBufferPage+0x4a>
	for(;start_byte_in_bitmap <= end_byte_in_bitmap ; start_byte_in_bitmap++){
		I2C_Write(buffer[start_byte_in_bitmap]);
    2eae:	fe 01       	movw	r30, r28
    2eb0:	e1 0f       	add	r30, r17
    2eb2:	f1 1d       	adc	r31, r1
    2eb4:	80 81       	ld	r24, Z
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	0e 94 b9 11 	call	0x2372	; 0x2372 <I2C_Write>
	I2C_Start(oled_write_address);
	I2C_Write(CONTROL_DATA);

	uint8 start_byte_in_bitmap = page * 128 ;
	uint8 end_byte_in_bitmap = start_byte_in_bitmap + 127 ;
	for(;start_byte_in_bitmap <= end_byte_in_bitmap ; start_byte_in_bitmap++){
    2ebc:	1f 5f       	subi	r17, 0xFF	; 255
    2ebe:	01 17       	cp	r16, r17
    2ec0:	b0 f7       	brcc	.-20     	; 0x2eae <sendBufferPage+0x3a>
		I2C_Write(buffer[start_byte_in_bitmap]);
	}
	I2C_Stop();
    2ec2:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <I2C_Stop>


}
    2ec6:	df 91       	pop	r29
    2ec8:	cf 91       	pop	r28
    2eca:	1f 91       	pop	r17
    2ecc:	0f 91       	pop	r16
    2ece:	08 95       	ret

00002ed0 <__mulsi3>:
    2ed0:	62 9f       	mul	r22, r18
    2ed2:	d0 01       	movw	r26, r0
    2ed4:	73 9f       	mul	r23, r19
    2ed6:	f0 01       	movw	r30, r0
    2ed8:	82 9f       	mul	r24, r18
    2eda:	e0 0d       	add	r30, r0
    2edc:	f1 1d       	adc	r31, r1
    2ede:	64 9f       	mul	r22, r20
    2ee0:	e0 0d       	add	r30, r0
    2ee2:	f1 1d       	adc	r31, r1
    2ee4:	92 9f       	mul	r25, r18
    2ee6:	f0 0d       	add	r31, r0
    2ee8:	83 9f       	mul	r24, r19
    2eea:	f0 0d       	add	r31, r0
    2eec:	74 9f       	mul	r23, r20
    2eee:	f0 0d       	add	r31, r0
    2ef0:	65 9f       	mul	r22, r21
    2ef2:	f0 0d       	add	r31, r0
    2ef4:	99 27       	eor	r25, r25
    2ef6:	72 9f       	mul	r23, r18
    2ef8:	b0 0d       	add	r27, r0
    2efa:	e1 1d       	adc	r30, r1
    2efc:	f9 1f       	adc	r31, r25
    2efe:	63 9f       	mul	r22, r19
    2f00:	b0 0d       	add	r27, r0
    2f02:	e1 1d       	adc	r30, r1
    2f04:	f9 1f       	adc	r31, r25
    2f06:	bd 01       	movw	r22, r26
    2f08:	cf 01       	movw	r24, r30
    2f0a:	11 24       	eor	r1, r1
    2f0c:	08 95       	ret

00002f0e <__udivmodqi4>:
    2f0e:	99 1b       	sub	r25, r25
    2f10:	79 e0       	ldi	r23, 0x09	; 9
    2f12:	04 c0       	rjmp	.+8      	; 0x2f1c <__udivmodqi4_ep>

00002f14 <__udivmodqi4_loop>:
    2f14:	99 1f       	adc	r25, r25
    2f16:	96 17       	cp	r25, r22
    2f18:	08 f0       	brcs	.+2      	; 0x2f1c <__udivmodqi4_ep>
    2f1a:	96 1b       	sub	r25, r22

00002f1c <__udivmodqi4_ep>:
    2f1c:	88 1f       	adc	r24, r24
    2f1e:	7a 95       	dec	r23
    2f20:	c9 f7       	brne	.-14     	; 0x2f14 <__udivmodqi4_loop>
    2f22:	80 95       	com	r24
    2f24:	08 95       	ret

00002f26 <__udivmodhi4>:
    2f26:	aa 1b       	sub	r26, r26
    2f28:	bb 1b       	sub	r27, r27
    2f2a:	51 e1       	ldi	r21, 0x11	; 17
    2f2c:	07 c0       	rjmp	.+14     	; 0x2f3c <__udivmodhi4_ep>

00002f2e <__udivmodhi4_loop>:
    2f2e:	aa 1f       	adc	r26, r26
    2f30:	bb 1f       	adc	r27, r27
    2f32:	a6 17       	cp	r26, r22
    2f34:	b7 07       	cpc	r27, r23
    2f36:	10 f0       	brcs	.+4      	; 0x2f3c <__udivmodhi4_ep>
    2f38:	a6 1b       	sub	r26, r22
    2f3a:	b7 0b       	sbc	r27, r23

00002f3c <__udivmodhi4_ep>:
    2f3c:	88 1f       	adc	r24, r24
    2f3e:	99 1f       	adc	r25, r25
    2f40:	5a 95       	dec	r21
    2f42:	a9 f7       	brne	.-22     	; 0x2f2e <__udivmodhi4_loop>
    2f44:	80 95       	com	r24
    2f46:	90 95       	com	r25
    2f48:	bc 01       	movw	r22, r24
    2f4a:	cd 01       	movw	r24, r26
    2f4c:	08 95       	ret

00002f4e <__divmodhi4>:
    2f4e:	97 fb       	bst	r25, 7
    2f50:	09 2e       	mov	r0, r25
    2f52:	07 26       	eor	r0, r23
    2f54:	0a d0       	rcall	.+20     	; 0x2f6a <__divmodhi4_neg1>
    2f56:	77 fd       	sbrc	r23, 7
    2f58:	04 d0       	rcall	.+8      	; 0x2f62 <__divmodhi4_neg2>
    2f5a:	e5 df       	rcall	.-54     	; 0x2f26 <__udivmodhi4>
    2f5c:	06 d0       	rcall	.+12     	; 0x2f6a <__divmodhi4_neg1>
    2f5e:	00 20       	and	r0, r0
    2f60:	1a f4       	brpl	.+6      	; 0x2f68 <__divmodhi4_exit>

00002f62 <__divmodhi4_neg2>:
    2f62:	70 95       	com	r23
    2f64:	61 95       	neg	r22
    2f66:	7f 4f       	sbci	r23, 0xFF	; 255

00002f68 <__divmodhi4_exit>:
    2f68:	08 95       	ret

00002f6a <__divmodhi4_neg1>:
    2f6a:	f6 f7       	brtc	.-4      	; 0x2f68 <__divmodhi4_exit>
    2f6c:	90 95       	com	r25
    2f6e:	81 95       	neg	r24
    2f70:	9f 4f       	sbci	r25, 0xFF	; 255
    2f72:	08 95       	ret

00002f74 <__udivmodsi4>:
    2f74:	a1 e2       	ldi	r26, 0x21	; 33
    2f76:	1a 2e       	mov	r1, r26
    2f78:	aa 1b       	sub	r26, r26
    2f7a:	bb 1b       	sub	r27, r27
    2f7c:	fd 01       	movw	r30, r26
    2f7e:	0d c0       	rjmp	.+26     	; 0x2f9a <__udivmodsi4_ep>

00002f80 <__udivmodsi4_loop>:
    2f80:	aa 1f       	adc	r26, r26
    2f82:	bb 1f       	adc	r27, r27
    2f84:	ee 1f       	adc	r30, r30
    2f86:	ff 1f       	adc	r31, r31
    2f88:	a2 17       	cp	r26, r18
    2f8a:	b3 07       	cpc	r27, r19
    2f8c:	e4 07       	cpc	r30, r20
    2f8e:	f5 07       	cpc	r31, r21
    2f90:	20 f0       	brcs	.+8      	; 0x2f9a <__udivmodsi4_ep>
    2f92:	a2 1b       	sub	r26, r18
    2f94:	b3 0b       	sbc	r27, r19
    2f96:	e4 0b       	sbc	r30, r20
    2f98:	f5 0b       	sbc	r31, r21

00002f9a <__udivmodsi4_ep>:
    2f9a:	66 1f       	adc	r22, r22
    2f9c:	77 1f       	adc	r23, r23
    2f9e:	88 1f       	adc	r24, r24
    2fa0:	99 1f       	adc	r25, r25
    2fa2:	1a 94       	dec	r1
    2fa4:	69 f7       	brne	.-38     	; 0x2f80 <__udivmodsi4_loop>
    2fa6:	60 95       	com	r22
    2fa8:	70 95       	com	r23
    2faa:	80 95       	com	r24
    2fac:	90 95       	com	r25
    2fae:	9b 01       	movw	r18, r22
    2fb0:	ac 01       	movw	r20, r24
    2fb2:	bd 01       	movw	r22, r26
    2fb4:	cf 01       	movw	r24, r30
    2fb6:	08 95       	ret

00002fb8 <__divmodsi4>:
    2fb8:	97 fb       	bst	r25, 7
    2fba:	09 2e       	mov	r0, r25
    2fbc:	05 26       	eor	r0, r21
    2fbe:	0e d0       	rcall	.+28     	; 0x2fdc <__divmodsi4_neg1>
    2fc0:	57 fd       	sbrc	r21, 7
    2fc2:	04 d0       	rcall	.+8      	; 0x2fcc <__divmodsi4_neg2>
    2fc4:	d7 df       	rcall	.-82     	; 0x2f74 <__udivmodsi4>
    2fc6:	0a d0       	rcall	.+20     	; 0x2fdc <__divmodsi4_neg1>
    2fc8:	00 1c       	adc	r0, r0
    2fca:	38 f4       	brcc	.+14     	; 0x2fda <__divmodsi4_exit>

00002fcc <__divmodsi4_neg2>:
    2fcc:	50 95       	com	r21
    2fce:	40 95       	com	r20
    2fd0:	30 95       	com	r19
    2fd2:	21 95       	neg	r18
    2fd4:	3f 4f       	sbci	r19, 0xFF	; 255
    2fd6:	4f 4f       	sbci	r20, 0xFF	; 255
    2fd8:	5f 4f       	sbci	r21, 0xFF	; 255

00002fda <__divmodsi4_exit>:
    2fda:	08 95       	ret

00002fdc <__divmodsi4_neg1>:
    2fdc:	f6 f7       	brtc	.-4      	; 0x2fda <__divmodsi4_exit>
    2fde:	90 95       	com	r25
    2fe0:	80 95       	com	r24
    2fe2:	70 95       	com	r23
    2fe4:	61 95       	neg	r22
    2fe6:	7f 4f       	sbci	r23, 0xFF	; 255
    2fe8:	8f 4f       	sbci	r24, 0xFF	; 255
    2fea:	9f 4f       	sbci	r25, 0xFF	; 255
    2fec:	08 95       	ret

00002fee <__eerd_byte_m32>:
    2fee:	e1 99       	sbic	0x1c, 1	; 28
    2ff0:	fe cf       	rjmp	.-4      	; 0x2fee <__eerd_byte_m32>
    2ff2:	9f bb       	out	0x1f, r25	; 31
    2ff4:	8e bb       	out	0x1e, r24	; 30
    2ff6:	e0 9a       	sbi	0x1c, 0	; 28
    2ff8:	99 27       	eor	r25, r25
    2ffa:	8d b3       	in	r24, 0x1d	; 29
    2ffc:	08 95       	ret

00002ffe <_exit>:
    2ffe:	f8 94       	cli

00003000 <__stop_program>:
    3000:	ff cf       	rjmp	.-2      	; 0x3000 <__stop_program>
